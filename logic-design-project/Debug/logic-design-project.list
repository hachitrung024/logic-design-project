
logic-design-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080096b8  080096b8  000196b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b44  08009b44  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009b44  08009b44  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b44  08009b44  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001e8  08009d34  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08009d34  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014339  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e5  00000000  00000000  0003454a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00036e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00037ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c4  00000000  00000000  00038e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001390e  00000000  00000000  00052754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3d0  00000000  00000000  00066062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000576c  00000000  00000000  000f5488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800969c 	.word	0x0800969c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800969c 	.word	0x0800969c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <DHT20_Init>:
#include <dht20.h>

#include "i2c_master.h"
#define Slave_address_dht20 0x38

void DHT20_Init(DHT20_t *dht20, I2C_HandleTypeDef *hi2c) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
    dht20->hi2c = hi2c;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	601a      	str	r2, [r3, #0]
    dht20->humidity = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
    dht20->temperature = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    dht20->humOffset = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f04f 0200 	mov.w	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    dht20->tempOffset = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
    dht20->status = DHT20_OK;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	751a      	strb	r2, [r3, #20]
    dht20->lastRequest = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    dht20->lastRead = 0;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <DHT20_IsConnected>:



uint8_t DHT20_IsConnected(DHT20_t *dht20) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	6078      	str	r0, [r7, #4]
    uint8_t dummy = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &dummy, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f107 020f 	add.w	r2, r7, #15
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	2170      	movs	r1, #112	; 0x70
 8000b92:	f001 fd87 	bl	80026a4 <HAL_I2C_Master_Transmit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <DHT20_IsConnected+0x2c>
        return 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <DHT20_IsConnected+0x2e>
    }
    return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <DHT20_RequestData>:

uint8_t DHT20_RequestData(DHT20_t *dht20) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
    uint8_t data[3] = {0xAC, 0x33, 0x00};
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <DHT20_RequestData+0x50>)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	8019      	strh	r1, [r3, #0]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	0c12      	lsrs	r2, r2, #16
 8000bc4:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f107 020c 	add.w	r2, r7, #12
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	2170      	movs	r1, #112	; 0x70
 8000bd8:	f001 fd64 	bl	80026a4 <HAL_I2C_Master_Transmit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <DHT20_RequestData+0x3a>
        return DHT20_ERROR_CONNECT;
 8000be2:	2302      	movs	r3, #2
 8000be4:	e005      	b.n	8000bf2 <DHT20_RequestData+0x46>
    }
    dht20->lastRequest = HAL_GetTick();
 8000be6:	f001 f86d 	bl	8001cc4 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
    return DHT20_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	080096b8 	.word	0x080096b8

08000c00 <DHT20_ReadData>:


uint8_t DHT20_ReadData(DHT20_t *dht20) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
    uint8_t length = 7;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, dht20->bytes, length, HAL_MAX_DELAY) != HAL_OK) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f103 0220 	add.w	r2, r3, #32
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1e:	9100      	str	r1, [sp, #0]
 8000c20:	2170      	movs	r1, #112	; 0x70
 8000c22:	f001 fe3d 	bl	80028a0 <HAL_I2C_Master_Receive>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <DHT20_ReadData+0x30>
        return DHT20_ERROR_CONNECT;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e020      	b.n	8000c72 <DHT20_ReadData+0x72>
    }

    // Kiểm tra nếu tất cả các byte đều bằng 0
    uint8_t allZero = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < length; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	e00c      	b.n	8000c54 <DHT20_ReadData+0x54>
        if (dht20->bytes[i] != 0) {
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4413      	add	r3, r2
 8000c40:	3320      	adds	r3, #32
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <DHT20_ReadData+0x4e>
            allZero = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
            break;
 8000c4c:	e006      	b.n	8000c5c <DHT20_ReadData+0x5c>
    for (int i = 0; i < length; i++) {
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	3301      	adds	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbee      	blt.n	8000c3a <DHT20_ReadData+0x3a>
        }
    }
    if (allZero) return DHT20_ERROR_BYTES_ALL_ZERO;
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <DHT20_ReadData+0x66>
 8000c62:	2304      	movs	r3, #4
 8000c64:	e005      	b.n	8000c72 <DHT20_ReadData+0x72>

    dht20->lastRead = HAL_GetTick();
 8000c66:	f001 f82d 	bl	8001cc4 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	61da      	str	r2, [r3, #28]
    return DHT20_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <DHT20_Convert>:


uint8_t DHT20_Convert(DHT20_t *dht20) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    dht20->status = dht20->bytes[0];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	751a      	strb	r2, [r3, #20]

    // Chuyển đổi độ ẩm
    uint32_t rawHumidity = (dht20->bytes[1] << 12) | (dht20->bytes[2] << 4) | (dht20->bytes[3] >> 4);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c94:	031a      	lsls	r2, r3, #12
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000ca6:	0912      	lsrs	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	4313      	orrs	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]
    dht20->humidity = rawHumidity * 9.5367431640625e-5; // Chuyển đổi theo công thức datasheet
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff fb98 	bl	80003e4 <__aeabi_ui2d>
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <DHT20_Convert+0xd4>)
 8000cba:	f7ff fc0d 	bl	80004d8 <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f7ff fedf 	bl	8000a88 <__aeabi_d2f>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	605a      	str	r2, [r3, #4]

    // Chuyển đổi nhiệt độ
    uint32_t rawTemperature = ((dht20->bytes[3] & 0x0F) << 16) | (dht20->bytes[4] << 8) | dht20->bytes[5];
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
    dht20->temperature = rawTemperature * 1.9073486328125e-4 - 50; // Chuyển đổi theo công thức datasheet
 8000cf0:	6938      	ldr	r0, [r7, #16]
 8000cf2:	f7ff fb77 	bl	80003e4 <__aeabi_ui2d>
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <DHT20_Convert+0xd8>)
 8000cfc:	f7ff fbec 	bl	80004d8 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <DHT20_Convert+0xdc>)
 8000d0e:	f7ff fa2b 	bl	8000168 <__aeabi_dsub>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f7ff feb5 	bl	8000a88 <__aeabi_d2f>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]

    // Kiểm tra CRC
    uint8_t crc = DHT20_CRC8(dht20->bytes, 6);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3320      	adds	r3, #32
 8000d28:	2106      	movs	r1, #6
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f82f 	bl	8000d8e <DHT20_CRC8>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
    if (crc != dht20->bytes[6]) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000d3a:	7bfa      	ldrb	r2, [r7, #15]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d001      	beq.n	8000d44 <DHT20_Convert+0xc8>
        return DHT20_ERROR_CHECKSUM;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <DHT20_Convert+0xca>
    }

    return DHT20_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	3f190000 	.word	0x3f190000
 8000d54:	3f290000 	.word	0x3f290000
 8000d58:	40490000 	.word	0x40490000

08000d5c <DHT20_ReadStatus>:
    if (status < 0) return status;

    return DHT20_Convert(dht20);
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1, HAL_MAX_DELAY);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	f107 020f 	add.w	r2, r7, #15
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	2170      	movs	r1, #112	; 0x70
 8000d7a:	f001 fd91 	bl	80028a0 <HAL_I2C_Master_Receive>
    HAL_Delay(1);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 ffaa 	bl	8001cd8 <HAL_Delay>
    return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <DHT20_CRC8>:

uint8_t DHT20_IsMeasuring(DHT20_t *dht20) {
    return (DHT20_ReadStatus(dht20) & 0x80) == 0x80;
}

uint8_t DHT20_CRC8(uint8_t *ptr, uint8_t len) {
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000d9a:	23ff      	movs	r3, #255	; 0xff
 8000d9c:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 8000d9e:	e01e      	b.n	8000dde <DHT20_CRC8+0x50>
        crc ^= *ptr++;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	4053      	eors	r3, r2
 8000dac:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
 8000db2:	e011      	b.n	8000dd8 <DHT20_CRC8+0x4a>
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da07      	bge.n	8000dcc <DHT20_CRC8+0x3e>
            crc = (crc << 1) ^ 0x31;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e002      	b.n	8000dd2 <DHT20_CRC8+0x44>
        } else {
            crc <<= 1;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	73bb      	strb	r3, [r7, #14]
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	d9ea      	bls.n	8000db4 <DHT20_CRC8+0x26>
    while (len--) {
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	70fa      	strb	r2, [r7, #3]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1db      	bne.n	8000da0 <DHT20_CRC8+0x12>
        }
    }
}
return crc;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <DHT20_ResetSensor>:

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
uint8_t count = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

// Đọc trạng thái và reset nếu không phải là 0x18
if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffab 	bl	8000d5c <DHT20_ReadStatus>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f003 0318 	and.w	r3, r3, #24
 8000e0c:	2b18      	cmp	r3, #24
 8000e0e:	d023      	beq.n	8000e58 <DHT20_ResetSensor+0x64>
    count++;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	3301      	adds	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1B)) count++;
 8000e16:	211b      	movs	r1, #27
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f823 	bl	8000e64 <DHT20_ResetRegister>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <DHT20_ResetSensor+0x36>
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	3301      	adds	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1C)) count++;
 8000e2a:	211c      	movs	r1, #28
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f819 	bl	8000e64 <DHT20_ResetRegister>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <DHT20_ResetSensor+0x4a>
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1E)) count++;
 8000e3e:	211e      	movs	r1, #30
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f80f 	bl	8000e64 <DHT20_ResetRegister>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <DHT20_ResetSensor+0x5e>
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 ff40 	bl	8001cd8 <HAL_Delay>
}
return count;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <DHT20_ResetRegister>:

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
uint8_t value[3] = {0};
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <DHT20_ResetRegister+0xa4>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	81bb      	strh	r3, [r7, #12]
 8000e76:	2300      	movs	r3, #0
 8000e78:	73bb      	strb	r3, [r7, #14]

// Bắt đầu giao tiếp với cảm biến để reset
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	1cfa      	adds	r2, r7, #3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	2170      	movs	r1, #112	; 0x70
 8000e8a:	f001 fc0b 	bl	80026a4 <HAL_I2C_Master_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <DHT20_ResetRegister+0x34>
    return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e032      	b.n	8000efe <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f000 ff1d 	bl	8001cd8 <HAL_Delay>

// Đọc giá trị từ cảm biến
if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2303      	movs	r3, #3
 8000eae:	2170      	movs	r1, #112	; 0x70
 8000eb0:	f001 fcf6 	bl	80028a0 <HAL_I2C_Master_Receive>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <DHT20_ResetRegister+0x5a>
    return 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e01f      	b.n	8000efe <DHT20_ResetRegister+0x9a>
}
HAL_Delay(10);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f000 ff0a 	bl	8001cd8 <HAL_Delay>

// Ghi lại giá trị điều chỉnh vào thanh ghi
uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	723b      	strb	r3, [r7, #8]
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	727b      	strb	r3, [r7, #9]
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	72bb      	strb	r3, [r7, #10]
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	2170      	movs	r1, #112	; 0x70
 8000ee8:	f001 fbdc 	bl	80026a4 <HAL_I2C_Master_Transmit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <DHT20_ResetRegister+0x92>
    return 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e003      	b.n	8000efe <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f000 feee 	bl	8001cd8 <HAL_Delay>

return 1;
 8000efc:	2301      	movs	r3, #1
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	080096bc 	.word	0x080096bc

08000f0c <lcd_send_buffer>:
DHT20_t dht20;   // Định nghĩa cấu trúc DHT20
status_active active;      // Định nghĩa biến trạng thái hoạt động
static uint8_t lcd_status;
char lcd_buffer_1[17];
char lcd_buffer_2[17];
static void lcd_send_buffer(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	lcd_set_cursor(1, 0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fa7b 	bl	800140e <lcd_set_cursor>
	lcd_send_string(lcd_buffer_1);
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <lcd_send_buffer+0x24>)
 8000f1a:	f000 fa63 	bl	80013e4 <lcd_send_string>
	lcd_set_cursor(2, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2002      	movs	r0, #2
 8000f22:	f000 fa74 	bl	800140e <lcd_set_cursor>
	lcd_send_string(lcd_buffer_2);
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <lcd_send_buffer+0x28>)
 8000f28:	f000 fa5c 	bl	80013e4 <lcd_send_string>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200002b4 	.word	0x200002b4
 8000f34:	20000278 	.word	0x20000278

08000f38 <global_init>:

void global_init(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
//	lcd_initialize();
	DHT20_Init(&dht20, &hi2c1);
 8000f3c:	4909      	ldr	r1, [pc, #36]	; (8000f64 <global_init+0x2c>)
 8000f3e:	480a      	ldr	r0, [pc, #40]	; (8000f68 <global_init+0x30>)
 8000f40:	f7ff fdf2 	bl	8000b28 <DHT20_Init>
	active=DHT20_OK;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <global_init+0x34>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	setTimer(GLOBAL_TIMER, 1000); // Cho khoi dong cac thiet bi
 8000f4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fbd0 	bl	80016f4 <setTimer>
	status = INIT;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <global_init+0x38>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
	next = INIT;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <global_init+0x3c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000224 	.word	0x20000224
 8000f68:	2000028c 	.word	0x2000028c
 8000f6c:	20000289 	.word	0x20000289
 8000f70:	200002c5 	.word	0x200002c5
 8000f74:	20000204 	.word	0x20000204

08000f78 <watchdog>:

void watchdog(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(active == DHT20_ERROR_CONNECT){
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <watchdog+0x40>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d117      	bne.n	8000fb4 <watchdog+0x3c>
		status = ERROR_STATE;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <watchdog+0x44>)
 8000f86:	2209      	movs	r2, #9
 8000f88:	701a      	strb	r2, [r3, #0]
		setTimer(GLOBAL_TIMER, 10000);
 8000f8a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 fbb0 	bl	80016f4 <setTimer>
		if(active == DHT20_ERROR_CONNECT){
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <watchdog+0x40>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d10b      	bne.n	8000fb4 <watchdog+0x3c>
			snprintf(lcd_buffer_1,17,"DHT20 E_CONNECT");
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <watchdog+0x48>)
 8000f9e:	2111      	movs	r1, #17
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <watchdog+0x4c>)
 8000fa2:	f006 f92d 	bl	8007200 <sniprintf>
			snprintf(lcd_buffer_2,17,"RECONNECTING ");
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <watchdog+0x50>)
 8000fa8:	2111      	movs	r1, #17
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <watchdog+0x54>)
 8000fac:	f006 f928 	bl	8007200 <sniprintf>
			lcd_send_buffer();
 8000fb0:	f7ff ffac 	bl	8000f0c <lcd_send_buffer>
		}
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000289 	.word	0x20000289
 8000fbc:	200002c5 	.word	0x200002c5
 8000fc0:	080096c0 	.word	0x080096c0
 8000fc4:	200002b4 	.word	0x200002b4
 8000fc8:	080096d0 	.word	0x080096d0
 8000fcc:	20000278 	.word	0x20000278

08000fd0 <global_fsm>:
void global_fsm(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af04      	add	r7, sp, #16
	switch(status){
 8000fd6:	4b9f      	ldr	r3, [pc, #636]	; (8001254 <global_fsm+0x284>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	f200 812a 	bhi.w	8001234 <global_fsm+0x264>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <global_fsm+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	08001035 	.word	0x08001035
 8000ff0:	0800104d 	.word	0x0800104d
 8000ff4:	08001075 	.word	0x08001075
 8000ff8:	080010b9 	.word	0x080010b9
 8000ffc:	08001101 	.word	0x08001101
 8001000:	08001141 	.word	0x08001141
 8001004:	0800115f 	.word	0x0800115f
 8001008:	080011bd 	.word	0x080011bd
 800100c:	080011c5 	.word	0x080011c5
	case INIT:
		lcd_init_fsm();
 8001010:	f000 f934 	bl	800127c <lcd_init_fsm>
		if(isFlagTimer(GLOBAL_TIMER)){
 8001014:	2000      	movs	r0, #0
 8001016:	f000 fb5d 	bl	80016d4 <isFlagTimer>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 810b 	beq.w	8001238 <global_fsm+0x268>
			setTimer(UPDATE_TIMER, UPDATE_CYCLE);
 8001022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fb64 	bl	80016f4 <setTimer>
			status = CHECK_CONNECTION;
 800102c:	4b89      	ldr	r3, [pc, #548]	; (8001254 <global_fsm+0x284>)
 800102e:	2202      	movs	r2, #2
 8001030:	701a      	strb	r2, [r3, #0]
		}
	 	 break;
 8001032:	e101      	b.n	8001238 <global_fsm+0x268>
	case IDLE:
		if(isFlagTimer(GLOBAL_TIMER)){
 8001034:	2000      	movs	r0, #0
 8001036:	f000 fb4d 	bl	80016d4 <isFlagTimer>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80fd 	beq.w	800123c <global_fsm+0x26c>
			status = next;
 8001042:	4b85      	ldr	r3, [pc, #532]	; (8001258 <global_fsm+0x288>)
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	4b83      	ldr	r3, [pc, #524]	; (8001254 <global_fsm+0x284>)
 8001048:	701a      	strb	r2, [r3, #0]
		}
		break;
 800104a:	e0f7      	b.n	800123c <global_fsm+0x26c>
	case CHECK_CONNECTION:
		if(DHT20_IsConnected(&dht20) ){
 800104c:	4883      	ldr	r0, [pc, #524]	; (800125c <global_fsm+0x28c>)
 800104e:	f7ff fd91 	bl	8000b74 <DHT20_IsConnected>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <global_fsm+0x96>
			active = DHT20_OK;
 8001058:	4b81      	ldr	r3, [pc, #516]	; (8001260 <global_fsm+0x290>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			status = CHECK_READY;
 800105e:	4b7d      	ldr	r3, [pc, #500]	; (8001254 <global_fsm+0x284>)
 8001060:	2203      	movs	r2, #3
 8001062:	701a      	strb	r2, [r3, #0]
		}
		else{
			active = DHT20_ERROR_CONNECT;
			status = ERROR_STATE;
		}
		break;
 8001064:	e0f3      	b.n	800124e <global_fsm+0x27e>
			active = DHT20_ERROR_CONNECT;
 8001066:	4b7e      	ldr	r3, [pc, #504]	; (8001260 <global_fsm+0x290>)
 8001068:	2202      	movs	r2, #2
 800106a:	701a      	strb	r2, [r3, #0]
			status = ERROR_STATE;
 800106c:	4b79      	ldr	r3, [pc, #484]	; (8001254 <global_fsm+0x284>)
 800106e:	2209      	movs	r2, #9
 8001070:	701a      	strb	r2, [r3, #0]
		break;
 8001072:	e0ec      	b.n	800124e <global_fsm+0x27e>
	case CHECK_READY:
		if((DHT20_ReadStatus(&dht20) & 0x18) != 0x18){
 8001074:	4879      	ldr	r0, [pc, #484]	; (800125c <global_fsm+0x28c>)
 8001076:	f7ff fe71 	bl	8000d5c <DHT20_ReadStatus>
 800107a:	4603      	mov	r3, r0
 800107c:	f003 0318 	and.w	r3, r3, #24
 8001080:	2b18      	cmp	r3, #24
 8001082:	d00e      	beq.n	80010a2 <global_fsm+0xd2>
			DHT20_ResetSensor(&dht20);
 8001084:	4875      	ldr	r0, [pc, #468]	; (800125c <global_fsm+0x28c>)
 8001086:	f7ff feb5 	bl	8000df4 <DHT20_ResetSensor>
		 	setTimer(GLOBAL_TIMER, 1000);
 800108a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fb30 	bl	80016f4 <setTimer>
			next = CHECK_CONNECTION;
 8001094:	4b70      	ldr	r3, [pc, #448]	; (8001258 <global_fsm+0x288>)
 8001096:	2202      	movs	r2, #2
 8001098:	701a      	strb	r2, [r3, #0]
			status = IDLE;
 800109a:	4b6e      	ldr	r3, [pc, #440]	; (8001254 <global_fsm+0x284>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
		else {
			setTimer(GLOBAL_TIMER, 20);
			next = REQUEST_DATA;
			status = IDLE;
		}
		break;
 80010a0:	e0d5      	b.n	800124e <global_fsm+0x27e>
			setTimer(GLOBAL_TIMER, 20);
 80010a2:	2114      	movs	r1, #20
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 fb25 	bl	80016f4 <setTimer>
			next = REQUEST_DATA;
 80010aa:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <global_fsm+0x288>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	701a      	strb	r2, [r3, #0]
			status = IDLE;
 80010b0:	4b68      	ldr	r3, [pc, #416]	; (8001254 <global_fsm+0x284>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
		break;
 80010b6:	e0ca      	b.n	800124e <global_fsm+0x27e>
	case REQUEST_DATA:
		if(HAL_GetTick() - dht20.lastRead >= 1000){
 80010b8:	f000 fe04 	bl	8001cc4 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <global_fsm+0x28c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c8:	d316      	bcc.n	80010f8 <global_fsm+0x128>
			active = DHT20_RequestData(&dht20);
 80010ca:	4864      	ldr	r0, [pc, #400]	; (800125c <global_fsm+0x28c>)
 80010cc:	f7ff fd6e 	bl	8000bac <DHT20_RequestData>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <global_fsm+0x290>)
 80010d6:	701a      	strb	r2, [r3, #0]
			if (active == DHT20_OK){
 80010d8:	4b61      	ldr	r3, [pc, #388]	; (8001260 <global_fsm+0x290>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f040 80af 	bne.w	8001240 <global_fsm+0x270>
				setTimer(GLOBAL_TIMER, 80);
 80010e2:	2150      	movs	r1, #80	; 0x50
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fb05 	bl	80016f4 <setTimer>
				next = READ_DATA;
 80010ea:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <global_fsm+0x288>)
 80010ec:	2205      	movs	r2, #5
 80010ee:	701a      	strb	r2, [r3, #0]
				status = IDLE;
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <global_fsm+0x284>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_LASTREAD;
		}
		break;
 80010f6:	e0a3      	b.n	8001240 <global_fsm+0x270>
			active = DHT20_ERROR_LASTREAD;
 80010f8:	4b59      	ldr	r3, [pc, #356]	; (8001260 <global_fsm+0x290>)
 80010fa:	2206      	movs	r2, #6
 80010fc:	701a      	strb	r2, [r3, #0]
		break;
 80010fe:	e09f      	b.n	8001240 <global_fsm+0x270>
	case READ_DATA:
		if(HAL_GetTick() - dht20.lastRequest < 1000){
 8001100:	f000 fde0 	bl	8001cc4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <global_fsm+0x28c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001110:	d212      	bcs.n	8001138 <global_fsm+0x168>
			active = DHT20_ReadData(&dht20);
 8001112:	4852      	ldr	r0, [pc, #328]	; (800125c <global_fsm+0x28c>)
 8001114:	f7ff fd74 	bl	8000c00 <DHT20_ReadData>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <global_fsm+0x290>)
 800111e:	701a      	strb	r2, [r3, #0]
			if(active == DHT20_OK){
 8001120:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <global_fsm+0x290>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <global_fsm+0x160>
				status = CONVERT_DATA;
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <global_fsm+0x284>)
 800112a:	2206      	movs	r2, #6
 800112c:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_READ_TIMEOUT;
		}
		break;
 800112e:	e08e      	b.n	800124e <global_fsm+0x27e>
				status = REQUEST_DATA;
 8001130:	4b48      	ldr	r3, [pc, #288]	; (8001254 <global_fsm+0x284>)
 8001132:	2204      	movs	r2, #4
 8001134:	701a      	strb	r2, [r3, #0]
		break;
 8001136:	e08a      	b.n	800124e <global_fsm+0x27e>
			active = DHT20_ERROR_READ_TIMEOUT;
 8001138:	4b49      	ldr	r3, [pc, #292]	; (8001260 <global_fsm+0x290>)
 800113a:	2205      	movs	r2, #5
 800113c:	701a      	strb	r2, [r3, #0]
		break;
 800113e:	e086      	b.n	800124e <global_fsm+0x27e>
	case CONVERT_DATA:
		active = DHT20_Convert(&dht20);
 8001140:	4846      	ldr	r0, [pc, #280]	; (800125c <global_fsm+0x28c>)
 8001142:	f7ff fd9b 	bl	8000c7c <DHT20_Convert>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <global_fsm+0x290>)
 800114c:	701a      	strb	r2, [r3, #0]
		if(active == DHT20_OK){
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <global_fsm+0x290>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d176      	bne.n	8001244 <global_fsm+0x274>
			status = SEND_DATA;
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <global_fsm+0x284>)
 8001158:	2207      	movs	r2, #7
 800115a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800115c:	e072      	b.n	8001244 <global_fsm+0x274>
	case SEND_DATA:
		if(isFlagTimer(UPDATE_TIMER)){
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fab8 	bl	80016d4 <isFlagTimer>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d06e      	beq.n	8001248 <global_fsm+0x278>
			setTimer(UPDATE_TIMER, UPDATE_CYCLE);
 800116a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fac0 	bl	80016f4 <setTimer>
			snprintf(lcd_buffer_1,17,"Temp: %.2f %cC  ",dht20.temperature,0xDF);
 8001174:	4b39      	ldr	r3, [pc, #228]	; (800125c <global_fsm+0x28c>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f955 	bl	8000428 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	21df      	movs	r1, #223	; 0xdf
 8001184:	9102      	str	r1, [sp, #8]
 8001186:	e9cd 2300 	strd	r2, r3, [sp]
 800118a:	4a36      	ldr	r2, [pc, #216]	; (8001264 <global_fsm+0x294>)
 800118c:	2111      	movs	r1, #17
 800118e:	4836      	ldr	r0, [pc, #216]	; (8001268 <global_fsm+0x298>)
 8001190:	f006 f836 	bl	8007200 <sniprintf>
			snprintf(lcd_buffer_2,17,"Humi: %.2f %%   ",dht20.humidity);
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <global_fsm+0x28c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f945 	bl	8000428 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9cd 2300 	strd	r2, r3, [sp]
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <global_fsm+0x29c>)
 80011a8:	2111      	movs	r1, #17
 80011aa:	4831      	ldr	r0, [pc, #196]	; (8001270 <global_fsm+0x2a0>)
 80011ac:	f006 f828 	bl	8007200 <sniprintf>
			lcd_send_buffer();
 80011b0:	f7ff feac 	bl	8000f0c <lcd_send_buffer>
			status = DONE;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <global_fsm+0x284>)
 80011b6:	2208      	movs	r2, #8
 80011b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011ba:	e045      	b.n	8001248 <global_fsm+0x278>
	case DONE:
	{
		status = CHECK_READY;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <global_fsm+0x284>)
 80011be:	2203      	movs	r2, #3
 80011c0:	701a      	strb	r2, [r3, #0]
		break;
 80011c2:	e044      	b.n	800124e <global_fsm+0x27e>
	}
	case ERROR_STATE:
		if(active == DHT20_ERROR_CONNECT){
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <global_fsm+0x290>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d124      	bne.n	8001216 <global_fsm+0x246>
			while(!DHT20_IsConnected(&dht20)){
 80011cc:	e013      	b.n	80011f6 <global_fsm+0x226>
				if(isFlagTimer(GLOBAL_TIMER)){
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 fa80 	bl	80016d4 <isFlagTimer>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00d      	beq.n	80011f6 <global_fsm+0x226>
					snprintf(lcd_buffer_1,17,"Time out! DHT20");
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <global_fsm+0x2a4>)
 80011dc:	2111      	movs	r1, #17
 80011de:	4822      	ldr	r0, [pc, #136]	; (8001268 <global_fsm+0x298>)
 80011e0:	f006 f80e 	bl	8007200 <sniprintf>
					snprintf(lcd_buffer_2,17,"Can't connect");
 80011e4:	4a24      	ldr	r2, [pc, #144]	; (8001278 <global_fsm+0x2a8>)
 80011e6:	2111      	movs	r1, #17
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <global_fsm+0x2a0>)
 80011ea:	f006 f809 	bl	8007200 <sniprintf>
					lcd_send_buffer();
 80011ee:	f7ff fe8d 	bl	8000f0c <lcd_send_buffer>
					Error_Handler();
 80011f2:	f000 fa69 	bl	80016c8 <Error_Handler>
			while(!DHT20_IsConnected(&dht20)){
 80011f6:	4819      	ldr	r0, [pc, #100]	; (800125c <global_fsm+0x28c>)
 80011f8:	f7ff fcbc 	bl	8000b74 <DHT20_IsConnected>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0e5      	beq.n	80011ce <global_fsm+0x1fe>
				}
			}
			setTimer(GLOBAL_TIMER, 100);
 8001202:	2164      	movs	r1, #100	; 0x64
 8001204:	2000      	movs	r0, #0
 8001206:	f000 fa75 	bl	80016f4 <setTimer>
			status = INIT;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <global_fsm+0x284>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			active = DHT20_OK;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <global_fsm+0x290>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		  }
		if(isFlagTimer(LCD_TIMER)){
 8001216:	2002      	movs	r0, #2
 8001218:	f000 fa5c 	bl	80016d4 <isFlagTimer>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d014      	beq.n	800124c <global_fsm+0x27c>
			setTimer(GLOBAL_TIMER, 1000);
 8001222:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001226:	2000      	movs	r0, #0
 8001228:	f000 fa64 	bl	80016f4 <setTimer>
			status = INIT;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <global_fsm+0x284>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
		}
	    break;
 8001232:	e00b      	b.n	800124c <global_fsm+0x27c>
	default :
		break;
 8001234:	bf00      	nop
 8001236:	e00a      	b.n	800124e <global_fsm+0x27e>
	 	 break;
 8001238:	bf00      	nop
 800123a:	e008      	b.n	800124e <global_fsm+0x27e>
		break;
 800123c:	bf00      	nop
 800123e:	e006      	b.n	800124e <global_fsm+0x27e>
		break;
 8001240:	bf00      	nop
 8001242:	e004      	b.n	800124e <global_fsm+0x27e>
		break;
 8001244:	bf00      	nop
 8001246:	e002      	b.n	800124e <global_fsm+0x27e>
		break;
 8001248:	bf00      	nop
 800124a:	e000      	b.n	800124e <global_fsm+0x27e>
	    break;
 800124c:	bf00      	nop
	}
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200002c5 	.word	0x200002c5
 8001258:	20000204 	.word	0x20000204
 800125c:	2000028c 	.word	0x2000028c
 8001260:	20000289 	.word	0x20000289
 8001264:	080096e0 	.word	0x080096e0
 8001268:	200002b4 	.word	0x200002b4
 800126c:	080096f4 	.word	0x080096f4
 8001270:	20000278 	.word	0x20000278
 8001274:	08009708 	.word	0x08009708
 8001278:	08009718 	.word	0x08009718

0800127c <lcd_init_fsm>:
	LCD_WAIT,
	LCD_DONE
};
static uint8_t init_status = LCD_SEND, cmd_index = 0;
static uint8_t init_cmds[]={0x33, 0x32, 0x28, 0x01, 0x06, 0x0C, 0x02, 0x80 };
void lcd_init_fsm(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	switch (init_status) {
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <lcd_init_fsm+0x74>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <lcd_init_fsm+0x12>
 8001288:	2b01      	cmp	r3, #1
 800128a:	d016      	beq.n	80012ba <lcd_init_fsm+0x3e>
				}
				else init_status = LCD_SEND;
			}
			break;
		default:
			break;
 800128c:	e02d      	b.n	80012ea <lcd_init_fsm+0x6e>
			lcd_send_command(init_cmds[cmd_index]);
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <lcd_init_fsm+0x78>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <lcd_init_fsm+0x7c>)
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f833 	bl	8001304 <lcd_send_command>
			cmd_index++;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <lcd_init_fsm+0x78>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <lcd_init_fsm+0x78>)
 80012a8:	701a      	strb	r2, [r3, #0]
			setTimer(LCD_TIMER, 50);
 80012aa:	2132      	movs	r1, #50	; 0x32
 80012ac:	2002      	movs	r0, #2
 80012ae:	f000 fa21 	bl	80016f4 <setTimer>
			init_status=LCD_WAIT;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <lcd_init_fsm+0x74>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
			break;
 80012b8:	e017      	b.n	80012ea <lcd_init_fsm+0x6e>
			if(isFlagTimer(LCD_TIMER)){
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 fa0a 	bl	80016d4 <isFlagTimer>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <lcd_init_fsm+0x6c>
				if(cmd_index > 7 ){
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <lcd_init_fsm+0x78>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	d909      	bls.n	80012e2 <lcd_init_fsm+0x66>
					lcd_send_string("Please wait...");
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <lcd_init_fsm+0x80>)
 80012d0:	f000 f888 	bl	80013e4 <lcd_send_string>
					lcd_status = 0;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <lcd_init_fsm+0x84>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
					init_status = LCD_DONE;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <lcd_init_fsm+0x74>)
 80012dc:	2202      	movs	r2, #2
 80012de:	701a      	strb	r2, [r3, #0]
			break;
 80012e0:	e002      	b.n	80012e8 <lcd_init_fsm+0x6c>
				else init_status = LCD_SEND;
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <lcd_init_fsm+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
			break;
 80012e8:	bf00      	nop
	}
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000206 	.word	0x20000206
 80012f4:	20000207 	.word	0x20000207
 80012f8:	20000000 	.word	0x20000000
 80012fc:	08009728 	.word	0x08009728
 8001300:	20000205 	.word	0x20000205

08001304 <lcd_send_command>:
// Gui du lieu dieu khien
/*
 * @brief
 * @param
 */
void lcd_send_command(uint8_t command) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4];
    // Doc 4-bit dau
    buffer[0] = (command & 0b11110000) | START_READ_CMD;
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	f023 030f 	bic.w	r3, r3, #15
 8001316:	b25b      	sxtb	r3, r3
 8001318:	f043 030c 	orr.w	r3, r3, #12
 800131c:	b25b      	sxtb	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	733b      	strb	r3, [r7, #12]
    buffer[1] = (command & 0b11110000) | STOP_READ_CMD;
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	f023 030f 	bic.w	r3, r3, #15
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	737b      	strb	r3, [r7, #13]
    // Doc 4-bit sau
    buffer[2] = (command << 4) | START_READ_CMD;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	b25b      	sxtb	r3, r3
 800133c:	f043 030c 	orr.w	r3, r3, #12
 8001340:	b25b      	sxtb	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73bb      	strb	r3, [r7, #14]
    buffer[3] = (command << 4) | STOP_READ_CMD;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	b25b      	sxtb	r3, r3
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	b25b      	sxtb	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	73fb      	strb	r3, [r7, #15]
    // Gui qua i2c
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, buffer, 4, 100);
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	2364      	movs	r3, #100	; 0x64
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2304      	movs	r3, #4
 8001360:	2142      	movs	r1, #66	; 0x42
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <lcd_send_command+0x6c>)
 8001364:	f001 f99e 	bl	80026a4 <HAL_I2C_Master_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000224 	.word	0x20000224

08001374 <lcd_send_data>:
// Gui du lieu hien thi
void lcd_send_data(uint8_t data) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4];
    // Doc 4-bit dau
    buffer[0] = (data & 0b11110000) | START_READ_DATA;
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	f023 030f 	bic.w	r3, r3, #15
 8001386:	b25b      	sxtb	r3, r3
 8001388:	f043 030d 	orr.w	r3, r3, #13
 800138c:	b25b      	sxtb	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	733b      	strb	r3, [r7, #12]
    buffer[1] = (data & 0b11110000) | STOP_READ_DATA;
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	f023 030f 	bic.w	r3, r3, #15
 800139a:	b25b      	sxtb	r3, r3
 800139c:	f043 0309 	orr.w	r3, r3, #9
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	737b      	strb	r3, [r7, #13]
    // Doc 4-bit sau
    buffer[2] = (data << 4) | START_READ_DATA;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	f043 030d 	orr.w	r3, r3, #13
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	73bb      	strb	r3, [r7, #14]
    buffer[3] = (data << 4) | STOP_READ_DATA;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	f043 0309 	orr.w	r3, r3, #9
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]
    // Gui qua i2c
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, buffer, 4, 100);
 80013c6:	f107 020c 	add.w	r2, r7, #12
 80013ca:	2364      	movs	r3, #100	; 0x64
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2304      	movs	r3, #4
 80013d0:	2142      	movs	r1, #66	; 0x42
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <lcd_send_data+0x6c>)
 80013d4:	f001 f966 	bl	80026a4 <HAL_I2C_Master_Transmit>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000224 	.word	0x20000224

080013e4 <lcd_send_string>:
    HAL_Delay(50);

    lcd_send_command(0x80); // Vi tri DRAM = 0
}
// Gui chuoi den lcd
void lcd_send_string(const char *str) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    while (*str)
 80013ec:	e006      	b.n	80013fc <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffbc 	bl	8001374 <lcd_send_data>
    while (*str)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f4      	bne.n	80013ee <lcd_send_string+0xa>
    }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <lcd_set_cursor>:
    lcd_send_command(0x01); // Lệnh xóa màn hình
}

// Di chuyen con tro
void lcd_set_cursor(uint8_t row, uint8_t col)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	460a      	mov	r2, r1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	4613      	mov	r3, r2
 800141c:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 1) {
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d103      	bne.n	800142c <lcd_set_cursor+0x1e>
        address = 0x80 + col; // Hang 1
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	3b80      	subs	r3, #128	; 0x80
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e002      	b.n	8001432 <lcd_set_cursor+0x24>
    }else {
        address = 0xC0 + col; // Hang 2
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	3b40      	subs	r3, #64	; 0x40
 8001430:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_command(address);
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff65 	bl	8001304 <lcd_send_command>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fbe4 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f814 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 f8f2 	bl	8001638 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001454:	f000 f84c 	bl	80014f0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001458:	f000 f8c4 	bl	80015e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800145c:	f000 f876 	bl	800154c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <main+0x30>)
 8001462:	f004 f967 	bl	8005734 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  global_init();
 8001466:	f7ff fd67 	bl	8000f38 <global_init>

  while (1)
  {
	  watchdog();
 800146a:	f7ff fd85 	bl	8000f78 <watchdog>
	  global_fsm();
 800146e:	f7ff fdaf 	bl	8000fd0 <global_fsm>
	  watchdog();
 8001472:	e7fa      	b.n	800146a <main+0x26>
 8001474:	200002c8 	.word	0x200002c8

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b090      	sub	sp, #64	; 0x40
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fa52 	bl	8006930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149e:	2301      	movs	r3, #1
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a2:	2310      	movs	r3, #16
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fce2 	bl	8004e78 <HAL_RCC_OscConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ba:	f000 f905 	bl	80016c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 ff4e 	bl	8005378 <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014e2:	f000 f8f1 	bl	80016c8 <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3740      	adds	r7, #64	; 0x40
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_I2C1_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <MX_I2C1_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_I2C1_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MX_I2C1_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_I2C1_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_I2C1_Init+0x50>)
 800152e:	f000 ff61 	bl	80023f4 <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001538:	f000 f8c6 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000224 	.word	0x20000224
 8001544:	40005400 	.word	0x40005400
 8001548:	000186a0 	.word	0x000186a0

0800154c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_TIM2_Init+0x94>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001572:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_TIM2_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001580:	2209      	movs	r2, #9
 8001582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_TIM2_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001592:	f004 f87f 	bl	8005694 <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800159c:	f000 f894 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ae:	f004 fa03 	bl	80059b8 <HAL_TIM_ConfigClockSource>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b8:	f000 f886 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ca:	f004 fbe5 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f000 f878 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200002c8 	.word	0x200002c8

080015e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART2_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART2_UART_Init+0x4c>)
 800161c:	f004 fc2c 	bl	8005e78 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f84f 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000310 	.word	0x20000310
 8001634:	40004400 	.word	0x40004400

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_GPIO_Init+0x74>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a16      	ldr	r2, [pc, #88]	; (80016ac <MX_GPIO_Init+0x74>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_GPIO_Init+0x74>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_GPIO_Init+0x74>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <MX_GPIO_Init+0x74>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_GPIO_Init+0x74>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2120      	movs	r1, #32
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0x78>)
 8001682:	f000 fe9f 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8001686:	2320      	movs	r3, #32
 8001688:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2302      	movs	r3, #2
 8001694:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4619      	mov	r1, r3
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_GPIO_Init+0x78>)
 800169e:	f000 fd0d 	bl	80020bc <HAL_GPIO_Init>

}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010800 	.word	0x40010800

080016b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	timerRun();
 80016bc:	f000 f838 	bl	8001730 <timerRun>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <isFlagTimer+0x1c>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000214 	.word	0x20000214

080016f4 <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <setTimer+0x30>)
 8001704:	2100      	movs	r1, #0
 8001706:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration / TIMER_CYCLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <setTimer+0x34>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	fbb1 f2f2 	udiv	r2, r1, r2
 8001714:	4905      	ldr	r1, [pc, #20]	; (800172c <setTimer+0x38>)
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	20000214 	.word	0x20000214
 8001728:	20000008 	.word	0x20000008
 800172c:	20000208 	.word	0x20000208

08001730 <timerRun>:
void timerInit(uint32_t prescaler, uint32_t period){
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
	TIMER_CYCLE  = (prescaler+1)*(period+1)*1000/frequency;
}
void timerRun(){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e01a      	b.n	8001772 <timerRun+0x42>
		if(timer_counters[i] > 0){
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <timerRun+0x54>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d011      	beq.n	800176c <timerRun+0x3c>
			timer_counters[i] --;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <timerRun+0x54>)
 800174c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001750:	3a01      	subs	r2, #1
 8001752:	490c      	ldr	r1, [pc, #48]	; (8001784 <timerRun+0x54>)
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <timerRun+0x54>)
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d103      	bne.n	800176c <timerRun+0x3c>
				timer_flags[i] = 1;
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <timerRun+0x58>)
 8001768:	2101      	movs	r1, #1
 800176a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	3301      	adds	r3, #1
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d9e1      	bls.n	800173c <timerRun+0xc>
			}
		}
	}

}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000208 	.word	0x20000208
 8001788:	20000214 	.word	0x20000214

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_MspInit+0x5c>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_MspInit+0x5c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_MspInit+0x5c>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_MspInit+0x5c>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_MspInit+0x5c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_MspInit+0x5c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_MspInit+0x60>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_MspInit+0x60>)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000

080017f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a25      	ldr	r2, [pc, #148]	; (80018a0 <HAL_I2C_MspInit+0xb0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d142      	bne.n	8001896 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182e:	2312      	movs	r3, #18
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	481a      	ldr	r0, [pc, #104]	; (80018a8 <HAL_I2C_MspInit+0xb8>)
 800183e:	f000 fc3d 	bl	80020bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_I2C_MspInit+0xbc>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_I2C_MspInit+0xbc>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 8001864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_I2C_MspInit+0xb4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	201f      	movs	r0, #31
 800187c:	f000 fb27 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001880:	201f      	movs	r0, #31
 8001882:	f000 fb40 	bl	8001f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2020      	movs	r0, #32
 800188c:	f000 fb1f 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001890:	2020      	movs	r0, #32
 8001892:	f000 fb38 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	40010000 	.word	0x40010000

080018b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d113      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_TIM_Base_MspInit+0x44>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_TIM_Base_MspInit+0x44>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_TIM_Base_MspInit+0x44>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	201c      	movs	r0, #28
 80018e0:	f000 faf5 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e4:	201c      	movs	r0, #28
 80018e6:	f000 fb0e 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <HAL_UART_MspInit+0x98>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d137      	bne.n	8001988 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_UART_MspInit+0x9c>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_UART_MspInit+0x9c>)
 800191e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001922:	61d3      	str	r3, [r2, #28]
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_UART_MspInit+0x9c>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_UART_MspInit+0x9c>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_UART_MspInit+0x9c>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_UART_MspInit+0x9c>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001948:	2304      	movs	r3, #4
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	480f      	ldr	r0, [pc, #60]	; (8001998 <HAL_UART_MspInit+0xa0>)
 800195c:	f000 fbae 	bl	80020bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001960:	2308      	movs	r3, #8
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <HAL_UART_MspInit+0xa0>)
 8001974:	f000 fba2 	bl	80020bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	2026      	movs	r0, #38	; 0x26
 800197e:	f000 faa6 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001982:	2026      	movs	r0, #38	; 0x26
 8001984:	f000 fabf 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40004400 	.word	0x40004400
 8001994:	40021000 	.word	0x40021000
 8001998:	40010800 	.word	0x40010800

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e2:	f000 f95d 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM2_IRQHandler+0x10>)
 80019f2:	f003 fef1 	bl	80057d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002c8 	.word	0x200002c8

08001a00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <I2C1_EV_IRQHandler+0x10>)
 8001a06:	f001 f9b7 	bl	8002d78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000224 	.word	0x20000224

08001a14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <I2C1_ER_IRQHandler+0x10>)
 8001a1a:	f001 fb1e 	bl	800305a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000224 	.word	0x20000224

08001a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <USART2_IRQHandler+0x10>)
 8001a2e:	f004 fa73 	bl	8005f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000310 	.word	0x20000310

08001a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <_kill>:

int _kill(int pid, int sig)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a54:	f004 ff42 	bl	80068dc <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2216      	movs	r2, #22
 8001a5c:	601a      	str	r2, [r3, #0]
	return -1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_exit>:

void _exit (int status)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a72:	f04f 31ff 	mov.w	r1, #4294967295
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffe7 	bl	8001a4a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a7c:	e7fe      	b.n	8001a7c <_exit+0x12>

08001a7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e00a      	b.n	8001aa6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a90:	f3af 8000 	nop.w
 8001a94:	4601      	mov	r1, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbf0      	blt.n	8001a90 <_read+0x12>
	}

return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e009      	b.n	8001ade <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	60ba      	str	r2, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbf1      	blt.n	8001aca <_write+0x12>
	}
	return len;
 8001ae6:	687b      	ldr	r3, [r7, #4]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_close>:

int _close(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <_isatty>:

int _isatty(int file)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f004 feac 	bl	80068dc <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20005000 	.word	0x20005000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	20000218 	.word	0x20000218
 8001bb8:	20000370 	.word	0x20000370

08001bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc8:	f7ff fff8 	bl	8001bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bce:	490c      	ldr	r1, [pc, #48]	; (8001c00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be4:	4c09      	ldr	r4, [pc, #36]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f004 fe79 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff fc25 	bl	8001444 <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c04:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 8001c08:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c0c:	2000036c 	.word	0x2000036c

08001c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <ADC1_2_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f947 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fdac 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f95f 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f927 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	20000014 	.word	0x20000014
 8001c9c:	20000010 	.word	0x20000010

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000014 	.word	0x20000014
 8001cc0:	20000358 	.word	0x20000358

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000358 	.word	0x20000358

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffe0 	bl	8001cc4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000014 	.word	0x20000014

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <__NVIC_EnableIRQ+0x34>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	; (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff90 	bl	8001dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff2d 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff42 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff90 	bl	8001e10 <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5f 	bl	8001dbc <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff35 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d008      	beq.n	8001f64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e020      	b.n	8001fa6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 020e 	bic.w	r2, r2, #14
 8001f72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d005      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e051      	b.n	8002078 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020e 	bic.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_DMA_Abort_IT+0xd4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d029      	beq.n	8002052 <HAL_DMA_Abort_IT+0xa2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_DMA_Abort_IT+0xd8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_Abort_IT+0x9e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_DMA_Abort_IT+0xdc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01a      	beq.n	8002048 <HAL_DMA_Abort_IT+0x98>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_DMA_Abort_IT+0xe0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d012      	beq.n	8002042 <HAL_DMA_Abort_IT+0x92>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_DMA_Abort_IT+0xe4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00a      	beq.n	800203c <HAL_DMA_Abort_IT+0x8c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_DMA_Abort_IT+0xe8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d102      	bne.n	8002036 <HAL_DMA_Abort_IT+0x86>
 8002030:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002034:	e00e      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002036:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203a:	e00b      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 800203c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002040:	e008      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	e005      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204c:	e002      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 800204e:	2310      	movs	r3, #16
 8002050:	e000      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002052:	2301      	movs	r3, #1
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_DMA_Abort_IT+0xec>)
 8002056:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
    } 
  }
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020008 	.word	0x40020008
 8002088:	4002001c 	.word	0x4002001c
 800208c:	40020030 	.word	0x40020030
 8002090:	40020044 	.word	0x40020044
 8002094:	40020058 	.word	0x40020058
 8002098:	4002006c 	.word	0x4002006c
 800209c:	40020000 	.word	0x40020000

080020a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ae:	b2db      	uxtb	r3, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
	...

080020bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b08b      	sub	sp, #44	; 0x2c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ce:	e169      	b.n	80023a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020d0:	2201      	movs	r2, #1
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 8158 	bne.w	800239e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a9a      	ldr	r2, [pc, #616]	; (800235c <HAL_GPIO_Init+0x2a0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d05e      	beq.n	80021b6 <HAL_GPIO_Init+0xfa>
 80020f8:	4a98      	ldr	r2, [pc, #608]	; (800235c <HAL_GPIO_Init+0x2a0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d875      	bhi.n	80021ea <HAL_GPIO_Init+0x12e>
 80020fe:	4a98      	ldr	r2, [pc, #608]	; (8002360 <HAL_GPIO_Init+0x2a4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d058      	beq.n	80021b6 <HAL_GPIO_Init+0xfa>
 8002104:	4a96      	ldr	r2, [pc, #600]	; (8002360 <HAL_GPIO_Init+0x2a4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d86f      	bhi.n	80021ea <HAL_GPIO_Init+0x12e>
 800210a:	4a96      	ldr	r2, [pc, #600]	; (8002364 <HAL_GPIO_Init+0x2a8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d052      	beq.n	80021b6 <HAL_GPIO_Init+0xfa>
 8002110:	4a94      	ldr	r2, [pc, #592]	; (8002364 <HAL_GPIO_Init+0x2a8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d869      	bhi.n	80021ea <HAL_GPIO_Init+0x12e>
 8002116:	4a94      	ldr	r2, [pc, #592]	; (8002368 <HAL_GPIO_Init+0x2ac>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d04c      	beq.n	80021b6 <HAL_GPIO_Init+0xfa>
 800211c:	4a92      	ldr	r2, [pc, #584]	; (8002368 <HAL_GPIO_Init+0x2ac>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d863      	bhi.n	80021ea <HAL_GPIO_Init+0x12e>
 8002122:	4a92      	ldr	r2, [pc, #584]	; (800236c <HAL_GPIO_Init+0x2b0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d046      	beq.n	80021b6 <HAL_GPIO_Init+0xfa>
 8002128:	4a90      	ldr	r2, [pc, #576]	; (800236c <HAL_GPIO_Init+0x2b0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d85d      	bhi.n	80021ea <HAL_GPIO_Init+0x12e>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d82a      	bhi.n	8002188 <HAL_GPIO_Init+0xcc>
 8002132:	2b12      	cmp	r3, #18
 8002134:	d859      	bhi.n	80021ea <HAL_GPIO_Init+0x12e>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_GPIO_Init+0x80>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	080021b7 	.word	0x080021b7
 8002140:	08002191 	.word	0x08002191
 8002144:	080021a3 	.word	0x080021a3
 8002148:	080021e5 	.word	0x080021e5
 800214c:	080021eb 	.word	0x080021eb
 8002150:	080021eb 	.word	0x080021eb
 8002154:	080021eb 	.word	0x080021eb
 8002158:	080021eb 	.word	0x080021eb
 800215c:	080021eb 	.word	0x080021eb
 8002160:	080021eb 	.word	0x080021eb
 8002164:	080021eb 	.word	0x080021eb
 8002168:	080021eb 	.word	0x080021eb
 800216c:	080021eb 	.word	0x080021eb
 8002170:	080021eb 	.word	0x080021eb
 8002174:	080021eb 	.word	0x080021eb
 8002178:	080021eb 	.word	0x080021eb
 800217c:	080021eb 	.word	0x080021eb
 8002180:	08002199 	.word	0x08002199
 8002184:	080021ad 	.word	0x080021ad
 8002188:	4a79      	ldr	r2, [pc, #484]	; (8002370 <HAL_GPIO_Init+0x2b4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218e:	e02c      	b.n	80021ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e029      	b.n	80021ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	3304      	adds	r3, #4
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e024      	b.n	80021ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	3308      	adds	r3, #8
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e01f      	b.n	80021ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	330c      	adds	r3, #12
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e01a      	b.n	80021ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021be:	2304      	movs	r3, #4
 80021c0:	623b      	str	r3, [r7, #32]
          break;
 80021c2:	e013      	b.n	80021ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021cc:	2308      	movs	r3, #8
 80021ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	611a      	str	r2, [r3, #16]
          break;
 80021d6:	e009      	b.n	80021ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d8:	2308      	movs	r3, #8
 80021da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	615a      	str	r2, [r3, #20]
          break;
 80021e2:	e003      	b.n	80021ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
          break;
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x130>
          break;
 80021ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d801      	bhi.n	80021f6 <HAL_GPIO_Init+0x13a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	e001      	b.n	80021fa <HAL_GPIO_Init+0x13e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3304      	adds	r3, #4
 80021fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d802      	bhi.n	8002208 <HAL_GPIO_Init+0x14c>
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x152>
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	3b08      	subs	r3, #8
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	210f      	movs	r1, #15
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80b1 	beq.w	800239e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800223c:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <HAL_GPIO_Init+0x2b8>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a4c      	ldr	r2, [pc, #304]	; (8002374 <HAL_GPIO_Init+0x2b8>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_GPIO_Init+0x2b8>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002254:	4a48      	ldr	r2, [pc, #288]	; (8002378 <HAL_GPIO_Init+0x2bc>)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a40      	ldr	r2, [pc, #256]	; (800237c <HAL_GPIO_Init+0x2c0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_GPIO_Init+0x1ec>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3f      	ldr	r2, [pc, #252]	; (8002380 <HAL_GPIO_Init+0x2c4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00d      	beq.n	80022a4 <HAL_GPIO_Init+0x1e8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3e      	ldr	r2, [pc, #248]	; (8002384 <HAL_GPIO_Init+0x2c8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <HAL_GPIO_Init+0x1e4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <HAL_GPIO_Init+0x2cc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_GPIO_Init+0x1e0>
 8002298:	2303      	movs	r3, #3
 800229a:	e006      	b.n	80022aa <HAL_GPIO_Init+0x1ee>
 800229c:	2304      	movs	r3, #4
 800229e:	e004      	b.n	80022aa <HAL_GPIO_Init+0x1ee>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e002      	b.n	80022aa <HAL_GPIO_Init+0x1ee>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_GPIO_Init+0x1ee>
 80022a8:	2300      	movs	r3, #0
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	f002 0203 	and.w	r2, r2, #3
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	4093      	lsls	r3, r2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ba:	492f      	ldr	r1, [pc, #188]	; (8002378 <HAL_GPIO_Init+0x2bc>)
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_GPIO_Init+0x2d0>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	492c      	ldr	r1, [pc, #176]	; (800238c <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_GPIO_Init+0x2d0>)
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4928      	ldr	r1, [pc, #160]	; (800238c <HAL_GPIO_Init+0x2d0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_GPIO_Init+0x2d0>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4922      	ldr	r1, [pc, #136]	; (800238c <HAL_GPIO_Init+0x2d0>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_GPIO_Init+0x2d0>)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	43db      	mvns	r3, r3
 8002312:	491e      	ldr	r1, [pc, #120]	; (800238c <HAL_GPIO_Init+0x2d0>)
 8002314:	4013      	ands	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_GPIO_Init+0x2d0>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4918      	ldr	r1, [pc, #96]	; (800238c <HAL_GPIO_Init+0x2d0>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_GPIO_Init+0x2d0>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	43db      	mvns	r3, r3
 800233a:	4914      	ldr	r1, [pc, #80]	; (800238c <HAL_GPIO_Init+0x2d0>)
 800233c:	4013      	ands	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d021      	beq.n	8002390 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_GPIO_Init+0x2d0>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_GPIO_Init+0x2d0>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e021      	b.n	800239e <HAL_GPIO_Init+0x2e2>
 800235a:	bf00      	nop
 800235c:	10320000 	.word	0x10320000
 8002360:	10310000 	.word	0x10310000
 8002364:	10220000 	.word	0x10220000
 8002368:	10210000 	.word	0x10210000
 800236c:	10120000 	.word	0x10120000
 8002370:	10110000 	.word	0x10110000
 8002374:	40021000 	.word	0x40021000
 8002378:	40010000 	.word	0x40010000
 800237c:	40010800 	.word	0x40010800
 8002380:	40010c00 	.word	0x40010c00
 8002384:	40011000 	.word	0x40011000
 8002388:	40011400 	.word	0x40011400
 800238c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_GPIO_Init+0x304>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	43db      	mvns	r3, r3
 8002398:	4909      	ldr	r1, [pc, #36]	; (80023c0 <HAL_GPIO_Init+0x304>)
 800239a:	4013      	ands	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f47f ae8e 	bne.w	80020d0 <HAL_GPIO_Init+0x14>
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	372c      	adds	r7, #44	; 0x2c
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e12b      	b.n	800265e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff f9e8 	bl	80017f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002458:	f003 f8d6 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a81      	ldr	r2, [pc, #516]	; (8002668 <HAL_I2C_Init+0x274>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d807      	bhi.n	8002478 <HAL_I2C_Init+0x84>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_I2C_Init+0x278>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e006      	b.n	8002486 <HAL_I2C_Init+0x92>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_I2C_Init+0x27c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0e7      	b.n	800265e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a78      	ldr	r2, [pc, #480]	; (8002674 <HAL_I2C_Init+0x280>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <HAL_I2C_Init+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d802      	bhi.n	80024c8 <HAL_I2C_Init+0xd4>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	e009      	b.n	80024dc <HAL_I2C_Init+0xe8>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_I2C_Init+0x284>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	3301      	adds	r3, #1
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	495c      	ldr	r1, [pc, #368]	; (8002668 <HAL_I2C_Init+0x274>)
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d819      	bhi.n	8002530 <HAL_I2C_Init+0x13c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e59      	subs	r1, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fbb1 f3f3 	udiv	r3, r1, r3
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002510:	400b      	ands	r3, r1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_I2C_Init+0x138>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e59      	subs	r1, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fbb1 f3f3 	udiv	r3, r1, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	e051      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800252c:	2304      	movs	r3, #4
 800252e:	e04f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <HAL_I2C_Init+0x168>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e012      	b.n	8002582 <HAL_I2C_Init+0x18e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	0099      	lsls	r1, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x196>
 8002586:	2301      	movs	r3, #1
 8002588:	e022      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <HAL_I2C_Init+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e58      	subs	r0, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	440b      	add	r3, r1
 80025a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	0099      	lsls	r1, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6809      	ldr	r1, [r1, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6911      	ldr	r1, [r2, #16]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	000186a0 	.word	0x000186a0
 800266c:	001e847f 	.word	0x001e847f
 8002670:	003d08ff 	.word	0x003d08ff
 8002674:	431bde83 	.word	0x431bde83
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b80      	cmp	r3, #128	; 0x80
 8002690:	d103      	bne.n	800269a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
 80026b4:	4613      	mov	r3, r2
 80026b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fb04 	bl	8001cc4 <HAL_GetTick>
 80026bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f040 80e0 	bne.w	800288c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2319      	movs	r3, #25
 80026d2:	2201      	movs	r2, #1
 80026d4:	4970      	ldr	r1, [pc, #448]	; (8002898 <HAL_I2C_Master_Transmit+0x1f4>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f002 f94c 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0d3      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2C_Master_Transmit+0x50>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0cc      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d007      	beq.n	800271a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002728:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2221      	movs	r2, #33	; 0x21
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2210      	movs	r2, #16
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a50      	ldr	r2, [pc, #320]	; (800289c <HAL_I2C_Master_Transmit+0x1f8>)
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f001 ff0e 	bl	8004584 <I2C_MasterRequestWrite>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e08d      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002788:	e066      	b.n	8002858 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f002 fa0a 	bl	8004ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d107      	bne.n	80027b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d11b      	bne.n	800282c <HAL_I2C_Master_Transmit+0x188>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	6a39      	ldr	r1, [r7, #32]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f002 fa01 	bl	8004c38 <I2C_WaitOnBTFFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00d      	beq.n	8002858 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2b04      	cmp	r3, #4
 8002842:	d107      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002852:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e01a      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d194      	bne.n	800278a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	00100002 	.word	0x00100002
 800289c:	ffff0000 	.word	0xffff0000

080028a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	; 0x30
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	817b      	strh	r3, [r7, #10]
 80028b0:	4613      	mov	r3, r2
 80028b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff fa04 	bl	8001cc4 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	f040 824b 	bne.w	8002d62 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2319      	movs	r3, #25
 80028d2:	2201      	movs	r2, #1
 80028d4:	497f      	ldr	r1, [pc, #508]	; (8002ad4 <HAL_I2C_Master_Receive+0x234>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f002 f84c 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
 80028e4:	e23e      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_I2C_Master_Receive+0x54>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e237      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d007      	beq.n	800291a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002928:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2222      	movs	r2, #34	; 0x22
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2210      	movs	r2, #16
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	893a      	ldrh	r2, [r7, #8]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_I2C_Master_Receive+0x238>)
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800295c:	8979      	ldrh	r1, [r7, #10]
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f001 fe90 	bl	8004688 <I2C_MasterRequestRead>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1f8      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d113      	bne.n	80029a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e1cc      	b.n	8002d3c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d11e      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029ba:	b672      	cpsid	i
}
 80029bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029e4:	b662      	cpsie	i
}
 80029e6:	e035      	b.n	8002a54 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d11e      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a2a:	b662      	cpsie	i
}
 8002a2c:	e012      	b.n	8002a54 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002a54:	e172      	b.n	8002d3c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	f200 811f 	bhi.w	8002c9e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d123      	bne.n	8002ab0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f002 f95d 	bl	8004d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e173      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aae:	e145      	b.n	8002d3c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d152      	bne.n	8002b5e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4906      	ldr	r1, [pc, #24]	; (8002adc <HAL_I2C_Master_Receive+0x23c>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f001 ff56 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e148      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
 8002ad2:	bf00      	nop
 8002ad4:	00100002 	.word	0x00100002
 8002ad8:	ffff0000 	.word	0xffff0000
 8002adc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b26:	b662      	cpsie	i
}
 8002b28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b5c:	e0ee      	b.n	8002d3c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2200      	movs	r2, #0
 8002b66:	4981      	ldr	r1, [pc, #516]	; (8002d6c <HAL_I2C_Master_Receive+0x4cc>)
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f001 ff03 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0f5      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bbe:	4b6c      	ldr	r3, [pc, #432]	; (8002d70 <HAL_I2C_Master_Receive+0x4d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	08db      	lsrs	r3, r3, #3
 8002bc4:	4a6b      	ldr	r2, [pc, #428]	; (8002d74 <HAL_I2C_Master_Receive+0x4d4>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a1a      	lsrs	r2, r3, #8
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00da      	lsls	r2, r3, #3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d118      	bne.n	8002c16 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c06:	b662      	cpsie	i
}
 8002c08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0a6      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d1d9      	bne.n	8002bd8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c66:	b662      	cpsie	i
}
 8002c68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c9c:	e04e      	b.n	8002d3c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f002 f842 	bl	8004d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e058      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d124      	bne.n	8002d3c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f47f ae88 	bne.w	8002a56 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	00010004 	.word	0x00010004
 8002d70:	2000000c 	.word	0x2000000c
 8002d74:	14f8b589 	.word	0x14f8b589

08002d78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d003      	beq.n	8002db0 <HAL_I2C_EV_IRQHandler+0x38>
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	f040 80c1 	bne.w	8002f32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002dd0:	d003      	beq.n	8002dda <HAL_I2C_EV_IRQHandler+0x62>
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_EV_IRQHandler+0x66>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_I2C_EV_IRQHandler+0x68>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	f000 8132 	beq.w	800304a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x92>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f002 f820 	bl	8004e42 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fd99 	bl	800393a <I2C_Master_SB>
 8002e08:	e092      	b.n	8002f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0xb2>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	0a5b      	lsrs	r3, r3, #9
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fe0e 	bl	8003a44 <I2C_Master_ADD10>
 8002e28:	e082      	b.n	8002f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0xd2>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	0a5b      	lsrs	r3, r3, #9
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fe27 	bl	8003a96 <I2C_Master_ADDR>
 8002e48:	e072      	b.n	8002f30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03b      	beq.n	8002ece <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e64:	f000 80f3 	beq.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	09db      	lsrs	r3, r3, #7
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00f      	beq.n	8002e94 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	0a9b      	lsrs	r3, r3, #10
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f9f1 	bl	8003274 <I2C_MasterTransmit_TXE>
 8002e92:	e04d      	b.n	8002f30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	089b      	lsrs	r3, r3, #2
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80d6 	beq.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	0a5b      	lsrs	r3, r3, #9
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80cf 	beq.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002eb0:	7bbb      	ldrb	r3, [r7, #14]
 8002eb2:	2b21      	cmp	r3, #33	; 0x21
 8002eb4:	d103      	bne.n	8002ebe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa78 	bl	80033ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ebc:	e0c7      	b.n	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	f040 80c4 	bne.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fae6 	bl	8003498 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ecc:	e0bf      	b.n	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002edc:	f000 80b7 	beq.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00f      	beq.n	8002f0c <HAL_I2C_EV_IRQHandler+0x194>
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	0a9b      	lsrs	r3, r3, #10
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <HAL_I2C_EV_IRQHandler+0x194>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fb5f 	bl	80035c8 <I2C_MasterReceive_RXNE>
 8002f0a:	e011      	b.n	8002f30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 809a 	beq.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 8093 	beq.w	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fc15 	bl	8003758 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f2e:	e08e      	b.n	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f30:	e08d      	b.n	800304e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e007      	b.n	8002f54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0x20e>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	0a5b      	lsrs	r3, r3, #9
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f7c:	69b9      	ldr	r1, [r7, #24]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 ffe0 	bl	8003f44 <I2C_Slave_ADDR>
 8002f84:	e066      	b.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a5b      	lsrs	r3, r3, #9
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 f81a 	bl	8003fd8 <I2C_Slave_STOPF>
 8002fa4:	e056      	b.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fa6:	7bbb      	ldrb	r3, [r7, #14]
 8002fa8:	2b21      	cmp	r3, #33	; 0x21
 8002faa:	d002      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	2b29      	cmp	r3, #41	; 0x29
 8002fb0:	d125      	bne.n	8002ffe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	09db      	lsrs	r3, r3, #7
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00f      	beq.n	8002fde <HAL_I2C_EV_IRQHandler+0x266>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	0a9b      	lsrs	r3, r3, #10
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_I2C_EV_IRQHandler+0x266>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fef8 	bl	8003dcc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fdc:	e039      	b.n	8003052 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d033      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x2da>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	0a5b      	lsrs	r3, r3, #9
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02d      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ff25 	bl	8003e46 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ffc:	e029      	b.n	8003052 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00f      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0x2b2>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	0a9b      	lsrs	r3, r3, #10
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 ff2f 	bl	8003e86 <I2C_SlaveReceive_RXNE>
 8003028:	e014      	b.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00e      	beq.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 ff5d 	bl	8003f02 <I2C_SlaveReceive_BTF>
 8003048:	e004      	b.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800304a:	bf00      	nop
 800304c:	e002      	b.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003052:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_I2C_ER_IRQHandler+0x5e>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030a6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	0a5b      	lsrs	r3, r3, #9
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <HAL_I2C_ER_IRQHandler+0x88>
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80030e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	0a9b      	lsrs	r3, r3, #10
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d03f      	beq.n	800316e <HAL_I2C_ER_IRQHandler+0x114>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d039      	beq.n	800316e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80030fa:	7efb      	ldrb	r3, [r7, #27]
 80030fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003114:	7ebb      	ldrb	r3, [r7, #26]
 8003116:	2b20      	cmp	r3, #32
 8003118:	d112      	bne.n	8003140 <HAL_I2C_ER_IRQHandler+0xe6>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10f      	bne.n	8003140 <HAL_I2C_ER_IRQHandler+0xe6>
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b21      	cmp	r3, #33	; 0x21
 8003124:	d008      	beq.n	8003138 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b29      	cmp	r3, #41	; 0x29
 800312a:	d005      	beq.n	8003138 <HAL_I2C_ER_IRQHandler+0xde>
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b28      	cmp	r3, #40	; 0x28
 8003130:	d106      	bne.n	8003140 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b21      	cmp	r3, #33	; 0x21
 8003136:	d103      	bne.n	8003140 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f001 f87d 	bl	8004238 <I2C_Slave_AF>
 800313e:	e016      	b.n	800316e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003148:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003152:	7efb      	ldrb	r3, [r7, #27]
 8003154:	2b10      	cmp	r3, #16
 8003156:	d002      	beq.n	800315e <HAL_I2C_ER_IRQHandler+0x104>
 8003158:	7efb      	ldrb	r3, [r7, #27]
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d107      	bne.n	800316e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	0adb      	lsrs	r3, r3, #11
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <HAL_I2C_ER_IRQHandler+0x13e>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003196:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f001 f8b8 	bl	8004320 <I2C_ITError>
  }
}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
 800320c:	4613      	mov	r3, r2
 800320e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800328a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d150      	bne.n	800333c <I2C_MasterTransmit_TXE+0xc8>
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b21      	cmp	r3, #33	; 0x21
 800329e:	d14d      	bne.n	800333c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d01d      	beq.n	80032e2 <I2C_MasterTransmit_TXE+0x6e>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d01a      	beq.n	80032e2 <I2C_MasterTransmit_TXE+0x6e>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b2:	d016      	beq.n	80032e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2211      	movs	r2, #17
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ff6c 	bl	80031b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032e0:	e060      	b.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d107      	bne.n	800332c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff81 	bl	800322c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800332a:	e03b      	b.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff3f 	bl	80031b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800333a:	e033      	b.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b21      	cmp	r3, #33	; 0x21
 8003340:	d005      	beq.n	800334e <I2C_MasterTransmit_TXE+0xda>
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d12d      	bne.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b22      	cmp	r3, #34	; 0x22
 800334c:	d12a      	bne.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d108      	bne.n	800336a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003368:	e01c      	b.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d103      	bne.n	800337e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f88e 	bl	8003498 <I2C_MemoryTransmit_TXE_BTF>
}
 800337c:	e012      	b.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033a2:	e7ff      	b.n	80033a4 <I2C_MasterTransmit_TXE+0x130>
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b21      	cmp	r3, #33	; 0x21
 80033c4:	d164      	bne.n	8003490 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033f4:	e04c      	b.n	8003490 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d01d      	beq.n	8003438 <I2C_MasterTransmit_BTF+0x8c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d01a      	beq.n	8003438 <I2C_MasterTransmit_BTF+0x8c>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003408:	d016      	beq.n	8003438 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003418:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2211      	movs	r2, #17
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fec1 	bl	80031b8 <HAL_I2C_MasterTxCpltCallback>
}
 8003436:	e02b      	b.n	8003490 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003446:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d107      	bne.n	8003482 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fed6 	bl	800322c <HAL_I2C_MemTxCpltCallback>
}
 8003480:	e006      	b.n	8003490 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fe94 	bl	80031b8 <HAL_I2C_MasterTxCpltCallback>
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11d      	bne.n	80034ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10b      	bne.n	80034d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80034ce:	e077      	b.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	121b      	asrs	r3, r3, #8
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034ea:	e069      	b.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10b      	bne.n	800350c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	651a      	str	r2, [r3, #80]	; 0x50
}
 800350a:	e059      	b.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	2b02      	cmp	r3, #2
 8003512:	d152      	bne.n	80035ba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b22      	cmp	r3, #34	; 0x22
 8003518:	d10d      	bne.n	8003536 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003534:	e044      	b.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b21      	cmp	r3, #33	; 0x21
 8003544:	d112      	bne.n	800356c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800356a:	e029      	b.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d124      	bne.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b21      	cmp	r3, #33	; 0x21
 800357a:	d121      	bne.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800358a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fe3a 	bl	800322c <HAL_I2C_MemTxCpltCallback>
}
 80035b8:	e002      	b.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff f85e 	bl	800267c <I2C_Flush_DR>
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b22      	cmp	r3, #34	; 0x22
 80035da:	f040 80b9 	bne.w	8003750 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d921      	bls.n	8003636 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b03      	cmp	r3, #3
 8003620:	f040 8096 	bne.w	8003750 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003632:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003634:	e08c      	b.n	8003750 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	2b02      	cmp	r3, #2
 800363c:	d07f      	beq.n	800373e <I2C_MasterReceive_RXNE+0x176>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d002      	beq.n	800364a <I2C_MasterReceive_RXNE+0x82>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d179      	bne.n	800373e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fb3c 	bl	8004cc8 <I2C_WaitOnSTOPRequestThroughIT>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d14c      	bne.n	80036f0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003664:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003674:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d10a      	bne.n	80036c6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fdbd 	bl	800323e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036c4:	e044      	b.n	8003750 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d002      	beq.n	80036da <I2C_MasterReceive_RXNE+0x112>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d103      	bne.n	80036e2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	e002      	b.n	80036e8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2212      	movs	r2, #18
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fd6e 	bl	80031ca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036ee:	e02f      	b.n	8003750 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fd8a 	bl	8003250 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800373c:	e008      	b.n	8003750 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	605a      	str	r2, [r3, #4]
}
 800374e:	e7ff      	b.n	8003750 <I2C_MasterReceive_RXNE+0x188>
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b04      	cmp	r3, #4
 800376e:	d11b      	bne.n	80037a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037a6:	e0c4      	b.n	8003932 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d129      	bne.n	8003806 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d00a      	beq.n	80037de <I2C_MasterReceive_BTF+0x86>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d007      	beq.n	80037de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003804:	e095      	b.n	8003932 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d17d      	bne.n	800390c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d002      	beq.n	800381c <I2C_MasterReceive_BTF+0xc4>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d108      	bne.n	800382e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e016      	b.n	800385c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d002      	beq.n	800383a <I2C_MasterReceive_BTF+0xe2>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d108      	bne.n	800384c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e007      	b.n	800385c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d10a      	bne.n	80038e2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fcaf 	bl	800323e <HAL_I2C_MemRxCpltCallback>
}
 80038e0:	e027      	b.n	8003932 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d002      	beq.n	80038f6 <I2C_MasterReceive_BTF+0x19e>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d103      	bne.n	80038fe <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
 80038fc:	e002      	b.n	8003904 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2212      	movs	r2, #18
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fc60 	bl	80031ca <HAL_I2C_MasterRxCpltCallback>
}
 800390a:	e012      	b.n	8003932 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d117      	bne.n	800397e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003966:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003968:	e067      	b.n	8003a3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]
}
 800397c:	e05d      	b.n	8003a3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003986:	d133      	bne.n	80039f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b21      	cmp	r3, #33	; 0x21
 8003992:	d109      	bne.n	80039a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	e008      	b.n	80039ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <I2C_Master_SB+0x92>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d032      	beq.n	8003a3a <I2C_Master_SB+0x100>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02d      	beq.n	8003a3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ec:	605a      	str	r2, [r3, #4]
}
 80039ee:	e024      	b.n	8003a3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10e      	bne.n	8003a16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	11db      	asrs	r3, r3, #7
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0306 	and.w	r3, r3, #6
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f063 030f 	orn	r3, r3, #15
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]
}
 8003a14:	e011      	b.n	8003a3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d10d      	bne.n	8003a3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	11db      	asrs	r3, r3, #7
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 0306 	and.w	r3, r3, #6
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f063 030e 	orn	r3, r3, #14
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <I2C_Master_ADD10+0x26>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <I2C_Master_ADD10+0x48>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	605a      	str	r2, [r3, #4]
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b091      	sub	sp, #68	; 0x44
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b22      	cmp	r3, #34	; 0x22
 8003abe:	f040 8174 	bne.w	8003daa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <I2C_Master_ADDR+0x54>
 8003aca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d10b      	bne.n	8003aea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	e16b      	b.n	8003dc2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d11d      	bne.n	8003b2e <I2C_Master_ADDR+0x98>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003afa:	d118      	bne.n	8003b2e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b20:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b2c:	e149      	b.n	8003dc2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d113      	bne.n	8003b60 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e120      	b.n	8003da2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	f040 808a 	bne.w	8003c80 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b72:	d137      	bne.n	8003be4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b92:	d113      	bne.n	8003bbc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	e0f2      	b.n	8003da2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	623b      	str	r3, [r7, #32]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e0de      	b.n	8003da2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d02e      	beq.n	8003c48 <I2C_Master_ADDR+0x1b2>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d02b      	beq.n	8003c48 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	2b12      	cmp	r3, #18
 8003bf4:	d102      	bne.n	8003bfc <I2C_Master_ADDR+0x166>
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d125      	bne.n	8003c48 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d00e      	beq.n	8003c20 <I2C_Master_ADDR+0x18a>
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d00b      	beq.n	8003c20 <I2C_Master_ADDR+0x18a>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d008      	beq.n	8003c20 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e007      	b.n	8003c30 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c2e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	e0ac      	b.n	8003da2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e090      	b.n	8003da2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d158      	bne.n	8003d3c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d021      	beq.n	8003cd4 <I2C_Master_ADDR+0x23e>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d01e      	beq.n	8003cd4 <I2C_Master_ADDR+0x23e>
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d01b      	beq.n	8003cd4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003caa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e012      	b.n	8003cfa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d08:	d14b      	bne.n	8003da2 <I2C_Master_ADDR+0x30c>
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d10:	d00b      	beq.n	8003d2a <I2C_Master_ADDR+0x294>
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d008      	beq.n	8003d2a <I2C_Master_ADDR+0x294>
 8003d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d005      	beq.n	8003d2a <I2C_Master_ADDR+0x294>
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d002      	beq.n	8003d2a <I2C_Master_ADDR+0x294>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d13b      	bne.n	8003da2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	e032      	b.n	8003da2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d117      	bne.n	8003d8c <I2C_Master_ADDR+0x2f6>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d62:	d00b      	beq.n	8003d7c <I2C_Master_ADDR+0x2e6>
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d008      	beq.n	8003d7c <I2C_Master_ADDR+0x2e6>
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d005      	beq.n	8003d7c <I2C_Master_ADDR+0x2e6>
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d002      	beq.n	8003d7c <I2C_Master_ADDR+0x2e6>
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d107      	bne.n	8003d8c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003da8:	e00b      	b.n	8003dc2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
}
 8003dc0:	e7ff      	b.n	8003dc2 <I2C_Master_ADDR+0x32c>
 8003dc2:	bf00      	nop
 8003dc4:	3744      	adds	r7, #68	; 0x44
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02b      	beq.n	8003e3e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d114      	bne.n	8003e3e <I2C_SlaveTransmit_TXE+0x72>
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b29      	cmp	r3, #41	; 0x29
 8003e18:	d111      	bne.n	8003e3e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2221      	movs	r2, #33	; 0x21
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2228      	movs	r2, #40	; 0x28
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff f9cf 	bl	80031dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d011      	beq.n	8003e7c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02c      	beq.n	8003efa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d114      	bne.n	8003efa <I2C_SlaveReceive_RXNE+0x74>
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed4:	d111      	bne.n	8003efa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2222      	movs	r2, #34	; 0x22
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2228      	movs	r2, #40	; 0x28
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff f97a 	bl	80031ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f5e:	2b28      	cmp	r3, #40	; 0x28
 8003f60:	d127      	bne.n	8003fb2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	09db      	lsrs	r3, r3, #7
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	81bb      	strh	r3, [r7, #12]
 8003f94:	e002      	b.n	8003f9c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003fa4:	89ba      	ldrh	r2, [r7, #12]
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff f928 	bl	8003200 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fb0:	e00e      	b.n	8003fd0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004034:	d172      	bne.n	800411c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b22      	cmp	r3, #34	; 0x22
 800403a:	d002      	beq.n	8004042 <I2C_Slave_STOPF+0x6a>
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b2a      	cmp	r3, #42	; 0x2a
 8004040:	d135      	bne.n	80040ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0204 	orr.w	r2, r3, #4
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004074:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe f810 	bl	80020a0 <HAL_DMA_GetState>
 8004080:	4603      	mov	r3, r0
 8004082:	2b01      	cmp	r3, #1
 8004084:	d049      	beq.n	800411a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	4a69      	ldr	r2, [pc, #420]	; (8004230 <I2C_Slave_STOPF+0x258>)
 800408c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd ff8c 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d03d      	beq.n	800411a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a8:	4610      	mov	r0, r2
 80040aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ac:	e035      	b.n	800411a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd ffda 	bl	80020a0 <HAL_DMA_GetState>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d014      	beq.n	800411c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	4a4e      	ldr	r2, [pc, #312]	; (8004230 <I2C_Slave_STOPF+0x258>)
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd ff56 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
 8004118:	e000      	b.n	800411c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800411a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d03e      	beq.n	80041a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d112      	bne.n	800415a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b40      	cmp	r3, #64	; 0x40
 8004166:	d112      	bne.n	800418e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8b7 	bl	8004320 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041b2:	e039      	b.n	8004228 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b2a      	cmp	r3, #42	; 0x2a
 80041b8:	d109      	bne.n	80041ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2228      	movs	r2, #40	; 0x28
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff f810 	bl	80031ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b28      	cmp	r3, #40	; 0x28
 80041d8:	d111      	bne.n	80041fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <I2C_Slave_STOPF+0x25c>)
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff f80f 	bl	800321a <HAL_I2C_ListenCpltCallback>
}
 80041fc:	e014      	b.n	8004228 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2b22      	cmp	r3, #34	; 0x22
 8004204:	d002      	beq.n	800420c <I2C_Slave_STOPF+0x234>
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b22      	cmp	r3, #34	; 0x22
 800420a:	d10d      	bne.n	8004228 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fe ffe3 	bl	80031ee <HAL_I2C_SlaveRxCpltCallback>
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	08004825 	.word	0x08004825
 8004234:	ffff0000 	.word	0xffff0000

08004238 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d002      	beq.n	800425a <I2C_Slave_AF+0x22>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b20      	cmp	r3, #32
 8004258:	d129      	bne.n	80042ae <I2C_Slave_AF+0x76>
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b28      	cmp	r3, #40	; 0x28
 800425e:	d126      	bne.n	80042ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2e      	ldr	r2, [pc, #184]	; (800431c <I2C_Slave_AF+0xe4>)
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004274:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800427e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe ffb7 	bl	800321a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80042ac:	e031      	b.n	8004312 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d129      	bne.n	8004308 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a19      	ldr	r2, [pc, #100]	; (800431c <I2C_Slave_AF+0xe4>)
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fe f9be 	bl	800267c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fe ff6b 	bl	80031dc <HAL_I2C_SlaveTxCpltCallback>
}
 8004306:	e004      	b.n	8004312 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004310:	615a      	str	r2, [r3, #20]
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	ffff0000 	.word	0xffff0000

08004320 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004336:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004338:	7bbb      	ldrb	r3, [r7, #14]
 800433a:	2b10      	cmp	r3, #16
 800433c:	d002      	beq.n	8004344 <I2C_ITError+0x24>
 800433e:	7bbb      	ldrb	r3, [r7, #14]
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d10a      	bne.n	800435a <I2C_ITError+0x3a>
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b22      	cmp	r3, #34	; 0x22
 8004348:	d107      	bne.n	800435a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004358:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004360:	2b28      	cmp	r3, #40	; 0x28
 8004362:	d107      	bne.n	8004374 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2228      	movs	r2, #40	; 0x28
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004372:	e015      	b.n	80043a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004382:	d00a      	beq.n	800439a <I2C_ITError+0x7a>
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b60      	cmp	r3, #96	; 0x60
 8004388:	d007      	beq.n	800439a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ae:	d162      	bne.n	8004476 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d020      	beq.n	8004410 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	4a6a      	ldr	r2, [pc, #424]	; (800457c <I2C_ITError+0x25c>)
 80043d4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd fde8 	bl	8001fb0 <HAL_DMA_Abort_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8089 	beq.w	80044fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800440a:	4610      	mov	r0, r2
 800440c:	4798      	blx	r3
 800440e:	e074      	b.n	80044fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	4a59      	ldr	r2, [pc, #356]	; (800457c <I2C_ITError+0x25c>)
 8004416:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fdc7 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d068      	beq.n	80044fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d10b      	bne.n	800444e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
 8004474:	e041      	b.n	80044fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b60      	cmp	r3, #96	; 0x60
 8004480:	d125      	bne.n	80044ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d10b      	bne.n	80044b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fe fecb 	bl	8003262 <HAL_I2C_AbortCpltCallback>
 80044cc:	e015      	b.n	80044fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d10b      	bne.n	80044f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fe feab 	bl	8003250 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10e      	bne.n	8004528 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d113      	bne.n	8004574 <I2C_ITError+0x254>
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b28      	cmp	r3, #40	; 0x28
 8004550:	d110      	bne.n	8004574 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <I2C_ITError+0x260>)
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe fe53 	bl	800321a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	08004825 	.word	0x08004825
 8004580:	ffff0000 	.word	0xffff0000

08004584 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	460b      	mov	r3, r1
 8004592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d006      	beq.n	80045ae <I2C_MasterRequestWrite+0x2a>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d003      	beq.n	80045ae <I2C_MasterRequestWrite+0x2a>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00b      	b.n	80045d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	2b12      	cmp	r3, #18
 80045c6:	d107      	bne.n	80045d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f9c5 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d103      	bne.n	8004608 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e035      	b.n	8004678 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004614:	d108      	bne.n	8004628 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004624:	611a      	str	r2, [r3, #16]
 8004626:	e01b      	b.n	8004660 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004628:	897b      	ldrh	r3, [r7, #10]
 800462a:	11db      	asrs	r3, r3, #7
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0306 	and.w	r3, r3, #6
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f063 030f 	orn	r3, r3, #15
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	490e      	ldr	r1, [pc, #56]	; (8004680 <I2C_MasterRequestWrite+0xfc>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fa0e 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e010      	b.n	8004678 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4907      	ldr	r1, [pc, #28]	; (8004684 <I2C_MasterRequestWrite+0x100>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f9fe 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	00010008 	.word	0x00010008
 8004684:	00010002 	.word	0x00010002

08004688 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	460b      	mov	r3, r1
 8004696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d006      	beq.n	80046c2 <I2C_MasterRequestRead+0x3a>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d003      	beq.n	80046c2 <I2C_MasterRequestRead+0x3a>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046c0:	d108      	bne.n	80046d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e00b      	b.n	80046ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	2b11      	cmp	r3, #17
 80046da:	d107      	bne.n	80046ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f93b 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d103      	bne.n	800471c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e079      	b.n	8004814 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004728:	d108      	bne.n	800473c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800472a:	897b      	ldrh	r3, [r7, #10]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	611a      	str	r2, [r3, #16]
 800473a:	e05f      	b.n	80047fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800473c:	897b      	ldrh	r3, [r7, #10]
 800473e:	11db      	asrs	r3, r3, #7
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f003 0306 	and.w	r3, r3, #6
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f063 030f 	orn	r3, r3, #15
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4930      	ldr	r1, [pc, #192]	; (800481c <I2C_MasterRequestRead+0x194>)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f984 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e054      	b.n	8004814 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4929      	ldr	r1, [pc, #164]	; (8004820 <I2C_MasterRequestRead+0x198>)
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f974 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e044      	b.n	8004814 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f8d9 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	d103      	bne.n	80047e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e017      	b.n	8004814 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047e4:	897b      	ldrh	r3, [r7, #10]
 80047e6:	11db      	asrs	r3, r3, #7
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 0306 	and.w	r3, r3, #6
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f063 030e 	orn	r3, r3, #14
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4907      	ldr	r1, [pc, #28]	; (8004820 <I2C_MasterRequestRead+0x198>)
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f930 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	00010008 	.word	0x00010008
 8004820:	00010002 	.word	0x00010002

08004824 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800483e:	4b4b      	ldr	r3, [pc, #300]	; (800496c <I2C_DMAAbort+0x148>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	08db      	lsrs	r3, r3, #3
 8004844:	4a4a      	ldr	r2, [pc, #296]	; (8004970 <I2C_DMAAbort+0x14c>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0a1a      	lsrs	r2, r3, #8
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800486a:	e00a      	b.n	8004882 <I2C_DMAAbort+0x5e>
    }
    count--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3b01      	subs	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004880:	d0ea      	beq.n	8004858 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	2200      	movs	r2, #0
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	2200      	movs	r2, #0
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	2200      	movs	r2, #0
 80048c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	2200      	movs	r2, #0
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b60      	cmp	r3, #96	; 0x60
 80048f2:	d10e      	bne.n	8004912 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2200      	movs	r2, #0
 8004908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7fe fca9 	bl	8003262 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004910:	e027      	b.n	8004962 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004918:	2b28      	cmp	r3, #40	; 0x28
 800491a:	d117      	bne.n	800494c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800493a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2228      	movs	r2, #40	; 0x28
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800494a:	e007      	b.n	800495c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800495c:	6978      	ldr	r0, [r7, #20]
 800495e:	f7fe fc77 	bl	8003250 <HAL_I2C_ErrorCallback>
}
 8004962:	bf00      	nop
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2000000c 	.word	0x2000000c
 8004970:	14f8b589 	.word	0x14f8b589

08004974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004984:	e048      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d044      	beq.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fd f999 	bl	8001cc4 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d139      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10d      	bne.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	43da      	mvns	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	e00c      	b.n	80049e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d116      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e023      	b.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10d      	bne.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	e00c      	b.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d093      	beq.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a76:	e071      	b.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	d123      	bne.n	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e067      	b.n	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d041      	beq.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad8:	f7fd f8f4 	bl	8001cc4 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d136      	bne.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10c      	bne.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e00b      	b.n	8004b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e021      	b.n	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10c      	bne.n	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e00b      	b.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	2300      	moveq	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f af6d 	bne.w	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb4:	e034      	b.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f915 	bl	8004de6 <I2C_IsAcknowledgeFailed>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e034      	b.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d028      	beq.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fd f879 	bl	8001cc4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11d      	bne.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d016      	beq.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e007      	b.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d1c3      	bne.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f8cd 	bl	8004de6 <I2C_IsAcknowledgeFailed>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e034      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d028      	beq.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fd f831 	bl	8001cc4 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11d      	bne.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d016      	beq.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e007      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d1c3      	bne.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	0a1a      	lsrs	r2, r3, #8
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e008      	b.n	8004d18 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d14:	d0e9      	beq.n	8004cea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	2000000c 	.word	0x2000000c
 8004d28:	14f8b589 	.word	0x14f8b589

08004d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d38:	e049      	b.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d119      	bne.n	8004d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0210 	mvn.w	r2, #16
 8004d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e030      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7c:	f7fc ffa2 	bl	8001cc4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d11d      	bne.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d016      	beq.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e007      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d1ae      	bne.n	8004d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfc:	d11b      	bne.n	8004e36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e52:	d103      	bne.n	8004e5c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e5a:	e007      	b.n	8004e6c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e64:	d102      	bne.n	8004e6c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2208      	movs	r2, #8
 8004e6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e26c      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 8087 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e98:	4b92      	ldr	r3, [pc, #584]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d00c      	beq.n	8004ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ea4:	4b8f      	ldr	r3, [pc, #572]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d112      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x5e>
 8004eb0:	4b8c      	ldr	r3, [pc, #560]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebc:	d10b      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebe:	4b89      	ldr	r3, [pc, #548]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d06c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x12c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d168      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e246      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x76>
 8004ee0:	4b80      	ldr	r3, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7f      	ldr	r2, [pc, #508]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e02e      	b.n	8004f4c <HAL_RCC_OscConfig+0xd4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x98>
 8004ef6:	4b7b      	ldr	r3, [pc, #492]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b78      	ldr	r3, [pc, #480]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a77      	ldr	r2, [pc, #476]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e01d      	b.n	8004f4c <HAL_RCC_OscConfig+0xd4>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0xbc>
 8004f1a:	4b72      	ldr	r3, [pc, #456]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a71      	ldr	r2, [pc, #452]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b6f      	ldr	r3, [pc, #444]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a6e      	ldr	r2, [pc, #440]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_OscConfig+0xd4>
 8004f34:	4b6b      	ldr	r3, [pc, #428]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6a      	ldr	r2, [pc, #424]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4b68      	ldr	r3, [pc, #416]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a67      	ldr	r2, [pc, #412]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fc feb6 	bl	8001cc4 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7fc feb2 	bl	8001cc4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	; 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1fa      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0xe4>
 8004f7a:	e014      	b.n	8004fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fea2 	bl	8001cc4 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f84:	f7fc fe9e 	bl	8001cc4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	; 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e1e6      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f96:	4b53      	ldr	r3, [pc, #332]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x10c>
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d063      	beq.n	800507a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb2:	4b4c      	ldr	r3, [pc, #304]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fbe:	4b49      	ldr	r3, [pc, #292]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d11c      	bne.n	8005004 <HAL_RCC_OscConfig+0x18c>
 8004fca:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_RCC_OscConfig+0x176>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e1ba      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4939      	ldr	r1, [pc, #228]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005002:	e03a      	b.n	800507a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800500c:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <HAL_RCC_OscConfig+0x270>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fc fe57 	bl	8001cc4 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501a:	f7fc fe53 	bl	8001cc4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e19b      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	4b2a      	ldr	r3, [pc, #168]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4927      	ldr	r1, [pc, #156]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504e:	4b26      	ldr	r3, [pc, #152]	; (80050e8 <HAL_RCC_OscConfig+0x270>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005054:	f7fc fe36 	bl	8001cc4 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505c:	f7fc fe32 	bl	8001cc4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e17a      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506e:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d03a      	beq.n	80050fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d019      	beq.n	80050c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <HAL_RCC_OscConfig+0x274>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005094:	f7fc fe16 	bl	8001cc4 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509c:	f7fc fe12 	bl	8001cc4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e15a      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050ba:	2001      	movs	r0, #1
 80050bc:	f000 facc 	bl	8005658 <RCC_Delay>
 80050c0:	e01c      	b.n	80050fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_RCC_OscConfig+0x274>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c8:	f7fc fdfc 	bl	8001cc4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ce:	e00f      	b.n	80050f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d0:	f7fc fdf8 	bl	8001cc4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d908      	bls.n	80050f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e140      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	42420000 	.word	0x42420000
 80050ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	4b9e      	ldr	r3, [pc, #632]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e9      	bne.n	80050d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80a6 	beq.w	8005256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510e:	4b97      	ldr	r3, [pc, #604]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10d      	bne.n	8005136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b94      	ldr	r3, [pc, #592]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4a93      	ldr	r2, [pc, #588]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	61d3      	str	r3, [r2, #28]
 8005126:	4b91      	ldr	r3, [pc, #580]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	4b8e      	ldr	r3, [pc, #568]	; (8005370 <HAL_RCC_OscConfig+0x4f8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d118      	bne.n	8005174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005142:	4b8b      	ldr	r3, [pc, #556]	; (8005370 <HAL_RCC_OscConfig+0x4f8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a8a      	ldr	r2, [pc, #552]	; (8005370 <HAL_RCC_OscConfig+0x4f8>)
 8005148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514e:	f7fc fdb9 	bl	8001cc4 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005156:	f7fc fdb5 	bl	8001cc4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	; 0x64
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e0fd      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005168:	4b81      	ldr	r3, [pc, #516]	; (8005370 <HAL_RCC_OscConfig+0x4f8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x312>
 800517c:	4b7b      	ldr	r3, [pc, #492]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	4a7a      	ldr	r2, [pc, #488]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6213      	str	r3, [r2, #32]
 8005188:	e02d      	b.n	80051e6 <HAL_RCC_OscConfig+0x36e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x334>
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4a75      	ldr	r2, [pc, #468]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6213      	str	r3, [r2, #32]
 800519e:	4b73      	ldr	r3, [pc, #460]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4a72      	ldr	r2, [pc, #456]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6213      	str	r3, [r2, #32]
 80051aa:	e01c      	b.n	80051e6 <HAL_RCC_OscConfig+0x36e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b05      	cmp	r3, #5
 80051b2:	d10c      	bne.n	80051ce <HAL_RCC_OscConfig+0x356>
 80051b4:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	4a6c      	ldr	r2, [pc, #432]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	6213      	str	r3, [r2, #32]
 80051c0:	4b6a      	ldr	r3, [pc, #424]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	4a69      	ldr	r2, [pc, #420]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6213      	str	r3, [r2, #32]
 80051cc:	e00b      	b.n	80051e6 <HAL_RCC_OscConfig+0x36e>
 80051ce:	4b67      	ldr	r3, [pc, #412]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	4a66      	ldr	r2, [pc, #408]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6213      	str	r3, [r2, #32]
 80051da:	4b64      	ldr	r3, [pc, #400]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4a63      	ldr	r2, [pc, #396]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ee:	f7fc fd69 	bl	8001cc4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fc fd65 	bl	8001cc4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0ab      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	4b57      	ldr	r3, [pc, #348]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ee      	beq.n	80051f6 <HAL_RCC_OscConfig+0x37e>
 8005218:	e014      	b.n	8005244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521a:	f7fc fd53 	bl	8001cc4 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fc fd4f 	bl	8001cc4 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e095      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	4b4c      	ldr	r3, [pc, #304]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1ee      	bne.n	8005222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b48      	ldr	r3, [pc, #288]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4a47      	ldr	r2, [pc, #284]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8081 	beq.w	8005362 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005260:	4b42      	ldr	r3, [pc, #264]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d061      	beq.n	8005330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d146      	bne.n	8005302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <HAL_RCC_OscConfig+0x4fc>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc fd23 	bl	8001cc4 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc fd1f 	bl	8001cc4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e067      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005294:	4b35      	ldr	r3, [pc, #212]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a8:	d108      	bne.n	80052bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052aa:	4b30      	ldr	r3, [pc, #192]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	492d      	ldr	r1, [pc, #180]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052bc:	4b2b      	ldr	r3, [pc, #172]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a19      	ldr	r1, [r3, #32]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	430b      	orrs	r3, r1
 80052ce:	4927      	ldr	r1, [pc, #156]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x4fc>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052da:	f7fc fcf3 	bl	8001cc4 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fc fcef 	bl	8001cc4 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e037      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x46a>
 8005300:	e02f      	b.n	8005362 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCC_OscConfig+0x4fc>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fc fcdc 	bl	8001cc4 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fc fcd8 	bl	8001cc4 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e020      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x498>
 800532e:	e018      	b.n	8005362 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e013      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_OscConfig+0x4f4>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	429a      	cmp	r2, r3
 800534e:	d106      	bne.n	800535e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d001      	beq.n	8005362 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
 8005374:	42420060 	.word	0x42420060

08005378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0d0      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d910      	bls.n	80053bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b67      	ldr	r3, [pc, #412]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0207 	bic.w	r2, r3, #7
 80053a2:	4965      	ldr	r1, [pc, #404]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4a52      	ldr	r2, [pc, #328]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d040      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d115      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e073      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3d      	ldr	r3, [pc, #244]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06b      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4936      	ldr	r1, [pc, #216]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7fc fc2c 	bl	8001cc4 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fc fc28 	bl	8001cc4 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e053      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d210      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 0207 	bic.w	r2, r3, #7
 80054ae:	4922      	ldr	r1, [pc, #136]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1cc>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1d0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc fb8a 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40022000 	.word	0x40022000
 800553c:	40021000 	.word	0x40021000
 8005540:	08009738 	.word	0x08009738
 8005544:	2000000c 	.word	0x2000000c
 8005548:	20000010 	.word	0x20000010

0800554c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005566:	4b1e      	ldr	r3, [pc, #120]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b04      	cmp	r3, #4
 8005574:	d002      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0x30>
 8005576:	2b08      	cmp	r3, #8
 8005578:	d003      	beq.n	8005582 <HAL_RCC_GetSysClockFreq+0x36>
 800557a:	e027      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800557c:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800557e:	613b      	str	r3, [r7, #16]
      break;
 8005580:	e027      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	0c9b      	lsrs	r3, r3, #18
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	4a17      	ldr	r2, [pc, #92]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d010      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	0c5b      	lsrs	r3, r3, #17
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	4a11      	ldr	r2, [pc, #68]	; (80055ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80055a6:	5cd3      	ldrb	r3, [r2, r3]
 80055a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80055ae:	fb02 f203 	mul.w	r2, r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e004      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	613b      	str	r3, [r7, #16]
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80055ce:	613b      	str	r3, [r7, #16]
      break;
 80055d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d2:	693b      	ldr	r3, [r7, #16]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	007a1200 	.word	0x007a1200
 80055e8:	08009750 	.word	0x08009750
 80055ec:	08009760 	.word	0x08009760
 80055f0:	003d0900 	.word	0x003d0900

080055f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <HAL_RCC_GetHCLKFreq+0x10>)
 80055fa:	681b      	ldr	r3, [r3, #0]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	2000000c 	.word	0x2000000c

08005608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800560c:	f7ff fff2 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4903      	ldr	r1, [pc, #12]	; (800562c <HAL_RCC_GetPCLK1Freq+0x24>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	08009748 	.word	0x08009748

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005634:	f7ff ffde 	bl	80055f4 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	0adb      	lsrs	r3, r3, #11
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4903      	ldr	r1, [pc, #12]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	08009748 	.word	0x08009748

08005658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <RCC_Delay+0x34>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <RCC_Delay+0x38>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	0a5b      	lsrs	r3, r3, #9
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005674:	bf00      	nop
  }
  while (Delay --);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	60fa      	str	r2, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f9      	bne.n	8005674 <RCC_Delay+0x1c>
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c
 8005690:	10624dd3 	.word	0x10624dd3

08005694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e041      	b.n	800572a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc f8f8 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f000 fa5c 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e03a      	b.n	80057c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_TIM_Base_Start_IT+0x98>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x58>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d009      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x58>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x58>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d111      	bne.n	80057b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b06      	cmp	r3, #6
 800579c:	d010      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	e007      	b.n	80057c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0201 	orr.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800

080057d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f998 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f98b 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f99a 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0204 	mvn.w	r2, #4
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f972 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f965 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f974 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0208 	mvn.w	r2, #8
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f94c 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f93f 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f94e 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d020      	beq.n	8005920 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0210 	mvn.w	r2, #16
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2208      	movs	r2, #8
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f926 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f919 	bl	8005b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f928 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0201 	mvn.w	r2, #1
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb feb8 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa7f 	bl	8005e66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00c      	beq.n	800598c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8f8 	bl	8005b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0220 	mvn.w	r2, #32
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa52 	bl	8005e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_ConfigClockSource+0x1c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e0b4      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x186>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0c:	d03e      	beq.n	8005a8c <HAL_TIM_ConfigClockSource+0xd4>
 8005a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a12:	f200 8087 	bhi.w	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1a:	f000 8086 	beq.w	8005b2a <HAL_TIM_ConfigClockSource+0x172>
 8005a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a22:	d87f      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b70      	cmp	r3, #112	; 0x70
 8005a26:	d01a      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0xa6>
 8005a28:	2b70      	cmp	r3, #112	; 0x70
 8005a2a:	d87b      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b60      	cmp	r3, #96	; 0x60
 8005a2e:	d050      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a30:	2b60      	cmp	r3, #96	; 0x60
 8005a32:	d877      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b50      	cmp	r3, #80	; 0x50
 8005a36:	d03c      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8005a38:	2b50      	cmp	r3, #80	; 0x50
 8005a3a:	d873      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d058      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d86f      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b30      	cmp	r3, #48	; 0x30
 8005a46:	d064      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	2b30      	cmp	r3, #48	; 0x30
 8005a4a:	d86b      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d060      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d867      	bhi.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d05c      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d05a      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x15a>
 8005a5c:	e062      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6899      	ldr	r1, [r3, #8]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f000 f974 	bl	8005d5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	609a      	str	r2, [r3, #8]
      break;
 8005a8a:	e04f      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6899      	ldr	r1, [r3, #8]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f000 f95d 	bl	8005d5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aae:	609a      	str	r2, [r3, #8]
      break;
 8005ab0:	e03c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 f8d4 	bl	8005c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2150      	movs	r1, #80	; 0x50
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f92b 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e02c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f000 f8f2 	bl	8005cc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2160      	movs	r1, #96	; 0x60
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f91b 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 8005af0:	e01c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6859      	ldr	r1, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f000 f8b4 	bl	8005c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2140      	movs	r1, #64	; 0x40
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f90b 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 8005b10:	e00c      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f000 f902 	bl	8005d26 <TIM_ITRx_SetConfig>
      break;
 8005b22:	e003      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e000      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr
	...

08005b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2f      	ldr	r2, [pc, #188]	; (8005c60 <TIM_Base_SetConfig+0xd0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00b      	beq.n	8005bc0 <TIM_Base_SetConfig+0x30>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d007      	beq.n	8005bc0 <TIM_Base_SetConfig+0x30>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2c      	ldr	r2, [pc, #176]	; (8005c64 <TIM_Base_SetConfig+0xd4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0x30>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <TIM_Base_SetConfig+0xd8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d108      	bne.n	8005bd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <TIM_Base_SetConfig+0xd0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <TIM_Base_SetConfig+0x62>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d007      	beq.n	8005bf2 <TIM_Base_SetConfig+0x62>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <TIM_Base_SetConfig+0xd4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_Base_SetConfig+0x62>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <TIM_Base_SetConfig+0xd8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d108      	bne.n	8005c04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0d      	ldr	r2, [pc, #52]	; (8005c60 <TIM_Base_SetConfig+0xd0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d103      	bne.n	8005c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]
  }
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800

08005c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f023 0201 	bic.w	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 030a 	bic.w	r3, r3, #10
 8005ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0210 	bic.w	r2, r3, #16
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	031b      	lsls	r3, r3, #12
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr

08005d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f043 0307 	orr.w	r3, r3, #7
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	609a      	str	r2, [r3, #8]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	021a      	lsls	r2, r3, #8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	609a      	str	r2, [r3, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e046      	b.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a16      	ldr	r2, [pc, #88]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10c      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800

08005e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e042      	b.n	8005f10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fb fd2a 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2224      	movs	r2, #36	; 0x24
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fc7f 	bl	80067c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695a      	ldr	r2, [r3, #20]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b0ba      	sub	sp, #232	; 0xe8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10f      	bne.n	8005f7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_UART_IRQHandler+0x66>
 8005f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fb63 	bl	8006642 <UART_Receive_IT>
      return;
 8005f7c:	e25b      	b.n	8006436 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80de 	beq.w	8006144 <HAL_UART_IRQHandler+0x22c>
 8005f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80d1 	beq.w	8006144 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xae>
 8005fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_UART_IRQHandler+0xd2>
 8005fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f043 0202 	orr.w	r2, r3, #2
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <HAL_UART_IRQHandler+0xf6>
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d011      	beq.n	800603e <HAL_UART_IRQHandler+0x126>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	f043 0208 	orr.w	r2, r3, #8
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 81f2 	beq.w	800642c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_UART_IRQHandler+0x14e>
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 faee 	bl	8006642 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <HAL_UART_IRQHandler+0x17a>
 800608a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d04f      	beq.n	8006132 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9f8 	bl	8006488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d041      	beq.n	800612a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1d9      	bne.n	80060a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d013      	beq.n	8006122 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	4a7e      	ldr	r2, [pc, #504]	; (80062f8 <HAL_UART_IRQHandler+0x3e0>)
 8006100:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	4618      	mov	r0, r3
 8006108:	f7fb ff52 	bl	8001fb0 <HAL_DMA_Abort_IT>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d016      	beq.n	8006140 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	e00e      	b.n	8006140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f99c 	bl	8006460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006128:	e00a      	b.n	8006140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f998 	bl	8006460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	e006      	b.n	8006140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f994 	bl	8006460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800613e:	e175      	b.n	800642c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	bf00      	nop
    return;
 8006142:	e173      	b.n	800642c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	2b01      	cmp	r3, #1
 800614a:	f040 814f 	bne.w	80063ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8148 	beq.w	80063ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8141 	beq.w	80063ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	60bb      	str	r3, [r7, #8]
 800617e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80b6 	beq.w	80062fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800619c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8145 	beq.w	8006430 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ae:	429a      	cmp	r2, r3
 80061b0:	f080 813e 	bcs.w	8006430 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	f000 8088 	beq.w	80062d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	330c      	adds	r3, #12
 80061f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006200:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800620c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1d9      	bne.n	80061c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006238:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800623c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006240:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800624a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e1      	bne.n	8006214 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006274:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800627a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e3      	bne.n	8006250 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80062bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e3      	bne.n	8006296 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fb fe31 	bl	8001f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8bf 	bl	8006472 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062f4:	e09c      	b.n	8006430 <HAL_UART_IRQHandler+0x518>
 80062f6:	bf00      	nop
 80062f8:	0800654d 	.word	0x0800654d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006304:	b29b      	uxth	r3, r3
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 808e 	beq.w	8006434 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006318:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8089 	beq.w	8006434 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006346:	647a      	str	r2, [r7, #68]	; 0x44
 8006348:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800634c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e3      	bne.n	8006322 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3314      	adds	r3, #20
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	623b      	str	r3, [r7, #32]
   return(result);
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3314      	adds	r3, #20
 800637a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800637e:	633a      	str	r2, [r7, #48]	; 0x30
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e3      	bne.n	800635a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0310 	bic.w	r3, r3, #16
 80063b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	69b9      	ldr	r1, [r7, #24]
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	617b      	str	r3, [r7, #20]
   return(result);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e3      	bne.n	80063a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f844 	bl	8006472 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063ea:	e023      	b.n	8006434 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <HAL_UART_IRQHandler+0x4f4>
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f8b5 	bl	8006574 <UART_Transmit_IT>
    return;
 800640a:	e014      	b.n	8006436 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00e      	beq.n	8006436 <HAL_UART_IRQHandler+0x51e>
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f8f4 	bl	8006612 <UART_EndTransmit_IT>
    return;
 800642a:	e004      	b.n	8006436 <HAL_UART_IRQHandler+0x51e>
    return;
 800642c:	bf00      	nop
 800642e:	e002      	b.n	8006436 <HAL_UART_IRQHandler+0x51e>
      return;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <HAL_UART_IRQHandler+0x51e>
      return;
 8006434:	bf00      	nop
  }
}
 8006436:	37e8      	adds	r7, #232	; 0xe8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr

0800644e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr

08006488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b095      	sub	sp, #84	; 0x54
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064b0:	643a      	str	r2, [r7, #64]	; 0x40
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	64bb      	str	r3, [r7, #72]	; 0x48
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3314      	adds	r3, #20
 80064e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d119      	bne.n	8006534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f023 0310 	bic.w	r3, r3, #16
 8006516:	647b      	str	r3, [r7, #68]	; 0x44
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	330c      	adds	r3, #12
 800651e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006520:	61ba      	str	r2, [r7, #24]
 8006522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6979      	ldr	r1, [r7, #20]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	613b      	str	r3, [r7, #16]
   return(result);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e5      	bne.n	8006500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006542:	bf00      	nop
 8006544:	3754      	adds	r7, #84	; 0x54
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff ff7a 	bl	8006460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b21      	cmp	r3, #33	; 0x21
 8006586:	d13e      	bne.n	8006606 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006590:	d114      	bne.n	80065bc <UART_Transmit_IT+0x48>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d110      	bne.n	80065bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	621a      	str	r2, [r3, #32]
 80065ba:	e008      	b.n	80065ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6211      	str	r1, [r2, #32]
 80065c6:	781a      	ldrb	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4619      	mov	r1, r3
 80065dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006600:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
  }
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006628:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff ff02 	bl	800643c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b08c      	sub	sp, #48	; 0x30
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b22      	cmp	r3, #34	; 0x22
 8006654:	f040 80ae 	bne.w	80067b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006660:	d117      	bne.n	8006692 <UART_Receive_IT+0x50>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d113      	bne.n	8006692 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006680:	b29a      	uxth	r2, r3
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	1c9a      	adds	r2, r3, #2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	629a      	str	r2, [r3, #40]	; 0x28
 8006690:	e026      	b.n	80066e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a4:	d007      	beq.n	80066b6 <UART_Receive_IT+0x74>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <UART_Receive_IT+0x82>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e008      	b.n	80066d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4619      	mov	r1, r3
 80066ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d15d      	bne.n	80067b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0220 	bic.w	r2, r2, #32
 8006702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695a      	ldr	r2, [r3, #20]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	2b01      	cmp	r3, #1
 8006738:	d135      	bne.n	80067a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	613b      	str	r3, [r7, #16]
   return(result);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006760:	623a      	str	r2, [r7, #32]
 8006762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	69f9      	ldr	r1, [r7, #28]
 8006766:	6a3a      	ldr	r2, [r7, #32]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	61bb      	str	r3, [r7, #24]
   return(result);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e5      	bne.n	8006740 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b10      	cmp	r3, #16
 8006780:	d10a      	bne.n	8006798 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fe67 	bl	8006472 <HAL_UARTEx_RxEventCallback>
 80067a4:	e002      	b.n	80067ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fe51 	bl	800644e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e002      	b.n	80067b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	; 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80067fa:	f023 030c 	bic.w	r3, r3, #12
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	430b      	orrs	r3, r1
 8006806:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <UART_SetConfig+0x114>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d103      	bne.n	8006830 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006828:	f7fe ff02 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	e002      	b.n	8006836 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fe feea 	bl	8005608 <HAL_RCC_GetPCLK1Freq>
 8006834:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009a      	lsls	r2, r3, #2
 8006840:	441a      	add	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <UART_SetConfig+0x118>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	0119      	lsls	r1, r3, #4
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	009a      	lsls	r2, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	fbb2 f2f3 	udiv	r2, r2, r3
 800686c:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <UART_SetConfig+0x118>)
 800686e:	fba3 0302 	umull	r0, r3, r3, r2
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	2064      	movs	r0, #100	; 0x64
 8006876:	fb00 f303 	mul.w	r3, r0, r3
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	3332      	adds	r3, #50	; 0x32
 8006880:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <UART_SetConfig+0x118>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800688c:	4419      	add	r1, r3
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009a      	lsls	r2, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <UART_SetConfig+0x118>)
 80068a6:	fba3 0302 	umull	r0, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	2064      	movs	r0, #100	; 0x64
 80068ae:	fb00 f303 	mul.w	r3, r0, r3
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	3332      	adds	r3, #50	; 0x32
 80068b8:	4a07      	ldr	r2, [pc, #28]	; (80068d8 <UART_SetConfig+0x118>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	f003 020f 	and.w	r2, r3, #15
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	440a      	add	r2, r1
 80068ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40013800 	.word	0x40013800
 80068d8:	51eb851f 	.word	0x51eb851f

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	; (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000018 	.word	0x20000018

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	2600      	movs	r6, #0
 80068ec:	4d0c      	ldr	r5, [pc, #48]	; (8006920 <__libc_init_array+0x38>)
 80068ee:	4c0d      	ldr	r4, [pc, #52]	; (8006924 <__libc_init_array+0x3c>)
 80068f0:	1b64      	subs	r4, r4, r5
 80068f2:	10a4      	asrs	r4, r4, #2
 80068f4:	42a6      	cmp	r6, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	f002 fed0 	bl	800969c <_init>
 80068fc:	2600      	movs	r6, #0
 80068fe:	4d0a      	ldr	r5, [pc, #40]	; (8006928 <__libc_init_array+0x40>)
 8006900:	4c0a      	ldr	r4, [pc, #40]	; (800692c <__libc_init_array+0x44>)
 8006902:	1b64      	subs	r4, r4, r5
 8006904:	10a4      	asrs	r4, r4, #2
 8006906:	42a6      	cmp	r6, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006910:	4798      	blx	r3
 8006912:	3601      	adds	r6, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f855 3b04 	ldr.w	r3, [r5], #4
 800691a:	4798      	blx	r3
 800691c:	3601      	adds	r6, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	08009b44 	.word	0x08009b44
 8006924:	08009b44 	.word	0x08009b44
 8006928:	08009b44 	.word	0x08009b44
 800692c:	08009b48 	.word	0x08009b48

08006930 <memset>:
 8006930:	4603      	mov	r3, r0
 8006932:	4402      	add	r2, r0
 8006934:	4293      	cmp	r3, r2
 8006936:	d100      	bne.n	800693a <memset+0xa>
 8006938:	4770      	bx	lr
 800693a:	f803 1b01 	strb.w	r1, [r3], #1
 800693e:	e7f9      	b.n	8006934 <memset+0x4>

08006940 <__cvt>:
 8006940:	2b00      	cmp	r3, #0
 8006942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006946:	461f      	mov	r7, r3
 8006948:	bfbb      	ittet	lt
 800694a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800694e:	461f      	movlt	r7, r3
 8006950:	2300      	movge	r3, #0
 8006952:	232d      	movlt	r3, #45	; 0x2d
 8006954:	b088      	sub	sp, #32
 8006956:	4614      	mov	r4, r2
 8006958:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800695a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800695c:	7013      	strb	r3, [r2, #0]
 800695e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006960:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006964:	f023 0820 	bic.w	r8, r3, #32
 8006968:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800696c:	d005      	beq.n	800697a <__cvt+0x3a>
 800696e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006972:	d100      	bne.n	8006976 <__cvt+0x36>
 8006974:	3501      	adds	r5, #1
 8006976:	2302      	movs	r3, #2
 8006978:	e000      	b.n	800697c <__cvt+0x3c>
 800697a:	2303      	movs	r3, #3
 800697c:	aa07      	add	r2, sp, #28
 800697e:	9204      	str	r2, [sp, #16]
 8006980:	aa06      	add	r2, sp, #24
 8006982:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006986:	e9cd 3500 	strd	r3, r5, [sp]
 800698a:	4622      	mov	r2, r4
 800698c:	463b      	mov	r3, r7
 800698e:	f000 fcfb 	bl	8007388 <_dtoa_r>
 8006992:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006996:	4606      	mov	r6, r0
 8006998:	d102      	bne.n	80069a0 <__cvt+0x60>
 800699a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800699c:	07db      	lsls	r3, r3, #31
 800699e:	d522      	bpl.n	80069e6 <__cvt+0xa6>
 80069a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069a4:	eb06 0905 	add.w	r9, r6, r5
 80069a8:	d110      	bne.n	80069cc <__cvt+0x8c>
 80069aa:	7833      	ldrb	r3, [r6, #0]
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d10a      	bne.n	80069c6 <__cvt+0x86>
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4620      	mov	r0, r4
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7f9 fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80069bc:	b918      	cbnz	r0, 80069c6 <__cvt+0x86>
 80069be:	f1c5 0501 	rsb	r5, r5, #1
 80069c2:	f8ca 5000 	str.w	r5, [sl]
 80069c6:	f8da 3000 	ldr.w	r3, [sl]
 80069ca:	4499      	add	r9, r3
 80069cc:	2200      	movs	r2, #0
 80069ce:	2300      	movs	r3, #0
 80069d0:	4620      	mov	r0, r4
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 ffe8 	bl	80009a8 <__aeabi_dcmpeq>
 80069d8:	b108      	cbz	r0, 80069de <__cvt+0x9e>
 80069da:	f8cd 901c 	str.w	r9, [sp, #28]
 80069de:	2230      	movs	r2, #48	; 0x30
 80069e0:	9b07      	ldr	r3, [sp, #28]
 80069e2:	454b      	cmp	r3, r9
 80069e4:	d307      	bcc.n	80069f6 <__cvt+0xb6>
 80069e6:	4630      	mov	r0, r6
 80069e8:	9b07      	ldr	r3, [sp, #28]
 80069ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069ec:	1b9b      	subs	r3, r3, r6
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	b008      	add	sp, #32
 80069f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	9107      	str	r1, [sp, #28]
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	e7f0      	b.n	80069e0 <__cvt+0xa0>

080069fe <__exponent>:
 80069fe:	4603      	mov	r3, r0
 8006a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a02:	2900      	cmp	r1, #0
 8006a04:	f803 2b02 	strb.w	r2, [r3], #2
 8006a08:	bfb6      	itet	lt
 8006a0a:	222d      	movlt	r2, #45	; 0x2d
 8006a0c:	222b      	movge	r2, #43	; 0x2b
 8006a0e:	4249      	neglt	r1, r1
 8006a10:	2909      	cmp	r1, #9
 8006a12:	7042      	strb	r2, [r0, #1]
 8006a14:	dd2b      	ble.n	8006a6e <__exponent+0x70>
 8006a16:	f10d 0407 	add.w	r4, sp, #7
 8006a1a:	46a4      	mov	ip, r4
 8006a1c:	270a      	movs	r7, #10
 8006a1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a22:	460a      	mov	r2, r1
 8006a24:	46a6      	mov	lr, r4
 8006a26:	fb07 1516 	mls	r5, r7, r6, r1
 8006a2a:	2a63      	cmp	r2, #99	; 0x63
 8006a2c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006a30:	4631      	mov	r1, r6
 8006a32:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a3a:	dcf0      	bgt.n	8006a1e <__exponent+0x20>
 8006a3c:	3130      	adds	r1, #48	; 0x30
 8006a3e:	f1ae 0502 	sub.w	r5, lr, #2
 8006a42:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a46:	4629      	mov	r1, r5
 8006a48:	1c44      	adds	r4, r0, #1
 8006a4a:	4561      	cmp	r1, ip
 8006a4c:	d30a      	bcc.n	8006a64 <__exponent+0x66>
 8006a4e:	f10d 0209 	add.w	r2, sp, #9
 8006a52:	eba2 020e 	sub.w	r2, r2, lr
 8006a56:	4565      	cmp	r5, ip
 8006a58:	bf88      	it	hi
 8006a5a:	2200      	movhi	r2, #0
 8006a5c:	4413      	add	r3, r2
 8006a5e:	1a18      	subs	r0, r3, r0
 8006a60:	b003      	add	sp, #12
 8006a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a68:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a6c:	e7ed      	b.n	8006a4a <__exponent+0x4c>
 8006a6e:	2330      	movs	r3, #48	; 0x30
 8006a70:	3130      	adds	r1, #48	; 0x30
 8006a72:	7083      	strb	r3, [r0, #2]
 8006a74:	70c1      	strb	r1, [r0, #3]
 8006a76:	1d03      	adds	r3, r0, #4
 8006a78:	e7f1      	b.n	8006a5e <__exponent+0x60>
	...

08006a7c <_printf_float>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	b091      	sub	sp, #68	; 0x44
 8006a82:	460c      	mov	r4, r1
 8006a84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006a88:	4616      	mov	r6, r2
 8006a8a:	461f      	mov	r7, r3
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	f001 fa69 	bl	8007f64 <_localeconv_r>
 8006a92:	6803      	ldr	r3, [r0, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	9309      	str	r3, [sp, #36]	; 0x24
 8006a98:	f7f9 fb5a 	bl	8000150 <strlen>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8006aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8006aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8006aa6:	3307      	adds	r3, #7
 8006aa8:	f023 0307 	bic.w	r3, r3, #7
 8006aac:	f103 0208 	add.w	r2, r3, #8
 8006ab0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ab4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ab8:	f8c8 2000 	str.w	r2, [r8]
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ac4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ac8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4b9c      	ldr	r3, [pc, #624]	; (8006d48 <_printf_float+0x2cc>)
 8006ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ad8:	f7f9 ff98 	bl	8000a0c <__aeabi_dcmpun>
 8006adc:	bb70      	cbnz	r0, 8006b3c <_printf_float+0xc0>
 8006ade:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	4b98      	ldr	r3, [pc, #608]	; (8006d48 <_printf_float+0x2cc>)
 8006ae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ae8:	f7f9 ff72 	bl	80009d0 <__aeabi_dcmple>
 8006aec:	bb30      	cbnz	r0, 8006b3c <_printf_float+0xc0>
 8006aee:	2200      	movs	r2, #0
 8006af0:	2300      	movs	r3, #0
 8006af2:	4640      	mov	r0, r8
 8006af4:	4651      	mov	r1, sl
 8006af6:	f7f9 ff61 	bl	80009bc <__aeabi_dcmplt>
 8006afa:	b110      	cbz	r0, 8006b02 <_printf_float+0x86>
 8006afc:	232d      	movs	r3, #45	; 0x2d
 8006afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b02:	4b92      	ldr	r3, [pc, #584]	; (8006d4c <_printf_float+0x2d0>)
 8006b04:	4892      	ldr	r0, [pc, #584]	; (8006d50 <_printf_float+0x2d4>)
 8006b06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b0a:	bf94      	ite	ls
 8006b0c:	4698      	movls	r8, r3
 8006b0e:	4680      	movhi	r8, r0
 8006b10:	2303      	movs	r3, #3
 8006b12:	f04f 0a00 	mov.w	sl, #0
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	f02b 0304 	bic.w	r3, fp, #4
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	4633      	mov	r3, r6
 8006b20:	4621      	mov	r1, r4
 8006b22:	4628      	mov	r0, r5
 8006b24:	9700      	str	r7, [sp, #0]
 8006b26:	aa0f      	add	r2, sp, #60	; 0x3c
 8006b28:	f000 f9d4 	bl	8006ed4 <_printf_common>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f040 8090 	bne.w	8006c52 <_printf_float+0x1d6>
 8006b32:	f04f 30ff 	mov.w	r0, #4294967295
 8006b36:	b011      	add	sp, #68	; 0x44
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	4653      	mov	r3, sl
 8006b40:	4640      	mov	r0, r8
 8006b42:	4651      	mov	r1, sl
 8006b44:	f7f9 ff62 	bl	8000a0c <__aeabi_dcmpun>
 8006b48:	b148      	cbz	r0, 8006b5e <_printf_float+0xe2>
 8006b4a:	f1ba 0f00 	cmp.w	sl, #0
 8006b4e:	bfb8      	it	lt
 8006b50:	232d      	movlt	r3, #45	; 0x2d
 8006b52:	4880      	ldr	r0, [pc, #512]	; (8006d54 <_printf_float+0x2d8>)
 8006b54:	bfb8      	it	lt
 8006b56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b5a:	4b7f      	ldr	r3, [pc, #508]	; (8006d58 <_printf_float+0x2dc>)
 8006b5c:	e7d3      	b.n	8006b06 <_printf_float+0x8a>
 8006b5e:	6863      	ldr	r3, [r4, #4]
 8006b60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	d142      	bne.n	8006bee <_printf_float+0x172>
 8006b68:	2306      	movs	r3, #6
 8006b6a:	6063      	str	r3, [r4, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	9206      	str	r2, [sp, #24]
 8006b70:	aa0e      	add	r2, sp, #56	; 0x38
 8006b72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006b76:	aa0d      	add	r2, sp, #52	; 0x34
 8006b78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006b7c:	9203      	str	r2, [sp, #12]
 8006b7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006b82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4628      	mov	r0, r5
 8006b90:	4653      	mov	r3, sl
 8006b92:	910b      	str	r1, [sp, #44]	; 0x2c
 8006b94:	f7ff fed4 	bl	8006940 <__cvt>
 8006b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	2947      	cmp	r1, #71	; 0x47
 8006b9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ba0:	d108      	bne.n	8006bb4 <_printf_float+0x138>
 8006ba2:	1cc8      	adds	r0, r1, #3
 8006ba4:	db02      	blt.n	8006bac <_printf_float+0x130>
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	dd40      	ble.n	8006c2e <_printf_float+0x1b2>
 8006bac:	f1a9 0902 	sub.w	r9, r9, #2
 8006bb0:	fa5f f989 	uxtb.w	r9, r9
 8006bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bb8:	d81f      	bhi.n	8006bfa <_printf_float+0x17e>
 8006bba:	464a      	mov	r2, r9
 8006bbc:	3901      	subs	r1, #1
 8006bbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bc2:	910d      	str	r1, [sp, #52]	; 0x34
 8006bc4:	f7ff ff1b 	bl	80069fe <__exponent>
 8006bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bca:	4682      	mov	sl, r0
 8006bcc:	1813      	adds	r3, r2, r0
 8006bce:	2a01      	cmp	r2, #1
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	dc02      	bgt.n	8006bda <_printf_float+0x15e>
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	07d2      	lsls	r2, r2, #31
 8006bd8:	d501      	bpl.n	8006bde <_printf_float+0x162>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d09b      	beq.n	8006b1e <_printf_float+0xa2>
 8006be6:	232d      	movs	r3, #45	; 0x2d
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bec:	e797      	b.n	8006b1e <_printf_float+0xa2>
 8006bee:	2947      	cmp	r1, #71	; 0x47
 8006bf0:	d1bc      	bne.n	8006b6c <_printf_float+0xf0>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1ba      	bne.n	8006b6c <_printf_float+0xf0>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e7b7      	b.n	8006b6a <_printf_float+0xee>
 8006bfa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006bfe:	d118      	bne.n	8006c32 <_printf_float+0x1b6>
 8006c00:	2900      	cmp	r1, #0
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	dd0b      	ble.n	8006c1e <_printf_float+0x1a2>
 8006c06:	6121      	str	r1, [r4, #16]
 8006c08:	b913      	cbnz	r3, 8006c10 <_printf_float+0x194>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	07d0      	lsls	r0, r2, #31
 8006c0e:	d502      	bpl.n	8006c16 <_printf_float+0x19a>
 8006c10:	3301      	adds	r3, #1
 8006c12:	440b      	add	r3, r1
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	f04f 0a00 	mov.w	sl, #0
 8006c1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c1c:	e7df      	b.n	8006bde <_printf_float+0x162>
 8006c1e:	b913      	cbnz	r3, 8006c26 <_printf_float+0x1aa>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	07d2      	lsls	r2, r2, #31
 8006c24:	d501      	bpl.n	8006c2a <_printf_float+0x1ae>
 8006c26:	3302      	adds	r3, #2
 8006c28:	e7f4      	b.n	8006c14 <_printf_float+0x198>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e7f2      	b.n	8006c14 <_printf_float+0x198>
 8006c2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c34:	4299      	cmp	r1, r3
 8006c36:	db05      	blt.n	8006c44 <_printf_float+0x1c8>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	6121      	str	r1, [r4, #16]
 8006c3c:	07d8      	lsls	r0, r3, #31
 8006c3e:	d5ea      	bpl.n	8006c16 <_printf_float+0x19a>
 8006c40:	1c4b      	adds	r3, r1, #1
 8006c42:	e7e7      	b.n	8006c14 <_printf_float+0x198>
 8006c44:	2900      	cmp	r1, #0
 8006c46:	bfcc      	ite	gt
 8006c48:	2201      	movgt	r2, #1
 8006c4a:	f1c1 0202 	rsble	r2, r1, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	e7e0      	b.n	8006c14 <_printf_float+0x198>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	055a      	lsls	r2, r3, #21
 8006c56:	d407      	bmi.n	8006c68 <_printf_float+0x1ec>
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	4642      	mov	r2, r8
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b8      	blx	r7
 8006c62:	3001      	adds	r0, #1
 8006c64:	d12b      	bne.n	8006cbe <_printf_float+0x242>
 8006c66:	e764      	b.n	8006b32 <_printf_float+0xb6>
 8006c68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c6c:	f240 80dd 	bls.w	8006e2a <_printf_float+0x3ae>
 8006c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c74:	2200      	movs	r2, #0
 8006c76:	2300      	movs	r3, #0
 8006c78:	f7f9 fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d033      	beq.n	8006ce8 <_printf_float+0x26c>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	4a35      	ldr	r2, [pc, #212]	; (8006d5c <_printf_float+0x2e0>)
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f af51 	beq.w	8006b32 <_printf_float+0xb6>
 8006c90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c94:	429a      	cmp	r2, r3
 8006c96:	db02      	blt.n	8006c9e <_printf_float+0x222>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	07d8      	lsls	r0, r3, #31
 8006c9c:	d50f      	bpl.n	8006cbe <_printf_float+0x242>
 8006c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f af42 	beq.w	8006b32 <_printf_float+0xb6>
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	f104 091a 	add.w	r9, r4, #26
 8006cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	4543      	cmp	r3, r8
 8006cbc:	dc09      	bgt.n	8006cd2 <_printf_float+0x256>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	079b      	lsls	r3, r3, #30
 8006cc2:	f100 8102 	bmi.w	8006eca <_printf_float+0x44e>
 8006cc6:	68e0      	ldr	r0, [r4, #12]
 8006cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cca:	4298      	cmp	r0, r3
 8006ccc:	bfb8      	it	lt
 8006cce:	4618      	movlt	r0, r3
 8006cd0:	e731      	b.n	8006b36 <_printf_float+0xba>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f af28 	beq.w	8006b32 <_printf_float+0xb6>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	e7e6      	b.n	8006cb6 <_printf_float+0x23a>
 8006ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc38      	bgt.n	8006d60 <_printf_float+0x2e4>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <_printf_float+0x2e0>)
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f af1a 	beq.w	8006b32 <_printf_float+0xb6>
 8006cfe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d102      	bne.n	8006d0c <_printf_float+0x290>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	07d9      	lsls	r1, r3, #31
 8006d0a:	d5d8      	bpl.n	8006cbe <_printf_float+0x242>
 8006d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d10:	4631      	mov	r1, r6
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af0b 	beq.w	8006b32 <_printf_float+0xb6>
 8006d1c:	f04f 0900 	mov.w	r9, #0
 8006d20:	f104 0a1a 	add.w	sl, r4, #26
 8006d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d26:	425b      	negs	r3, r3
 8006d28:	454b      	cmp	r3, r9
 8006d2a:	dc01      	bgt.n	8006d30 <_printf_float+0x2b4>
 8006d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2e:	e794      	b.n	8006c5a <_printf_float+0x1de>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4652      	mov	r2, sl
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f aef9 	beq.w	8006b32 <_printf_float+0xb6>
 8006d40:	f109 0901 	add.w	r9, r9, #1
 8006d44:	e7ee      	b.n	8006d24 <_printf_float+0x2a8>
 8006d46:	bf00      	nop
 8006d48:	7fefffff 	.word	0x7fefffff
 8006d4c:	08009768 	.word	0x08009768
 8006d50:	0800976c 	.word	0x0800976c
 8006d54:	08009774 	.word	0x08009774
 8006d58:	08009770 	.word	0x08009770
 8006d5c:	08009778 	.word	0x08009778
 8006d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d64:	429a      	cmp	r2, r3
 8006d66:	bfa8      	it	ge
 8006d68:	461a      	movge	r2, r3
 8006d6a:	2a00      	cmp	r2, #0
 8006d6c:	4691      	mov	r9, r2
 8006d6e:	dc37      	bgt.n	8006de0 <_printf_float+0x364>
 8006d70:	f04f 0b00 	mov.w	fp, #0
 8006d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d78:	f104 021a 	add.w	r2, r4, #26
 8006d7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006d80:	ebaa 0309 	sub.w	r3, sl, r9
 8006d84:	455b      	cmp	r3, fp
 8006d86:	dc33      	bgt.n	8006df0 <_printf_float+0x374>
 8006d88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	db3b      	blt.n	8006e08 <_printf_float+0x38c>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	07da      	lsls	r2, r3, #31
 8006d94:	d438      	bmi.n	8006e08 <_printf_float+0x38c>
 8006d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d9a:	eba2 030a 	sub.w	r3, r2, sl
 8006d9e:	eba2 0901 	sub.w	r9, r2, r1
 8006da2:	4599      	cmp	r9, r3
 8006da4:	bfa8      	it	ge
 8006da6:	4699      	movge	r9, r3
 8006da8:	f1b9 0f00 	cmp.w	r9, #0
 8006dac:	dc34      	bgt.n	8006e18 <_printf_float+0x39c>
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006db6:	f104 0a1a 	add.w	sl, r4, #26
 8006dba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	eba3 0309 	sub.w	r3, r3, r9
 8006dc4:	4543      	cmp	r3, r8
 8006dc6:	f77f af7a 	ble.w	8006cbe <_printf_float+0x242>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4652      	mov	r2, sl
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f43f aeac 	beq.w	8006b32 <_printf_float+0xb6>
 8006dda:	f108 0801 	add.w	r8, r8, #1
 8006dde:	e7ec      	b.n	8006dba <_printf_float+0x33e>
 8006de0:	4613      	mov	r3, r2
 8006de2:	4631      	mov	r1, r6
 8006de4:	4642      	mov	r2, r8
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	d1c0      	bne.n	8006d70 <_printf_float+0x2f4>
 8006dee:	e6a0      	b.n	8006b32 <_printf_float+0xb6>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f ae99 	beq.w	8006b32 <_printf_float+0xb6>
 8006e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e02:	f10b 0b01 	add.w	fp, fp, #1
 8006e06:	e7b9      	b.n	8006d7c <_printf_float+0x300>
 8006e08:	4631      	mov	r1, r6
 8006e0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	d1bf      	bne.n	8006d96 <_printf_float+0x31a>
 8006e16:	e68c      	b.n	8006b32 <_printf_float+0xb6>
 8006e18:	464b      	mov	r3, r9
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	eb08 020a 	add.w	r2, r8, sl
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	d1c2      	bne.n	8006dae <_printf_float+0x332>
 8006e28:	e683      	b.n	8006b32 <_printf_float+0xb6>
 8006e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e2c:	2a01      	cmp	r2, #1
 8006e2e:	dc01      	bgt.n	8006e34 <_printf_float+0x3b8>
 8006e30:	07db      	lsls	r3, r3, #31
 8006e32:	d537      	bpl.n	8006ea4 <_printf_float+0x428>
 8006e34:	2301      	movs	r3, #1
 8006e36:	4642      	mov	r2, r8
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f ae77 	beq.w	8006b32 <_printf_float+0xb6>
 8006e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f ae6f 	beq.w	8006b32 <_printf_float+0xb6>
 8006e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f7f9 fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8006e60:	b9d8      	cbnz	r0, 8006e9a <_printf_float+0x41e>
 8006e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e64:	f108 0201 	add.w	r2, r8, #1
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	d10e      	bne.n	8006e92 <_printf_float+0x416>
 8006e74:	e65d      	b.n	8006b32 <_printf_float+0xb6>
 8006e76:	2301      	movs	r3, #1
 8006e78:	464a      	mov	r2, r9
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f ae56 	beq.w	8006b32 <_printf_float+0xb6>
 8006e86:	f108 0801 	add.w	r8, r8, #1
 8006e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	4543      	cmp	r3, r8
 8006e90:	dcf1      	bgt.n	8006e76 <_printf_float+0x3fa>
 8006e92:	4653      	mov	r3, sl
 8006e94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e98:	e6e0      	b.n	8006c5c <_printf_float+0x1e0>
 8006e9a:	f04f 0800 	mov.w	r8, #0
 8006e9e:	f104 091a 	add.w	r9, r4, #26
 8006ea2:	e7f2      	b.n	8006e8a <_printf_float+0x40e>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	e7df      	b.n	8006e6a <_printf_float+0x3ee>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	464a      	mov	r2, r9
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f ae3c 	beq.w	8006b32 <_printf_float+0xb6>
 8006eba:	f108 0801 	add.w	r8, r8, #1
 8006ebe:	68e3      	ldr	r3, [r4, #12]
 8006ec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ec2:	1a5b      	subs	r3, r3, r1
 8006ec4:	4543      	cmp	r3, r8
 8006ec6:	dcf0      	bgt.n	8006eaa <_printf_float+0x42e>
 8006ec8:	e6fd      	b.n	8006cc6 <_printf_float+0x24a>
 8006eca:	f04f 0800 	mov.w	r8, #0
 8006ece:	f104 0919 	add.w	r9, r4, #25
 8006ed2:	e7f4      	b.n	8006ebe <_printf_float+0x442>

08006ed4 <_printf_common>:
 8006ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	4616      	mov	r6, r2
 8006eda:	4699      	mov	r9, r3
 8006edc:	688a      	ldr	r2, [r1, #8]
 8006ede:	690b      	ldr	r3, [r1, #16]
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	bfb8      	it	lt
 8006ee6:	4613      	movlt	r3, r2
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eee:	460c      	mov	r4, r1
 8006ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ef4:	b10a      	cbz	r2, 8006efa <_printf_common+0x26>
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	6033      	str	r3, [r6, #0]
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	0699      	lsls	r1, r3, #26
 8006efe:	bf42      	ittt	mi
 8006f00:	6833      	ldrmi	r3, [r6, #0]
 8006f02:	3302      	addmi	r3, #2
 8006f04:	6033      	strmi	r3, [r6, #0]
 8006f06:	6825      	ldr	r5, [r4, #0]
 8006f08:	f015 0506 	ands.w	r5, r5, #6
 8006f0c:	d106      	bne.n	8006f1c <_printf_common+0x48>
 8006f0e:	f104 0a19 	add.w	sl, r4, #25
 8006f12:	68e3      	ldr	r3, [r4, #12]
 8006f14:	6832      	ldr	r2, [r6, #0]
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	dc28      	bgt.n	8006f6e <_printf_common+0x9a>
 8006f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f20:	1e13      	subs	r3, r2, #0
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	bf18      	it	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	0692      	lsls	r2, r2, #26
 8006f2a:	d42d      	bmi.n	8006f88 <_printf_common+0xb4>
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f34:	47c0      	blx	r8
 8006f36:	3001      	adds	r0, #1
 8006f38:	d020      	beq.n	8006f7c <_printf_common+0xa8>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	68e5      	ldr	r5, [r4, #12]
 8006f3e:	f003 0306 	and.w	r3, r3, #6
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	bf18      	it	ne
 8006f46:	2500      	movne	r5, #0
 8006f48:	6832      	ldr	r2, [r6, #0]
 8006f4a:	f04f 0600 	mov.w	r6, #0
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	bf08      	it	eq
 8006f52:	1aad      	subeq	r5, r5, r2
 8006f54:	6922      	ldr	r2, [r4, #16]
 8006f56:	bf08      	it	eq
 8006f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bfc4      	itt	gt
 8006f60:	1a9b      	subgt	r3, r3, r2
 8006f62:	18ed      	addgt	r5, r5, r3
 8006f64:	341a      	adds	r4, #26
 8006f66:	42b5      	cmp	r5, r6
 8006f68:	d11a      	bne.n	8006fa0 <_printf_common+0xcc>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e008      	b.n	8006f80 <_printf_common+0xac>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	4649      	mov	r1, r9
 8006f74:	4638      	mov	r0, r7
 8006f76:	47c0      	blx	r8
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d103      	bne.n	8006f84 <_printf_common+0xb0>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7c4      	b.n	8006f12 <_printf_common+0x3e>
 8006f88:	2030      	movs	r0, #48	; 0x30
 8006f8a:	18e1      	adds	r1, r4, r3
 8006f8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f96:	4422      	add	r2, r4
 8006f98:	3302      	adds	r3, #2
 8006f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f9e:	e7c5      	b.n	8006f2c <_printf_common+0x58>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0e6      	beq.n	8006f7c <_printf_common+0xa8>
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7d9      	b.n	8006f66 <_printf_common+0x92>
	...

08006fb4 <_printf_i>:
 8006fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	460c      	mov	r4, r1
 8006fba:	7e27      	ldrb	r7, [r4, #24]
 8006fbc:	4691      	mov	r9, r2
 8006fbe:	2f78      	cmp	r7, #120	; 0x78
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	469a      	mov	sl, r3
 8006fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fca:	d807      	bhi.n	8006fdc <_printf_i+0x28>
 8006fcc:	2f62      	cmp	r7, #98	; 0x62
 8006fce:	d80a      	bhi.n	8006fe6 <_printf_i+0x32>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	f000 80d9 	beq.w	8007188 <_printf_i+0x1d4>
 8006fd6:	2f58      	cmp	r7, #88	; 0x58
 8006fd8:	f000 80a4 	beq.w	8007124 <_printf_i+0x170>
 8006fdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe4:	e03a      	b.n	800705c <_printf_i+0xa8>
 8006fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fea:	2b15      	cmp	r3, #21
 8006fec:	d8f6      	bhi.n	8006fdc <_printf_i+0x28>
 8006fee:	a001      	add	r0, pc, #4	; (adr r0, 8006ff4 <_printf_i+0x40>)
 8006ff0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ff4:	0800704d 	.word	0x0800704d
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08006fdd 	.word	0x08006fdd
 8007000:	08006fdd 	.word	0x08006fdd
 8007004:	08006fdd 	.word	0x08006fdd
 8007008:	08006fdd 	.word	0x08006fdd
 800700c:	08007061 	.word	0x08007061
 8007010:	08006fdd 	.word	0x08006fdd
 8007014:	08006fdd 	.word	0x08006fdd
 8007018:	08006fdd 	.word	0x08006fdd
 800701c:	08006fdd 	.word	0x08006fdd
 8007020:	0800716f 	.word	0x0800716f
 8007024:	08007091 	.word	0x08007091
 8007028:	08007151 	.word	0x08007151
 800702c:	08006fdd 	.word	0x08006fdd
 8007030:	08006fdd 	.word	0x08006fdd
 8007034:	08007191 	.word	0x08007191
 8007038:	08006fdd 	.word	0x08006fdd
 800703c:	08007091 	.word	0x08007091
 8007040:	08006fdd 	.word	0x08006fdd
 8007044:	08006fdd 	.word	0x08006fdd
 8007048:	08007159 	.word	0x08007159
 800704c:	680b      	ldr	r3, [r1, #0]
 800704e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007052:	1d1a      	adds	r2, r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	600a      	str	r2, [r1, #0]
 8007058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800705c:	2301      	movs	r3, #1
 800705e:	e0a4      	b.n	80071aa <_printf_i+0x1f6>
 8007060:	6825      	ldr	r5, [r4, #0]
 8007062:	6808      	ldr	r0, [r1, #0]
 8007064:	062e      	lsls	r6, r5, #24
 8007066:	f100 0304 	add.w	r3, r0, #4
 800706a:	d50a      	bpl.n	8007082 <_printf_i+0xce>
 800706c:	6805      	ldr	r5, [r0, #0]
 800706e:	600b      	str	r3, [r1, #0]
 8007070:	2d00      	cmp	r5, #0
 8007072:	da03      	bge.n	800707c <_printf_i+0xc8>
 8007074:	232d      	movs	r3, #45	; 0x2d
 8007076:	426d      	negs	r5, r5
 8007078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707c:	230a      	movs	r3, #10
 800707e:	485e      	ldr	r0, [pc, #376]	; (80071f8 <_printf_i+0x244>)
 8007080:	e019      	b.n	80070b6 <_printf_i+0x102>
 8007082:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007086:	6805      	ldr	r5, [r0, #0]
 8007088:	600b      	str	r3, [r1, #0]
 800708a:	bf18      	it	ne
 800708c:	b22d      	sxthne	r5, r5
 800708e:	e7ef      	b.n	8007070 <_printf_i+0xbc>
 8007090:	680b      	ldr	r3, [r1, #0]
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	1d18      	adds	r0, r3, #4
 8007096:	6008      	str	r0, [r1, #0]
 8007098:	0628      	lsls	r0, r5, #24
 800709a:	d501      	bpl.n	80070a0 <_printf_i+0xec>
 800709c:	681d      	ldr	r5, [r3, #0]
 800709e:	e002      	b.n	80070a6 <_printf_i+0xf2>
 80070a0:	0669      	lsls	r1, r5, #25
 80070a2:	d5fb      	bpl.n	800709c <_printf_i+0xe8>
 80070a4:	881d      	ldrh	r5, [r3, #0]
 80070a6:	2f6f      	cmp	r7, #111	; 0x6f
 80070a8:	bf0c      	ite	eq
 80070aa:	2308      	moveq	r3, #8
 80070ac:	230a      	movne	r3, #10
 80070ae:	4852      	ldr	r0, [pc, #328]	; (80071f8 <_printf_i+0x244>)
 80070b0:	2100      	movs	r1, #0
 80070b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b6:	6866      	ldr	r6, [r4, #4]
 80070b8:	2e00      	cmp	r6, #0
 80070ba:	bfa8      	it	ge
 80070bc:	6821      	ldrge	r1, [r4, #0]
 80070be:	60a6      	str	r6, [r4, #8]
 80070c0:	bfa4      	itt	ge
 80070c2:	f021 0104 	bicge.w	r1, r1, #4
 80070c6:	6021      	strge	r1, [r4, #0]
 80070c8:	b90d      	cbnz	r5, 80070ce <_printf_i+0x11a>
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	d04d      	beq.n	800716a <_printf_i+0x1b6>
 80070ce:	4616      	mov	r6, r2
 80070d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80070d4:	fb03 5711 	mls	r7, r3, r1, r5
 80070d8:	5dc7      	ldrb	r7, [r0, r7]
 80070da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070de:	462f      	mov	r7, r5
 80070e0:	42bb      	cmp	r3, r7
 80070e2:	460d      	mov	r5, r1
 80070e4:	d9f4      	bls.n	80070d0 <_printf_i+0x11c>
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d10b      	bne.n	8007102 <_printf_i+0x14e>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	07df      	lsls	r7, r3, #31
 80070ee:	d508      	bpl.n	8007102 <_printf_i+0x14e>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	6861      	ldr	r1, [r4, #4]
 80070f4:	4299      	cmp	r1, r3
 80070f6:	bfde      	ittt	le
 80070f8:	2330      	movle	r3, #48	; 0x30
 80070fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007102:	1b92      	subs	r2, r2, r6
 8007104:	6122      	str	r2, [r4, #16]
 8007106:	464b      	mov	r3, r9
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f8cd a000 	str.w	sl, [sp]
 8007110:	aa03      	add	r2, sp, #12
 8007112:	f7ff fedf 	bl	8006ed4 <_printf_common>
 8007116:	3001      	adds	r0, #1
 8007118:	d14c      	bne.n	80071b4 <_printf_i+0x200>
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	b004      	add	sp, #16
 8007120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007124:	4834      	ldr	r0, [pc, #208]	; (80071f8 <_printf_i+0x244>)
 8007126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800712a:	680e      	ldr	r6, [r1, #0]
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007132:	061f      	lsls	r7, r3, #24
 8007134:	600e      	str	r6, [r1, #0]
 8007136:	d514      	bpl.n	8007162 <_printf_i+0x1ae>
 8007138:	07d9      	lsls	r1, r3, #31
 800713a:	bf44      	itt	mi
 800713c:	f043 0320 	orrmi.w	r3, r3, #32
 8007140:	6023      	strmi	r3, [r4, #0]
 8007142:	b91d      	cbnz	r5, 800714c <_printf_i+0x198>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	f023 0320 	bic.w	r3, r3, #32
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	2310      	movs	r3, #16
 800714e:	e7af      	b.n	80070b0 <_printf_i+0xfc>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	f043 0320 	orr.w	r3, r3, #32
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	2378      	movs	r3, #120	; 0x78
 800715a:	4828      	ldr	r0, [pc, #160]	; (80071fc <_printf_i+0x248>)
 800715c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007160:	e7e3      	b.n	800712a <_printf_i+0x176>
 8007162:	065e      	lsls	r6, r3, #25
 8007164:	bf48      	it	mi
 8007166:	b2ad      	uxthmi	r5, r5
 8007168:	e7e6      	b.n	8007138 <_printf_i+0x184>
 800716a:	4616      	mov	r6, r2
 800716c:	e7bb      	b.n	80070e6 <_printf_i+0x132>
 800716e:	680b      	ldr	r3, [r1, #0]
 8007170:	6826      	ldr	r6, [r4, #0]
 8007172:	1d1d      	adds	r5, r3, #4
 8007174:	6960      	ldr	r0, [r4, #20]
 8007176:	600d      	str	r5, [r1, #0]
 8007178:	0635      	lsls	r5, r6, #24
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	d501      	bpl.n	8007182 <_printf_i+0x1ce>
 800717e:	6018      	str	r0, [r3, #0]
 8007180:	e002      	b.n	8007188 <_printf_i+0x1d4>
 8007182:	0671      	lsls	r1, r6, #25
 8007184:	d5fb      	bpl.n	800717e <_printf_i+0x1ca>
 8007186:	8018      	strh	r0, [r3, #0]
 8007188:	2300      	movs	r3, #0
 800718a:	4616      	mov	r6, r2
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	e7ba      	b.n	8007106 <_printf_i+0x152>
 8007190:	680b      	ldr	r3, [r1, #0]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	600a      	str	r2, [r1, #0]
 8007196:	681e      	ldr	r6, [r3, #0]
 8007198:	2100      	movs	r1, #0
 800719a:	4630      	mov	r0, r6
 800719c:	6862      	ldr	r2, [r4, #4]
 800719e:	f000 feed 	bl	8007f7c <memchr>
 80071a2:	b108      	cbz	r0, 80071a8 <_printf_i+0x1f4>
 80071a4:	1b80      	subs	r0, r0, r6
 80071a6:	6060      	str	r0, [r4, #4]
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	2300      	movs	r3, #0
 80071ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b2:	e7a8      	b.n	8007106 <_printf_i+0x152>
 80071b4:	4632      	mov	r2, r6
 80071b6:	4649      	mov	r1, r9
 80071b8:	4640      	mov	r0, r8
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	47d0      	blx	sl
 80071be:	3001      	adds	r0, #1
 80071c0:	d0ab      	beq.n	800711a <_printf_i+0x166>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	079b      	lsls	r3, r3, #30
 80071c6:	d413      	bmi.n	80071f0 <_printf_i+0x23c>
 80071c8:	68e0      	ldr	r0, [r4, #12]
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	4298      	cmp	r0, r3
 80071ce:	bfb8      	it	lt
 80071d0:	4618      	movlt	r0, r3
 80071d2:	e7a4      	b.n	800711e <_printf_i+0x16a>
 80071d4:	2301      	movs	r3, #1
 80071d6:	4632      	mov	r2, r6
 80071d8:	4649      	mov	r1, r9
 80071da:	4640      	mov	r0, r8
 80071dc:	47d0      	blx	sl
 80071de:	3001      	adds	r0, #1
 80071e0:	d09b      	beq.n	800711a <_printf_i+0x166>
 80071e2:	3501      	adds	r5, #1
 80071e4:	68e3      	ldr	r3, [r4, #12]
 80071e6:	9903      	ldr	r1, [sp, #12]
 80071e8:	1a5b      	subs	r3, r3, r1
 80071ea:	42ab      	cmp	r3, r5
 80071ec:	dcf2      	bgt.n	80071d4 <_printf_i+0x220>
 80071ee:	e7eb      	b.n	80071c8 <_printf_i+0x214>
 80071f0:	2500      	movs	r5, #0
 80071f2:	f104 0619 	add.w	r6, r4, #25
 80071f6:	e7f5      	b.n	80071e4 <_printf_i+0x230>
 80071f8:	0800977a 	.word	0x0800977a
 80071fc:	0800978b 	.word	0x0800978b

08007200 <sniprintf>:
 8007200:	b40c      	push	{r2, r3}
 8007202:	b530      	push	{r4, r5, lr}
 8007204:	4b17      	ldr	r3, [pc, #92]	; (8007264 <sniprintf+0x64>)
 8007206:	1e0c      	subs	r4, r1, #0
 8007208:	681d      	ldr	r5, [r3, #0]
 800720a:	b09d      	sub	sp, #116	; 0x74
 800720c:	da08      	bge.n	8007220 <sniprintf+0x20>
 800720e:	238b      	movs	r3, #139	; 0x8b
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	b01d      	add	sp, #116	; 0x74
 8007218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721c:	b002      	add	sp, #8
 800721e:	4770      	bx	lr
 8007220:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007224:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007228:	bf0c      	ite	eq
 800722a:	4623      	moveq	r3, r4
 800722c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007240:	4628      	mov	r0, r5
 8007242:	ab21      	add	r3, sp, #132	; 0x84
 8007244:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007246:	a902      	add	r1, sp, #8
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	f001 fb45 	bl	80088d8 <_svfiprintf_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	bfbc      	itt	lt
 8007252:	238b      	movlt	r3, #139	; 0x8b
 8007254:	602b      	strlt	r3, [r5, #0]
 8007256:	2c00      	cmp	r4, #0
 8007258:	d0dd      	beq.n	8007216 <sniprintf+0x16>
 800725a:	2200      	movs	r2, #0
 800725c:	9b02      	ldr	r3, [sp, #8]
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e7d9      	b.n	8007216 <sniprintf+0x16>
 8007262:	bf00      	nop
 8007264:	20000018 	.word	0x20000018

08007268 <quorem>:
 8007268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	6903      	ldr	r3, [r0, #16]
 800726e:	690c      	ldr	r4, [r1, #16]
 8007270:	4607      	mov	r7, r0
 8007272:	42a3      	cmp	r3, r4
 8007274:	f2c0 8083 	blt.w	800737e <quorem+0x116>
 8007278:	3c01      	subs	r4, #1
 800727a:	f100 0514 	add.w	r5, r0, #20
 800727e:	f101 0814 	add.w	r8, r1, #20
 8007282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800728c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007290:	3301      	adds	r3, #1
 8007292:	429a      	cmp	r2, r3
 8007294:	fbb2 f6f3 	udiv	r6, r2, r3
 8007298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800729c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072a0:	d332      	bcc.n	8007308 <quorem+0xa0>
 80072a2:	f04f 0e00 	mov.w	lr, #0
 80072a6:	4640      	mov	r0, r8
 80072a8:	46ac      	mov	ip, r5
 80072aa:	46f2      	mov	sl, lr
 80072ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80072b0:	b293      	uxth	r3, r2
 80072b2:	fb06 e303 	mla	r3, r6, r3, lr
 80072b6:	0c12      	lsrs	r2, r2, #16
 80072b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072bc:	fb06 e202 	mla	r2, r6, r2, lr
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ebaa 0303 	sub.w	r3, sl, r3
 80072c6:	f8dc a000 	ldr.w	sl, [ip]
 80072ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072ce:	fa1f fa8a 	uxth.w	sl, sl
 80072d2:	4453      	add	r3, sl
 80072d4:	fa1f fa82 	uxth.w	sl, r2
 80072d8:	f8dc 2000 	ldr.w	r2, [ip]
 80072dc:	4581      	cmp	r9, r0
 80072de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80072e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072f0:	f84c 3b04 	str.w	r3, [ip], #4
 80072f4:	d2da      	bcs.n	80072ac <quorem+0x44>
 80072f6:	f855 300b 	ldr.w	r3, [r5, fp]
 80072fa:	b92b      	cbnz	r3, 8007308 <quorem+0xa0>
 80072fc:	9b01      	ldr	r3, [sp, #4]
 80072fe:	3b04      	subs	r3, #4
 8007300:	429d      	cmp	r5, r3
 8007302:	461a      	mov	r2, r3
 8007304:	d32f      	bcc.n	8007366 <quorem+0xfe>
 8007306:	613c      	str	r4, [r7, #16]
 8007308:	4638      	mov	r0, r7
 800730a:	f001 f8cd 	bl	80084a8 <__mcmp>
 800730e:	2800      	cmp	r0, #0
 8007310:	db25      	blt.n	800735e <quorem+0xf6>
 8007312:	4628      	mov	r0, r5
 8007314:	f04f 0c00 	mov.w	ip, #0
 8007318:	3601      	adds	r6, #1
 800731a:	f858 1b04 	ldr.w	r1, [r8], #4
 800731e:	f8d0 e000 	ldr.w	lr, [r0]
 8007322:	b28b      	uxth	r3, r1
 8007324:	ebac 0303 	sub.w	r3, ip, r3
 8007328:	fa1f f28e 	uxth.w	r2, lr
 800732c:	4413      	add	r3, r2
 800732e:	0c0a      	lsrs	r2, r1, #16
 8007330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800733e:	45c1      	cmp	r9, r8
 8007340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007344:	f840 3b04 	str.w	r3, [r0], #4
 8007348:	d2e7      	bcs.n	800731a <quorem+0xb2>
 800734a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800734e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007352:	b922      	cbnz	r2, 800735e <quorem+0xf6>
 8007354:	3b04      	subs	r3, #4
 8007356:	429d      	cmp	r5, r3
 8007358:	461a      	mov	r2, r3
 800735a:	d30a      	bcc.n	8007372 <quorem+0x10a>
 800735c:	613c      	str	r4, [r7, #16]
 800735e:	4630      	mov	r0, r6
 8007360:	b003      	add	sp, #12
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	3b04      	subs	r3, #4
 800736a:	2a00      	cmp	r2, #0
 800736c:	d1cb      	bne.n	8007306 <quorem+0x9e>
 800736e:	3c01      	subs	r4, #1
 8007370:	e7c6      	b.n	8007300 <quorem+0x98>
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	3b04      	subs	r3, #4
 8007376:	2a00      	cmp	r2, #0
 8007378:	d1f0      	bne.n	800735c <quorem+0xf4>
 800737a:	3c01      	subs	r4, #1
 800737c:	e7eb      	b.n	8007356 <quorem+0xee>
 800737e:	2000      	movs	r0, #0
 8007380:	e7ee      	b.n	8007360 <quorem+0xf8>
 8007382:	0000      	movs	r0, r0
 8007384:	0000      	movs	r0, r0
	...

08007388 <_dtoa_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4616      	mov	r6, r2
 800738e:	461f      	mov	r7, r3
 8007390:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007392:	b099      	sub	sp, #100	; 0x64
 8007394:	4605      	mov	r5, r0
 8007396:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800739a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800739e:	b974      	cbnz	r4, 80073be <_dtoa_r+0x36>
 80073a0:	2010      	movs	r0, #16
 80073a2:	f000 fde3 	bl	8007f6c <malloc>
 80073a6:	4602      	mov	r2, r0
 80073a8:	6268      	str	r0, [r5, #36]	; 0x24
 80073aa:	b920      	cbnz	r0, 80073b6 <_dtoa_r+0x2e>
 80073ac:	21ea      	movs	r1, #234	; 0xea
 80073ae:	4bae      	ldr	r3, [pc, #696]	; (8007668 <_dtoa_r+0x2e0>)
 80073b0:	48ae      	ldr	r0, [pc, #696]	; (800766c <_dtoa_r+0x2e4>)
 80073b2:	f001 fba1 	bl	8008af8 <__assert_func>
 80073b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073ba:	6004      	str	r4, [r0, #0]
 80073bc:	60c4      	str	r4, [r0, #12]
 80073be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073c0:	6819      	ldr	r1, [r3, #0]
 80073c2:	b151      	cbz	r1, 80073da <_dtoa_r+0x52>
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	2301      	movs	r3, #1
 80073c8:	4093      	lsls	r3, r2
 80073ca:	604a      	str	r2, [r1, #4]
 80073cc:	608b      	str	r3, [r1, #8]
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fe30 	bl	8008034 <_Bfree>
 80073d4:	2200      	movs	r2, #0
 80073d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	1e3b      	subs	r3, r7, #0
 80073dc:	bfaf      	iteee	ge
 80073de:	2300      	movge	r3, #0
 80073e0:	2201      	movlt	r2, #1
 80073e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073e6:	9305      	strlt	r3, [sp, #20]
 80073e8:	bfa8      	it	ge
 80073ea:	f8c8 3000 	strge.w	r3, [r8]
 80073ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80073f2:	4b9f      	ldr	r3, [pc, #636]	; (8007670 <_dtoa_r+0x2e8>)
 80073f4:	bfb8      	it	lt
 80073f6:	f8c8 2000 	strlt.w	r2, [r8]
 80073fa:	ea33 0309 	bics.w	r3, r3, r9
 80073fe:	d119      	bne.n	8007434 <_dtoa_r+0xac>
 8007400:	f242 730f 	movw	r3, #9999	; 0x270f
 8007404:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800740c:	4333      	orrs	r3, r6
 800740e:	f000 8580 	beq.w	8007f12 <_dtoa_r+0xb8a>
 8007412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007414:	b953      	cbnz	r3, 800742c <_dtoa_r+0xa4>
 8007416:	4b97      	ldr	r3, [pc, #604]	; (8007674 <_dtoa_r+0x2ec>)
 8007418:	e022      	b.n	8007460 <_dtoa_r+0xd8>
 800741a:	4b97      	ldr	r3, [pc, #604]	; (8007678 <_dtoa_r+0x2f0>)
 800741c:	9308      	str	r3, [sp, #32]
 800741e:	3308      	adds	r3, #8
 8007420:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	9808      	ldr	r0, [sp, #32]
 8007426:	b019      	add	sp, #100	; 0x64
 8007428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742c:	4b91      	ldr	r3, [pc, #580]	; (8007674 <_dtoa_r+0x2ec>)
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	3303      	adds	r3, #3
 8007432:	e7f5      	b.n	8007420 <_dtoa_r+0x98>
 8007434:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007438:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800743c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	f7f9 fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8007448:	4680      	mov	r8, r0
 800744a:	b158      	cbz	r0, 8007464 <_dtoa_r+0xdc>
 800744c:	2301      	movs	r3, #1
 800744e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8559 	beq.w	8007f0c <_dtoa_r+0xb84>
 800745a:	4888      	ldr	r0, [pc, #544]	; (800767c <_dtoa_r+0x2f4>)
 800745c:	6018      	str	r0, [r3, #0]
 800745e:	1e43      	subs	r3, r0, #1
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	e7df      	b.n	8007424 <_dtoa_r+0x9c>
 8007464:	ab16      	add	r3, sp, #88	; 0x58
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	ab17      	add	r3, sp, #92	; 0x5c
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	4628      	mov	r0, r5
 800746e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007472:	f001 f8c5 	bl	8008600 <__d2b>
 8007476:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800747a:	4682      	mov	sl, r0
 800747c:	2c00      	cmp	r4, #0
 800747e:	d07e      	beq.n	800757e <_dtoa_r+0x1f6>
 8007480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007486:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800748a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800748e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007492:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007496:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800749a:	2200      	movs	r2, #0
 800749c:	4b78      	ldr	r3, [pc, #480]	; (8007680 <_dtoa_r+0x2f8>)
 800749e:	f7f8 fe63 	bl	8000168 <__aeabi_dsub>
 80074a2:	a36b      	add	r3, pc, #428	; (adr r3, 8007650 <_dtoa_r+0x2c8>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f816 	bl	80004d8 <__aeabi_dmul>
 80074ac:	a36a      	add	r3, pc, #424	; (adr r3, 8007658 <_dtoa_r+0x2d0>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f8 fe5b 	bl	800016c <__adddf3>
 80074b6:	4606      	mov	r6, r0
 80074b8:	4620      	mov	r0, r4
 80074ba:	460f      	mov	r7, r1
 80074bc:	f7f8 ffa2 	bl	8000404 <__aeabi_i2d>
 80074c0:	a367      	add	r3, pc, #412	; (adr r3, 8007660 <_dtoa_r+0x2d8>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f9 f807 	bl	80004d8 <__aeabi_dmul>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7f8 fe4b 	bl	800016c <__adddf3>
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	f7f9 faad 	bl	8000a38 <__aeabi_d2iz>
 80074de:	2200      	movs	r2, #0
 80074e0:	4681      	mov	r9, r0
 80074e2:	2300      	movs	r3, #0
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f9 fa68 	bl	80009bc <__aeabi_dcmplt>
 80074ec:	b148      	cbz	r0, 8007502 <_dtoa_r+0x17a>
 80074ee:	4648      	mov	r0, r9
 80074f0:	f7f8 ff88 	bl	8000404 <__aeabi_i2d>
 80074f4:	4632      	mov	r2, r6
 80074f6:	463b      	mov	r3, r7
 80074f8:	f7f9 fa56 	bl	80009a8 <__aeabi_dcmpeq>
 80074fc:	b908      	cbnz	r0, 8007502 <_dtoa_r+0x17a>
 80074fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8007502:	f1b9 0f16 	cmp.w	r9, #22
 8007506:	d857      	bhi.n	80075b8 <_dtoa_r+0x230>
 8007508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800750c:	4b5d      	ldr	r3, [pc, #372]	; (8007684 <_dtoa_r+0x2fc>)
 800750e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 fa51 	bl	80009bc <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	d04e      	beq.n	80075bc <_dtoa_r+0x234>
 800751e:	2300      	movs	r3, #0
 8007520:	f109 39ff 	add.w	r9, r9, #4294967295
 8007524:	930f      	str	r3, [sp, #60]	; 0x3c
 8007526:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007528:	1b1c      	subs	r4, r3, r4
 800752a:	1e63      	subs	r3, r4, #1
 800752c:	9309      	str	r3, [sp, #36]	; 0x24
 800752e:	bf49      	itett	mi
 8007530:	f1c4 0301 	rsbmi	r3, r4, #1
 8007534:	2300      	movpl	r3, #0
 8007536:	9306      	strmi	r3, [sp, #24]
 8007538:	2300      	movmi	r3, #0
 800753a:	bf54      	ite	pl
 800753c:	9306      	strpl	r3, [sp, #24]
 800753e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007540:	f1b9 0f00 	cmp.w	r9, #0
 8007544:	db3c      	blt.n	80075c0 <_dtoa_r+0x238>
 8007546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007548:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800754c:	444b      	add	r3, r9
 800754e:	9309      	str	r3, [sp, #36]	; 0x24
 8007550:	2300      	movs	r3, #0
 8007552:	930a      	str	r3, [sp, #40]	; 0x28
 8007554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007556:	2b09      	cmp	r3, #9
 8007558:	d86c      	bhi.n	8007634 <_dtoa_r+0x2ac>
 800755a:	2b05      	cmp	r3, #5
 800755c:	bfc4      	itt	gt
 800755e:	3b04      	subgt	r3, #4
 8007560:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007562:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007564:	bfc8      	it	gt
 8007566:	2400      	movgt	r4, #0
 8007568:	f1a3 0302 	sub.w	r3, r3, #2
 800756c:	bfd8      	it	le
 800756e:	2401      	movle	r4, #1
 8007570:	2b03      	cmp	r3, #3
 8007572:	f200 808b 	bhi.w	800768c <_dtoa_r+0x304>
 8007576:	e8df f003 	tbb	[pc, r3]
 800757a:	4f2d      	.short	0x4f2d
 800757c:	5b4d      	.short	0x5b4d
 800757e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007582:	441c      	add	r4, r3
 8007584:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007588:	2b20      	cmp	r3, #32
 800758a:	bfc3      	ittte	gt
 800758c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007590:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007594:	fa09 f303 	lslgt.w	r3, r9, r3
 8007598:	f1c3 0320 	rsble	r3, r3, #32
 800759c:	bfc6      	itte	gt
 800759e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075a2:	4318      	orrgt	r0, r3
 80075a4:	fa06 f003 	lslle.w	r0, r6, r3
 80075a8:	f7f8 ff1c 	bl	80003e4 <__aeabi_ui2d>
 80075ac:	2301      	movs	r3, #1
 80075ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80075b2:	3c01      	subs	r4, #1
 80075b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80075b6:	e770      	b.n	800749a <_dtoa_r+0x112>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e7b3      	b.n	8007524 <_dtoa_r+0x19c>
 80075bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80075be:	e7b2      	b.n	8007526 <_dtoa_r+0x19e>
 80075c0:	9b06      	ldr	r3, [sp, #24]
 80075c2:	eba3 0309 	sub.w	r3, r3, r9
 80075c6:	9306      	str	r3, [sp, #24]
 80075c8:	f1c9 0300 	rsb	r3, r9, #0
 80075cc:	930a      	str	r3, [sp, #40]	; 0x28
 80075ce:	2300      	movs	r3, #0
 80075d0:	930e      	str	r3, [sp, #56]	; 0x38
 80075d2:	e7bf      	b.n	8007554 <_dtoa_r+0x1cc>
 80075d4:	2300      	movs	r3, #0
 80075d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc59      	bgt.n	8007692 <_dtoa_r+0x30a>
 80075de:	f04f 0b01 	mov.w	fp, #1
 80075e2:	465b      	mov	r3, fp
 80075e4:	f8cd b008 	str.w	fp, [sp, #8]
 80075e8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80075ec:	2200      	movs	r2, #0
 80075ee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80075f0:	6042      	str	r2, [r0, #4]
 80075f2:	2204      	movs	r2, #4
 80075f4:	f102 0614 	add.w	r6, r2, #20
 80075f8:	429e      	cmp	r6, r3
 80075fa:	6841      	ldr	r1, [r0, #4]
 80075fc:	d94f      	bls.n	800769e <_dtoa_r+0x316>
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 fcd8 	bl	8007fb4 <_Balloc>
 8007604:	9008      	str	r0, [sp, #32]
 8007606:	2800      	cmp	r0, #0
 8007608:	d14d      	bne.n	80076a6 <_dtoa_r+0x31e>
 800760a:	4602      	mov	r2, r0
 800760c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007610:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <_dtoa_r+0x300>)
 8007612:	e6cd      	b.n	80073b0 <_dtoa_r+0x28>
 8007614:	2301      	movs	r3, #1
 8007616:	e7de      	b.n	80075d6 <_dtoa_r+0x24e>
 8007618:	2300      	movs	r3, #0
 800761a:	930b      	str	r3, [sp, #44]	; 0x2c
 800761c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800761e:	eb09 0b03 	add.w	fp, r9, r3
 8007622:	f10b 0301 	add.w	r3, fp, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	9302      	str	r3, [sp, #8]
 800762a:	bfb8      	it	lt
 800762c:	2301      	movlt	r3, #1
 800762e:	e7dd      	b.n	80075ec <_dtoa_r+0x264>
 8007630:	2301      	movs	r3, #1
 8007632:	e7f2      	b.n	800761a <_dtoa_r+0x292>
 8007634:	2401      	movs	r4, #1
 8007636:	2300      	movs	r3, #0
 8007638:	940b      	str	r4, [sp, #44]	; 0x2c
 800763a:	9322      	str	r3, [sp, #136]	; 0x88
 800763c:	f04f 3bff 	mov.w	fp, #4294967295
 8007640:	2200      	movs	r2, #0
 8007642:	2312      	movs	r3, #18
 8007644:	f8cd b008 	str.w	fp, [sp, #8]
 8007648:	9223      	str	r2, [sp, #140]	; 0x8c
 800764a:	e7cf      	b.n	80075ec <_dtoa_r+0x264>
 800764c:	f3af 8000 	nop.w
 8007650:	636f4361 	.word	0x636f4361
 8007654:	3fd287a7 	.word	0x3fd287a7
 8007658:	8b60c8b3 	.word	0x8b60c8b3
 800765c:	3fc68a28 	.word	0x3fc68a28
 8007660:	509f79fb 	.word	0x509f79fb
 8007664:	3fd34413 	.word	0x3fd34413
 8007668:	080097a9 	.word	0x080097a9
 800766c:	080097c0 	.word	0x080097c0
 8007670:	7ff00000 	.word	0x7ff00000
 8007674:	080097a5 	.word	0x080097a5
 8007678:	0800979c 	.word	0x0800979c
 800767c:	08009779 	.word	0x08009779
 8007680:	3ff80000 	.word	0x3ff80000
 8007684:	080098b8 	.word	0x080098b8
 8007688:	0800981f 	.word	0x0800981f
 800768c:	2301      	movs	r3, #1
 800768e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007690:	e7d4      	b.n	800763c <_dtoa_r+0x2b4>
 8007692:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007696:	465b      	mov	r3, fp
 8007698:	f8cd b008 	str.w	fp, [sp, #8]
 800769c:	e7a6      	b.n	80075ec <_dtoa_r+0x264>
 800769e:	3101      	adds	r1, #1
 80076a0:	6041      	str	r1, [r0, #4]
 80076a2:	0052      	lsls	r2, r2, #1
 80076a4:	e7a6      	b.n	80075f4 <_dtoa_r+0x26c>
 80076a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076a8:	9a08      	ldr	r2, [sp, #32]
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	9b02      	ldr	r3, [sp, #8]
 80076ae:	2b0e      	cmp	r3, #14
 80076b0:	f200 80a8 	bhi.w	8007804 <_dtoa_r+0x47c>
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	f000 80a5 	beq.w	8007804 <_dtoa_r+0x47c>
 80076ba:	f1b9 0f00 	cmp.w	r9, #0
 80076be:	dd34      	ble.n	800772a <_dtoa_r+0x3a2>
 80076c0:	4a9a      	ldr	r2, [pc, #616]	; (800792c <_dtoa_r+0x5a4>)
 80076c2:	f009 030f 	and.w	r3, r9, #15
 80076c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076ca:	f419 7f80 	tst.w	r9, #256	; 0x100
 80076ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076d6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80076da:	d016      	beq.n	800770a <_dtoa_r+0x382>
 80076dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076e0:	4b93      	ldr	r3, [pc, #588]	; (8007930 <_dtoa_r+0x5a8>)
 80076e2:	2703      	movs	r7, #3
 80076e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076e8:	f7f9 f820 	bl	800072c <__aeabi_ddiv>
 80076ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f0:	f004 040f 	and.w	r4, r4, #15
 80076f4:	4e8e      	ldr	r6, [pc, #568]	; (8007930 <_dtoa_r+0x5a8>)
 80076f6:	b954      	cbnz	r4, 800770e <_dtoa_r+0x386>
 80076f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007700:	f7f9 f814 	bl	800072c <__aeabi_ddiv>
 8007704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007708:	e029      	b.n	800775e <_dtoa_r+0x3d6>
 800770a:	2702      	movs	r7, #2
 800770c:	e7f2      	b.n	80076f4 <_dtoa_r+0x36c>
 800770e:	07e1      	lsls	r1, r4, #31
 8007710:	d508      	bpl.n	8007724 <_dtoa_r+0x39c>
 8007712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007716:	e9d6 2300 	ldrd	r2, r3, [r6]
 800771a:	f7f8 fedd 	bl	80004d8 <__aeabi_dmul>
 800771e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007722:	3701      	adds	r7, #1
 8007724:	1064      	asrs	r4, r4, #1
 8007726:	3608      	adds	r6, #8
 8007728:	e7e5      	b.n	80076f6 <_dtoa_r+0x36e>
 800772a:	f000 80a5 	beq.w	8007878 <_dtoa_r+0x4f0>
 800772e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007732:	f1c9 0400 	rsb	r4, r9, #0
 8007736:	4b7d      	ldr	r3, [pc, #500]	; (800792c <_dtoa_r+0x5a4>)
 8007738:	f004 020f 	and.w	r2, r4, #15
 800773c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 fec8 	bl	80004d8 <__aeabi_dmul>
 8007748:	2702      	movs	r7, #2
 800774a:	2300      	movs	r3, #0
 800774c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007750:	4e77      	ldr	r6, [pc, #476]	; (8007930 <_dtoa_r+0x5a8>)
 8007752:	1124      	asrs	r4, r4, #4
 8007754:	2c00      	cmp	r4, #0
 8007756:	f040 8084 	bne.w	8007862 <_dtoa_r+0x4da>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1d2      	bne.n	8007704 <_dtoa_r+0x37c>
 800775e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 808b 	beq.w	800787c <_dtoa_r+0x4f4>
 8007766:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800776a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800776e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007772:	2200      	movs	r2, #0
 8007774:	4b6f      	ldr	r3, [pc, #444]	; (8007934 <_dtoa_r+0x5ac>)
 8007776:	f7f9 f921 	bl	80009bc <__aeabi_dcmplt>
 800777a:	2800      	cmp	r0, #0
 800777c:	d07e      	beq.n	800787c <_dtoa_r+0x4f4>
 800777e:	9b02      	ldr	r3, [sp, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d07b      	beq.n	800787c <_dtoa_r+0x4f4>
 8007784:	f1bb 0f00 	cmp.w	fp, #0
 8007788:	dd38      	ble.n	80077fc <_dtoa_r+0x474>
 800778a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800778e:	2200      	movs	r2, #0
 8007790:	4b69      	ldr	r3, [pc, #420]	; (8007938 <_dtoa_r+0x5b0>)
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	465c      	mov	r4, fp
 8007798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800779c:	f109 38ff 	add.w	r8, r9, #4294967295
 80077a0:	3701      	adds	r7, #1
 80077a2:	4638      	mov	r0, r7
 80077a4:	f7f8 fe2e 	bl	8000404 <__aeabi_i2d>
 80077a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ac:	f7f8 fe94 	bl	80004d8 <__aeabi_dmul>
 80077b0:	2200      	movs	r2, #0
 80077b2:	4b62      	ldr	r3, [pc, #392]	; (800793c <_dtoa_r+0x5b4>)
 80077b4:	f7f8 fcda 	bl	800016c <__adddf3>
 80077b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077c0:	9611      	str	r6, [sp, #68]	; 0x44
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d15d      	bne.n	8007882 <_dtoa_r+0x4fa>
 80077c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ca:	2200      	movs	r2, #0
 80077cc:	4b5c      	ldr	r3, [pc, #368]	; (8007940 <_dtoa_r+0x5b8>)
 80077ce:	f7f8 fccb 	bl	8000168 <__aeabi_dsub>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077da:	4633      	mov	r3, r6
 80077dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077de:	f7f9 f90b 	bl	80009f8 <__aeabi_dcmpgt>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f040 829e 	bne.w	8007d24 <_dtoa_r+0x99c>
 80077e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077f2:	f7f9 f8e3 	bl	80009bc <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f040 8292 	bne.w	8007d20 <_dtoa_r+0x998>
 80077fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007800:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007804:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007806:	2b00      	cmp	r3, #0
 8007808:	f2c0 8153 	blt.w	8007ab2 <_dtoa_r+0x72a>
 800780c:	f1b9 0f0e 	cmp.w	r9, #14
 8007810:	f300 814f 	bgt.w	8007ab2 <_dtoa_r+0x72a>
 8007814:	4b45      	ldr	r3, [pc, #276]	; (800792c <_dtoa_r+0x5a4>)
 8007816:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800781a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800781e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007822:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007824:	2b00      	cmp	r3, #0
 8007826:	f280 80db 	bge.w	80079e0 <_dtoa_r+0x658>
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f300 80d7 	bgt.w	80079e0 <_dtoa_r+0x658>
 8007832:	f040 8274 	bne.w	8007d1e <_dtoa_r+0x996>
 8007836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800783a:	2200      	movs	r2, #0
 800783c:	4b40      	ldr	r3, [pc, #256]	; (8007940 <_dtoa_r+0x5b8>)
 800783e:	f7f8 fe4b 	bl	80004d8 <__aeabi_dmul>
 8007842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007846:	f7f9 f8cd 	bl	80009e4 <__aeabi_dcmpge>
 800784a:	9c02      	ldr	r4, [sp, #8]
 800784c:	4626      	mov	r6, r4
 800784e:	2800      	cmp	r0, #0
 8007850:	f040 824a 	bne.w	8007ce8 <_dtoa_r+0x960>
 8007854:	2331      	movs	r3, #49	; 0x31
 8007856:	9f08      	ldr	r7, [sp, #32]
 8007858:	f109 0901 	add.w	r9, r9, #1
 800785c:	f807 3b01 	strb.w	r3, [r7], #1
 8007860:	e246      	b.n	8007cf0 <_dtoa_r+0x968>
 8007862:	07e2      	lsls	r2, r4, #31
 8007864:	d505      	bpl.n	8007872 <_dtoa_r+0x4ea>
 8007866:	e9d6 2300 	ldrd	r2, r3, [r6]
 800786a:	f7f8 fe35 	bl	80004d8 <__aeabi_dmul>
 800786e:	2301      	movs	r3, #1
 8007870:	3701      	adds	r7, #1
 8007872:	1064      	asrs	r4, r4, #1
 8007874:	3608      	adds	r6, #8
 8007876:	e76d      	b.n	8007754 <_dtoa_r+0x3cc>
 8007878:	2702      	movs	r7, #2
 800787a:	e770      	b.n	800775e <_dtoa_r+0x3d6>
 800787c:	46c8      	mov	r8, r9
 800787e:	9c02      	ldr	r4, [sp, #8]
 8007880:	e78f      	b.n	80077a2 <_dtoa_r+0x41a>
 8007882:	9908      	ldr	r1, [sp, #32]
 8007884:	4b29      	ldr	r3, [pc, #164]	; (800792c <_dtoa_r+0x5a4>)
 8007886:	4421      	add	r1, r4
 8007888:	9112      	str	r1, [sp, #72]	; 0x48
 800788a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800788c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007890:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007894:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007898:	2900      	cmp	r1, #0
 800789a:	d055      	beq.n	8007948 <_dtoa_r+0x5c0>
 800789c:	2000      	movs	r0, #0
 800789e:	4929      	ldr	r1, [pc, #164]	; (8007944 <_dtoa_r+0x5bc>)
 80078a0:	f7f8 ff44 	bl	800072c <__aeabi_ddiv>
 80078a4:	463b      	mov	r3, r7
 80078a6:	4632      	mov	r2, r6
 80078a8:	f7f8 fc5e 	bl	8000168 <__aeabi_dsub>
 80078ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078b0:	9f08      	ldr	r7, [sp, #32]
 80078b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b6:	f7f9 f8bf 	bl	8000a38 <__aeabi_d2iz>
 80078ba:	4604      	mov	r4, r0
 80078bc:	f7f8 fda2 	bl	8000404 <__aeabi_i2d>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c8:	f7f8 fc4e 	bl	8000168 <__aeabi_dsub>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	3430      	adds	r4, #48	; 0x30
 80078d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078da:	f807 4b01 	strb.w	r4, [r7], #1
 80078de:	f7f9 f86d 	bl	80009bc <__aeabi_dcmplt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d174      	bne.n	80079d0 <_dtoa_r+0x648>
 80078e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ea:	2000      	movs	r0, #0
 80078ec:	4911      	ldr	r1, [pc, #68]	; (8007934 <_dtoa_r+0x5ac>)
 80078ee:	f7f8 fc3b 	bl	8000168 <__aeabi_dsub>
 80078f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078f6:	f7f9 f861 	bl	80009bc <__aeabi_dcmplt>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f040 80b6 	bne.w	8007a6c <_dtoa_r+0x6e4>
 8007900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007902:	429f      	cmp	r7, r3
 8007904:	f43f af7a 	beq.w	80077fc <_dtoa_r+0x474>
 8007908:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800790c:	2200      	movs	r2, #0
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <_dtoa_r+0x5b0>)
 8007910:	f7f8 fde2 	bl	80004d8 <__aeabi_dmul>
 8007914:	2200      	movs	r2, #0
 8007916:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800791a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <_dtoa_r+0x5b0>)
 8007920:	f7f8 fdda 	bl	80004d8 <__aeabi_dmul>
 8007924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007928:	e7c3      	b.n	80078b2 <_dtoa_r+0x52a>
 800792a:	bf00      	nop
 800792c:	080098b8 	.word	0x080098b8
 8007930:	08009890 	.word	0x08009890
 8007934:	3ff00000 	.word	0x3ff00000
 8007938:	40240000 	.word	0x40240000
 800793c:	401c0000 	.word	0x401c0000
 8007940:	40140000 	.word	0x40140000
 8007944:	3fe00000 	.word	0x3fe00000
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f8 fdc4 	bl	80004d8 <__aeabi_dmul>
 8007950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007952:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007956:	9c08      	ldr	r4, [sp, #32]
 8007958:	9314      	str	r3, [sp, #80]	; 0x50
 800795a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800795e:	f7f9 f86b 	bl	8000a38 <__aeabi_d2iz>
 8007962:	9015      	str	r0, [sp, #84]	; 0x54
 8007964:	f7f8 fd4e 	bl	8000404 <__aeabi_i2d>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007970:	f7f8 fbfa 	bl	8000168 <__aeabi_dsub>
 8007974:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007976:	4606      	mov	r6, r0
 8007978:	3330      	adds	r3, #48	; 0x30
 800797a:	f804 3b01 	strb.w	r3, [r4], #1
 800797e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007980:	460f      	mov	r7, r1
 8007982:	429c      	cmp	r4, r3
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	d124      	bne.n	80079d4 <_dtoa_r+0x64c>
 800798a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800798e:	4bb3      	ldr	r3, [pc, #716]	; (8007c5c <_dtoa_r+0x8d4>)
 8007990:	f7f8 fbec 	bl	800016c <__adddf3>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4630      	mov	r0, r6
 800799a:	4639      	mov	r1, r7
 800799c:	f7f9 f82c 	bl	80009f8 <__aeabi_dcmpgt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d162      	bne.n	8007a6a <_dtoa_r+0x6e2>
 80079a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079a8:	2000      	movs	r0, #0
 80079aa:	49ac      	ldr	r1, [pc, #688]	; (8007c5c <_dtoa_r+0x8d4>)
 80079ac:	f7f8 fbdc 	bl	8000168 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4630      	mov	r0, r6
 80079b6:	4639      	mov	r1, r7
 80079b8:	f7f9 f800 	bl	80009bc <__aeabi_dcmplt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f43f af1d 	beq.w	80077fc <_dtoa_r+0x474>
 80079c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80079c4:	1e7b      	subs	r3, r7, #1
 80079c6:	9314      	str	r3, [sp, #80]	; 0x50
 80079c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80079cc:	2b30      	cmp	r3, #48	; 0x30
 80079ce:	d0f8      	beq.n	80079c2 <_dtoa_r+0x63a>
 80079d0:	46c1      	mov	r9, r8
 80079d2:	e03a      	b.n	8007a4a <_dtoa_r+0x6c2>
 80079d4:	4ba2      	ldr	r3, [pc, #648]	; (8007c60 <_dtoa_r+0x8d8>)
 80079d6:	f7f8 fd7f 	bl	80004d8 <__aeabi_dmul>
 80079da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079de:	e7bc      	b.n	800795a <_dtoa_r+0x5d2>
 80079e0:	9f08      	ldr	r7, [sp, #32]
 80079e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ea:	f7f8 fe9f 	bl	800072c <__aeabi_ddiv>
 80079ee:	f7f9 f823 	bl	8000a38 <__aeabi_d2iz>
 80079f2:	4604      	mov	r4, r0
 80079f4:	f7f8 fd06 	bl	8000404 <__aeabi_i2d>
 80079f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079fc:	f7f8 fd6c 	bl	80004d8 <__aeabi_dmul>
 8007a00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007a04:	460b      	mov	r3, r1
 8007a06:	4602      	mov	r2, r0
 8007a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a0c:	f7f8 fbac 	bl	8000168 <__aeabi_dsub>
 8007a10:	f807 6b01 	strb.w	r6, [r7], #1
 8007a14:	9e08      	ldr	r6, [sp, #32]
 8007a16:	9b02      	ldr	r3, [sp, #8]
 8007a18:	1bbe      	subs	r6, r7, r6
 8007a1a:	42b3      	cmp	r3, r6
 8007a1c:	d13a      	bne.n	8007a94 <_dtoa_r+0x70c>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	f7f8 fba3 	bl	800016c <__adddf3>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a32:	f7f8 ffe1 	bl	80009f8 <__aeabi_dcmpgt>
 8007a36:	bb58      	cbnz	r0, 8007a90 <_dtoa_r+0x708>
 8007a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a40:	f7f8 ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8007a44:	b108      	cbz	r0, 8007a4a <_dtoa_r+0x6c2>
 8007a46:	07e1      	lsls	r1, r4, #31
 8007a48:	d422      	bmi.n	8007a90 <_dtoa_r+0x708>
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	4651      	mov	r1, sl
 8007a4e:	f000 faf1 	bl	8008034 <_Bfree>
 8007a52:	2300      	movs	r3, #0
 8007a54:	703b      	strb	r3, [r7, #0]
 8007a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a58:	f109 0001 	add.w	r0, r9, #1
 8007a5c:	6018      	str	r0, [r3, #0]
 8007a5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f43f acdf 	beq.w	8007424 <_dtoa_r+0x9c>
 8007a66:	601f      	str	r7, [r3, #0]
 8007a68:	e4dc      	b.n	8007424 <_dtoa_r+0x9c>
 8007a6a:	4627      	mov	r7, r4
 8007a6c:	463b      	mov	r3, r7
 8007a6e:	461f      	mov	r7, r3
 8007a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a74:	2a39      	cmp	r2, #57	; 0x39
 8007a76:	d107      	bne.n	8007a88 <_dtoa_r+0x700>
 8007a78:	9a08      	ldr	r2, [sp, #32]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d1f7      	bne.n	8007a6e <_dtoa_r+0x6e6>
 8007a7e:	2230      	movs	r2, #48	; 0x30
 8007a80:	9908      	ldr	r1, [sp, #32]
 8007a82:	f108 0801 	add.w	r8, r8, #1
 8007a86:	700a      	strb	r2, [r1, #0]
 8007a88:	781a      	ldrb	r2, [r3, #0]
 8007a8a:	3201      	adds	r2, #1
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e79f      	b.n	80079d0 <_dtoa_r+0x648>
 8007a90:	46c8      	mov	r8, r9
 8007a92:	e7eb      	b.n	8007a6c <_dtoa_r+0x6e4>
 8007a94:	2200      	movs	r2, #0
 8007a96:	4b72      	ldr	r3, [pc, #456]	; (8007c60 <_dtoa_r+0x8d8>)
 8007a98:	f7f8 fd1e 	bl	80004d8 <__aeabi_dmul>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f7f8 ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d098      	beq.n	80079e2 <_dtoa_r+0x65a>
 8007ab0:	e7cb      	b.n	8007a4a <_dtoa_r+0x6c2>
 8007ab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ab4:	2a00      	cmp	r2, #0
 8007ab6:	f000 80cd 	beq.w	8007c54 <_dtoa_r+0x8cc>
 8007aba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007abc:	2a01      	cmp	r2, #1
 8007abe:	f300 80af 	bgt.w	8007c20 <_dtoa_r+0x898>
 8007ac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	f000 80a7 	beq.w	8007c18 <_dtoa_r+0x890>
 8007aca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ace:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ad0:	9f06      	ldr	r7, [sp, #24]
 8007ad2:	9a06      	ldr	r2, [sp, #24]
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	441a      	add	r2, r3
 8007ad8:	9206      	str	r2, [sp, #24]
 8007ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007adc:	4628      	mov	r0, r5
 8007ade:	441a      	add	r2, r3
 8007ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae2:	f000 fb61 	bl	80081a8 <__i2b>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	dd0c      	ble.n	8007b06 <_dtoa_r+0x77e>
 8007aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dd09      	ble.n	8007b06 <_dtoa_r+0x77e>
 8007af2:	42bb      	cmp	r3, r7
 8007af4:	bfa8      	it	ge
 8007af6:	463b      	movge	r3, r7
 8007af8:	9a06      	ldr	r2, [sp, #24]
 8007afa:	1aff      	subs	r7, r7, r3
 8007afc:	1ad2      	subs	r2, r2, r3
 8007afe:	9206      	str	r2, [sp, #24]
 8007b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	9309      	str	r3, [sp, #36]	; 0x24
 8007b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b08:	b1f3      	cbz	r3, 8007b48 <_dtoa_r+0x7c0>
 8007b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80a9 	beq.w	8007c64 <_dtoa_r+0x8dc>
 8007b12:	2c00      	cmp	r4, #0
 8007b14:	dd10      	ble.n	8007b38 <_dtoa_r+0x7b0>
 8007b16:	4631      	mov	r1, r6
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 fbfe 	bl	800831c <__pow5mult>
 8007b20:	4652      	mov	r2, sl
 8007b22:	4601      	mov	r1, r0
 8007b24:	4606      	mov	r6, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 fb54 	bl	80081d4 <__multiply>
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4651      	mov	r1, sl
 8007b30:	4628      	mov	r0, r5
 8007b32:	f000 fa7f 	bl	8008034 <_Bfree>
 8007b36:	46c2      	mov	sl, r8
 8007b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3a:	1b1a      	subs	r2, r3, r4
 8007b3c:	d004      	beq.n	8007b48 <_dtoa_r+0x7c0>
 8007b3e:	4651      	mov	r1, sl
 8007b40:	4628      	mov	r0, r5
 8007b42:	f000 fbeb 	bl	800831c <__pow5mult>
 8007b46:	4682      	mov	sl, r0
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 fb2c 	bl	80081a8 <__i2b>
 8007b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b52:	4604      	mov	r4, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f340 8087 	ble.w	8007c68 <_dtoa_r+0x8e0>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4601      	mov	r1, r0
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 fbdc 	bl	800831c <__pow5mult>
 8007b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b66:	4604      	mov	r4, r0
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	f340 8080 	ble.w	8007c6e <_dtoa_r+0x8e6>
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b78:	6918      	ldr	r0, [r3, #16]
 8007b7a:	f000 fac7 	bl	800810c <__hi0bits>
 8007b7e:	f1c0 0020 	rsb	r0, r0, #32
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	4418      	add	r0, r3
 8007b86:	f010 001f 	ands.w	r0, r0, #31
 8007b8a:	f000 8092 	beq.w	8007cb2 <_dtoa_r+0x92a>
 8007b8e:	f1c0 0320 	rsb	r3, r0, #32
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	f340 808a 	ble.w	8007cac <_dtoa_r+0x924>
 8007b98:	f1c0 001c 	rsb	r0, r0, #28
 8007b9c:	9b06      	ldr	r3, [sp, #24]
 8007b9e:	4407      	add	r7, r0
 8007ba0:	4403      	add	r3, r0
 8007ba2:	9306      	str	r3, [sp, #24]
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	4403      	add	r3, r0
 8007ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd05      	ble.n	8007bbc <_dtoa_r+0x834>
 8007bb0:	4651      	mov	r1, sl
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f000 fc0b 	bl	80083d0 <__lshift>
 8007bba:	4682      	mov	sl, r0
 8007bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dd05      	ble.n	8007bce <_dtoa_r+0x846>
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 fc02 	bl	80083d0 <__lshift>
 8007bcc:	4604      	mov	r4, r0
 8007bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d070      	beq.n	8007cb6 <_dtoa_r+0x92e>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	f000 fc66 	bl	80084a8 <__mcmp>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	da6a      	bge.n	8007cb6 <_dtoa_r+0x92e>
 8007be0:	2300      	movs	r3, #0
 8007be2:	4651      	mov	r1, sl
 8007be4:	220a      	movs	r2, #10
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 fa46 	bl	8008078 <__multadd>
 8007bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bee:	4682      	mov	sl, r0
 8007bf0:	f109 39ff 	add.w	r9, r9, #4294967295
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8193 	beq.w	8007f20 <_dtoa_r+0xb98>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	220a      	movs	r2, #10
 8007c00:	4628      	mov	r0, r5
 8007c02:	f000 fa39 	bl	8008078 <__multadd>
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	f300 8093 	bgt.w	8007d36 <_dtoa_r+0x9ae>
 8007c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	dc57      	bgt.n	8007cc6 <_dtoa_r+0x93e>
 8007c16:	e08e      	b.n	8007d36 <_dtoa_r+0x9ae>
 8007c18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c1e:	e756      	b.n	8007ace <_dtoa_r+0x746>
 8007c20:	9b02      	ldr	r3, [sp, #8]
 8007c22:	1e5c      	subs	r4, r3, #1
 8007c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	bfb7      	itett	lt
 8007c2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c2c:	1b1c      	subge	r4, r3, r4
 8007c2e:	1ae2      	sublt	r2, r4, r3
 8007c30:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007c32:	bfbe      	ittt	lt
 8007c34:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007c36:	189b      	addlt	r3, r3, r2
 8007c38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c3a:	9b02      	ldr	r3, [sp, #8]
 8007c3c:	bfb8      	it	lt
 8007c3e:	2400      	movlt	r4, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bfbb      	ittet	lt
 8007c44:	9b06      	ldrlt	r3, [sp, #24]
 8007c46:	9a02      	ldrlt	r2, [sp, #8]
 8007c48:	9f06      	ldrge	r7, [sp, #24]
 8007c4a:	1a9f      	sublt	r7, r3, r2
 8007c4c:	bfac      	ite	ge
 8007c4e:	9b02      	ldrge	r3, [sp, #8]
 8007c50:	2300      	movlt	r3, #0
 8007c52:	e73e      	b.n	8007ad2 <_dtoa_r+0x74a>
 8007c54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c56:	9f06      	ldr	r7, [sp, #24]
 8007c58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c5a:	e745      	b.n	8007ae8 <_dtoa_r+0x760>
 8007c5c:	3fe00000 	.word	0x3fe00000
 8007c60:	40240000 	.word	0x40240000
 8007c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c66:	e76a      	b.n	8007b3e <_dtoa_r+0x7b6>
 8007c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	dc19      	bgt.n	8007ca2 <_dtoa_r+0x91a>
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	b9bb      	cbnz	r3, 8007ca2 <_dtoa_r+0x91a>
 8007c72:	9b05      	ldr	r3, [sp, #20]
 8007c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c78:	b99b      	cbnz	r3, 8007ca2 <_dtoa_r+0x91a>
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c80:	0d1b      	lsrs	r3, r3, #20
 8007c82:	051b      	lsls	r3, r3, #20
 8007c84:	b183      	cbz	r3, 8007ca8 <_dtoa_r+0x920>
 8007c86:	f04f 0801 	mov.w	r8, #1
 8007c8a:	9b06      	ldr	r3, [sp, #24]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	9306      	str	r3, [sp, #24]
 8007c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c92:	3301      	adds	r3, #1
 8007c94:	9309      	str	r3, [sp, #36]	; 0x24
 8007c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f47f af6a 	bne.w	8007b72 <_dtoa_r+0x7ea>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	e76f      	b.n	8007b82 <_dtoa_r+0x7fa>
 8007ca2:	f04f 0800 	mov.w	r8, #0
 8007ca6:	e7f6      	b.n	8007c96 <_dtoa_r+0x90e>
 8007ca8:	4698      	mov	r8, r3
 8007caa:	e7f4      	b.n	8007c96 <_dtoa_r+0x90e>
 8007cac:	f43f af7d 	beq.w	8007baa <_dtoa_r+0x822>
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	301c      	adds	r0, #28
 8007cb4:	e772      	b.n	8007b9c <_dtoa_r+0x814>
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc36      	bgt.n	8007d2a <_dtoa_r+0x9a2>
 8007cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	dd33      	ble.n	8007d2a <_dtoa_r+0x9a2>
 8007cc2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007cc6:	f1bb 0f00 	cmp.w	fp, #0
 8007cca:	d10d      	bne.n	8007ce8 <_dtoa_r+0x960>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	465b      	mov	r3, fp
 8007cd0:	2205      	movs	r2, #5
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 f9d0 	bl	8008078 <__multadd>
 8007cd8:	4601      	mov	r1, r0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4650      	mov	r0, sl
 8007cde:	f000 fbe3 	bl	80084a8 <__mcmp>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	f73f adb6 	bgt.w	8007854 <_dtoa_r+0x4cc>
 8007ce8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cea:	9f08      	ldr	r7, [sp, #32]
 8007cec:	ea6f 0903 	mvn.w	r9, r3
 8007cf0:	f04f 0800 	mov.w	r8, #0
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f99c 	bl	8008034 <_Bfree>
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	f43f aea4 	beq.w	8007a4a <_dtoa_r+0x6c2>
 8007d02:	f1b8 0f00 	cmp.w	r8, #0
 8007d06:	d005      	beq.n	8007d14 <_dtoa_r+0x98c>
 8007d08:	45b0      	cmp	r8, r6
 8007d0a:	d003      	beq.n	8007d14 <_dtoa_r+0x98c>
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f990 	bl	8008034 <_Bfree>
 8007d14:	4631      	mov	r1, r6
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f98c 	bl	8008034 <_Bfree>
 8007d1c:	e695      	b.n	8007a4a <_dtoa_r+0x6c2>
 8007d1e:	2400      	movs	r4, #0
 8007d20:	4626      	mov	r6, r4
 8007d22:	e7e1      	b.n	8007ce8 <_dtoa_r+0x960>
 8007d24:	46c1      	mov	r9, r8
 8007d26:	4626      	mov	r6, r4
 8007d28:	e594      	b.n	8007854 <_dtoa_r+0x4cc>
 8007d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 80fc 	beq.w	8007f2e <_dtoa_r+0xba6>
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	dd05      	ble.n	8007d46 <_dtoa_r+0x9be>
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f000 fb46 	bl	80083d0 <__lshift>
 8007d44:	4606      	mov	r6, r0
 8007d46:	f1b8 0f00 	cmp.w	r8, #0
 8007d4a:	d05c      	beq.n	8007e06 <_dtoa_r+0xa7e>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	6871      	ldr	r1, [r6, #4]
 8007d50:	f000 f930 	bl	8007fb4 <_Balloc>
 8007d54:	4607      	mov	r7, r0
 8007d56:	b928      	cbnz	r0, 8007d64 <_dtoa_r+0x9dc>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d5e:	4b7e      	ldr	r3, [pc, #504]	; (8007f58 <_dtoa_r+0xbd0>)
 8007d60:	f7ff bb26 	b.w	80073b0 <_dtoa_r+0x28>
 8007d64:	6932      	ldr	r2, [r6, #16]
 8007d66:	f106 010c 	add.w	r1, r6, #12
 8007d6a:	3202      	adds	r2, #2
 8007d6c:	0092      	lsls	r2, r2, #2
 8007d6e:	300c      	adds	r0, #12
 8007d70:	f000 f912 	bl	8007f98 <memcpy>
 8007d74:	2201      	movs	r2, #1
 8007d76:	4639      	mov	r1, r7
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 fb29 	bl	80083d0 <__lshift>
 8007d7e:	46b0      	mov	r8, r6
 8007d80:	4606      	mov	r6, r0
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	3301      	adds	r3, #1
 8007d86:	9302      	str	r3, [sp, #8]
 8007d88:	9b08      	ldr	r3, [sp, #32]
 8007d8a:	445b      	add	r3, fp
 8007d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8e:	9b04      	ldr	r3, [sp, #16]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	9309      	str	r3, [sp, #36]	; 0x24
 8007d96:	9b02      	ldr	r3, [sp, #8]
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007da0:	f7ff fa62 	bl	8007268 <quorem>
 8007da4:	4603      	mov	r3, r0
 8007da6:	4641      	mov	r1, r8
 8007da8:	3330      	adds	r3, #48	; 0x30
 8007daa:	9004      	str	r0, [sp, #16]
 8007dac:	4650      	mov	r0, sl
 8007dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db0:	f000 fb7a 	bl	80084a8 <__mcmp>
 8007db4:	4632      	mov	r2, r6
 8007db6:	9006      	str	r0, [sp, #24]
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 fb90 	bl	80084e0 <__mdiff>
 8007dc0:	68c2      	ldr	r2, [r0, #12]
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc6:	bb02      	cbnz	r2, 8007e0a <_dtoa_r+0xa82>
 8007dc8:	4601      	mov	r1, r0
 8007dca:	4650      	mov	r0, sl
 8007dcc:	f000 fb6c 	bl	80084a8 <__mcmp>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007ddc:	f000 f92a 	bl	8008034 <_Bfree>
 8007de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007de4:	9f02      	ldr	r7, [sp, #8]
 8007de6:	ea43 0102 	orr.w	r1, r3, r2
 8007dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dec:	430b      	orrs	r3, r1
 8007dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df0:	d10d      	bne.n	8007e0e <_dtoa_r+0xa86>
 8007df2:	2b39      	cmp	r3, #57	; 0x39
 8007df4:	d027      	beq.n	8007e46 <_dtoa_r+0xabe>
 8007df6:	9a06      	ldr	r2, [sp, #24]
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	dd01      	ble.n	8007e00 <_dtoa_r+0xa78>
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	3331      	adds	r3, #49	; 0x31
 8007e00:	f88b 3000 	strb.w	r3, [fp]
 8007e04:	e776      	b.n	8007cf4 <_dtoa_r+0x96c>
 8007e06:	4630      	mov	r0, r6
 8007e08:	e7b9      	b.n	8007d7e <_dtoa_r+0x9f6>
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	e7e2      	b.n	8007dd4 <_dtoa_r+0xa4c>
 8007e0e:	9906      	ldr	r1, [sp, #24]
 8007e10:	2900      	cmp	r1, #0
 8007e12:	db04      	blt.n	8007e1e <_dtoa_r+0xa96>
 8007e14:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007e16:	4301      	orrs	r1, r0
 8007e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e1a:	4301      	orrs	r1, r0
 8007e1c:	d120      	bne.n	8007e60 <_dtoa_r+0xad8>
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	ddee      	ble.n	8007e00 <_dtoa_r+0xa78>
 8007e22:	4651      	mov	r1, sl
 8007e24:	2201      	movs	r2, #1
 8007e26:	4628      	mov	r0, r5
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	f000 fad1 	bl	80083d0 <__lshift>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4682      	mov	sl, r0
 8007e32:	f000 fb39 	bl	80084a8 <__mcmp>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	dc02      	bgt.n	8007e42 <_dtoa_r+0xaba>
 8007e3c:	d1e0      	bne.n	8007e00 <_dtoa_r+0xa78>
 8007e3e:	07da      	lsls	r2, r3, #31
 8007e40:	d5de      	bpl.n	8007e00 <_dtoa_r+0xa78>
 8007e42:	2b39      	cmp	r3, #57	; 0x39
 8007e44:	d1da      	bne.n	8007dfc <_dtoa_r+0xa74>
 8007e46:	2339      	movs	r3, #57	; 0x39
 8007e48:	f88b 3000 	strb.w	r3, [fp]
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	461f      	mov	r7, r3
 8007e50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	2a39      	cmp	r2, #57	; 0x39
 8007e58:	d050      	beq.n	8007efc <_dtoa_r+0xb74>
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	e749      	b.n	8007cf4 <_dtoa_r+0x96c>
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	dd03      	ble.n	8007e6c <_dtoa_r+0xae4>
 8007e64:	2b39      	cmp	r3, #57	; 0x39
 8007e66:	d0ee      	beq.n	8007e46 <_dtoa_r+0xabe>
 8007e68:	3301      	adds	r3, #1
 8007e6a:	e7c9      	b.n	8007e00 <_dtoa_r+0xa78>
 8007e6c:	9a02      	ldr	r2, [sp, #8]
 8007e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e70:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e74:	428a      	cmp	r2, r1
 8007e76:	d02a      	beq.n	8007ece <_dtoa_r+0xb46>
 8007e78:	4651      	mov	r1, sl
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	220a      	movs	r2, #10
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f8fa 	bl	8008078 <__multadd>
 8007e84:	45b0      	cmp	r8, r6
 8007e86:	4682      	mov	sl, r0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	f04f 020a 	mov.w	r2, #10
 8007e90:	4641      	mov	r1, r8
 8007e92:	4628      	mov	r0, r5
 8007e94:	d107      	bne.n	8007ea6 <_dtoa_r+0xb1e>
 8007e96:	f000 f8ef 	bl	8008078 <__multadd>
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	9b02      	ldr	r3, [sp, #8]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	9302      	str	r3, [sp, #8]
 8007ea4:	e777      	b.n	8007d96 <_dtoa_r+0xa0e>
 8007ea6:	f000 f8e7 	bl	8008078 <__multadd>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4680      	mov	r8, r0
 8007eae:	2300      	movs	r3, #0
 8007eb0:	220a      	movs	r2, #10
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 f8e0 	bl	8008078 <__multadd>
 8007eb8:	4606      	mov	r6, r0
 8007eba:	e7f0      	b.n	8007e9e <_dtoa_r+0xb16>
 8007ebc:	f1bb 0f00 	cmp.w	fp, #0
 8007ec0:	bfcc      	ite	gt
 8007ec2:	465f      	movgt	r7, fp
 8007ec4:	2701      	movle	r7, #1
 8007ec6:	f04f 0800 	mov.w	r8, #0
 8007eca:	9a08      	ldr	r2, [sp, #32]
 8007ecc:	4417      	add	r7, r2
 8007ece:	4651      	mov	r1, sl
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	f000 fa7b 	bl	80083d0 <__lshift>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4682      	mov	sl, r0
 8007ede:	f000 fae3 	bl	80084a8 <__mcmp>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	dcb2      	bgt.n	8007e4c <_dtoa_r+0xac4>
 8007ee6:	d102      	bne.n	8007eee <_dtoa_r+0xb66>
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	07db      	lsls	r3, r3, #31
 8007eec:	d4ae      	bmi.n	8007e4c <_dtoa_r+0xac4>
 8007eee:	463b      	mov	r3, r7
 8007ef0:	461f      	mov	r7, r3
 8007ef2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ef6:	2a30      	cmp	r2, #48	; 0x30
 8007ef8:	d0fa      	beq.n	8007ef0 <_dtoa_r+0xb68>
 8007efa:	e6fb      	b.n	8007cf4 <_dtoa_r+0x96c>
 8007efc:	9a08      	ldr	r2, [sp, #32]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d1a5      	bne.n	8007e4e <_dtoa_r+0xac6>
 8007f02:	2331      	movs	r3, #49	; 0x31
 8007f04:	f109 0901 	add.w	r9, r9, #1
 8007f08:	7013      	strb	r3, [r2, #0]
 8007f0a:	e6f3      	b.n	8007cf4 <_dtoa_r+0x96c>
 8007f0c:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <_dtoa_r+0xbd4>)
 8007f0e:	f7ff baa7 	b.w	8007460 <_dtoa_r+0xd8>
 8007f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f47f aa80 	bne.w	800741a <_dtoa_r+0x92>
 8007f1a:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <_dtoa_r+0xbd8>)
 8007f1c:	f7ff baa0 	b.w	8007460 <_dtoa_r+0xd8>
 8007f20:	f1bb 0f00 	cmp.w	fp, #0
 8007f24:	dc03      	bgt.n	8007f2e <_dtoa_r+0xba6>
 8007f26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	f73f aecc 	bgt.w	8007cc6 <_dtoa_r+0x93e>
 8007f2e:	9f08      	ldr	r7, [sp, #32]
 8007f30:	4621      	mov	r1, r4
 8007f32:	4650      	mov	r0, sl
 8007f34:	f7ff f998 	bl	8007268 <quorem>
 8007f38:	9a08      	ldr	r2, [sp, #32]
 8007f3a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f3e:	f807 3b01 	strb.w	r3, [r7], #1
 8007f42:	1aba      	subs	r2, r7, r2
 8007f44:	4593      	cmp	fp, r2
 8007f46:	ddb9      	ble.n	8007ebc <_dtoa_r+0xb34>
 8007f48:	4651      	mov	r1, sl
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f000 f892 	bl	8008078 <__multadd>
 8007f54:	4682      	mov	sl, r0
 8007f56:	e7eb      	b.n	8007f30 <_dtoa_r+0xba8>
 8007f58:	0800981f 	.word	0x0800981f
 8007f5c:	08009778 	.word	0x08009778
 8007f60:	0800979c 	.word	0x0800979c

08007f64 <_localeconv_r>:
 8007f64:	4800      	ldr	r0, [pc, #0]	; (8007f68 <_localeconv_r+0x4>)
 8007f66:	4770      	bx	lr
 8007f68:	2000016c 	.word	0x2000016c

08007f6c <malloc>:
 8007f6c:	4b02      	ldr	r3, [pc, #8]	; (8007f78 <malloc+0xc>)
 8007f6e:	4601      	mov	r1, r0
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	f000 bbfb 	b.w	800876c <_malloc_r>
 8007f76:	bf00      	nop
 8007f78:	20000018 	.word	0x20000018

08007f7c <memchr>:
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	b2c9      	uxtb	r1, r1
 8007f82:	4402      	add	r2, r0
 8007f84:	4293      	cmp	r3, r2
 8007f86:	4618      	mov	r0, r3
 8007f88:	d101      	bne.n	8007f8e <memchr+0x12>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e003      	b.n	8007f96 <memchr+0x1a>
 8007f8e:	7804      	ldrb	r4, [r0, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	428c      	cmp	r4, r1
 8007f94:	d1f6      	bne.n	8007f84 <memchr+0x8>
 8007f96:	bd10      	pop	{r4, pc}

08007f98 <memcpy>:
 8007f98:	440a      	add	r2, r1
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa0:	d100      	bne.n	8007fa4 <memcpy+0xc>
 8007fa2:	4770      	bx	lr
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007faa:	4291      	cmp	r1, r2
 8007fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb0:	d1f9      	bne.n	8007fa6 <memcpy+0xe>
 8007fb2:	bd10      	pop	{r4, pc}

08007fb4 <_Balloc>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	b976      	cbnz	r6, 8007fdc <_Balloc+0x28>
 8007fbe:	2010      	movs	r0, #16
 8007fc0:	f7ff ffd4 	bl	8007f6c <malloc>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6260      	str	r0, [r4, #36]	; 0x24
 8007fc8:	b920      	cbnz	r0, 8007fd4 <_Balloc+0x20>
 8007fca:	2166      	movs	r1, #102	; 0x66
 8007fcc:	4b17      	ldr	r3, [pc, #92]	; (800802c <_Balloc+0x78>)
 8007fce:	4818      	ldr	r0, [pc, #96]	; (8008030 <_Balloc+0x7c>)
 8007fd0:	f000 fd92 	bl	8008af8 <__assert_func>
 8007fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd8:	6006      	str	r6, [r0, #0]
 8007fda:	60c6      	str	r6, [r0, #12]
 8007fdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fde:	68f3      	ldr	r3, [r6, #12]
 8007fe0:	b183      	cbz	r3, 8008004 <_Balloc+0x50>
 8007fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fea:	b9b8      	cbnz	r0, 800801c <_Balloc+0x68>
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f605 	lsl.w	r6, r1, r5
 8007ff2:	1d72      	adds	r2, r6, #5
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	f000 fb5e 	bl	80086b8 <_calloc_r>
 8007ffc:	b160      	cbz	r0, 8008018 <_Balloc+0x64>
 8007ffe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008002:	e00e      	b.n	8008022 <_Balloc+0x6e>
 8008004:	2221      	movs	r2, #33	; 0x21
 8008006:	2104      	movs	r1, #4
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fb55 	bl	80086b8 <_calloc_r>
 800800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008010:	60f0      	str	r0, [r6, #12]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e4      	bne.n	8007fe2 <_Balloc+0x2e>
 8008018:	2000      	movs	r0, #0
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	6802      	ldr	r2, [r0, #0]
 800801e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008022:	2300      	movs	r3, #0
 8008024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008028:	e7f7      	b.n	800801a <_Balloc+0x66>
 800802a:	bf00      	nop
 800802c:	080097a9 	.word	0x080097a9
 8008030:	08009830 	.word	0x08009830

08008034 <_Bfree>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008038:	4605      	mov	r5, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b976      	cbnz	r6, 800805c <_Bfree+0x28>
 800803e:	2010      	movs	r0, #16
 8008040:	f7ff ff94 	bl	8007f6c <malloc>
 8008044:	4602      	mov	r2, r0
 8008046:	6268      	str	r0, [r5, #36]	; 0x24
 8008048:	b920      	cbnz	r0, 8008054 <_Bfree+0x20>
 800804a:	218a      	movs	r1, #138	; 0x8a
 800804c:	4b08      	ldr	r3, [pc, #32]	; (8008070 <_Bfree+0x3c>)
 800804e:	4809      	ldr	r0, [pc, #36]	; (8008074 <_Bfree+0x40>)
 8008050:	f000 fd52 	bl	8008af8 <__assert_func>
 8008054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008058:	6006      	str	r6, [r0, #0]
 800805a:	60c6      	str	r6, [r0, #12]
 800805c:	b13c      	cbz	r4, 800806e <_Bfree+0x3a>
 800805e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008060:	6862      	ldr	r2, [r4, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008068:	6021      	str	r1, [r4, #0]
 800806a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	080097a9 	.word	0x080097a9
 8008074:	08009830 	.word	0x08009830

08008078 <__multadd>:
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	4698      	mov	r8, r3
 800807e:	460c      	mov	r4, r1
 8008080:	2300      	movs	r3, #0
 8008082:	690e      	ldr	r6, [r1, #16]
 8008084:	4607      	mov	r7, r0
 8008086:	f101 0014 	add.w	r0, r1, #20
 800808a:	6805      	ldr	r5, [r0, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	b2a9      	uxth	r1, r5
 8008090:	fb02 8101 	mla	r1, r2, r1, r8
 8008094:	0c2d      	lsrs	r5, r5, #16
 8008096:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800809a:	fb02 c505 	mla	r5, r2, r5, ip
 800809e:	b289      	uxth	r1, r1
 80080a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80080a4:	429e      	cmp	r6, r3
 80080a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80080aa:	f840 1b04 	str.w	r1, [r0], #4
 80080ae:	dcec      	bgt.n	800808a <__multadd+0x12>
 80080b0:	f1b8 0f00 	cmp.w	r8, #0
 80080b4:	d022      	beq.n	80080fc <__multadd+0x84>
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	42b3      	cmp	r3, r6
 80080ba:	dc19      	bgt.n	80080f0 <__multadd+0x78>
 80080bc:	6861      	ldr	r1, [r4, #4]
 80080be:	4638      	mov	r0, r7
 80080c0:	3101      	adds	r1, #1
 80080c2:	f7ff ff77 	bl	8007fb4 <_Balloc>
 80080c6:	4605      	mov	r5, r0
 80080c8:	b928      	cbnz	r0, 80080d6 <__multadd+0x5e>
 80080ca:	4602      	mov	r2, r0
 80080cc:	21b5      	movs	r1, #181	; 0xb5
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <__multadd+0x8c>)
 80080d0:	480d      	ldr	r0, [pc, #52]	; (8008108 <__multadd+0x90>)
 80080d2:	f000 fd11 	bl	8008af8 <__assert_func>
 80080d6:	6922      	ldr	r2, [r4, #16]
 80080d8:	f104 010c 	add.w	r1, r4, #12
 80080dc:	3202      	adds	r2, #2
 80080de:	0092      	lsls	r2, r2, #2
 80080e0:	300c      	adds	r0, #12
 80080e2:	f7ff ff59 	bl	8007f98 <memcpy>
 80080e6:	4621      	mov	r1, r4
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7ff ffa3 	bl	8008034 <_Bfree>
 80080ee:	462c      	mov	r4, r5
 80080f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80080f4:	3601      	adds	r6, #1
 80080f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80080fa:	6126      	str	r6, [r4, #16]
 80080fc:	4620      	mov	r0, r4
 80080fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008102:	bf00      	nop
 8008104:	0800981f 	.word	0x0800981f
 8008108:	08009830 	.word	0x08009830

0800810c <__hi0bits>:
 800810c:	0c02      	lsrs	r2, r0, #16
 800810e:	0412      	lsls	r2, r2, #16
 8008110:	4603      	mov	r3, r0
 8008112:	b9ca      	cbnz	r2, 8008148 <__hi0bits+0x3c>
 8008114:	0403      	lsls	r3, r0, #16
 8008116:	2010      	movs	r0, #16
 8008118:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800811c:	bf04      	itt	eq
 800811e:	021b      	lsleq	r3, r3, #8
 8008120:	3008      	addeq	r0, #8
 8008122:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008126:	bf04      	itt	eq
 8008128:	011b      	lsleq	r3, r3, #4
 800812a:	3004      	addeq	r0, #4
 800812c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008130:	bf04      	itt	eq
 8008132:	009b      	lsleq	r3, r3, #2
 8008134:	3002      	addeq	r0, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	db05      	blt.n	8008146 <__hi0bits+0x3a>
 800813a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800813e:	f100 0001 	add.w	r0, r0, #1
 8008142:	bf08      	it	eq
 8008144:	2020      	moveq	r0, #32
 8008146:	4770      	bx	lr
 8008148:	2000      	movs	r0, #0
 800814a:	e7e5      	b.n	8008118 <__hi0bits+0xc>

0800814c <__lo0bits>:
 800814c:	6803      	ldr	r3, [r0, #0]
 800814e:	4602      	mov	r2, r0
 8008150:	f013 0007 	ands.w	r0, r3, #7
 8008154:	d00b      	beq.n	800816e <__lo0bits+0x22>
 8008156:	07d9      	lsls	r1, r3, #31
 8008158:	d422      	bmi.n	80081a0 <__lo0bits+0x54>
 800815a:	0798      	lsls	r0, r3, #30
 800815c:	bf49      	itett	mi
 800815e:	085b      	lsrmi	r3, r3, #1
 8008160:	089b      	lsrpl	r3, r3, #2
 8008162:	2001      	movmi	r0, #1
 8008164:	6013      	strmi	r3, [r2, #0]
 8008166:	bf5c      	itt	pl
 8008168:	2002      	movpl	r0, #2
 800816a:	6013      	strpl	r3, [r2, #0]
 800816c:	4770      	bx	lr
 800816e:	b299      	uxth	r1, r3
 8008170:	b909      	cbnz	r1, 8008176 <__lo0bits+0x2a>
 8008172:	2010      	movs	r0, #16
 8008174:	0c1b      	lsrs	r3, r3, #16
 8008176:	f013 0fff 	tst.w	r3, #255	; 0xff
 800817a:	bf04      	itt	eq
 800817c:	0a1b      	lsreq	r3, r3, #8
 800817e:	3008      	addeq	r0, #8
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	bf04      	itt	eq
 8008184:	091b      	lsreq	r3, r3, #4
 8008186:	3004      	addeq	r0, #4
 8008188:	0799      	lsls	r1, r3, #30
 800818a:	bf04      	itt	eq
 800818c:	089b      	lsreq	r3, r3, #2
 800818e:	3002      	addeq	r0, #2
 8008190:	07d9      	lsls	r1, r3, #31
 8008192:	d403      	bmi.n	800819c <__lo0bits+0x50>
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	f100 0001 	add.w	r0, r0, #1
 800819a:	d003      	beq.n	80081a4 <__lo0bits+0x58>
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	4770      	bx	lr
 80081a0:	2000      	movs	r0, #0
 80081a2:	4770      	bx	lr
 80081a4:	2020      	movs	r0, #32
 80081a6:	4770      	bx	lr

080081a8 <__i2b>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	460c      	mov	r4, r1
 80081ac:	2101      	movs	r1, #1
 80081ae:	f7ff ff01 	bl	8007fb4 <_Balloc>
 80081b2:	4602      	mov	r2, r0
 80081b4:	b928      	cbnz	r0, 80081c2 <__i2b+0x1a>
 80081b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081ba:	4b04      	ldr	r3, [pc, #16]	; (80081cc <__i2b+0x24>)
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <__i2b+0x28>)
 80081be:	f000 fc9b 	bl	8008af8 <__assert_func>
 80081c2:	2301      	movs	r3, #1
 80081c4:	6144      	str	r4, [r0, #20]
 80081c6:	6103      	str	r3, [r0, #16]
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	bf00      	nop
 80081cc:	0800981f 	.word	0x0800981f
 80081d0:	08009830 	.word	0x08009830

080081d4 <__multiply>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	4614      	mov	r4, r2
 80081da:	690a      	ldr	r2, [r1, #16]
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	460d      	mov	r5, r1
 80081e0:	429a      	cmp	r2, r3
 80081e2:	bfbe      	ittt	lt
 80081e4:	460b      	movlt	r3, r1
 80081e6:	4625      	movlt	r5, r4
 80081e8:	461c      	movlt	r4, r3
 80081ea:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80081ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081f2:	68ab      	ldr	r3, [r5, #8]
 80081f4:	6869      	ldr	r1, [r5, #4]
 80081f6:	eb0a 0709 	add.w	r7, sl, r9
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	b085      	sub	sp, #20
 80081fe:	bfb8      	it	lt
 8008200:	3101      	addlt	r1, #1
 8008202:	f7ff fed7 	bl	8007fb4 <_Balloc>
 8008206:	b930      	cbnz	r0, 8008216 <__multiply+0x42>
 8008208:	4602      	mov	r2, r0
 800820a:	f240 115d 	movw	r1, #349	; 0x15d
 800820e:	4b41      	ldr	r3, [pc, #260]	; (8008314 <__multiply+0x140>)
 8008210:	4841      	ldr	r0, [pc, #260]	; (8008318 <__multiply+0x144>)
 8008212:	f000 fc71 	bl	8008af8 <__assert_func>
 8008216:	f100 0614 	add.w	r6, r0, #20
 800821a:	4633      	mov	r3, r6
 800821c:	2200      	movs	r2, #0
 800821e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008222:	4543      	cmp	r3, r8
 8008224:	d31e      	bcc.n	8008264 <__multiply+0x90>
 8008226:	f105 0c14 	add.w	ip, r5, #20
 800822a:	f104 0314 	add.w	r3, r4, #20
 800822e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008232:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008236:	9202      	str	r2, [sp, #8]
 8008238:	ebac 0205 	sub.w	r2, ip, r5
 800823c:	3a15      	subs	r2, #21
 800823e:	f022 0203 	bic.w	r2, r2, #3
 8008242:	3204      	adds	r2, #4
 8008244:	f105 0115 	add.w	r1, r5, #21
 8008248:	458c      	cmp	ip, r1
 800824a:	bf38      	it	cc
 800824c:	2204      	movcc	r2, #4
 800824e:	9201      	str	r2, [sp, #4]
 8008250:	9a02      	ldr	r2, [sp, #8]
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	429a      	cmp	r2, r3
 8008256:	d808      	bhi.n	800826a <__multiply+0x96>
 8008258:	2f00      	cmp	r7, #0
 800825a:	dc55      	bgt.n	8008308 <__multiply+0x134>
 800825c:	6107      	str	r7, [r0, #16]
 800825e:	b005      	add	sp, #20
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	f843 2b04 	str.w	r2, [r3], #4
 8008268:	e7db      	b.n	8008222 <__multiply+0x4e>
 800826a:	f8b3 a000 	ldrh.w	sl, [r3]
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	d020      	beq.n	80082b6 <__multiply+0xe2>
 8008274:	46b1      	mov	r9, r6
 8008276:	2200      	movs	r2, #0
 8008278:	f105 0e14 	add.w	lr, r5, #20
 800827c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008280:	f8d9 b000 	ldr.w	fp, [r9]
 8008284:	b2a1      	uxth	r1, r4
 8008286:	fa1f fb8b 	uxth.w	fp, fp
 800828a:	fb0a b101 	mla	r1, sl, r1, fp
 800828e:	4411      	add	r1, r2
 8008290:	f8d9 2000 	ldr.w	r2, [r9]
 8008294:	0c24      	lsrs	r4, r4, #16
 8008296:	0c12      	lsrs	r2, r2, #16
 8008298:	fb0a 2404 	mla	r4, sl, r4, r2
 800829c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80082a0:	b289      	uxth	r1, r1
 80082a2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082a6:	45f4      	cmp	ip, lr
 80082a8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80082ac:	f849 1b04 	str.w	r1, [r9], #4
 80082b0:	d8e4      	bhi.n	800827c <__multiply+0xa8>
 80082b2:	9901      	ldr	r1, [sp, #4]
 80082b4:	5072      	str	r2, [r6, r1]
 80082b6:	9a03      	ldr	r2, [sp, #12]
 80082b8:	3304      	adds	r3, #4
 80082ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d01f      	beq.n	8008304 <__multiply+0x130>
 80082c4:	46b6      	mov	lr, r6
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	6834      	ldr	r4, [r6, #0]
 80082cc:	f105 0114 	add.w	r1, r5, #20
 80082d0:	880a      	ldrh	r2, [r1, #0]
 80082d2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80082d6:	b2a4      	uxth	r4, r4
 80082d8:	fb09 b202 	mla	r2, r9, r2, fp
 80082dc:	4492      	add	sl, r2
 80082de:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80082e2:	f84e 4b04 	str.w	r4, [lr], #4
 80082e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80082ea:	f8be 2000 	ldrh.w	r2, [lr]
 80082ee:	0c24      	lsrs	r4, r4, #16
 80082f0:	fb09 2404 	mla	r4, r9, r4, r2
 80082f4:	458c      	cmp	ip, r1
 80082f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80082fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80082fe:	d8e7      	bhi.n	80082d0 <__multiply+0xfc>
 8008300:	9a01      	ldr	r2, [sp, #4]
 8008302:	50b4      	str	r4, [r6, r2]
 8008304:	3604      	adds	r6, #4
 8008306:	e7a3      	b.n	8008250 <__multiply+0x7c>
 8008308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1a5      	bne.n	800825c <__multiply+0x88>
 8008310:	3f01      	subs	r7, #1
 8008312:	e7a1      	b.n	8008258 <__multiply+0x84>
 8008314:	0800981f 	.word	0x0800981f
 8008318:	08009830 	.word	0x08009830

0800831c <__pow5mult>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	4615      	mov	r5, r2
 8008322:	f012 0203 	ands.w	r2, r2, #3
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	d007      	beq.n	800833c <__pow5mult+0x20>
 800832c:	4c25      	ldr	r4, [pc, #148]	; (80083c4 <__pow5mult+0xa8>)
 800832e:	3a01      	subs	r2, #1
 8008330:	2300      	movs	r3, #0
 8008332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008336:	f7ff fe9f 	bl	8008078 <__multadd>
 800833a:	4607      	mov	r7, r0
 800833c:	10ad      	asrs	r5, r5, #2
 800833e:	d03d      	beq.n	80083bc <__pow5mult+0xa0>
 8008340:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008342:	b97c      	cbnz	r4, 8008364 <__pow5mult+0x48>
 8008344:	2010      	movs	r0, #16
 8008346:	f7ff fe11 	bl	8007f6c <malloc>
 800834a:	4602      	mov	r2, r0
 800834c:	6270      	str	r0, [r6, #36]	; 0x24
 800834e:	b928      	cbnz	r0, 800835c <__pow5mult+0x40>
 8008350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008354:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <__pow5mult+0xac>)
 8008356:	481d      	ldr	r0, [pc, #116]	; (80083cc <__pow5mult+0xb0>)
 8008358:	f000 fbce 	bl	8008af8 <__assert_func>
 800835c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008360:	6004      	str	r4, [r0, #0]
 8008362:	60c4      	str	r4, [r0, #12]
 8008364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800836c:	b94c      	cbnz	r4, 8008382 <__pow5mult+0x66>
 800836e:	f240 2171 	movw	r1, #625	; 0x271
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff ff18 	bl	80081a8 <__i2b>
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	f04f 0900 	mov.w	r9, #0
 8008386:	07eb      	lsls	r3, r5, #31
 8008388:	d50a      	bpl.n	80083a0 <__pow5mult+0x84>
 800838a:	4639      	mov	r1, r7
 800838c:	4622      	mov	r2, r4
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ff20 	bl	80081d4 <__multiply>
 8008394:	4680      	mov	r8, r0
 8008396:	4639      	mov	r1, r7
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff fe4b 	bl	8008034 <_Bfree>
 800839e:	4647      	mov	r7, r8
 80083a0:	106d      	asrs	r5, r5, #1
 80083a2:	d00b      	beq.n	80083bc <__pow5mult+0xa0>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	b938      	cbnz	r0, 80083b8 <__pow5mult+0x9c>
 80083a8:	4622      	mov	r2, r4
 80083aa:	4621      	mov	r1, r4
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ff11 	bl	80081d4 <__multiply>
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f8c0 9000 	str.w	r9, [r0]
 80083b8:	4604      	mov	r4, r0
 80083ba:	e7e4      	b.n	8008386 <__pow5mult+0x6a>
 80083bc:	4638      	mov	r0, r7
 80083be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c2:	bf00      	nop
 80083c4:	08009980 	.word	0x08009980
 80083c8:	080097a9 	.word	0x080097a9
 80083cc:	08009830 	.word	0x08009830

080083d0 <__lshift>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	4607      	mov	r7, r0
 80083d8:	4691      	mov	r9, r2
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	6849      	ldr	r1, [r1, #4]
 80083de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083e2:	68a3      	ldr	r3, [r4, #8]
 80083e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e8:	f108 0601 	add.w	r6, r8, #1
 80083ec:	42b3      	cmp	r3, r6
 80083ee:	db0b      	blt.n	8008408 <__lshift+0x38>
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff fddf 	bl	8007fb4 <_Balloc>
 80083f6:	4605      	mov	r5, r0
 80083f8:	b948      	cbnz	r0, 800840e <__lshift+0x3e>
 80083fa:	4602      	mov	r2, r0
 80083fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008400:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <__lshift+0xd0>)
 8008402:	4828      	ldr	r0, [pc, #160]	; (80084a4 <__lshift+0xd4>)
 8008404:	f000 fb78 	bl	8008af8 <__assert_func>
 8008408:	3101      	adds	r1, #1
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	e7ee      	b.n	80083ec <__lshift+0x1c>
 800840e:	2300      	movs	r3, #0
 8008410:	f100 0114 	add.w	r1, r0, #20
 8008414:	f100 0210 	add.w	r2, r0, #16
 8008418:	4618      	mov	r0, r3
 800841a:	4553      	cmp	r3, sl
 800841c:	db33      	blt.n	8008486 <__lshift+0xb6>
 800841e:	6920      	ldr	r0, [r4, #16]
 8008420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008424:	f104 0314 	add.w	r3, r4, #20
 8008428:	f019 091f 	ands.w	r9, r9, #31
 800842c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008434:	d02b      	beq.n	800848e <__lshift+0xbe>
 8008436:	468a      	mov	sl, r1
 8008438:	2200      	movs	r2, #0
 800843a:	f1c9 0e20 	rsb	lr, r9, #32
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	fa00 f009 	lsl.w	r0, r0, r9
 8008444:	4302      	orrs	r2, r0
 8008446:	f84a 2b04 	str.w	r2, [sl], #4
 800844a:	f853 2b04 	ldr.w	r2, [r3], #4
 800844e:	459c      	cmp	ip, r3
 8008450:	fa22 f20e 	lsr.w	r2, r2, lr
 8008454:	d8f3      	bhi.n	800843e <__lshift+0x6e>
 8008456:	ebac 0304 	sub.w	r3, ip, r4
 800845a:	3b15      	subs	r3, #21
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	3304      	adds	r3, #4
 8008462:	f104 0015 	add.w	r0, r4, #21
 8008466:	4584      	cmp	ip, r0
 8008468:	bf38      	it	cc
 800846a:	2304      	movcc	r3, #4
 800846c:	50ca      	str	r2, [r1, r3]
 800846e:	b10a      	cbz	r2, 8008474 <__lshift+0xa4>
 8008470:	f108 0602 	add.w	r6, r8, #2
 8008474:	3e01      	subs	r6, #1
 8008476:	4638      	mov	r0, r7
 8008478:	4621      	mov	r1, r4
 800847a:	612e      	str	r6, [r5, #16]
 800847c:	f7ff fdda 	bl	8008034 <_Bfree>
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	f842 0f04 	str.w	r0, [r2, #4]!
 800848a:	3301      	adds	r3, #1
 800848c:	e7c5      	b.n	800841a <__lshift+0x4a>
 800848e:	3904      	subs	r1, #4
 8008490:	f853 2b04 	ldr.w	r2, [r3], #4
 8008494:	459c      	cmp	ip, r3
 8008496:	f841 2f04 	str.w	r2, [r1, #4]!
 800849a:	d8f9      	bhi.n	8008490 <__lshift+0xc0>
 800849c:	e7ea      	b.n	8008474 <__lshift+0xa4>
 800849e:	bf00      	nop
 80084a0:	0800981f 	.word	0x0800981f
 80084a4:	08009830 	.word	0x08009830

080084a8 <__mcmp>:
 80084a8:	4603      	mov	r3, r0
 80084aa:	690a      	ldr	r2, [r1, #16]
 80084ac:	6900      	ldr	r0, [r0, #16]
 80084ae:	b530      	push	{r4, r5, lr}
 80084b0:	1a80      	subs	r0, r0, r2
 80084b2:	d10d      	bne.n	80084d0 <__mcmp+0x28>
 80084b4:	3314      	adds	r3, #20
 80084b6:	3114      	adds	r1, #20
 80084b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c8:	4295      	cmp	r5, r2
 80084ca:	d002      	beq.n	80084d2 <__mcmp+0x2a>
 80084cc:	d304      	bcc.n	80084d8 <__mcmp+0x30>
 80084ce:	2001      	movs	r0, #1
 80084d0:	bd30      	pop	{r4, r5, pc}
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	d3f4      	bcc.n	80084c0 <__mcmp+0x18>
 80084d6:	e7fb      	b.n	80084d0 <__mcmp+0x28>
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e7f8      	b.n	80084d0 <__mcmp+0x28>
	...

080084e0 <__mdiff>:
 80084e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460c      	mov	r4, r1
 80084e6:	4606      	mov	r6, r0
 80084e8:	4611      	mov	r1, r2
 80084ea:	4620      	mov	r0, r4
 80084ec:	4692      	mov	sl, r2
 80084ee:	f7ff ffdb 	bl	80084a8 <__mcmp>
 80084f2:	1e05      	subs	r5, r0, #0
 80084f4:	d111      	bne.n	800851a <__mdiff+0x3a>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fd5b 	bl	8007fb4 <_Balloc>
 80084fe:	4602      	mov	r2, r0
 8008500:	b928      	cbnz	r0, 800850e <__mdiff+0x2e>
 8008502:	f240 2132 	movw	r1, #562	; 0x232
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <__mdiff+0x118>)
 8008508:	483c      	ldr	r0, [pc, #240]	; (80085fc <__mdiff+0x11c>)
 800850a:	f000 faf5 	bl	8008af8 <__assert_func>
 800850e:	2301      	movs	r3, #1
 8008510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008514:	4610      	mov	r0, r2
 8008516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	bfa4      	itt	ge
 800851c:	4653      	movge	r3, sl
 800851e:	46a2      	movge	sl, r4
 8008520:	4630      	mov	r0, r6
 8008522:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008526:	bfa6      	itte	ge
 8008528:	461c      	movge	r4, r3
 800852a:	2500      	movge	r5, #0
 800852c:	2501      	movlt	r5, #1
 800852e:	f7ff fd41 	bl	8007fb4 <_Balloc>
 8008532:	4602      	mov	r2, r0
 8008534:	b918      	cbnz	r0, 800853e <__mdiff+0x5e>
 8008536:	f44f 7110 	mov.w	r1, #576	; 0x240
 800853a:	4b2f      	ldr	r3, [pc, #188]	; (80085f8 <__mdiff+0x118>)
 800853c:	e7e4      	b.n	8008508 <__mdiff+0x28>
 800853e:	f100 0814 	add.w	r8, r0, #20
 8008542:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008546:	60c5      	str	r5, [r0, #12]
 8008548:	f04f 0c00 	mov.w	ip, #0
 800854c:	f10a 0514 	add.w	r5, sl, #20
 8008550:	f10a 0010 	add.w	r0, sl, #16
 8008554:	46c2      	mov	sl, r8
 8008556:	6926      	ldr	r6, [r4, #16]
 8008558:	f104 0914 	add.w	r9, r4, #20
 800855c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008560:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008564:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008568:	f859 3b04 	ldr.w	r3, [r9], #4
 800856c:	fa1f f18b 	uxth.w	r1, fp
 8008570:	4461      	add	r1, ip
 8008572:	fa1f fc83 	uxth.w	ip, r3
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	eba1 010c 	sub.w	r1, r1, ip
 800857c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008580:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008584:	b289      	uxth	r1, r1
 8008586:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800858a:	454e      	cmp	r6, r9
 800858c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008590:	f84a 3b04 	str.w	r3, [sl], #4
 8008594:	d8e6      	bhi.n	8008564 <__mdiff+0x84>
 8008596:	1b33      	subs	r3, r6, r4
 8008598:	3b15      	subs	r3, #21
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	3415      	adds	r4, #21
 80085a0:	3304      	adds	r3, #4
 80085a2:	42a6      	cmp	r6, r4
 80085a4:	bf38      	it	cc
 80085a6:	2304      	movcc	r3, #4
 80085a8:	441d      	add	r5, r3
 80085aa:	4443      	add	r3, r8
 80085ac:	461e      	mov	r6, r3
 80085ae:	462c      	mov	r4, r5
 80085b0:	4574      	cmp	r4, lr
 80085b2:	d30e      	bcc.n	80085d2 <__mdiff+0xf2>
 80085b4:	f10e 0103 	add.w	r1, lr, #3
 80085b8:	1b49      	subs	r1, r1, r5
 80085ba:	f021 0103 	bic.w	r1, r1, #3
 80085be:	3d03      	subs	r5, #3
 80085c0:	45ae      	cmp	lr, r5
 80085c2:	bf38      	it	cc
 80085c4:	2100      	movcc	r1, #0
 80085c6:	4419      	add	r1, r3
 80085c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80085cc:	b18b      	cbz	r3, 80085f2 <__mdiff+0x112>
 80085ce:	6117      	str	r7, [r2, #16]
 80085d0:	e7a0      	b.n	8008514 <__mdiff+0x34>
 80085d2:	f854 8b04 	ldr.w	r8, [r4], #4
 80085d6:	fa1f f188 	uxth.w	r1, r8
 80085da:	4461      	add	r1, ip
 80085dc:	1408      	asrs	r0, r1, #16
 80085de:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80085e2:	b289      	uxth	r1, r1
 80085e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085ec:	f846 1b04 	str.w	r1, [r6], #4
 80085f0:	e7de      	b.n	80085b0 <__mdiff+0xd0>
 80085f2:	3f01      	subs	r7, #1
 80085f4:	e7e8      	b.n	80085c8 <__mdiff+0xe8>
 80085f6:	bf00      	nop
 80085f8:	0800981f 	.word	0x0800981f
 80085fc:	08009830 	.word	0x08009830

08008600 <__d2b>:
 8008600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008604:	2101      	movs	r1, #1
 8008606:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800860a:	4690      	mov	r8, r2
 800860c:	461d      	mov	r5, r3
 800860e:	f7ff fcd1 	bl	8007fb4 <_Balloc>
 8008612:	4604      	mov	r4, r0
 8008614:	b930      	cbnz	r0, 8008624 <__d2b+0x24>
 8008616:	4602      	mov	r2, r0
 8008618:	f240 310a 	movw	r1, #778	; 0x30a
 800861c:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <__d2b+0xb0>)
 800861e:	4825      	ldr	r0, [pc, #148]	; (80086b4 <__d2b+0xb4>)
 8008620:	f000 fa6a 	bl	8008af8 <__assert_func>
 8008624:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008628:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800862c:	bb2d      	cbnz	r5, 800867a <__d2b+0x7a>
 800862e:	9301      	str	r3, [sp, #4]
 8008630:	f1b8 0300 	subs.w	r3, r8, #0
 8008634:	d026      	beq.n	8008684 <__d2b+0x84>
 8008636:	4668      	mov	r0, sp
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	f7ff fd87 	bl	800814c <__lo0bits>
 800863e:	9900      	ldr	r1, [sp, #0]
 8008640:	b1f0      	cbz	r0, 8008680 <__d2b+0x80>
 8008642:	9a01      	ldr	r2, [sp, #4]
 8008644:	f1c0 0320 	rsb	r3, r0, #32
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	430b      	orrs	r3, r1
 800864e:	40c2      	lsrs	r2, r0
 8008650:	6163      	str	r3, [r4, #20]
 8008652:	9201      	str	r2, [sp, #4]
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	bf14      	ite	ne
 800865a:	2102      	movne	r1, #2
 800865c:	2101      	moveq	r1, #1
 800865e:	61a3      	str	r3, [r4, #24]
 8008660:	6121      	str	r1, [r4, #16]
 8008662:	b1c5      	cbz	r5, 8008696 <__d2b+0x96>
 8008664:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008668:	4405      	add	r5, r0
 800866a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800866e:	603d      	str	r5, [r7, #0]
 8008670:	6030      	str	r0, [r6, #0]
 8008672:	4620      	mov	r0, r4
 8008674:	b002      	add	sp, #8
 8008676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800867a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800867e:	e7d6      	b.n	800862e <__d2b+0x2e>
 8008680:	6161      	str	r1, [r4, #20]
 8008682:	e7e7      	b.n	8008654 <__d2b+0x54>
 8008684:	a801      	add	r0, sp, #4
 8008686:	f7ff fd61 	bl	800814c <__lo0bits>
 800868a:	2101      	movs	r1, #1
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	6121      	str	r1, [r4, #16]
 8008690:	6163      	str	r3, [r4, #20]
 8008692:	3020      	adds	r0, #32
 8008694:	e7e5      	b.n	8008662 <__d2b+0x62>
 8008696:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800869a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800869e:	6038      	str	r0, [r7, #0]
 80086a0:	6918      	ldr	r0, [r3, #16]
 80086a2:	f7ff fd33 	bl	800810c <__hi0bits>
 80086a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80086aa:	6031      	str	r1, [r6, #0]
 80086ac:	e7e1      	b.n	8008672 <__d2b+0x72>
 80086ae:	bf00      	nop
 80086b0:	0800981f 	.word	0x0800981f
 80086b4:	08009830 	.word	0x08009830

080086b8 <_calloc_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	fb02 f501 	mul.w	r5, r2, r1
 80086be:	4629      	mov	r1, r5
 80086c0:	f000 f854 	bl	800876c <_malloc_r>
 80086c4:	4604      	mov	r4, r0
 80086c6:	b118      	cbz	r0, 80086d0 <_calloc_r+0x18>
 80086c8:	462a      	mov	r2, r5
 80086ca:	2100      	movs	r1, #0
 80086cc:	f7fe f930 	bl	8006930 <memset>
 80086d0:	4620      	mov	r0, r4
 80086d2:	bd38      	pop	{r3, r4, r5, pc}

080086d4 <_free_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4605      	mov	r5, r0
 80086d8:	2900      	cmp	r1, #0
 80086da:	d043      	beq.n	8008764 <_free_r+0x90>
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f0c      	subs	r4, r1, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfb8      	it	lt
 80086e6:	18e4      	addlt	r4, r4, r3
 80086e8:	f000 fa62 	bl	8008bb0 <__malloc_lock>
 80086ec:	4a1e      	ldr	r2, [pc, #120]	; (8008768 <_free_r+0x94>)
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	4610      	mov	r0, r2
 80086f2:	b933      	cbnz	r3, 8008702 <_free_r+0x2e>
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6014      	str	r4, [r2, #0]
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086fe:	f000 ba5d 	b.w	8008bbc <__malloc_unlock>
 8008702:	42a3      	cmp	r3, r4
 8008704:	d90a      	bls.n	800871c <_free_r+0x48>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	1862      	adds	r2, r4, r1
 800870a:	4293      	cmp	r3, r2
 800870c:	bf01      	itttt	eq
 800870e:	681a      	ldreq	r2, [r3, #0]
 8008710:	685b      	ldreq	r3, [r3, #4]
 8008712:	1852      	addeq	r2, r2, r1
 8008714:	6022      	streq	r2, [r4, #0]
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	6004      	str	r4, [r0, #0]
 800871a:	e7ed      	b.n	80086f8 <_free_r+0x24>
 800871c:	461a      	mov	r2, r3
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	b10b      	cbz	r3, 8008726 <_free_r+0x52>
 8008722:	42a3      	cmp	r3, r4
 8008724:	d9fa      	bls.n	800871c <_free_r+0x48>
 8008726:	6811      	ldr	r1, [r2, #0]
 8008728:	1850      	adds	r0, r2, r1
 800872a:	42a0      	cmp	r0, r4
 800872c:	d10b      	bne.n	8008746 <_free_r+0x72>
 800872e:	6820      	ldr	r0, [r4, #0]
 8008730:	4401      	add	r1, r0
 8008732:	1850      	adds	r0, r2, r1
 8008734:	4283      	cmp	r3, r0
 8008736:	6011      	str	r1, [r2, #0]
 8008738:	d1de      	bne.n	80086f8 <_free_r+0x24>
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4401      	add	r1, r0
 8008740:	6011      	str	r1, [r2, #0]
 8008742:	6053      	str	r3, [r2, #4]
 8008744:	e7d8      	b.n	80086f8 <_free_r+0x24>
 8008746:	d902      	bls.n	800874e <_free_r+0x7a>
 8008748:	230c      	movs	r3, #12
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	e7d4      	b.n	80086f8 <_free_r+0x24>
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	1821      	adds	r1, r4, r0
 8008752:	428b      	cmp	r3, r1
 8008754:	bf01      	itttt	eq
 8008756:	6819      	ldreq	r1, [r3, #0]
 8008758:	685b      	ldreq	r3, [r3, #4]
 800875a:	1809      	addeq	r1, r1, r0
 800875c:	6021      	streq	r1, [r4, #0]
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	6054      	str	r4, [r2, #4]
 8008762:	e7c9      	b.n	80086f8 <_free_r+0x24>
 8008764:	bd38      	pop	{r3, r4, r5, pc}
 8008766:	bf00      	nop
 8008768:	2000021c 	.word	0x2000021c

0800876c <_malloc_r>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	1ccd      	adds	r5, r1, #3
 8008770:	f025 0503 	bic.w	r5, r5, #3
 8008774:	3508      	adds	r5, #8
 8008776:	2d0c      	cmp	r5, #12
 8008778:	bf38      	it	cc
 800877a:	250c      	movcc	r5, #12
 800877c:	2d00      	cmp	r5, #0
 800877e:	4606      	mov	r6, r0
 8008780:	db01      	blt.n	8008786 <_malloc_r+0x1a>
 8008782:	42a9      	cmp	r1, r5
 8008784:	d903      	bls.n	800878e <_malloc_r+0x22>
 8008786:	230c      	movs	r3, #12
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	2000      	movs	r0, #0
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878e:	f000 fa0f 	bl	8008bb0 <__malloc_lock>
 8008792:	4921      	ldr	r1, [pc, #132]	; (8008818 <_malloc_r+0xac>)
 8008794:	680a      	ldr	r2, [r1, #0]
 8008796:	4614      	mov	r4, r2
 8008798:	b99c      	cbnz	r4, 80087c2 <_malloc_r+0x56>
 800879a:	4f20      	ldr	r7, [pc, #128]	; (800881c <_malloc_r+0xb0>)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	b923      	cbnz	r3, 80087aa <_malloc_r+0x3e>
 80087a0:	4621      	mov	r1, r4
 80087a2:	4630      	mov	r0, r6
 80087a4:	f000 f998 	bl	8008ad8 <_sbrk_r>
 80087a8:	6038      	str	r0, [r7, #0]
 80087aa:	4629      	mov	r1, r5
 80087ac:	4630      	mov	r0, r6
 80087ae:	f000 f993 	bl	8008ad8 <_sbrk_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	d123      	bne.n	80087fe <_malloc_r+0x92>
 80087b6:	230c      	movs	r3, #12
 80087b8:	4630      	mov	r0, r6
 80087ba:	6033      	str	r3, [r6, #0]
 80087bc:	f000 f9fe 	bl	8008bbc <__malloc_unlock>
 80087c0:	e7e3      	b.n	800878a <_malloc_r+0x1e>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	1b5b      	subs	r3, r3, r5
 80087c6:	d417      	bmi.n	80087f8 <_malloc_r+0x8c>
 80087c8:	2b0b      	cmp	r3, #11
 80087ca:	d903      	bls.n	80087d4 <_malloc_r+0x68>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	441c      	add	r4, r3
 80087d0:	6025      	str	r5, [r4, #0]
 80087d2:	e004      	b.n	80087de <_malloc_r+0x72>
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	42a2      	cmp	r2, r4
 80087d8:	bf0c      	ite	eq
 80087da:	600b      	streq	r3, [r1, #0]
 80087dc:	6053      	strne	r3, [r2, #4]
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f9ec 	bl	8008bbc <__malloc_unlock>
 80087e4:	f104 000b 	add.w	r0, r4, #11
 80087e8:	1d23      	adds	r3, r4, #4
 80087ea:	f020 0007 	bic.w	r0, r0, #7
 80087ee:	1ac2      	subs	r2, r0, r3
 80087f0:	d0cc      	beq.n	800878c <_malloc_r+0x20>
 80087f2:	1a1b      	subs	r3, r3, r0
 80087f4:	50a3      	str	r3, [r4, r2]
 80087f6:	e7c9      	b.n	800878c <_malloc_r+0x20>
 80087f8:	4622      	mov	r2, r4
 80087fa:	6864      	ldr	r4, [r4, #4]
 80087fc:	e7cc      	b.n	8008798 <_malloc_r+0x2c>
 80087fe:	1cc4      	adds	r4, r0, #3
 8008800:	f024 0403 	bic.w	r4, r4, #3
 8008804:	42a0      	cmp	r0, r4
 8008806:	d0e3      	beq.n	80087d0 <_malloc_r+0x64>
 8008808:	1a21      	subs	r1, r4, r0
 800880a:	4630      	mov	r0, r6
 800880c:	f000 f964 	bl	8008ad8 <_sbrk_r>
 8008810:	3001      	adds	r0, #1
 8008812:	d1dd      	bne.n	80087d0 <_malloc_r+0x64>
 8008814:	e7cf      	b.n	80087b6 <_malloc_r+0x4a>
 8008816:	bf00      	nop
 8008818:	2000021c 	.word	0x2000021c
 800881c:	20000220 	.word	0x20000220

08008820 <__ssputs_r>:
 8008820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	688e      	ldr	r6, [r1, #8]
 8008826:	4682      	mov	sl, r0
 8008828:	429e      	cmp	r6, r3
 800882a:	460c      	mov	r4, r1
 800882c:	4690      	mov	r8, r2
 800882e:	461f      	mov	r7, r3
 8008830:	d838      	bhi.n	80088a4 <__ssputs_r+0x84>
 8008832:	898a      	ldrh	r2, [r1, #12]
 8008834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008838:	d032      	beq.n	80088a0 <__ssputs_r+0x80>
 800883a:	6825      	ldr	r5, [r4, #0]
 800883c:	6909      	ldr	r1, [r1, #16]
 800883e:	3301      	adds	r3, #1
 8008840:	eba5 0901 	sub.w	r9, r5, r1
 8008844:	6965      	ldr	r5, [r4, #20]
 8008846:	444b      	add	r3, r9
 8008848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800884c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008850:	106d      	asrs	r5, r5, #1
 8008852:	429d      	cmp	r5, r3
 8008854:	bf38      	it	cc
 8008856:	461d      	movcc	r5, r3
 8008858:	0553      	lsls	r3, r2, #21
 800885a:	d531      	bpl.n	80088c0 <__ssputs_r+0xa0>
 800885c:	4629      	mov	r1, r5
 800885e:	f7ff ff85 	bl	800876c <_malloc_r>
 8008862:	4606      	mov	r6, r0
 8008864:	b950      	cbnz	r0, 800887c <__ssputs_r+0x5c>
 8008866:	230c      	movs	r3, #12
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	f8ca 3000 	str.w	r3, [sl]
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008876:	81a3      	strh	r3, [r4, #12]
 8008878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887c:	464a      	mov	r2, r9
 800887e:	6921      	ldr	r1, [r4, #16]
 8008880:	f7ff fb8a 	bl	8007f98 <memcpy>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800888a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	6126      	str	r6, [r4, #16]
 8008892:	444e      	add	r6, r9
 8008894:	6026      	str	r6, [r4, #0]
 8008896:	463e      	mov	r6, r7
 8008898:	6165      	str	r5, [r4, #20]
 800889a:	eba5 0509 	sub.w	r5, r5, r9
 800889e:	60a5      	str	r5, [r4, #8]
 80088a0:	42be      	cmp	r6, r7
 80088a2:	d900      	bls.n	80088a6 <__ssputs_r+0x86>
 80088a4:	463e      	mov	r6, r7
 80088a6:	4632      	mov	r2, r6
 80088a8:	4641      	mov	r1, r8
 80088aa:	6820      	ldr	r0, [r4, #0]
 80088ac:	f000 f966 	bl	8008b7c <memmove>
 80088b0:	68a3      	ldr	r3, [r4, #8]
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	1b9b      	subs	r3, r3, r6
 80088b6:	4432      	add	r2, r6
 80088b8:	2000      	movs	r0, #0
 80088ba:	60a3      	str	r3, [r4, #8]
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	e7db      	b.n	8008878 <__ssputs_r+0x58>
 80088c0:	462a      	mov	r2, r5
 80088c2:	f000 f981 	bl	8008bc8 <_realloc_r>
 80088c6:	4606      	mov	r6, r0
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d1e1      	bne.n	8008890 <__ssputs_r+0x70>
 80088cc:	4650      	mov	r0, sl
 80088ce:	6921      	ldr	r1, [r4, #16]
 80088d0:	f7ff ff00 	bl	80086d4 <_free_r>
 80088d4:	e7c7      	b.n	8008866 <__ssputs_r+0x46>
	...

080088d8 <_svfiprintf_r>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	4698      	mov	r8, r3
 80088de:	898b      	ldrh	r3, [r1, #12]
 80088e0:	4607      	mov	r7, r0
 80088e2:	061b      	lsls	r3, r3, #24
 80088e4:	460d      	mov	r5, r1
 80088e6:	4614      	mov	r4, r2
 80088e8:	b09d      	sub	sp, #116	; 0x74
 80088ea:	d50e      	bpl.n	800890a <_svfiprintf_r+0x32>
 80088ec:	690b      	ldr	r3, [r1, #16]
 80088ee:	b963      	cbnz	r3, 800890a <_svfiprintf_r+0x32>
 80088f0:	2140      	movs	r1, #64	; 0x40
 80088f2:	f7ff ff3b 	bl	800876c <_malloc_r>
 80088f6:	6028      	str	r0, [r5, #0]
 80088f8:	6128      	str	r0, [r5, #16]
 80088fa:	b920      	cbnz	r0, 8008906 <_svfiprintf_r+0x2e>
 80088fc:	230c      	movs	r3, #12
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	e0d1      	b.n	8008aaa <_svfiprintf_r+0x1d2>
 8008906:	2340      	movs	r3, #64	; 0x40
 8008908:	616b      	str	r3, [r5, #20]
 800890a:	2300      	movs	r3, #0
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
 800890e:	2320      	movs	r3, #32
 8008910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008914:	2330      	movs	r3, #48	; 0x30
 8008916:	f04f 0901 	mov.w	r9, #1
 800891a:	f8cd 800c 	str.w	r8, [sp, #12]
 800891e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ac4 <_svfiprintf_r+0x1ec>
 8008922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008926:	4623      	mov	r3, r4
 8008928:	469a      	mov	sl, r3
 800892a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800892e:	b10a      	cbz	r2, 8008934 <_svfiprintf_r+0x5c>
 8008930:	2a25      	cmp	r2, #37	; 0x25
 8008932:	d1f9      	bne.n	8008928 <_svfiprintf_r+0x50>
 8008934:	ebba 0b04 	subs.w	fp, sl, r4
 8008938:	d00b      	beq.n	8008952 <_svfiprintf_r+0x7a>
 800893a:	465b      	mov	r3, fp
 800893c:	4622      	mov	r2, r4
 800893e:	4629      	mov	r1, r5
 8008940:	4638      	mov	r0, r7
 8008942:	f7ff ff6d 	bl	8008820 <__ssputs_r>
 8008946:	3001      	adds	r0, #1
 8008948:	f000 80aa 	beq.w	8008aa0 <_svfiprintf_r+0x1c8>
 800894c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800894e:	445a      	add	r2, fp
 8008950:	9209      	str	r2, [sp, #36]	; 0x24
 8008952:	f89a 3000 	ldrb.w	r3, [sl]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 80a2 	beq.w	8008aa0 <_svfiprintf_r+0x1c8>
 800895c:	2300      	movs	r3, #0
 800895e:	f04f 32ff 	mov.w	r2, #4294967295
 8008962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008966:	f10a 0a01 	add.w	sl, sl, #1
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008972:	931a      	str	r3, [sp, #104]	; 0x68
 8008974:	4654      	mov	r4, sl
 8008976:	2205      	movs	r2, #5
 8008978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800897c:	4851      	ldr	r0, [pc, #324]	; (8008ac4 <_svfiprintf_r+0x1ec>)
 800897e:	f7ff fafd 	bl	8007f7c <memchr>
 8008982:	9a04      	ldr	r2, [sp, #16]
 8008984:	b9d8      	cbnz	r0, 80089be <_svfiprintf_r+0xe6>
 8008986:	06d0      	lsls	r0, r2, #27
 8008988:	bf44      	itt	mi
 800898a:	2320      	movmi	r3, #32
 800898c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008990:	0711      	lsls	r1, r2, #28
 8008992:	bf44      	itt	mi
 8008994:	232b      	movmi	r3, #43	; 0x2b
 8008996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800899a:	f89a 3000 	ldrb.w	r3, [sl]
 800899e:	2b2a      	cmp	r3, #42	; 0x2a
 80089a0:	d015      	beq.n	80089ce <_svfiprintf_r+0xf6>
 80089a2:	4654      	mov	r4, sl
 80089a4:	2000      	movs	r0, #0
 80089a6:	f04f 0c0a 	mov.w	ip, #10
 80089aa:	9a07      	ldr	r2, [sp, #28]
 80089ac:	4621      	mov	r1, r4
 80089ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089b2:	3b30      	subs	r3, #48	; 0x30
 80089b4:	2b09      	cmp	r3, #9
 80089b6:	d94e      	bls.n	8008a56 <_svfiprintf_r+0x17e>
 80089b8:	b1b0      	cbz	r0, 80089e8 <_svfiprintf_r+0x110>
 80089ba:	9207      	str	r2, [sp, #28]
 80089bc:	e014      	b.n	80089e8 <_svfiprintf_r+0x110>
 80089be:	eba0 0308 	sub.w	r3, r0, r8
 80089c2:	fa09 f303 	lsl.w	r3, r9, r3
 80089c6:	4313      	orrs	r3, r2
 80089c8:	46a2      	mov	sl, r4
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	e7d2      	b.n	8008974 <_svfiprintf_r+0x9c>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	1d19      	adds	r1, r3, #4
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	9103      	str	r1, [sp, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	bfbb      	ittet	lt
 80089da:	425b      	neglt	r3, r3
 80089dc:	f042 0202 	orrlt.w	r2, r2, #2
 80089e0:	9307      	strge	r3, [sp, #28]
 80089e2:	9307      	strlt	r3, [sp, #28]
 80089e4:	bfb8      	it	lt
 80089e6:	9204      	strlt	r2, [sp, #16]
 80089e8:	7823      	ldrb	r3, [r4, #0]
 80089ea:	2b2e      	cmp	r3, #46	; 0x2e
 80089ec:	d10c      	bne.n	8008a08 <_svfiprintf_r+0x130>
 80089ee:	7863      	ldrb	r3, [r4, #1]
 80089f0:	2b2a      	cmp	r3, #42	; 0x2a
 80089f2:	d135      	bne.n	8008a60 <_svfiprintf_r+0x188>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	3402      	adds	r4, #2
 80089f8:	1d1a      	adds	r2, r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	9203      	str	r2, [sp, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfb8      	it	lt
 8008a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ad4 <_svfiprintf_r+0x1fc>
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	4650      	mov	r0, sl
 8008a10:	7821      	ldrb	r1, [r4, #0]
 8008a12:	f7ff fab3 	bl	8007f7c <memchr>
 8008a16:	b140      	cbz	r0, 8008a2a <_svfiprintf_r+0x152>
 8008a18:	2340      	movs	r3, #64	; 0x40
 8008a1a:	eba0 000a 	sub.w	r0, r0, sl
 8008a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	3401      	adds	r4, #1
 8008a26:	4303      	orrs	r3, r0
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a2e:	2206      	movs	r2, #6
 8008a30:	4825      	ldr	r0, [pc, #148]	; (8008ac8 <_svfiprintf_r+0x1f0>)
 8008a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a36:	f7ff faa1 	bl	8007f7c <memchr>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d038      	beq.n	8008ab0 <_svfiprintf_r+0x1d8>
 8008a3e:	4b23      	ldr	r3, [pc, #140]	; (8008acc <_svfiprintf_r+0x1f4>)
 8008a40:	bb1b      	cbnz	r3, 8008a8a <_svfiprintf_r+0x1b2>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	3307      	adds	r3, #7
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a50:	4433      	add	r3, r6
 8008a52:	9309      	str	r3, [sp, #36]	; 0x24
 8008a54:	e767      	b.n	8008926 <_svfiprintf_r+0x4e>
 8008a56:	460c      	mov	r4, r1
 8008a58:	2001      	movs	r0, #1
 8008a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a5e:	e7a5      	b.n	80089ac <_svfiprintf_r+0xd4>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f04f 0c0a 	mov.w	ip, #10
 8008a66:	4619      	mov	r1, r3
 8008a68:	3401      	adds	r4, #1
 8008a6a:	9305      	str	r3, [sp, #20]
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a72:	3a30      	subs	r2, #48	; 0x30
 8008a74:	2a09      	cmp	r2, #9
 8008a76:	d903      	bls.n	8008a80 <_svfiprintf_r+0x1a8>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0c5      	beq.n	8008a08 <_svfiprintf_r+0x130>
 8008a7c:	9105      	str	r1, [sp, #20]
 8008a7e:	e7c3      	b.n	8008a08 <_svfiprintf_r+0x130>
 8008a80:	4604      	mov	r4, r0
 8008a82:	2301      	movs	r3, #1
 8008a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a88:	e7f0      	b.n	8008a6c <_svfiprintf_r+0x194>
 8008a8a:	ab03      	add	r3, sp, #12
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4638      	mov	r0, r7
 8008a92:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <_svfiprintf_r+0x1f8>)
 8008a94:	a904      	add	r1, sp, #16
 8008a96:	f7fd fff1 	bl	8006a7c <_printf_float>
 8008a9a:	1c42      	adds	r2, r0, #1
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	d1d6      	bne.n	8008a4e <_svfiprintf_r+0x176>
 8008aa0:	89ab      	ldrh	r3, [r5, #12]
 8008aa2:	065b      	lsls	r3, r3, #25
 8008aa4:	f53f af2c 	bmi.w	8008900 <_svfiprintf_r+0x28>
 8008aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aaa:	b01d      	add	sp, #116	; 0x74
 8008aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab0:	ab03      	add	r3, sp, #12
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <_svfiprintf_r+0x1f8>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	f7fe fa7a 	bl	8006fb4 <_printf_i>
 8008ac0:	e7eb      	b.n	8008a9a <_svfiprintf_r+0x1c2>
 8008ac2:	bf00      	nop
 8008ac4:	0800998c 	.word	0x0800998c
 8008ac8:	08009996 	.word	0x08009996
 8008acc:	08006a7d 	.word	0x08006a7d
 8008ad0:	08008821 	.word	0x08008821
 8008ad4:	08009992 	.word	0x08009992

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	2300      	movs	r3, #0
 8008adc:	4d05      	ldr	r5, [pc, #20]	; (8008af4 <_sbrk_r+0x1c>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f9 f834 	bl	8001b50 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	2000035c 	.word	0x2000035c

08008af8 <__assert_func>:
 8008af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008afa:	4614      	mov	r4, r2
 8008afc:	461a      	mov	r2, r3
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <__assert_func+0x2c>)
 8008b00:	4605      	mov	r5, r0
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68d8      	ldr	r0, [r3, #12]
 8008b06:	b14c      	cbz	r4, 8008b1c <__assert_func+0x24>
 8008b08:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <__assert_func+0x30>)
 8008b0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b0e:	9100      	str	r1, [sp, #0]
 8008b10:	462b      	mov	r3, r5
 8008b12:	4906      	ldr	r1, [pc, #24]	; (8008b2c <__assert_func+0x34>)
 8008b14:	f000 f80e 	bl	8008b34 <fiprintf>
 8008b18:	f000 faa2 	bl	8009060 <abort>
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <__assert_func+0x38>)
 8008b1e:	461c      	mov	r4, r3
 8008b20:	e7f3      	b.n	8008b0a <__assert_func+0x12>
 8008b22:	bf00      	nop
 8008b24:	20000018 	.word	0x20000018
 8008b28:	0800999d 	.word	0x0800999d
 8008b2c:	080099aa 	.word	0x080099aa
 8008b30:	080099d8 	.word	0x080099d8

08008b34 <fiprintf>:
 8008b34:	b40e      	push	{r1, r2, r3}
 8008b36:	b503      	push	{r0, r1, lr}
 8008b38:	4601      	mov	r1, r0
 8008b3a:	ab03      	add	r3, sp, #12
 8008b3c:	4805      	ldr	r0, [pc, #20]	; (8008b54 <fiprintf+0x20>)
 8008b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b42:	6800      	ldr	r0, [r0, #0]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	f000 f88d 	bl	8008c64 <_vfiprintf_r>
 8008b4a:	b002      	add	sp, #8
 8008b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b50:	b003      	add	sp, #12
 8008b52:	4770      	bx	lr
 8008b54:	20000018 	.word	0x20000018

08008b58 <__ascii_mbtowc>:
 8008b58:	b082      	sub	sp, #8
 8008b5a:	b901      	cbnz	r1, 8008b5e <__ascii_mbtowc+0x6>
 8008b5c:	a901      	add	r1, sp, #4
 8008b5e:	b142      	cbz	r2, 8008b72 <__ascii_mbtowc+0x1a>
 8008b60:	b14b      	cbz	r3, 8008b76 <__ascii_mbtowc+0x1e>
 8008b62:	7813      	ldrb	r3, [r2, #0]
 8008b64:	600b      	str	r3, [r1, #0]
 8008b66:	7812      	ldrb	r2, [r2, #0]
 8008b68:	1e10      	subs	r0, r2, #0
 8008b6a:	bf18      	it	ne
 8008b6c:	2001      	movne	r0, #1
 8008b6e:	b002      	add	sp, #8
 8008b70:	4770      	bx	lr
 8008b72:	4610      	mov	r0, r2
 8008b74:	e7fb      	b.n	8008b6e <__ascii_mbtowc+0x16>
 8008b76:	f06f 0001 	mvn.w	r0, #1
 8008b7a:	e7f8      	b.n	8008b6e <__ascii_mbtowc+0x16>

08008b7c <memmove>:
 8008b7c:	4288      	cmp	r0, r1
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	eb01 0402 	add.w	r4, r1, r2
 8008b84:	d902      	bls.n	8008b8c <memmove+0x10>
 8008b86:	4284      	cmp	r4, r0
 8008b88:	4623      	mov	r3, r4
 8008b8a:	d807      	bhi.n	8008b9c <memmove+0x20>
 8008b8c:	1e43      	subs	r3, r0, #1
 8008b8e:	42a1      	cmp	r1, r4
 8008b90:	d008      	beq.n	8008ba4 <memmove+0x28>
 8008b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b9a:	e7f8      	b.n	8008b8e <memmove+0x12>
 8008b9c:	4601      	mov	r1, r0
 8008b9e:	4402      	add	r2, r0
 8008ba0:	428a      	cmp	r2, r1
 8008ba2:	d100      	bne.n	8008ba6 <memmove+0x2a>
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bae:	e7f7      	b.n	8008ba0 <memmove+0x24>

08008bb0 <__malloc_lock>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	; (8008bb8 <__malloc_lock+0x8>)
 8008bb2:	f000 bc15 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20000364 	.word	0x20000364

08008bbc <__malloc_unlock>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	; (8008bc4 <__malloc_unlock+0x8>)
 8008bbe:	f000 bc10 	b.w	80093e2 <__retarget_lock_release_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	20000364 	.word	0x20000364

08008bc8 <_realloc_r>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	4607      	mov	r7, r0
 8008bcc:	4614      	mov	r4, r2
 8008bce:	460e      	mov	r6, r1
 8008bd0:	b921      	cbnz	r1, 8008bdc <_realloc_r+0x14>
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bd8:	f7ff bdc8 	b.w	800876c <_malloc_r>
 8008bdc:	b922      	cbnz	r2, 8008be8 <_realloc_r+0x20>
 8008bde:	f7ff fd79 	bl	80086d4 <_free_r>
 8008be2:	4625      	mov	r5, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be8:	f000 fc60 	bl	80094ac <_malloc_usable_size_r>
 8008bec:	42a0      	cmp	r0, r4
 8008bee:	d20f      	bcs.n	8008c10 <_realloc_r+0x48>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f7ff fdba 	bl	800876c <_malloc_r>
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d0f2      	beq.n	8008be4 <_realloc_r+0x1c>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4622      	mov	r2, r4
 8008c02:	f7ff f9c9 	bl	8007f98 <memcpy>
 8008c06:	4631      	mov	r1, r6
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff fd63 	bl	80086d4 <_free_r>
 8008c0e:	e7e9      	b.n	8008be4 <_realloc_r+0x1c>
 8008c10:	4635      	mov	r5, r6
 8008c12:	e7e7      	b.n	8008be4 <_realloc_r+0x1c>

08008c14 <__sfputc_r>:
 8008c14:	6893      	ldr	r3, [r2, #8]
 8008c16:	b410      	push	{r4}
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	6093      	str	r3, [r2, #8]
 8008c1e:	da07      	bge.n	8008c30 <__sfputc_r+0x1c>
 8008c20:	6994      	ldr	r4, [r2, #24]
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	db01      	blt.n	8008c2a <__sfputc_r+0x16>
 8008c26:	290a      	cmp	r1, #10
 8008c28:	d102      	bne.n	8008c30 <__sfputc_r+0x1c>
 8008c2a:	bc10      	pop	{r4}
 8008c2c:	f000 b94a 	b.w	8008ec4 <__swbuf_r>
 8008c30:	6813      	ldr	r3, [r2, #0]
 8008c32:	1c58      	adds	r0, r3, #1
 8008c34:	6010      	str	r0, [r2, #0]
 8008c36:	7019      	strb	r1, [r3, #0]
 8008c38:	4608      	mov	r0, r1
 8008c3a:	bc10      	pop	{r4}
 8008c3c:	4770      	bx	lr

08008c3e <__sfputs_r>:
 8008c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c40:	4606      	mov	r6, r0
 8008c42:	460f      	mov	r7, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	18d5      	adds	r5, r2, r3
 8008c48:	42ac      	cmp	r4, r5
 8008c4a:	d101      	bne.n	8008c50 <__sfputs_r+0x12>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e007      	b.n	8008c60 <__sfputs_r+0x22>
 8008c50:	463a      	mov	r2, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c58:	f7ff ffdc 	bl	8008c14 <__sfputc_r>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d1f3      	bne.n	8008c48 <__sfputs_r+0xa>
 8008c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c64 <_vfiprintf_r>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	460d      	mov	r5, r1
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	4698      	mov	r8, r3
 8008c6e:	4606      	mov	r6, r0
 8008c70:	b09d      	sub	sp, #116	; 0x74
 8008c72:	b118      	cbz	r0, 8008c7c <_vfiprintf_r+0x18>
 8008c74:	6983      	ldr	r3, [r0, #24]
 8008c76:	b90b      	cbnz	r3, 8008c7c <_vfiprintf_r+0x18>
 8008c78:	f000 fb14 	bl	80092a4 <__sinit>
 8008c7c:	4b89      	ldr	r3, [pc, #548]	; (8008ea4 <_vfiprintf_r+0x240>)
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	d11b      	bne.n	8008cba <_vfiprintf_r+0x56>
 8008c82:	6875      	ldr	r5, [r6, #4]
 8008c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c86:	07d9      	lsls	r1, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_vfiprintf_r+0x32>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	059a      	lsls	r2, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_vfiprintf_r+0x32>
 8008c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c92:	f000 fba5 	bl	80093e0 <__retarget_lock_acquire_recursive>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	071b      	lsls	r3, r3, #28
 8008c9a:	d501      	bpl.n	8008ca0 <_vfiprintf_r+0x3c>
 8008c9c:	692b      	ldr	r3, [r5, #16]
 8008c9e:	b9eb      	cbnz	r3, 8008cdc <_vfiprintf_r+0x78>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 f96e 	bl	8008f84 <__swsetup_r>
 8008ca8:	b1c0      	cbz	r0, 8008cdc <_vfiprintf_r+0x78>
 8008caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cac:	07dc      	lsls	r4, r3, #31
 8008cae:	d50e      	bpl.n	8008cce <_vfiprintf_r+0x6a>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	b01d      	add	sp, #116	; 0x74
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cba:	4b7b      	ldr	r3, [pc, #492]	; (8008ea8 <_vfiprintf_r+0x244>)
 8008cbc:	429d      	cmp	r5, r3
 8008cbe:	d101      	bne.n	8008cc4 <_vfiprintf_r+0x60>
 8008cc0:	68b5      	ldr	r5, [r6, #8]
 8008cc2:	e7df      	b.n	8008c84 <_vfiprintf_r+0x20>
 8008cc4:	4b79      	ldr	r3, [pc, #484]	; (8008eac <_vfiprintf_r+0x248>)
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	bf08      	it	eq
 8008cca:	68f5      	ldreq	r5, [r6, #12]
 8008ccc:	e7da      	b.n	8008c84 <_vfiprintf_r+0x20>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	0598      	lsls	r0, r3, #22
 8008cd2:	d4ed      	bmi.n	8008cb0 <_vfiprintf_r+0x4c>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd6:	f000 fb84 	bl	80093e2 <__retarget_lock_release_recursive>
 8008cda:	e7e9      	b.n	8008cb0 <_vfiprintf_r+0x4c>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ce6:	2330      	movs	r3, #48	; 0x30
 8008ce8:	f04f 0901 	mov.w	r9, #1
 8008cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008eb0 <_vfiprintf_r+0x24c>
 8008cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	469a      	mov	sl, r3
 8008cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d00:	b10a      	cbz	r2, 8008d06 <_vfiprintf_r+0xa2>
 8008d02:	2a25      	cmp	r2, #37	; 0x25
 8008d04:	d1f9      	bne.n	8008cfa <_vfiprintf_r+0x96>
 8008d06:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0a:	d00b      	beq.n	8008d24 <_vfiprintf_r+0xc0>
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff ff93 	bl	8008c3e <__sfputs_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f000 80aa 	beq.w	8008e72 <_vfiprintf_r+0x20e>
 8008d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d20:	445a      	add	r2, fp
 8008d22:	9209      	str	r2, [sp, #36]	; 0x24
 8008d24:	f89a 3000 	ldrb.w	r3, [sl]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80a2 	beq.w	8008e72 <_vfiprintf_r+0x20e>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d44:	931a      	str	r3, [sp, #104]	; 0x68
 8008d46:	4654      	mov	r4, sl
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	4858      	ldr	r0, [pc, #352]	; (8008eb0 <_vfiprintf_r+0x24c>)
 8008d50:	f7ff f914 	bl	8007f7c <memchr>
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	b9d8      	cbnz	r0, 8008d90 <_vfiprintf_r+0x12c>
 8008d58:	06d1      	lsls	r1, r2, #27
 8008d5a:	bf44      	itt	mi
 8008d5c:	2320      	movmi	r3, #32
 8008d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d62:	0713      	lsls	r3, r2, #28
 8008d64:	bf44      	itt	mi
 8008d66:	232b      	movmi	r3, #43	; 0x2b
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d015      	beq.n	8008da0 <_vfiprintf_r+0x13c>
 8008d74:	4654      	mov	r4, sl
 8008d76:	2000      	movs	r0, #0
 8008d78:	f04f 0c0a 	mov.w	ip, #10
 8008d7c:	9a07      	ldr	r2, [sp, #28]
 8008d7e:	4621      	mov	r1, r4
 8008d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d84:	3b30      	subs	r3, #48	; 0x30
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d94e      	bls.n	8008e28 <_vfiprintf_r+0x1c4>
 8008d8a:	b1b0      	cbz	r0, 8008dba <_vfiprintf_r+0x156>
 8008d8c:	9207      	str	r2, [sp, #28]
 8008d8e:	e014      	b.n	8008dba <_vfiprintf_r+0x156>
 8008d90:	eba0 0308 	sub.w	r3, r0, r8
 8008d94:	fa09 f303 	lsl.w	r3, r9, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	46a2      	mov	sl, r4
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	e7d2      	b.n	8008d46 <_vfiprintf_r+0xe2>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	1d19      	adds	r1, r3, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	9103      	str	r1, [sp, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfbb      	ittet	lt
 8008dac:	425b      	neglt	r3, r3
 8008dae:	f042 0202 	orrlt.w	r2, r2, #2
 8008db2:	9307      	strge	r3, [sp, #28]
 8008db4:	9307      	strlt	r3, [sp, #28]
 8008db6:	bfb8      	it	lt
 8008db8:	9204      	strlt	r2, [sp, #16]
 8008dba:	7823      	ldrb	r3, [r4, #0]
 8008dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008dbe:	d10c      	bne.n	8008dda <_vfiprintf_r+0x176>
 8008dc0:	7863      	ldrb	r3, [r4, #1]
 8008dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc4:	d135      	bne.n	8008e32 <_vfiprintf_r+0x1ce>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	3402      	adds	r4, #2
 8008dca:	1d1a      	adds	r2, r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	9203      	str	r2, [sp, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bfb8      	it	lt
 8008dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ec0 <_vfiprintf_r+0x25c>
 8008dde:	2203      	movs	r2, #3
 8008de0:	4650      	mov	r0, sl
 8008de2:	7821      	ldrb	r1, [r4, #0]
 8008de4:	f7ff f8ca 	bl	8007f7c <memchr>
 8008de8:	b140      	cbz	r0, 8008dfc <_vfiprintf_r+0x198>
 8008dea:	2340      	movs	r3, #64	; 0x40
 8008dec:	eba0 000a 	sub.w	r0, r0, sl
 8008df0:	fa03 f000 	lsl.w	r0, r3, r0
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	3401      	adds	r4, #1
 8008df8:	4303      	orrs	r3, r0
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e00:	2206      	movs	r2, #6
 8008e02:	482c      	ldr	r0, [pc, #176]	; (8008eb4 <_vfiprintf_r+0x250>)
 8008e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e08:	f7ff f8b8 	bl	8007f7c <memchr>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d03f      	beq.n	8008e90 <_vfiprintf_r+0x22c>
 8008e10:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <_vfiprintf_r+0x254>)
 8008e12:	bb1b      	cbnz	r3, 8008e5c <_vfiprintf_r+0x1f8>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	3307      	adds	r3, #7
 8008e18:	f023 0307 	bic.w	r3, r3, #7
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	9303      	str	r3, [sp, #12]
 8008e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e22:	443b      	add	r3, r7
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	e767      	b.n	8008cf8 <_vfiprintf_r+0x94>
 8008e28:	460c      	mov	r4, r1
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e30:	e7a5      	b.n	8008d7e <_vfiprintf_r+0x11a>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f04f 0c0a 	mov.w	ip, #10
 8008e38:	4619      	mov	r1, r3
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e44:	3a30      	subs	r2, #48	; 0x30
 8008e46:	2a09      	cmp	r2, #9
 8008e48:	d903      	bls.n	8008e52 <_vfiprintf_r+0x1ee>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c5      	beq.n	8008dda <_vfiprintf_r+0x176>
 8008e4e:	9105      	str	r1, [sp, #20]
 8008e50:	e7c3      	b.n	8008dda <_vfiprintf_r+0x176>
 8008e52:	4604      	mov	r4, r0
 8008e54:	2301      	movs	r3, #1
 8008e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5a:	e7f0      	b.n	8008e3e <_vfiprintf_r+0x1da>
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	462a      	mov	r2, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <_vfiprintf_r+0x258>)
 8008e66:	a904      	add	r1, sp, #16
 8008e68:	f7fd fe08 	bl	8006a7c <_printf_float>
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	1c78      	adds	r0, r7, #1
 8008e70:	d1d6      	bne.n	8008e20 <_vfiprintf_r+0x1bc>
 8008e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e74:	07d9      	lsls	r1, r3, #31
 8008e76:	d405      	bmi.n	8008e84 <_vfiprintf_r+0x220>
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	059a      	lsls	r2, r3, #22
 8008e7c:	d402      	bmi.n	8008e84 <_vfiprintf_r+0x220>
 8008e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e80:	f000 faaf 	bl	80093e2 <__retarget_lock_release_recursive>
 8008e84:	89ab      	ldrh	r3, [r5, #12]
 8008e86:	065b      	lsls	r3, r3, #25
 8008e88:	f53f af12 	bmi.w	8008cb0 <_vfiprintf_r+0x4c>
 8008e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8e:	e711      	b.n	8008cb4 <_vfiprintf_r+0x50>
 8008e90:	ab03      	add	r3, sp, #12
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	462a      	mov	r2, r5
 8008e96:	4630      	mov	r0, r6
 8008e98:	4b08      	ldr	r3, [pc, #32]	; (8008ebc <_vfiprintf_r+0x258>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	f7fe f88a 	bl	8006fb4 <_printf_i>
 8008ea0:	e7e4      	b.n	8008e6c <_vfiprintf_r+0x208>
 8008ea2:	bf00      	nop
 8008ea4:	08009b04 	.word	0x08009b04
 8008ea8:	08009b24 	.word	0x08009b24
 8008eac:	08009ae4 	.word	0x08009ae4
 8008eb0:	0800998c 	.word	0x0800998c
 8008eb4:	08009996 	.word	0x08009996
 8008eb8:	08006a7d 	.word	0x08006a7d
 8008ebc:	08008c3f 	.word	0x08008c3f
 8008ec0:	08009992 	.word	0x08009992

08008ec4 <__swbuf_r>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	460e      	mov	r6, r1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	4605      	mov	r5, r0
 8008ecc:	b118      	cbz	r0, 8008ed6 <__swbuf_r+0x12>
 8008ece:	6983      	ldr	r3, [r0, #24]
 8008ed0:	b90b      	cbnz	r3, 8008ed6 <__swbuf_r+0x12>
 8008ed2:	f000 f9e7 	bl	80092a4 <__sinit>
 8008ed6:	4b21      	ldr	r3, [pc, #132]	; (8008f5c <__swbuf_r+0x98>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	d12b      	bne.n	8008f34 <__swbuf_r+0x70>
 8008edc:	686c      	ldr	r4, [r5, #4]
 8008ede:	69a3      	ldr	r3, [r4, #24]
 8008ee0:	60a3      	str	r3, [r4, #8]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	071a      	lsls	r2, r3, #28
 8008ee6:	d52f      	bpl.n	8008f48 <__swbuf_r+0x84>
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	b36b      	cbz	r3, 8008f48 <__swbuf_r+0x84>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	6820      	ldr	r0, [r4, #0]
 8008ef0:	b2f6      	uxtb	r6, r6
 8008ef2:	1ac0      	subs	r0, r0, r3
 8008ef4:	6963      	ldr	r3, [r4, #20]
 8008ef6:	4637      	mov	r7, r6
 8008ef8:	4283      	cmp	r3, r0
 8008efa:	dc04      	bgt.n	8008f06 <__swbuf_r+0x42>
 8008efc:	4621      	mov	r1, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f93c 	bl	800917c <_fflush_r>
 8008f04:	bb30      	cbnz	r0, 8008f54 <__swbuf_r+0x90>
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	3001      	adds	r0, #1
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	701e      	strb	r6, [r3, #0]
 8008f16:	6963      	ldr	r3, [r4, #20]
 8008f18:	4283      	cmp	r3, r0
 8008f1a:	d004      	beq.n	8008f26 <__swbuf_r+0x62>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	07db      	lsls	r3, r3, #31
 8008f20:	d506      	bpl.n	8008f30 <__swbuf_r+0x6c>
 8008f22:	2e0a      	cmp	r6, #10
 8008f24:	d104      	bne.n	8008f30 <__swbuf_r+0x6c>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 f927 	bl	800917c <_fflush_r>
 8008f2e:	b988      	cbnz	r0, 8008f54 <__swbuf_r+0x90>
 8008f30:	4638      	mov	r0, r7
 8008f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <__swbuf_r+0x9c>)
 8008f36:	429c      	cmp	r4, r3
 8008f38:	d101      	bne.n	8008f3e <__swbuf_r+0x7a>
 8008f3a:	68ac      	ldr	r4, [r5, #8]
 8008f3c:	e7cf      	b.n	8008ede <__swbuf_r+0x1a>
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <__swbuf_r+0xa0>)
 8008f40:	429c      	cmp	r4, r3
 8008f42:	bf08      	it	eq
 8008f44:	68ec      	ldreq	r4, [r5, #12]
 8008f46:	e7ca      	b.n	8008ede <__swbuf_r+0x1a>
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f000 f81a 	bl	8008f84 <__swsetup_r>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d0cb      	beq.n	8008eec <__swbuf_r+0x28>
 8008f54:	f04f 37ff 	mov.w	r7, #4294967295
 8008f58:	e7ea      	b.n	8008f30 <__swbuf_r+0x6c>
 8008f5a:	bf00      	nop
 8008f5c:	08009b04 	.word	0x08009b04
 8008f60:	08009b24 	.word	0x08009b24
 8008f64:	08009ae4 	.word	0x08009ae4

08008f68 <__ascii_wctomb>:
 8008f68:	4603      	mov	r3, r0
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	b141      	cbz	r1, 8008f80 <__ascii_wctomb+0x18>
 8008f6e:	2aff      	cmp	r2, #255	; 0xff
 8008f70:	d904      	bls.n	8008f7c <__ascii_wctomb+0x14>
 8008f72:	228a      	movs	r2, #138	; 0x8a
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	4770      	bx	lr
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	700a      	strb	r2, [r1, #0]
 8008f80:	4770      	bx	lr
	...

08008f84 <__swsetup_r>:
 8008f84:	4b32      	ldr	r3, [pc, #200]	; (8009050 <__swsetup_r+0xcc>)
 8008f86:	b570      	push	{r4, r5, r6, lr}
 8008f88:	681d      	ldr	r5, [r3, #0]
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	b125      	cbz	r5, 8008f9a <__swsetup_r+0x16>
 8008f90:	69ab      	ldr	r3, [r5, #24]
 8008f92:	b913      	cbnz	r3, 8008f9a <__swsetup_r+0x16>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 f985 	bl	80092a4 <__sinit>
 8008f9a:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <__swsetup_r+0xd0>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	d10f      	bne.n	8008fc0 <__swsetup_r+0x3c>
 8008fa0:	686c      	ldr	r4, [r5, #4]
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa8:	0719      	lsls	r1, r3, #28
 8008faa:	d42c      	bmi.n	8009006 <__swsetup_r+0x82>
 8008fac:	06dd      	lsls	r5, r3, #27
 8008fae:	d411      	bmi.n	8008fd4 <__swsetup_r+0x50>
 8008fb0:	2309      	movs	r3, #9
 8008fb2:	6033      	str	r3, [r6, #0]
 8008fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	e03e      	b.n	800903e <__swsetup_r+0xba>
 8008fc0:	4b25      	ldr	r3, [pc, #148]	; (8009058 <__swsetup_r+0xd4>)
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d101      	bne.n	8008fca <__swsetup_r+0x46>
 8008fc6:	68ac      	ldr	r4, [r5, #8]
 8008fc8:	e7eb      	b.n	8008fa2 <__swsetup_r+0x1e>
 8008fca:	4b24      	ldr	r3, [pc, #144]	; (800905c <__swsetup_r+0xd8>)
 8008fcc:	429c      	cmp	r4, r3
 8008fce:	bf08      	it	eq
 8008fd0:	68ec      	ldreq	r4, [r5, #12]
 8008fd2:	e7e6      	b.n	8008fa2 <__swsetup_r+0x1e>
 8008fd4:	0758      	lsls	r0, r3, #29
 8008fd6:	d512      	bpl.n	8008ffe <__swsetup_r+0x7a>
 8008fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fda:	b141      	cbz	r1, 8008fee <__swsetup_r+0x6a>
 8008fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	d002      	beq.n	8008fea <__swsetup_r+0x66>
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff fb75 	bl	80086d4 <_free_r>
 8008fea:	2300      	movs	r3, #0
 8008fec:	6363      	str	r3, [r4, #52]	; 0x34
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	f043 0308 	orr.w	r3, r3, #8
 8009004:	81a3      	strh	r3, [r4, #12]
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	b94b      	cbnz	r3, 800901e <__swsetup_r+0x9a>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009014:	d003      	beq.n	800901e <__swsetup_r+0x9a>
 8009016:	4621      	mov	r1, r4
 8009018:	4630      	mov	r0, r6
 800901a:	f000 fa07 	bl	800942c <__smakebuf_r>
 800901e:	89a0      	ldrh	r0, [r4, #12]
 8009020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009024:	f010 0301 	ands.w	r3, r0, #1
 8009028:	d00a      	beq.n	8009040 <__swsetup_r+0xbc>
 800902a:	2300      	movs	r3, #0
 800902c:	60a3      	str	r3, [r4, #8]
 800902e:	6963      	ldr	r3, [r4, #20]
 8009030:	425b      	negs	r3, r3
 8009032:	61a3      	str	r3, [r4, #24]
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	b943      	cbnz	r3, 800904a <__swsetup_r+0xc6>
 8009038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800903c:	d1ba      	bne.n	8008fb4 <__swsetup_r+0x30>
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	0781      	lsls	r1, r0, #30
 8009042:	bf58      	it	pl
 8009044:	6963      	ldrpl	r3, [r4, #20]
 8009046:	60a3      	str	r3, [r4, #8]
 8009048:	e7f4      	b.n	8009034 <__swsetup_r+0xb0>
 800904a:	2000      	movs	r0, #0
 800904c:	e7f7      	b.n	800903e <__swsetup_r+0xba>
 800904e:	bf00      	nop
 8009050:	20000018 	.word	0x20000018
 8009054:	08009b04 	.word	0x08009b04
 8009058:	08009b24 	.word	0x08009b24
 800905c:	08009ae4 	.word	0x08009ae4

08009060 <abort>:
 8009060:	2006      	movs	r0, #6
 8009062:	b508      	push	{r3, lr}
 8009064:	f000 fa52 	bl	800950c <raise>
 8009068:	2001      	movs	r0, #1
 800906a:	f7f8 fcfe 	bl	8001a6a <_exit>
	...

08009070 <__sflush_r>:
 8009070:	898a      	ldrh	r2, [r1, #12]
 8009072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009076:	4605      	mov	r5, r0
 8009078:	0710      	lsls	r0, r2, #28
 800907a:	460c      	mov	r4, r1
 800907c:	d458      	bmi.n	8009130 <__sflush_r+0xc0>
 800907e:	684b      	ldr	r3, [r1, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	dc05      	bgt.n	8009090 <__sflush_r+0x20>
 8009084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	dc02      	bgt.n	8009090 <__sflush_r+0x20>
 800908a:	2000      	movs	r0, #0
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009092:	2e00      	cmp	r6, #0
 8009094:	d0f9      	beq.n	800908a <__sflush_r+0x1a>
 8009096:	2300      	movs	r3, #0
 8009098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800909c:	682f      	ldr	r7, [r5, #0]
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	d032      	beq.n	8009108 <__sflush_r+0x98>
 80090a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	075a      	lsls	r2, r3, #29
 80090a8:	d505      	bpl.n	80090b6 <__sflush_r+0x46>
 80090aa:	6863      	ldr	r3, [r4, #4]
 80090ac:	1ac0      	subs	r0, r0, r3
 80090ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090b0:	b10b      	cbz	r3, 80090b6 <__sflush_r+0x46>
 80090b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090b4:	1ac0      	subs	r0, r0, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	4602      	mov	r2, r0
 80090ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090bc:	4628      	mov	r0, r5
 80090be:	6a21      	ldr	r1, [r4, #32]
 80090c0:	47b0      	blx	r6
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	d106      	bne.n	80090d6 <__sflush_r+0x66>
 80090c8:	6829      	ldr	r1, [r5, #0]
 80090ca:	291d      	cmp	r1, #29
 80090cc:	d82c      	bhi.n	8009128 <__sflush_r+0xb8>
 80090ce:	4a2a      	ldr	r2, [pc, #168]	; (8009178 <__sflush_r+0x108>)
 80090d0:	40ca      	lsrs	r2, r1
 80090d2:	07d6      	lsls	r6, r2, #31
 80090d4:	d528      	bpl.n	8009128 <__sflush_r+0xb8>
 80090d6:	2200      	movs	r2, #0
 80090d8:	6062      	str	r2, [r4, #4]
 80090da:	6922      	ldr	r2, [r4, #16]
 80090dc:	04d9      	lsls	r1, r3, #19
 80090de:	6022      	str	r2, [r4, #0]
 80090e0:	d504      	bpl.n	80090ec <__sflush_r+0x7c>
 80090e2:	1c42      	adds	r2, r0, #1
 80090e4:	d101      	bne.n	80090ea <__sflush_r+0x7a>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	b903      	cbnz	r3, 80090ec <__sflush_r+0x7c>
 80090ea:	6560      	str	r0, [r4, #84]	; 0x54
 80090ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ee:	602f      	str	r7, [r5, #0]
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d0ca      	beq.n	800908a <__sflush_r+0x1a>
 80090f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <__sflush_r+0x92>
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fae9 	bl	80086d4 <_free_r>
 8009102:	2000      	movs	r0, #0
 8009104:	6360      	str	r0, [r4, #52]	; 0x34
 8009106:	e7c1      	b.n	800908c <__sflush_r+0x1c>
 8009108:	6a21      	ldr	r1, [r4, #32]
 800910a:	2301      	movs	r3, #1
 800910c:	4628      	mov	r0, r5
 800910e:	47b0      	blx	r6
 8009110:	1c41      	adds	r1, r0, #1
 8009112:	d1c7      	bne.n	80090a4 <__sflush_r+0x34>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0c4      	beq.n	80090a4 <__sflush_r+0x34>
 800911a:	2b1d      	cmp	r3, #29
 800911c:	d001      	beq.n	8009122 <__sflush_r+0xb2>
 800911e:	2b16      	cmp	r3, #22
 8009120:	d101      	bne.n	8009126 <__sflush_r+0xb6>
 8009122:	602f      	str	r7, [r5, #0]
 8009124:	e7b1      	b.n	800908a <__sflush_r+0x1a>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	e7ad      	b.n	800908c <__sflush_r+0x1c>
 8009130:	690f      	ldr	r7, [r1, #16]
 8009132:	2f00      	cmp	r7, #0
 8009134:	d0a9      	beq.n	800908a <__sflush_r+0x1a>
 8009136:	0793      	lsls	r3, r2, #30
 8009138:	bf18      	it	ne
 800913a:	2300      	movne	r3, #0
 800913c:	680e      	ldr	r6, [r1, #0]
 800913e:	bf08      	it	eq
 8009140:	694b      	ldreq	r3, [r1, #20]
 8009142:	eba6 0807 	sub.w	r8, r6, r7
 8009146:	600f      	str	r7, [r1, #0]
 8009148:	608b      	str	r3, [r1, #8]
 800914a:	f1b8 0f00 	cmp.w	r8, #0
 800914e:	dd9c      	ble.n	800908a <__sflush_r+0x1a>
 8009150:	4643      	mov	r3, r8
 8009152:	463a      	mov	r2, r7
 8009154:	4628      	mov	r0, r5
 8009156:	6a21      	ldr	r1, [r4, #32]
 8009158:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800915a:	47b0      	blx	r6
 800915c:	2800      	cmp	r0, #0
 800915e:	dc06      	bgt.n	800916e <__sflush_r+0xfe>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f04f 30ff 	mov.w	r0, #4294967295
 8009166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	e78e      	b.n	800908c <__sflush_r+0x1c>
 800916e:	4407      	add	r7, r0
 8009170:	eba8 0800 	sub.w	r8, r8, r0
 8009174:	e7e9      	b.n	800914a <__sflush_r+0xda>
 8009176:	bf00      	nop
 8009178:	20400001 	.word	0x20400001

0800917c <_fflush_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	b913      	cbnz	r3, 800918c <_fflush_r+0x10>
 8009186:	2500      	movs	r5, #0
 8009188:	4628      	mov	r0, r5
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	b118      	cbz	r0, 8009196 <_fflush_r+0x1a>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <_fflush_r+0x1a>
 8009192:	f000 f887 	bl	80092a4 <__sinit>
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <_fflush_r+0x6c>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d11b      	bne.n	80091d4 <_fflush_r+0x58>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0ef      	beq.n	8009186 <_fflush_r+0xa>
 80091a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091a8:	07d0      	lsls	r0, r2, #31
 80091aa:	d404      	bmi.n	80091b6 <_fflush_r+0x3a>
 80091ac:	0599      	lsls	r1, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_fflush_r+0x3a>
 80091b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b2:	f000 f915 	bl	80093e0 <__retarget_lock_acquire_recursive>
 80091b6:	4628      	mov	r0, r5
 80091b8:	4621      	mov	r1, r4
 80091ba:	f7ff ff59 	bl	8009070 <__sflush_r>
 80091be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c0:	4605      	mov	r5, r0
 80091c2:	07da      	lsls	r2, r3, #31
 80091c4:	d4e0      	bmi.n	8009188 <_fflush_r+0xc>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	059b      	lsls	r3, r3, #22
 80091ca:	d4dd      	bmi.n	8009188 <_fflush_r+0xc>
 80091cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ce:	f000 f908 	bl	80093e2 <__retarget_lock_release_recursive>
 80091d2:	e7d9      	b.n	8009188 <_fflush_r+0xc>
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <_fflush_r+0x70>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d101      	bne.n	80091de <_fflush_r+0x62>
 80091da:	68ac      	ldr	r4, [r5, #8]
 80091dc:	e7df      	b.n	800919e <_fflush_r+0x22>
 80091de:	4b04      	ldr	r3, [pc, #16]	; (80091f0 <_fflush_r+0x74>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	bf08      	it	eq
 80091e4:	68ec      	ldreq	r4, [r5, #12]
 80091e6:	e7da      	b.n	800919e <_fflush_r+0x22>
 80091e8:	08009b04 	.word	0x08009b04
 80091ec:	08009b24 	.word	0x08009b24
 80091f0:	08009ae4 	.word	0x08009ae4

080091f4 <std>:
 80091f4:	2300      	movs	r3, #0
 80091f6:	b510      	push	{r4, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	e9c0 3300 	strd	r3, r3, [r0]
 80091fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009202:	6083      	str	r3, [r0, #8]
 8009204:	8181      	strh	r1, [r0, #12]
 8009206:	6643      	str	r3, [r0, #100]	; 0x64
 8009208:	81c2      	strh	r2, [r0, #14]
 800920a:	6183      	str	r3, [r0, #24]
 800920c:	4619      	mov	r1, r3
 800920e:	2208      	movs	r2, #8
 8009210:	305c      	adds	r0, #92	; 0x5c
 8009212:	f7fd fb8d 	bl	8006930 <memset>
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <std+0x38>)
 8009218:	6224      	str	r4, [r4, #32]
 800921a:	6263      	str	r3, [r4, #36]	; 0x24
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <std+0x3c>)
 800921e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009220:	4b04      	ldr	r3, [pc, #16]	; (8009234 <std+0x40>)
 8009222:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <std+0x44>)
 8009226:	6323      	str	r3, [r4, #48]	; 0x30
 8009228:	bd10      	pop	{r4, pc}
 800922a:	bf00      	nop
 800922c:	08009545 	.word	0x08009545
 8009230:	08009567 	.word	0x08009567
 8009234:	0800959f 	.word	0x0800959f
 8009238:	080095c3 	.word	0x080095c3

0800923c <_cleanup_r>:
 800923c:	4901      	ldr	r1, [pc, #4]	; (8009244 <_cleanup_r+0x8>)
 800923e:	f000 b8af 	b.w	80093a0 <_fwalk_reent>
 8009242:	bf00      	nop
 8009244:	0800917d 	.word	0x0800917d

08009248 <__sfmoreglue>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	2568      	movs	r5, #104	; 0x68
 800924c:	1e4a      	subs	r2, r1, #1
 800924e:	4355      	muls	r5, r2
 8009250:	460e      	mov	r6, r1
 8009252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009256:	f7ff fa89 	bl	800876c <_malloc_r>
 800925a:	4604      	mov	r4, r0
 800925c:	b140      	cbz	r0, 8009270 <__sfmoreglue+0x28>
 800925e:	2100      	movs	r1, #0
 8009260:	e9c0 1600 	strd	r1, r6, [r0]
 8009264:	300c      	adds	r0, #12
 8009266:	60a0      	str	r0, [r4, #8]
 8009268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800926c:	f7fd fb60 	bl	8006930 <memset>
 8009270:	4620      	mov	r0, r4
 8009272:	bd70      	pop	{r4, r5, r6, pc}

08009274 <__sfp_lock_acquire>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__sfp_lock_acquire+0x8>)
 8009276:	f000 b8b3 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	20000368 	.word	0x20000368

08009280 <__sfp_lock_release>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sfp_lock_release+0x8>)
 8009282:	f000 b8ae 	b.w	80093e2 <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	20000368 	.word	0x20000368

0800928c <__sinit_lock_acquire>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__sinit_lock_acquire+0x8>)
 800928e:	f000 b8a7 	b.w	80093e0 <__retarget_lock_acquire_recursive>
 8009292:	bf00      	nop
 8009294:	20000363 	.word	0x20000363

08009298 <__sinit_lock_release>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__sinit_lock_release+0x8>)
 800929a:	f000 b8a2 	b.w	80093e2 <__retarget_lock_release_recursive>
 800929e:	bf00      	nop
 80092a0:	20000363 	.word	0x20000363

080092a4 <__sinit>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	4604      	mov	r4, r0
 80092a8:	f7ff fff0 	bl	800928c <__sinit_lock_acquire>
 80092ac:	69a3      	ldr	r3, [r4, #24]
 80092ae:	b11b      	cbz	r3, 80092b8 <__sinit+0x14>
 80092b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b4:	f7ff bff0 	b.w	8009298 <__sinit_lock_release>
 80092b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092bc:	6523      	str	r3, [r4, #80]	; 0x50
 80092be:	4b13      	ldr	r3, [pc, #76]	; (800930c <__sinit+0x68>)
 80092c0:	4a13      	ldr	r2, [pc, #76]	; (8009310 <__sinit+0x6c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	bf08      	it	eq
 80092ca:	2301      	moveq	r3, #1
 80092cc:	4620      	mov	r0, r4
 80092ce:	bf08      	it	eq
 80092d0:	61a3      	streq	r3, [r4, #24]
 80092d2:	f000 f81f 	bl	8009314 <__sfp>
 80092d6:	6060      	str	r0, [r4, #4]
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 f81b 	bl	8009314 <__sfp>
 80092de:	60a0      	str	r0, [r4, #8]
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 f817 	bl	8009314 <__sfp>
 80092e6:	2200      	movs	r2, #0
 80092e8:	2104      	movs	r1, #4
 80092ea:	60e0      	str	r0, [r4, #12]
 80092ec:	6860      	ldr	r0, [r4, #4]
 80092ee:	f7ff ff81 	bl	80091f4 <std>
 80092f2:	2201      	movs	r2, #1
 80092f4:	2109      	movs	r1, #9
 80092f6:	68a0      	ldr	r0, [r4, #8]
 80092f8:	f7ff ff7c 	bl	80091f4 <std>
 80092fc:	2202      	movs	r2, #2
 80092fe:	2112      	movs	r1, #18
 8009300:	68e0      	ldr	r0, [r4, #12]
 8009302:	f7ff ff77 	bl	80091f4 <std>
 8009306:	2301      	movs	r3, #1
 8009308:	61a3      	str	r3, [r4, #24]
 800930a:	e7d1      	b.n	80092b0 <__sinit+0xc>
 800930c:	08009764 	.word	0x08009764
 8009310:	0800923d 	.word	0x0800923d

08009314 <__sfp>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	4607      	mov	r7, r0
 8009318:	f7ff ffac 	bl	8009274 <__sfp_lock_acquire>
 800931c:	4b1e      	ldr	r3, [pc, #120]	; (8009398 <__sfp+0x84>)
 800931e:	681e      	ldr	r6, [r3, #0]
 8009320:	69b3      	ldr	r3, [r6, #24]
 8009322:	b913      	cbnz	r3, 800932a <__sfp+0x16>
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ffbd 	bl	80092a4 <__sinit>
 800932a:	3648      	adds	r6, #72	; 0x48
 800932c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009330:	3b01      	subs	r3, #1
 8009332:	d503      	bpl.n	800933c <__sfp+0x28>
 8009334:	6833      	ldr	r3, [r6, #0]
 8009336:	b30b      	cbz	r3, 800937c <__sfp+0x68>
 8009338:	6836      	ldr	r6, [r6, #0]
 800933a:	e7f7      	b.n	800932c <__sfp+0x18>
 800933c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009340:	b9d5      	cbnz	r5, 8009378 <__sfp+0x64>
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <__sfp+0x88>)
 8009344:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009348:	60e3      	str	r3, [r4, #12]
 800934a:	6665      	str	r5, [r4, #100]	; 0x64
 800934c:	f000 f847 	bl	80093de <__retarget_lock_init_recursive>
 8009350:	f7ff ff96 	bl	8009280 <__sfp_lock_release>
 8009354:	2208      	movs	r2, #8
 8009356:	4629      	mov	r1, r5
 8009358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800935c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009360:	6025      	str	r5, [r4, #0]
 8009362:	61a5      	str	r5, [r4, #24]
 8009364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009368:	f7fd fae2 	bl	8006930 <memset>
 800936c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009374:	4620      	mov	r0, r4
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	3468      	adds	r4, #104	; 0x68
 800937a:	e7d9      	b.n	8009330 <__sfp+0x1c>
 800937c:	2104      	movs	r1, #4
 800937e:	4638      	mov	r0, r7
 8009380:	f7ff ff62 	bl	8009248 <__sfmoreglue>
 8009384:	4604      	mov	r4, r0
 8009386:	6030      	str	r0, [r6, #0]
 8009388:	2800      	cmp	r0, #0
 800938a:	d1d5      	bne.n	8009338 <__sfp+0x24>
 800938c:	f7ff ff78 	bl	8009280 <__sfp_lock_release>
 8009390:	230c      	movs	r3, #12
 8009392:	603b      	str	r3, [r7, #0]
 8009394:	e7ee      	b.n	8009374 <__sfp+0x60>
 8009396:	bf00      	nop
 8009398:	08009764 	.word	0x08009764
 800939c:	ffff0001 	.word	0xffff0001

080093a0 <_fwalk_reent>:
 80093a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a4:	4606      	mov	r6, r0
 80093a6:	4688      	mov	r8, r1
 80093a8:	2700      	movs	r7, #0
 80093aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093b2:	f1b9 0901 	subs.w	r9, r9, #1
 80093b6:	d505      	bpl.n	80093c4 <_fwalk_reent+0x24>
 80093b8:	6824      	ldr	r4, [r4, #0]
 80093ba:	2c00      	cmp	r4, #0
 80093bc:	d1f7      	bne.n	80093ae <_fwalk_reent+0xe>
 80093be:	4638      	mov	r0, r7
 80093c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093c4:	89ab      	ldrh	r3, [r5, #12]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d907      	bls.n	80093da <_fwalk_reent+0x3a>
 80093ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093ce:	3301      	adds	r3, #1
 80093d0:	d003      	beq.n	80093da <_fwalk_reent+0x3a>
 80093d2:	4629      	mov	r1, r5
 80093d4:	4630      	mov	r0, r6
 80093d6:	47c0      	blx	r8
 80093d8:	4307      	orrs	r7, r0
 80093da:	3568      	adds	r5, #104	; 0x68
 80093dc:	e7e9      	b.n	80093b2 <_fwalk_reent+0x12>

080093de <__retarget_lock_init_recursive>:
 80093de:	4770      	bx	lr

080093e0 <__retarget_lock_acquire_recursive>:
 80093e0:	4770      	bx	lr

080093e2 <__retarget_lock_release_recursive>:
 80093e2:	4770      	bx	lr

080093e4 <__swhatbuf_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	460e      	mov	r6, r1
 80093e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ec:	4614      	mov	r4, r2
 80093ee:	2900      	cmp	r1, #0
 80093f0:	461d      	mov	r5, r3
 80093f2:	b096      	sub	sp, #88	; 0x58
 80093f4:	da07      	bge.n	8009406 <__swhatbuf_r+0x22>
 80093f6:	2300      	movs	r3, #0
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	89b3      	ldrh	r3, [r6, #12]
 80093fc:	061a      	lsls	r2, r3, #24
 80093fe:	d410      	bmi.n	8009422 <__swhatbuf_r+0x3e>
 8009400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009404:	e00e      	b.n	8009424 <__swhatbuf_r+0x40>
 8009406:	466a      	mov	r2, sp
 8009408:	f000 f902 	bl	8009610 <_fstat_r>
 800940c:	2800      	cmp	r0, #0
 800940e:	dbf2      	blt.n	80093f6 <__swhatbuf_r+0x12>
 8009410:	9a01      	ldr	r2, [sp, #4]
 8009412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009416:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800941a:	425a      	negs	r2, r3
 800941c:	415a      	adcs	r2, r3
 800941e:	602a      	str	r2, [r5, #0]
 8009420:	e7ee      	b.n	8009400 <__swhatbuf_r+0x1c>
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	2000      	movs	r0, #0
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	b016      	add	sp, #88	; 0x58
 800942a:	bd70      	pop	{r4, r5, r6, pc}

0800942c <__smakebuf_r>:
 800942c:	898b      	ldrh	r3, [r1, #12]
 800942e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009430:	079d      	lsls	r5, r3, #30
 8009432:	4606      	mov	r6, r0
 8009434:	460c      	mov	r4, r1
 8009436:	d507      	bpl.n	8009448 <__smakebuf_r+0x1c>
 8009438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	2301      	movs	r3, #1
 8009442:	6163      	str	r3, [r4, #20]
 8009444:	b002      	add	sp, #8
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	466a      	mov	r2, sp
 800944a:	ab01      	add	r3, sp, #4
 800944c:	f7ff ffca 	bl	80093e4 <__swhatbuf_r>
 8009450:	9900      	ldr	r1, [sp, #0]
 8009452:	4605      	mov	r5, r0
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff f989 	bl	800876c <_malloc_r>
 800945a:	b948      	cbnz	r0, 8009470 <__smakebuf_r+0x44>
 800945c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009460:	059a      	lsls	r2, r3, #22
 8009462:	d4ef      	bmi.n	8009444 <__smakebuf_r+0x18>
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	f043 0302 	orr.w	r3, r3, #2
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	e7e3      	b.n	8009438 <__smakebuf_r+0xc>
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <__smakebuf_r+0x7c>)
 8009472:	62b3      	str	r3, [r6, #40]	; 0x28
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	6020      	str	r0, [r4, #0]
 8009478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	9b00      	ldr	r3, [sp, #0]
 8009480:	6120      	str	r0, [r4, #16]
 8009482:	6163      	str	r3, [r4, #20]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	b15b      	cbz	r3, 80094a0 <__smakebuf_r+0x74>
 8009488:	4630      	mov	r0, r6
 800948a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948e:	f000 f8d1 	bl	8009634 <_isatty_r>
 8009492:	b128      	cbz	r0, 80094a0 <__smakebuf_r+0x74>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	89a0      	ldrh	r0, [r4, #12]
 80094a2:	4305      	orrs	r5, r0
 80094a4:	81a5      	strh	r5, [r4, #12]
 80094a6:	e7cd      	b.n	8009444 <__smakebuf_r+0x18>
 80094a8:	0800923d 	.word	0x0800923d

080094ac <_malloc_usable_size_r>:
 80094ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b0:	1f18      	subs	r0, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bfbc      	itt	lt
 80094b6:	580b      	ldrlt	r3, [r1, r0]
 80094b8:	18c0      	addlt	r0, r0, r3
 80094ba:	4770      	bx	lr

080094bc <_raise_r>:
 80094bc:	291f      	cmp	r1, #31
 80094be:	b538      	push	{r3, r4, r5, lr}
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	d904      	bls.n	80094d0 <_raise_r+0x14>
 80094c6:	2316      	movs	r3, #22
 80094c8:	6003      	str	r3, [r0, #0]
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094d2:	b112      	cbz	r2, 80094da <_raise_r+0x1e>
 80094d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094d8:	b94b      	cbnz	r3, 80094ee <_raise_r+0x32>
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 f830 	bl	8009540 <_getpid_r>
 80094e0:	462a      	mov	r2, r5
 80094e2:	4601      	mov	r1, r0
 80094e4:	4620      	mov	r0, r4
 80094e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ea:	f000 b817 	b.w	800951c <_kill_r>
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d00a      	beq.n	8009508 <_raise_r+0x4c>
 80094f2:	1c59      	adds	r1, r3, #1
 80094f4:	d103      	bne.n	80094fe <_raise_r+0x42>
 80094f6:	2316      	movs	r3, #22
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	2001      	movs	r0, #1
 80094fc:	e7e7      	b.n	80094ce <_raise_r+0x12>
 80094fe:	2400      	movs	r4, #0
 8009500:	4628      	mov	r0, r5
 8009502:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009506:	4798      	blx	r3
 8009508:	2000      	movs	r0, #0
 800950a:	e7e0      	b.n	80094ce <_raise_r+0x12>

0800950c <raise>:
 800950c:	4b02      	ldr	r3, [pc, #8]	; (8009518 <raise+0xc>)
 800950e:	4601      	mov	r1, r0
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	f7ff bfd3 	b.w	80094bc <_raise_r>
 8009516:	bf00      	nop
 8009518:	20000018 	.word	0x20000018

0800951c <_kill_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	2300      	movs	r3, #0
 8009520:	4d06      	ldr	r5, [pc, #24]	; (800953c <_kill_r+0x20>)
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	4611      	mov	r1, r2
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	f7f8 fa8e 	bl	8001a4a <_kill>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d102      	bne.n	8009538 <_kill_r+0x1c>
 8009532:	682b      	ldr	r3, [r5, #0]
 8009534:	b103      	cbz	r3, 8009538 <_kill_r+0x1c>
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	bd38      	pop	{r3, r4, r5, pc}
 800953a:	bf00      	nop
 800953c:	2000035c 	.word	0x2000035c

08009540 <_getpid_r>:
 8009540:	f7f8 ba7c 	b.w	8001a3c <_getpid>

08009544 <__sread>:
 8009544:	b510      	push	{r4, lr}
 8009546:	460c      	mov	r4, r1
 8009548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954c:	f000 f894 	bl	8009678 <_read_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	bfab      	itete	ge
 8009554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009556:	89a3      	ldrhlt	r3, [r4, #12]
 8009558:	181b      	addge	r3, r3, r0
 800955a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800955e:	bfac      	ite	ge
 8009560:	6563      	strge	r3, [r4, #84]	; 0x54
 8009562:	81a3      	strhlt	r3, [r4, #12]
 8009564:	bd10      	pop	{r4, pc}

08009566 <__swrite>:
 8009566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956a:	461f      	mov	r7, r3
 800956c:	898b      	ldrh	r3, [r1, #12]
 800956e:	4605      	mov	r5, r0
 8009570:	05db      	lsls	r3, r3, #23
 8009572:	460c      	mov	r4, r1
 8009574:	4616      	mov	r6, r2
 8009576:	d505      	bpl.n	8009584 <__swrite+0x1e>
 8009578:	2302      	movs	r3, #2
 800957a:	2200      	movs	r2, #0
 800957c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009580:	f000 f868 	bl	8009654 <_lseek_r>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	4632      	mov	r2, r6
 8009588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	4628      	mov	r0, r5
 8009590:	463b      	mov	r3, r7
 8009592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800959a:	f000 b817 	b.w	80095cc <_write_r>

0800959e <__sseek>:
 800959e:	b510      	push	{r4, lr}
 80095a0:	460c      	mov	r4, r1
 80095a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a6:	f000 f855 	bl	8009654 <_lseek_r>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	bf15      	itete	ne
 80095b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80095b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095ba:	81a3      	strheq	r3, [r4, #12]
 80095bc:	bf18      	it	ne
 80095be:	81a3      	strhne	r3, [r4, #12]
 80095c0:	bd10      	pop	{r4, pc}

080095c2 <__sclose>:
 80095c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c6:	f000 b813 	b.w	80095f0 <_close_r>
	...

080095cc <_write_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	2200      	movs	r2, #0
 80095d6:	4d05      	ldr	r5, [pc, #20]	; (80095ec <_write_r+0x20>)
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7f8 fa6c 	bl	8001ab8 <_write>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_write_r+0x1e>
 80095e4:	682b      	ldr	r3, [r5, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_write_r+0x1e>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	2000035c 	.word	0x2000035c

080095f0 <_close_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	2300      	movs	r3, #0
 80095f4:	4d05      	ldr	r5, [pc, #20]	; (800960c <_close_r+0x1c>)
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	f7f8 fa78 	bl	8001af0 <_close>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_close_r+0x1a>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_close_r+0x1a>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	2000035c 	.word	0x2000035c

08009610 <_fstat_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	2300      	movs	r3, #0
 8009614:	4d06      	ldr	r5, [pc, #24]	; (8009630 <_fstat_r+0x20>)
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	4611      	mov	r1, r2
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	f7f8 fa72 	bl	8001b06 <_fstat>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d102      	bne.n	800962c <_fstat_r+0x1c>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	b103      	cbz	r3, 800962c <_fstat_r+0x1c>
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	bd38      	pop	{r3, r4, r5, pc}
 800962e:	bf00      	nop
 8009630:	2000035c 	.word	0x2000035c

08009634 <_isatty_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	2300      	movs	r3, #0
 8009638:	4d05      	ldr	r5, [pc, #20]	; (8009650 <_isatty_r+0x1c>)
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 fa70 	bl	8001b24 <_isatty>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_isatty_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_isatty_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	2000035c 	.word	0x2000035c

08009654 <_lseek_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	2200      	movs	r2, #0
 800965e:	4d05      	ldr	r5, [pc, #20]	; (8009674 <_lseek_r+0x20>)
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f8 fa68 	bl	8001b38 <_lseek>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_lseek_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_lseek_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	2000035c 	.word	0x2000035c

08009678 <_read_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	4611      	mov	r1, r2
 8009680:	2200      	movs	r2, #0
 8009682:	4d05      	ldr	r5, [pc, #20]	; (8009698 <_read_r+0x20>)
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f8 f9f9 	bl	8001a7e <_read>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_read_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_read_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	2000035c 	.word	0x2000035c

0800969c <_init>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr

080096a8 <_fini>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	bf00      	nop
 80096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ae:	bc08      	pop	{r3}
 80096b0:	469e      	mov	lr, r3
 80096b2:	4770      	bx	lr
