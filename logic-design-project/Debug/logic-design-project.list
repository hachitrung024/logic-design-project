
logic-design-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080082c8  080082c8  000182c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008390  08008390  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008390  08008390  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000078  08008410  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08008410  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013345  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002697  00000000  00000000  000333e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00036a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a47  00000000  00000000  00037980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013270  00000000  00000000  000503c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e03f  00000000  00000000  00063637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  000f16cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080082ac 	.word	0x080082ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080082ac 	.word	0x080082ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__gesf2>:
 8000d34:	f04f 3cff 	mov.w	ip, #4294967295
 8000d38:	e006      	b.n	8000d48 <__cmpsf2+0x4>
 8000d3a:	bf00      	nop

08000d3c <__lesf2>:
 8000d3c:	f04f 0c01 	mov.w	ip, #1
 8000d40:	e002      	b.n	8000d48 <__cmpsf2+0x4>
 8000d42:	bf00      	nop

08000d44 <__cmpsf2>:
 8000d44:	f04f 0c01 	mov.w	ip, #1
 8000d48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d011      	beq.n	8000d84 <__cmpsf2+0x40>
 8000d60:	b001      	add	sp, #4
 8000d62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d66:	bf18      	it	ne
 8000d68:	ea90 0f01 	teqne	r0, r1
 8000d6c:	bf58      	it	pl
 8000d6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d72:	bf88      	it	hi
 8000d74:	17c8      	asrhi	r0, r1, #31
 8000d76:	bf38      	it	cc
 8000d78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d7c:	bf18      	it	ne
 8000d7e:	f040 0001 	orrne.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	d102      	bne.n	8000d90 <__cmpsf2+0x4c>
 8000d8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d8e:	d105      	bne.n	8000d9c <__cmpsf2+0x58>
 8000d90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d94:	d1e4      	bne.n	8000d60 <__cmpsf2+0x1c>
 8000d96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d9a:	d0e1      	beq.n	8000d60 <__cmpsf2+0x1c>
 8000d9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__aeabi_cfrcmple>:
 8000da4:	4684      	mov	ip, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4661      	mov	r1, ip
 8000daa:	e7ff      	b.n	8000dac <__aeabi_cfcmpeq>

08000dac <__aeabi_cfcmpeq>:
 8000dac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dae:	f7ff ffc9 	bl	8000d44 <__cmpsf2>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	bf48      	it	mi
 8000db6:	f110 0f00 	cmnmi.w	r0, #0
 8000dba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dbc <__aeabi_fcmpeq>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff fff4 	bl	8000dac <__aeabi_cfcmpeq>
 8000dc4:	bf0c      	ite	eq
 8000dc6:	2001      	moveq	r0, #1
 8000dc8:	2000      	movne	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_fcmplt>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff ffea 	bl	8000dac <__aeabi_cfcmpeq>
 8000dd8:	bf34      	ite	cc
 8000dda:	2001      	movcc	r0, #1
 8000ddc:	2000      	movcs	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_fcmple>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffe0 	bl	8000dac <__aeabi_cfcmpeq>
 8000dec:	bf94      	ite	ls
 8000dee:	2001      	movls	r0, #1
 8000df0:	2000      	movhi	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_fcmpge>:
 8000df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dfc:	f7ff ffd2 	bl	8000da4 <__aeabi_cfrcmple>
 8000e00:	bf94      	ite	ls
 8000e02:	2001      	movls	r0, #1
 8000e04:	2000      	movhi	r0, #0
 8000e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0a:	bf00      	nop

08000e0c <__aeabi_fcmpgt>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff ffc8 	bl	8000da4 <__aeabi_cfrcmple>
 8000e14:	bf34      	ite	cc
 8000e16:	2001      	movcc	r0, #1
 8000e18:	2000      	movcs	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_f2iz>:
 8000e20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e28:	d30f      	bcc.n	8000e4a <__aeabi_f2iz+0x2a>
 8000e2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e32:	d90d      	bls.n	8000e50 <__aeabi_f2iz+0x30>
 8000e34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e40:	fa23 f002 	lsr.w	r0, r3, r2
 8000e44:	bf18      	it	ne
 8000e46:	4240      	negne	r0, r0
 8000e48:	4770      	bx	lr
 8000e4a:	f04f 0000 	mov.w	r0, #0
 8000e4e:	4770      	bx	lr
 8000e50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e54:	d101      	bne.n	8000e5a <__aeabi_f2iz+0x3a>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d105      	bne.n	8000e66 <__aeabi_f2iz+0x46>
 8000e5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e5e:	bf08      	it	eq
 8000e60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	4770      	bx	lr

08000e6c <DHT20_Init>:
#include <dht20.h>

#include "i2c_master.h"
#define Slave_address_dht20 0x38

void DHT20_Init(DHT20_t *dht20, I2C_HandleTypeDef *hi2c) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
    dht20->hi2c = hi2c;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
    dht20->humidity = 0;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
    dht20->temperature = 0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
    dht20->humOffset = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
    dht20->tempOffset = 0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
    dht20->status = DHT20_OK;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	751a      	strb	r2, [r3, #20]
    dht20->lastRequest = 0;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
    dht20->lastRead = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <DHT20_IsConnected>:



uint8_t DHT20_IsConnected(DHT20_t *dht20) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
    uint8_t dummy = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &dummy, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f107 020f 	add.w	r2, r7, #15
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2170      	movs	r1, #112	; 0x70
 8000ed6:	f001 fcd1 	bl	800287c <HAL_I2C_Master_Transmit>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <DHT20_IsConnected+0x2c>
        return 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <DHT20_IsConnected+0x2e>
    }
    return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <DHT20_RequestData>:

uint8_t DHT20_RequestData(DHT20_t *dht20) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	6078      	str	r0, [r7, #4]
    uint8_t data[3] = {0xAC, 0x33, 0x00};
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <DHT20_RequestData+0x50>)
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	4611      	mov	r1, r2
 8000f02:	8019      	strh	r1, [r3, #0]
 8000f04:	3302      	adds	r3, #2
 8000f06:	0c12      	lsrs	r2, r2, #16
 8000f08:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2303      	movs	r3, #3
 8000f1a:	2170      	movs	r1, #112	; 0x70
 8000f1c:	f001 fcae 	bl	800287c <HAL_I2C_Master_Transmit>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <DHT20_RequestData+0x3a>
        return DHT20_ERROR_CONNECT;
 8000f26:	2302      	movs	r3, #2
 8000f28:	e005      	b.n	8000f36 <DHT20_RequestData+0x46>
    }
    dht20->lastRequest = HAL_GetTick();
 8000f2a:	f000 ff9d 	bl	8001e68 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
    return DHT20_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080082c8 	.word	0x080082c8

08000f44 <DHT20_ReadData>:


uint8_t DHT20_ReadData(DHT20_t *dht20) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
    uint8_t length = 7;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, dht20->bytes, length, HAL_MAX_DELAY) != HAL_OK) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f103 0220 	add.w	r2, r3, #32
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f62:	9100      	str	r1, [sp, #0]
 8000f64:	2170      	movs	r1, #112	; 0x70
 8000f66:	f001 fd87 	bl	8002a78 <HAL_I2C_Master_Receive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <DHT20_ReadData+0x30>
        return DHT20_ERROR_CONNECT;
 8000f70:	2302      	movs	r3, #2
 8000f72:	e020      	b.n	8000fb6 <DHT20_ReadData+0x72>
    }

    // Kiểm tra nếu tất cả các byte đều bằng 0
    uint8_t allZero = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < length; i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e00c      	b.n	8000f98 <DHT20_ReadData+0x54>
        if (dht20->bytes[i] != 0) {
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4413      	add	r3, r2
 8000f84:	3320      	adds	r3, #32
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <DHT20_ReadData+0x4e>
            allZero = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8000f90:	e006      	b.n	8000fa0 <DHT20_ReadData+0x5c>
    for (int i = 0; i < length; i++) {
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	3301      	adds	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbee      	blt.n	8000f7e <DHT20_ReadData+0x3a>
        }
    }
    if (allZero) return DHT20_ERROR_BYTES_ALL_ZERO;
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <DHT20_ReadData+0x66>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e005      	b.n	8000fb6 <DHT20_ReadData+0x72>

    dht20->lastRead = HAL_GetTick();
 8000faa:	f000 ff5d 	bl	8001e68 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	61da      	str	r2, [r3, #28]
    return DHT20_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <DHT20_Convert>:


uint8_t DHT20_Convert(DHT20_t *dht20) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    dht20->status = dht20->bytes[0];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	751a      	strb	r2, [r3, #20]

    // Chuyển đổi độ ẩm
    uint32_t rawHumidity = (dht20->bytes[1] << 12) | (dht20->bytes[2] << 4) | (dht20->bytes[3] >> 4);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd8:	031a      	lsls	r2, r3, #12
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000fea:	0912      	lsrs	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	617b      	str	r3, [r7, #20]
    dht20->humidity = rawHumidity * 9.5367431640625e-5; // Chuyển đổi theo công thức datasheet
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff f9ee 	bl	80003d4 <__aeabi_ui2d>
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <DHT20_Convert+0xd4>)
 8000ffe:	f7ff fa63 	bl	80004c8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fd35 	bl	8000a78 <__aeabi_d2f>
 800100e:	4602      	mov	r2, r0
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	605a      	str	r2, [r3, #4]

    // Chuyển đổi nhiệt độ
    uint32_t rawTemperature = ((dht20->bytes[3] & 0x0F) << 16) | (dht20->bytes[4] << 8) | dht20->bytes[5];
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	4313      	orrs	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
    dht20->temperature = rawTemperature * 1.9073486328125e-4 - 50; // Chuyển đổi theo công thức datasheet
 8001034:	6938      	ldr	r0, [r7, #16]
 8001036:	f7ff f9cd 	bl	80003d4 <__aeabi_ui2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <DHT20_Convert+0xd8>)
 8001040:	f7ff fa42 	bl	80004c8 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <DHT20_Convert+0xdc>)
 8001052:	f7ff f881 	bl	8000158 <__aeabi_dsub>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fd0b 	bl	8000a78 <__aeabi_d2f>
 8001062:	4602      	mov	r2, r0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	609a      	str	r2, [r3, #8]

    // Kiểm tra CRC
    uint8_t crc = DHT20_CRC8(dht20->bytes, 6);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3320      	adds	r3, #32
 800106c:	2106      	movs	r1, #6
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f82f 	bl	80010d2 <DHT20_CRC8>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
    if (crc != dht20->bytes[6]) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <DHT20_Convert+0xc8>
        return DHT20_ERROR_CHECKSUM;
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <DHT20_Convert+0xca>
    }

    return DHT20_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	3f190000 	.word	0x3f190000
 8001098:	3f290000 	.word	0x3f290000
 800109c:	40490000 	.word	0x40490000

080010a0 <DHT20_ReadStatus>:
    if (status < 0) return status;

    return DHT20_Convert(dht20);
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1, HAL_MAX_DELAY);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f107 020f 	add.w	r2, r7, #15
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2170      	movs	r1, #112	; 0x70
 80010be:	f001 fcdb 	bl	8002a78 <HAL_I2C_Master_Receive>
    HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 feda 	bl	8001e7c <HAL_Delay>
    return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <DHT20_CRC8>:

uint8_t DHT20_IsMeasuring(DHT20_t *dht20) {
    return (DHT20_ReadStatus(dht20) & 0x80) == 0x80;
}

uint8_t DHT20_CRC8(uint8_t *ptr, uint8_t len) {
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 80010e2:	e01e      	b.n	8001122 <DHT20_CRC8+0x50>
        crc ^= *ptr++;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	4053      	eors	r3, r2
 80010f0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]
 80010f6:	e011      	b.n	800111c <DHT20_CRC8+0x4a>
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da07      	bge.n	8001110 <DHT20_CRC8+0x3e>
            crc = (crc << 1) ^ 0x31;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	b25b      	sxtb	r3, r3
 8001106:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800110a:	b25b      	sxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e002      	b.n	8001116 <DHT20_CRC8+0x44>
        } else {
            crc <<= 1;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	3301      	adds	r3, #1
 800111a:	73bb      	strb	r3, [r7, #14]
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	2b07      	cmp	r3, #7
 8001120:	d9ea      	bls.n	80010f8 <DHT20_CRC8+0x26>
    while (len--) {
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	70fa      	strb	r2, [r7, #3]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1db      	bne.n	80010e4 <DHT20_CRC8+0x12>
        }
    }
}
return crc;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <DHT20_ResetSensor>:

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
uint8_t count = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]

// Đọc trạng thái và reset nếu không phải là 0x18
if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffab 	bl	80010a0 <DHT20_ReadStatus>
 800114a:	4603      	mov	r3, r0
 800114c:	f003 0318 	and.w	r3, r3, #24
 8001150:	2b18      	cmp	r3, #24
 8001152:	d023      	beq.n	800119c <DHT20_ResetSensor+0x64>
    count++;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	3301      	adds	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1B)) count++;
 800115a:	211b      	movs	r1, #27
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f823 	bl	80011a8 <DHT20_ResetRegister>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <DHT20_ResetSensor+0x36>
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	3301      	adds	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1C)) count++;
 800116e:	211c      	movs	r1, #28
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f819 	bl	80011a8 <DHT20_ResetRegister>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <DHT20_ResetSensor+0x4a>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	3301      	adds	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1E)) count++;
 8001182:	211e      	movs	r1, #30
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f80f 	bl	80011a8 <DHT20_ResetRegister>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <DHT20_ResetSensor+0x5e>
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	3301      	adds	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f000 fe70 	bl	8001e7c <HAL_Delay>
}
return count;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <DHT20_ResetRegister>:

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
uint8_t value[3] = {0};
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <DHT20_ResetRegister+0xa4>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	81bb      	strh	r3, [r7, #12]
 80011ba:	2300      	movs	r3, #0
 80011bc:	73bb      	strb	r3, [r7, #14]

// Bắt đầu giao tiếp với cảm biến để reset
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	1cfa      	adds	r2, r7, #3
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	2170      	movs	r1, #112	; 0x70
 80011ce:	f001 fb55 	bl	800287c <HAL_I2C_Master_Transmit>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <DHT20_ResetRegister+0x34>
    return 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	e032      	b.n	8001242 <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 fe4d 	bl	8001e7c <HAL_Delay>

// Đọc giá trị từ cảm biến
if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3, HAL_MAX_DELAY) != HAL_OK) {
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f107 020c 	add.w	r2, r7, #12
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2303      	movs	r3, #3
 80011f2:	2170      	movs	r1, #112	; 0x70
 80011f4:	f001 fc40 	bl	8002a78 <HAL_I2C_Master_Receive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <DHT20_ResetRegister+0x5a>
    return 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	e01f      	b.n	8001242 <DHT20_ResetRegister+0x9a>
}
HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f000 fe3a 	bl	8001e7c <HAL_Delay>

// Ghi lại giá trị điều chỉnh vào thanh ghi
uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800120e:	b2db      	uxtb	r3, r3
 8001210:	723b      	strb	r3, [r7, #8]
 8001212:	7b7b      	ldrb	r3, [r7, #13]
 8001214:	727b      	strb	r3, [r7, #9]
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	72bb      	strb	r3, [r7, #10]
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 0208 	add.w	r2, r7, #8
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2303      	movs	r3, #3
 800122a:	2170      	movs	r1, #112	; 0x70
 800122c:	f001 fb26 	bl	800287c <HAL_I2C_Master_Transmit>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <DHT20_ResetRegister+0x92>
    return 0;
 8001236:	2300      	movs	r3, #0
 8001238:	e003      	b.n	8001242 <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 800123a:	2005      	movs	r0, #5
 800123c:	f000 fe1e 	bl	8001e7c <HAL_Delay>

return 1;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	080082cc 	.word	0x080082cc

08001250 <global_init>:

#include "global.h"
state status;
DHT20_t dht20;   // Định nghĩa cấu trúc DHT20
status_active active;      // Định nghĩa biến trạng thái hoạt động
void global_init(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	setTimer(0, 1000);
 8001254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001258:	2000      	movs	r0, #0
 800125a:	f000 fba7 	bl	80019ac <setTimer>
	status = INIT;
 800125e:	4b03      	ldr	r3, [pc, #12]	; (800126c <global_init+0x1c>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
	lcd_init();
 8001264:	f000 f95e 	bl	8001524 <lcd_init>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000130 	.word	0x20000130

08001270 <global_fsm>:
void global_fsm(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
	switch(status){
 8001276:	4b75      	ldr	r3, [pc, #468]	; (800144c <global_fsm+0x1dc>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b08      	cmp	r3, #8
 800127c:	f200 80da 	bhi.w	8001434 <global_fsm+0x1c4>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <global_fsm+0x18>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	080012ad 	.word	0x080012ad
 800128c:	080012c3 	.word	0x080012c3
 8001290:	080012eb 	.word	0x080012eb
 8001294:	0800131f 	.word	0x0800131f
 8001298:	0800135d 	.word	0x0800135d
 800129c:	0800139d 	.word	0x0800139d
 80012a0:	08001435 	.word	0x08001435
 80012a4:	080013bb 	.word	0x080013bb
 80012a8:	08001425 	.word	0x08001425
	case INIT:
		 DHT20_Init(&dht20, &hi2c1);
 80012ac:	4968      	ldr	r1, [pc, #416]	; (8001450 <global_fsm+0x1e0>)
 80012ae:	4869      	ldr	r0, [pc, #420]	; (8001454 <global_fsm+0x1e4>)
 80012b0:	f7ff fddc 	bl	8000e6c <DHT20_Init>
	 	 HAL_Delay(100);
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f000 fde1 	bl	8001e7c <HAL_Delay>
		 status = CHECK_CONNECTION;
 80012ba:	4b64      	ldr	r3, [pc, #400]	; (800144c <global_fsm+0x1dc>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
	 	 break;
 80012c0:	e0bf      	b.n	8001442 <global_fsm+0x1d2>
	case CHECK_CONNECTION:
		if(DHT20_IsConnected(&dht20) ){
 80012c2:	4864      	ldr	r0, [pc, #400]	; (8001454 <global_fsm+0x1e4>)
 80012c4:	f7ff fdf8 	bl	8000eb8 <DHT20_IsConnected>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <global_fsm+0x6c>
			active = DHT20_OK;
 80012ce:	4b62      	ldr	r3, [pc, #392]	; (8001458 <global_fsm+0x1e8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
			status = CHECK_READY;
 80012d4:	4b5d      	ldr	r3, [pc, #372]	; (800144c <global_fsm+0x1dc>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	701a      	strb	r2, [r3, #0]
		}
		else{
			active = DHT20_ERROR_CONNECT;
			status = ERROR_STATE;
		}
		break;
 80012da:	e0b2      	b.n	8001442 <global_fsm+0x1d2>
			active = DHT20_ERROR_CONNECT;
 80012dc:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <global_fsm+0x1e8>)
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
			status = ERROR_STATE;
 80012e2:	4b5a      	ldr	r3, [pc, #360]	; (800144c <global_fsm+0x1dc>)
 80012e4:	2208      	movs	r2, #8
 80012e6:	701a      	strb	r2, [r3, #0]
		break;
 80012e8:	e0ab      	b.n	8001442 <global_fsm+0x1d2>
	case CHECK_READY:
		if((DHT20_ReadStatus(&dht20) & 0x18) != 0x18){
 80012ea:	485a      	ldr	r0, [pc, #360]	; (8001454 <global_fsm+0x1e4>)
 80012ec:	f7ff fed8 	bl	80010a0 <DHT20_ReadStatus>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f003 0318 	and.w	r3, r3, #24
 80012f6:	2b18      	cmp	r3, #24
 80012f8:	d00a      	beq.n	8001310 <global_fsm+0xa0>
			DHT20_ResetSensor(&dht20);
 80012fa:	4856      	ldr	r0, [pc, #344]	; (8001454 <global_fsm+0x1e4>)
 80012fc:	f7ff ff1c 	bl	8001138 <DHT20_ResetSensor>
		 	HAL_Delay(1000);
 8001300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001304:	f000 fdba 	bl	8001e7c <HAL_Delay>
			status = CHECK_CONNECTION;
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <global_fsm+0x1dc>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
		}
		else {
			HAL_Delay(10);
			status = REQUEST_DATA;
		}
		break;
 800130e:	e098      	b.n	8001442 <global_fsm+0x1d2>
			HAL_Delay(10);
 8001310:	200a      	movs	r0, #10
 8001312:	f000 fdb3 	bl	8001e7c <HAL_Delay>
			status = REQUEST_DATA;
 8001316:	4b4d      	ldr	r3, [pc, #308]	; (800144c <global_fsm+0x1dc>)
 8001318:	2203      	movs	r2, #3
 800131a:	701a      	strb	r2, [r3, #0]
		break;
 800131c:	e091      	b.n	8001442 <global_fsm+0x1d2>
	case REQUEST_DATA:
		if(HAL_GetTick() - dht20.lastRead >= 1000){
 800131e:	f000 fda3 	bl	8001e68 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <global_fsm+0x1e4>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800132e:	d311      	bcc.n	8001354 <global_fsm+0xe4>
			active = DHT20_RequestData(&dht20);
 8001330:	4848      	ldr	r0, [pc, #288]	; (8001454 <global_fsm+0x1e4>)
 8001332:	f7ff fddd 	bl	8000ef0 <DHT20_RequestData>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <global_fsm+0x1e8>)
 800133c:	701a      	strb	r2, [r3, #0]
			if (active == DHT20_OK){
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <global_fsm+0x1e8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d178      	bne.n	8001438 <global_fsm+0x1c8>
				HAL_Delay(80);
 8001346:	2050      	movs	r0, #80	; 0x50
 8001348:	f000 fd98 	bl	8001e7c <HAL_Delay>
				status = READ_DATA;
 800134c:	4b3f      	ldr	r3, [pc, #252]	; (800144c <global_fsm+0x1dc>)
 800134e:	2204      	movs	r2, #4
 8001350:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_LASTREAD;
		}
		break;
 8001352:	e071      	b.n	8001438 <global_fsm+0x1c8>
			active = DHT20_ERROR_LASTREAD;
 8001354:	4b40      	ldr	r3, [pc, #256]	; (8001458 <global_fsm+0x1e8>)
 8001356:	2206      	movs	r2, #6
 8001358:	701a      	strb	r2, [r3, #0]
		break;
 800135a:	e06d      	b.n	8001438 <global_fsm+0x1c8>
	case READ_DATA:
		if(HAL_GetTick() - dht20.lastRequest < 1000){
 800135c:	f000 fd84 	bl	8001e68 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <global_fsm+0x1e4>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136c:	d212      	bcs.n	8001394 <global_fsm+0x124>
			active = DHT20_ReadData(&dht20);
 800136e:	4839      	ldr	r0, [pc, #228]	; (8001454 <global_fsm+0x1e4>)
 8001370:	f7ff fde8 	bl	8000f44 <DHT20_ReadData>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b37      	ldr	r3, [pc, #220]	; (8001458 <global_fsm+0x1e8>)
 800137a:	701a      	strb	r2, [r3, #0]
			if(active == DHT20_OK){
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <global_fsm+0x1e8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <global_fsm+0x11c>
				status = CONVERT_DATA;
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <global_fsm+0x1dc>)
 8001386:	2205      	movs	r2, #5
 8001388:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_READ_TIMEOUT;
		}
		break;
 800138a:	e05a      	b.n	8001442 <global_fsm+0x1d2>
				status = REQUEST_DATA;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <global_fsm+0x1dc>)
 800138e:	2203      	movs	r2, #3
 8001390:	701a      	strb	r2, [r3, #0]
		break;
 8001392:	e056      	b.n	8001442 <global_fsm+0x1d2>
			active = DHT20_ERROR_READ_TIMEOUT;
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <global_fsm+0x1e8>)
 8001396:	2205      	movs	r2, #5
 8001398:	701a      	strb	r2, [r3, #0]
		break;
 800139a:	e052      	b.n	8001442 <global_fsm+0x1d2>
	case CONVERT_DATA:
		active = DHT20_Convert(&dht20);
 800139c:	482d      	ldr	r0, [pc, #180]	; (8001454 <global_fsm+0x1e4>)
 800139e:	f7ff fe0f 	bl	8000fc0 <DHT20_Convert>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <global_fsm+0x1e8>)
 80013a8:	701a      	strb	r2, [r3, #0]
		if(active == DHT20_OK){
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <global_fsm+0x1e8>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d144      	bne.n	800143c <global_fsm+0x1cc>
			status = DONE;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <global_fsm+0x1dc>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013b8:	e040      	b.n	800143c <global_fsm+0x1cc>
	{
	    char temp_str[6];      // Chuỗi để lưu giá trị nhiệt độ
	    char humidity_str[6];  // Chuỗi để lưu giá trị độ ẩm

	    // Chuyển đổi giá trị float thành chuỗi
	    float_to_str(dht20.temperature, temp_str, 2);
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <global_fsm+0x1e4>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f107 0108 	add.w	r1, r7, #8
 80013c2:	2202      	movs	r2, #2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f913 	bl	80015f0 <float_to_str>
	    float_to_str(dht20.humidity, humidity_str, 2);
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <global_fsm+0x1e4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4639      	mov	r1, r7
 80013d0:	2202      	movs	r2, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f90c 	bl	80015f0 <float_to_str>
	    // Hiển thị giá trị lên màn hình LCD
	    lcd_goto_XY(1, 0);
 80013d8:	2100      	movs	r1, #0
 80013da:	2001      	movs	r0, #1
 80013dc:	f000 f8e5 	bl	80015aa <lcd_goto_XY>
        lcd_send_string("HUM:");
 80013e0:	481e      	ldr	r0, [pc, #120]	; (800145c <global_fsm+0x1ec>)
 80013e2:	f000 f8cd 	bl	8001580 <lcd_send_string>
	    lcd_goto_XY(1, 4);
 80013e6:	2104      	movs	r1, #4
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 f8de 	bl	80015aa <lcd_goto_XY>
	    lcd_send_string(humidity_str);
 80013ee:	463b      	mov	r3, r7
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f8c5 	bl	8001580 <lcd_send_string>

	    HAL_Delay(50);
 80013f6:	2032      	movs	r0, #50	; 0x32
 80013f8:	f000 fd40 	bl	8001e7c <HAL_Delay>

	    lcd_goto_XY(2, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8d3 	bl	80015aa <lcd_goto_XY>
	    lcd_send_string("TEMP:");
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <global_fsm+0x1f0>)
 8001406:	f000 f8bb 	bl	8001580 <lcd_send_string>
	    lcd_goto_XY(2, 5);
 800140a:	2105      	movs	r1, #5
 800140c:	2002      	movs	r0, #2
 800140e:	f000 f8cc 	bl	80015aa <lcd_goto_XY>
	    lcd_send_string(temp_str);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f8b2 	bl	8001580 <lcd_send_string>
		status = CHECK_READY;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <global_fsm+0x1dc>)
 800141e:	2202      	movs	r2, #2
 8001420:	701a      	strb	r2, [r3, #0]
		break;
 8001422:	e00e      	b.n	8001442 <global_fsm+0x1d2>
	}
	case SEND_DATA:
		break;
	case ERROR_STATE:
			if(active == DHT20_ERROR_CONNECT){
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <global_fsm+0x1e8>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d109      	bne.n	8001440 <global_fsm+0x1d0>
	 * 		do{
				  HAL_Delay(100);
			  }while(!DHT20_IsConnected(&dht20));
			  active = DHT20_OK;
			 */
			  status = INIT;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <global_fsm+0x1dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
		  }
		else{
		  }
	    break;
 8001432:	e005      	b.n	8001440 <global_fsm+0x1d0>
	default :
		break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <global_fsm+0x1d2>
		break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <global_fsm+0x1d2>
		break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <global_fsm+0x1d2>
	    break;
 8001440:	bf00      	nop
	}

}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000130 	.word	0x20000130
 8001450:	200000b0 	.word	0x200000b0
 8001454:	20000108 	.word	0x20000108
 8001458:	20000104 	.word	0x20000104
 800145c:	080082d0 	.word	0x080082d0
 8001460:	080082d8 	.word	0x080082d8

08001464 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f023 030f 	bic.w	r3, r3, #15
 8001474:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	f043 030c 	orr.w	r3, r3, #12
 8001482:	b2db      	uxtb	r3, r3
 8001484:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	b2db      	uxtb	r3, r3
 800148e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	f043 030c 	orr.w	r3, r3, #12
 8001496:	b2db      	uxtb	r3, r3
 8001498:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014a4:	f107 0208 	add.w	r2, r7, #8
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2304      	movs	r3, #4
 80014ae:	2142      	movs	r1, #66	; 0x42
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <lcd_send_cmd+0x5c>)
 80014b2:	f001 f9e3 	bl	800287c <HAL_I2C_Master_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000b0 	.word	0x200000b0

080014c4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f023 030f 	bic.w	r3, r3, #15
 80014d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f043 030d 	orr.w	r3, r3, #13
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	f043 0309 	orr.w	r3, r3, #9
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	f043 030d 	orr.w	r3, r3, #13
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	f043 0309 	orr.w	r3, r3, #9
 8001500:	b2db      	uxtb	r3, r3
 8001502:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001504:	f107 0208 	add.w	r2, r7, #8
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2304      	movs	r3, #4
 800150e:	2142      	movs	r1, #66	; 0x42
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <lcd_send_data+0x5c>)
 8001512:	f001 f9b3 	bl	800287c <HAL_I2C_Master_Transmit>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000b0 	.word	0x200000b0

08001524 <lcd_init>:

void lcd_init (void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001528:	2033      	movs	r0, #51	; 0x33
 800152a:	f7ff ff9b 	bl	8001464 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800152e:	2032      	movs	r0, #50	; 0x32
 8001530:	f7ff ff98 	bl	8001464 <lcd_send_cmd>
	HAL_Delay(50);
 8001534:	2032      	movs	r0, #50	; 0x32
 8001536:	f000 fca1 	bl	8001e7c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f7ff ff92 	bl	8001464 <lcd_send_cmd>
	HAL_Delay(50);
 8001540:	2032      	movs	r0, #50	; 0x32
 8001542:	f000 fc9b 	bl	8001e7c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff ff8c 	bl	8001464 <lcd_send_cmd>
	HAL_Delay(50);
 800154c:	2032      	movs	r0, #50	; 0x32
 800154e:	f000 fc95 	bl	8001e7c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001552:	2006      	movs	r0, #6
 8001554:	f7ff ff86 	bl	8001464 <lcd_send_cmd>
	HAL_Delay(50);
 8001558:	2032      	movs	r0, #50	; 0x32
 800155a:	f000 fc8f 	bl	8001e7c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800155e:	200c      	movs	r0, #12
 8001560:	f7ff ff80 	bl	8001464 <lcd_send_cmd>
	HAL_Delay(50);
 8001564:	2032      	movs	r0, #50	; 0x32
 8001566:	f000 fc89 	bl	8001e7c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800156a:	2002      	movs	r0, #2
 800156c:	f7ff ff7a 	bl	8001464 <lcd_send_cmd>
	HAL_Delay(50);
 8001570:	2032      	movs	r0, #50	; 0x32
 8001572:	f000 fc83 	bl	8001e7c <HAL_Delay>
	lcd_send_cmd (0x80);
 8001576:	2080      	movs	r0, #128	; 0x80
 8001578:	f7ff ff74 	bl	8001464 <lcd_send_cmd>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001588:	e006      	b.n	8001598 <lcd_send_string+0x18>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff96 	bl	80014c4 <lcd_send_data>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f4      	bne.n	800158a <lcd_send_string+0xa>
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <lcd_goto_XY>:
	lcd_send_cmd (0x01); //clear display

}

void lcd_goto_XY (int row, int col)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	337f      	adds	r3, #127	; 0x7f
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e008      	b.n	80015de <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3340      	adds	r3, #64	; 0x40
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff3f 	bl	8001464 <lcd_send_cmd>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <float_to_str>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void float_to_str(float num, char *str, int decimal) {
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
    int int_part = (int)num;
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff fc0f 	bl	8000e20 <__aeabi_f2iz>
 8001602:	4603      	mov	r3, r0
 8001604:	61fb      	str	r3, [r7, #28]
    float fraction = num - (float)int_part;
 8001606:	69f8      	ldr	r0, [r7, #28]
 8001608:	f7ff fb40 	bl	8000c8c <__aeabi_i2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fa85 	bl	8000b20 <__aeabi_fsub>
 8001616:	4603      	mov	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]

    // Xử lý số âm
    if (num < 0) {
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff fbd6 	bl	8000dd0 <__aeabi_fcmplt>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <float_to_str+0x52>
        int_part = -int_part;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	425b      	negs	r3, r3
 800162e:	61fb      	str	r3, [r7, #28]
        fraction = -fraction;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001636:	61bb      	str	r3, [r7, #24]
        *str++ = '-';
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	222d      	movs	r2, #45	; 0x2d
 8001640:	701a      	strb	r2, [r3, #0]
    }

    // Chuyển đổi phần nguyên
    sprintf(str, "%d.", int_part);
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	4921      	ldr	r1, [pc, #132]	; (80016cc <float_to_str+0xdc>)
 8001646:	68b8      	ldr	r0, [r7, #8]
 8001648:	f005 fa66 	bl	8006b18 <siprintf>
    // Tìm vị trí dấu chấm
    while (*str != '.' && *str != '\0') str++;
 800164c:	e002      	b.n	8001654 <float_to_str+0x64>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3301      	adds	r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b2e      	cmp	r3, #46	; 0x2e
 800165a:	d003      	beq.n	8001664 <float_to_str+0x74>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f4      	bne.n	800164e <float_to_str+0x5e>
    str++;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
    // Chuyển đổi phần thập phân
    int frac_part = (int)(fraction * pow(10, decimal) + 0.5); // Làm tròn
 800166a:	69b8      	ldr	r0, [r7, #24]
 800166c:	f7fe fed4 	bl	8000418 <__aeabi_f2d>
 8001670:	4604      	mov	r4, r0
 8001672:	460d      	mov	r5, r1
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7fe febd 	bl	80003f4 <__aeabi_i2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	f04f 0000 	mov.w	r0, #0
 8001682:	4913      	ldr	r1, [pc, #76]	; (80016d0 <float_to_str+0xe0>)
 8001684:	f005 fe82 	bl	800738c <pow>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe ff1a 	bl	80004c8 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <float_to_str+0xe4>)
 80016a2:	f7fe fd5b 	bl	800015c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f9bb 	bl	8000a28 <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	617b      	str	r3, [r7, #20]
    sprintf(str, "%0*d", decimal, frac_part);
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4907      	ldr	r1, [pc, #28]	; (80016d8 <float_to_str+0xe8>)
 80016bc:	68b8      	ldr	r0, [r7, #8]
 80016be:	f005 fa2b 	bl	8006b18 <siprintf>
}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ca:	bf00      	nop
 80016cc:	080082e0 	.word	0x080082e0
 80016d0:	40240000 	.word	0x40240000
 80016d4:	3fe00000 	.word	0x3fe00000
 80016d8:	080082e4 	.word	0x080082e4

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f000 fb6a 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f824 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f000 f902 	bl	80018f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ec:	f000 f85c 	bl	80017a8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80016f0:	f000 f8d4 	bl	800189c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016f4:	f000 f886 	bl	8001804 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <main+0x4c>)
 80016fa:	f004 f907 	bl	800590c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  global_init();
 80016fe:	f7ff fda7 	bl	8001250 <global_init>
  while (1)
  {
	if(isFlagTimer(0)){
 8001702:	2000      	movs	r0, #0
 8001704:	f000 f942 	bl	800198c <isFlagTimer>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <main+0x44>
			setTimer(0, 1000);
 800170e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f94a 	bl	80019ac <setTimer>
			HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 8001718:	2120      	movs	r1, #32
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <main+0x50>)
 800171c:	f000 ff3c 	bl	8002598 <HAL_GPIO_TogglePin>
	  }
	  global_fsm();
 8001720:	f7ff fda6 	bl	8001270 <global_fsm>
	if(isFlagTimer(0)){
 8001724:	e7ed      	b.n	8001702 <main+0x26>
 8001726:	bf00      	nop
 8001728:	20000134 	.word	0x20000134
 800172c:	40010800 	.word	0x40010800

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b090      	sub	sp, #64	; 0x40
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0318 	add.w	r3, r7, #24
 800173a:	2228      	movs	r2, #40	; 0x28
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f005 f9e2 	bl	8006b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001756:	2301      	movs	r3, #1
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175a:	2310      	movs	r3, #16
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fc72 	bl	8005050 <HAL_RCC_OscConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001772:	f000 f905 	bl	8001980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
 8001778:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fede 	bl	8005550 <HAL_RCC_ClockConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800179a:	f000 f8f1 	bl	8001980 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3740      	adds	r7, #64	; 0x40
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <MX_I2C1_Init+0x54>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_I2C1_Init+0x58>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C1_Init+0x50>)
 80017e6:	f000 fef1 	bl	80025cc <HAL_I2C_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f0:	f000 f8c6 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000b0 	.word	0x200000b0
 80017fc:	40005400 	.word	0x40005400
 8001800:	000186a0 	.word	0x000186a0

08001804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_TIM2_Init+0x94>)
 8001822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_TIM2_Init+0x94>)
 800182a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800182e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_TIM2_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_TIM2_Init+0x94>)
 8001838:	2209      	movs	r2, #9
 800183a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_TIM2_Init+0x94>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_TIM2_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001848:	4813      	ldr	r0, [pc, #76]	; (8001898 <MX_TIM2_Init+0x94>)
 800184a:	f004 f80f 	bl	800586c <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001854:	f000 f894 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4619      	mov	r1, r3
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <MX_TIM2_Init+0x94>)
 8001866:	f004 f993 	bl	8005b90 <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001870:	f000 f886 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_TIM2_Init+0x94>)
 8001882:	f004 fb75 	bl	8005f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800188c:	f000 f878 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000134 	.word	0x20000134

0800189c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <MX_USART2_UART_Init+0x50>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f004 fbbc 	bl	8006050 <HAL_UART_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018de:	f000 f84f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000017c 	.word	0x2000017c
 80018ec:	40004400 	.word	0x40004400

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_GPIO_Init+0x74>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <MX_GPIO_Init+0x74>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_GPIO_Init+0x74>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_GPIO_Init+0x74>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a10      	ldr	r2, [pc, #64]	; (8001964 <MX_GPIO_Init+0x74>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_GPIO_Init+0x74>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2120      	movs	r1, #32
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <MX_GPIO_Init+0x78>)
 800193a:	f000 fe15 	bl	8002568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 800193e:	2320      	movs	r3, #32
 8001940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4619      	mov	r1, r3
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_GPIO_Init+0x78>)
 8001956:	f000 fc83 	bl	8002260 <HAL_GPIO_Init>

}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800

0800196c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	timerRun();
 8001974:	f000 f838 	bl	80019e8 <timerRun>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>
	...

0800198c <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <isFlagTimer+0x1c>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200000a0 	.word	0x200000a0

080019ac <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <setTimer+0x30>)
 80019bc:	2100      	movs	r1, #0
 80019be:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration / TIMER_CYCLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <setTimer+0x34>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80019cc:	4905      	ldr	r1, [pc, #20]	; (80019e4 <setTimer+0x38>)
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	200000a0 	.word	0x200000a0
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000094 	.word	0x20000094

080019e8 <timerRun>:
void timerInit(uint32_t prescaler, uint32_t period){
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
	TIMER_CYCLE  = (prescaler+1)*(period+1)*1000/frequency;
}
void timerRun(){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 80019ee:	2300      	movs	r3, #0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e01a      	b.n	8001a2a <timerRun+0x42>
		if(timer_counters[i] > 0){
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <timerRun+0x54>)
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d011      	beq.n	8001a24 <timerRun+0x3c>
			timer_counters[i] --;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <timerRun+0x54>)
 8001a04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	490c      	ldr	r1, [pc, #48]	; (8001a3c <timerRun+0x54>)
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <timerRun+0x54>)
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <timerRun+0x3c>
				timer_flags[i] = 1;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <timerRun+0x58>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	3301      	adds	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d9e1      	bls.n	80019f4 <timerRun+0xc>
			}
		}
	}

}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000094 	.word	0x20000094
 8001a40:	200000a0 	.word	0x200000a0

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_MspInit+0x60>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_I2C_MspInit+0xb0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d142      	bne.n	8001b4e <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_I2C_MspInit+0xb4>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_I2C_MspInit+0xb4>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_I2C_MspInit+0xb4>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ae0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	481a      	ldr	r0, [pc, #104]	; (8001b60 <HAL_I2C_MspInit+0xb8>)
 8001af6:	f000 fbb3 	bl	8002260 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_I2C_MspInit+0xbc>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_I2C_MspInit+0xbc>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_I2C_MspInit+0xb4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_I2C_MspInit+0xb4>)
 8001b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_I2C_MspInit+0xb4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	201f      	movs	r0, #31
 8001b34:	f000 fa9d 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b38:	201f      	movs	r0, #31
 8001b3a:	f000 fab6 	bl	80020aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2020      	movs	r0, #32
 8001b44:	f000 fa95 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b48:	2020      	movs	r0, #32
 8001b4a:	f000 faae 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	40010000 	.word	0x40010000

08001b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d113      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_TIM_Base_MspInit+0x44>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_TIM_Base_MspInit+0x44>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_TIM_Base_MspInit+0x44>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	201c      	movs	r0, #28
 8001b98:	f000 fa6b 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b9c:	201c      	movs	r0, #28
 8001b9e:	f000 fa84 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d137      	bne.n	8001c40 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bda:	61d3      	str	r3, [r2, #28]
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c00:	2304      	movs	r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	480f      	ldr	r0, [pc, #60]	; (8001c50 <HAL_UART_MspInit+0xa0>)
 8001c14:	f000 fb24 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <HAL_UART_MspInit+0xa0>)
 8001c2c:	f000 fb18 	bl	8002260 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2026      	movs	r0, #38	; 0x26
 8001c36:	f000 fa1c 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c3a:	2026      	movs	r0, #38	; 0x26
 8001c3c:	f000 fa35 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010800 	.word	0x40010800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9a:	f000 f8d3 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <TIM2_IRQHandler+0x10>)
 8001caa:	f003 fe81 	bl	80059b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000134 	.word	0x20000134

08001cb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <I2C1_EV_IRQHandler+0x10>)
 8001cbe:	f001 f947 	bl	8002f50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000b0 	.word	0x200000b0

08001ccc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <I2C1_ER_IRQHandler+0x10>)
 8001cd2:	f001 faae 	bl	8003232 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200000b0 	.word	0x200000b0

08001ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USART2_IRQHandler+0x10>)
 8001ce6:	f004 fa03 	bl	80060f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000017c 	.word	0x2000017c

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f004 fec6 	bl	8006ab4 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20005000 	.word	0x20005000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	200000a4 	.word	0x200000a4
 8001d5c:	200001d8 	.word	0x200001d8

08001d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d6c:	f7ff fff8 	bl	8001d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480b      	ldr	r0, [pc, #44]	; (8001da0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d72:	490c      	ldr	r1, [pc, #48]	; (8001da4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d74:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d88:	4c09      	ldr	r4, [pc, #36]	; (8001db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d96:	f004 fe93 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9a:	f7ff fc9f 	bl	80016dc <main>
  bx lr
 8001d9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001da8:	08008398 	.word	0x08008398
  ldr r2, =_sbss
 8001dac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001db0:	200001d8 	.word	0x200001d8

08001db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_2_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_Init+0x28>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_Init+0x28>)
 8001dc2:	f043 0310 	orr.w	r3, r3, #16
 8001dc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 f947 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f000 f808 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff fe36 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f95f 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 f927 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_IncTick+0x1c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_IncTick+0x20>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_IncTick+0x20>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	2000000c 	.word	0x2000000c
 8001e64:	200001c4 	.word	0x200001c4

08001e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetTick+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	200001c4 	.word	0x200001c4

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffe0 	bl	8001e68 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4906      	ldr	r1, [pc, #24]	; (8001f5c <__NVIC_EnableIRQ+0x34>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff90 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff2d 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff42 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff90 	bl	8001fb4 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5f 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff35 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d008      	beq.n	8002108 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e020      	b.n	800214a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020e 	bic.w	r2, r2, #14
 8002116:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d005      	beq.n	8002178 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	e051      	b.n	800221c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020e 	bic.w	r2, r2, #14
 8002186:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_DMA_Abort_IT+0xd4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d029      	beq.n	80021f6 <HAL_DMA_Abort_IT+0xa2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <HAL_DMA_Abort_IT+0xd8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x9e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <HAL_DMA_Abort_IT+0xdc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01a      	beq.n	80021ec <HAL_DMA_Abort_IT+0x98>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_DMA_Abort_IT+0xe0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x92>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_DMA_Abort_IT+0xe4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00a      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x8c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1b      	ldr	r2, [pc, #108]	; (800223c <HAL_DMA_Abort_IT+0xe8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d102      	bne.n	80021da <HAL_DMA_Abort_IT+0x86>
 80021d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d8:	e00e      	b.n	80021f8 <HAL_DMA_Abort_IT+0xa4>
 80021da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021de:	e00b      	b.n	80021f8 <HAL_DMA_Abort_IT+0xa4>
 80021e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e4:	e008      	b.n	80021f8 <HAL_DMA_Abort_IT+0xa4>
 80021e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ea:	e005      	b.n	80021f8 <HAL_DMA_Abort_IT+0xa4>
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	e002      	b.n	80021f8 <HAL_DMA_Abort_IT+0xa4>
 80021f2:	2310      	movs	r3, #16
 80021f4:	e000      	b.n	80021f8 <HAL_DMA_Abort_IT+0xa4>
 80021f6:	2301      	movs	r3, #1
 80021f8:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_DMA_Abort_IT+0xec>)
 80021fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
    } 
  }
  return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020008 	.word	0x40020008
 800222c:	4002001c 	.word	0x4002001c
 8002230:	40020030 	.word	0x40020030
 8002234:	40020044 	.word	0x40020044
 8002238:	40020058 	.word	0x40020058
 800223c:	4002006c 	.word	0x4002006c
 8002240:	40020000 	.word	0x40020000

08002244 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002252:	b2db      	uxtb	r3, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b08b      	sub	sp, #44	; 0x2c
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002272:	e169      	b.n	8002548 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002274:	2201      	movs	r2, #1
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8158 	bne.w	8002542 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4a9a      	ldr	r2, [pc, #616]	; (8002500 <HAL_GPIO_Init+0x2a0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d05e      	beq.n	800235a <HAL_GPIO_Init+0xfa>
 800229c:	4a98      	ldr	r2, [pc, #608]	; (8002500 <HAL_GPIO_Init+0x2a0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d875      	bhi.n	800238e <HAL_GPIO_Init+0x12e>
 80022a2:	4a98      	ldr	r2, [pc, #608]	; (8002504 <HAL_GPIO_Init+0x2a4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d058      	beq.n	800235a <HAL_GPIO_Init+0xfa>
 80022a8:	4a96      	ldr	r2, [pc, #600]	; (8002504 <HAL_GPIO_Init+0x2a4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d86f      	bhi.n	800238e <HAL_GPIO_Init+0x12e>
 80022ae:	4a96      	ldr	r2, [pc, #600]	; (8002508 <HAL_GPIO_Init+0x2a8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d052      	beq.n	800235a <HAL_GPIO_Init+0xfa>
 80022b4:	4a94      	ldr	r2, [pc, #592]	; (8002508 <HAL_GPIO_Init+0x2a8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d869      	bhi.n	800238e <HAL_GPIO_Init+0x12e>
 80022ba:	4a94      	ldr	r2, [pc, #592]	; (800250c <HAL_GPIO_Init+0x2ac>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d04c      	beq.n	800235a <HAL_GPIO_Init+0xfa>
 80022c0:	4a92      	ldr	r2, [pc, #584]	; (800250c <HAL_GPIO_Init+0x2ac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d863      	bhi.n	800238e <HAL_GPIO_Init+0x12e>
 80022c6:	4a92      	ldr	r2, [pc, #584]	; (8002510 <HAL_GPIO_Init+0x2b0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d046      	beq.n	800235a <HAL_GPIO_Init+0xfa>
 80022cc:	4a90      	ldr	r2, [pc, #576]	; (8002510 <HAL_GPIO_Init+0x2b0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d85d      	bhi.n	800238e <HAL_GPIO_Init+0x12e>
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d82a      	bhi.n	800232c <HAL_GPIO_Init+0xcc>
 80022d6:	2b12      	cmp	r3, #18
 80022d8:	d859      	bhi.n	800238e <HAL_GPIO_Init+0x12e>
 80022da:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <HAL_GPIO_Init+0x80>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	0800235b 	.word	0x0800235b
 80022e4:	08002335 	.word	0x08002335
 80022e8:	08002347 	.word	0x08002347
 80022ec:	08002389 	.word	0x08002389
 80022f0:	0800238f 	.word	0x0800238f
 80022f4:	0800238f 	.word	0x0800238f
 80022f8:	0800238f 	.word	0x0800238f
 80022fc:	0800238f 	.word	0x0800238f
 8002300:	0800238f 	.word	0x0800238f
 8002304:	0800238f 	.word	0x0800238f
 8002308:	0800238f 	.word	0x0800238f
 800230c:	0800238f 	.word	0x0800238f
 8002310:	0800238f 	.word	0x0800238f
 8002314:	0800238f 	.word	0x0800238f
 8002318:	0800238f 	.word	0x0800238f
 800231c:	0800238f 	.word	0x0800238f
 8002320:	0800238f 	.word	0x0800238f
 8002324:	0800233d 	.word	0x0800233d
 8002328:	08002351 	.word	0x08002351
 800232c:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_GPIO_Init+0x2b4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002332:	e02c      	b.n	800238e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e029      	b.n	8002390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	3304      	adds	r3, #4
 8002342:	623b      	str	r3, [r7, #32]
          break;
 8002344:	e024      	b.n	8002390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	3308      	adds	r3, #8
 800234c:	623b      	str	r3, [r7, #32]
          break;
 800234e:	e01f      	b.n	8002390 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	330c      	adds	r3, #12
 8002356:	623b      	str	r3, [r7, #32]
          break;
 8002358:	e01a      	b.n	8002390 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002362:	2304      	movs	r3, #4
 8002364:	623b      	str	r3, [r7, #32]
          break;
 8002366:	e013      	b.n	8002390 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002370:	2308      	movs	r3, #8
 8002372:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	611a      	str	r2, [r3, #16]
          break;
 800237a:	e009      	b.n	8002390 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800237c:	2308      	movs	r3, #8
 800237e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	615a      	str	r2, [r3, #20]
          break;
 8002386:	e003      	b.n	8002390 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
          break;
 800238c:	e000      	b.n	8002390 <HAL_GPIO_Init+0x130>
          break;
 800238e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2bff      	cmp	r3, #255	; 0xff
 8002394:	d801      	bhi.n	800239a <HAL_GPIO_Init+0x13a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	e001      	b.n	800239e <HAL_GPIO_Init+0x13e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2bff      	cmp	r3, #255	; 0xff
 80023a4:	d802      	bhi.n	80023ac <HAL_GPIO_Init+0x14c>
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	e002      	b.n	80023b2 <HAL_GPIO_Init+0x152>
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	3b08      	subs	r3, #8
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	210f      	movs	r1, #15
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	401a      	ands	r2, r3
 80023c4:	6a39      	ldr	r1, [r7, #32]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	431a      	orrs	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80b1 	beq.w	8002542 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023e0:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_GPIO_Init+0x2b8>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_GPIO_Init+0x2b8>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_GPIO_Init+0x2b8>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023f8:	4a48      	ldr	r2, [pc, #288]	; (800251c <HAL_GPIO_Init+0x2bc>)
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a40      	ldr	r2, [pc, #256]	; (8002520 <HAL_GPIO_Init+0x2c0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d013      	beq.n	800244c <HAL_GPIO_Init+0x1ec>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <HAL_GPIO_Init+0x2c4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00d      	beq.n	8002448 <HAL_GPIO_Init+0x1e8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <HAL_GPIO_Init+0x2c8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d007      	beq.n	8002444 <HAL_GPIO_Init+0x1e4>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a3d      	ldr	r2, [pc, #244]	; (800252c <HAL_GPIO_Init+0x2cc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_GPIO_Init+0x1e0>
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 8002440:	2304      	movs	r3, #4
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 800244c:	2300      	movs	r3, #0
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800245e:	492f      	ldr	r1, [pc, #188]	; (800251c <HAL_GPIO_Init+0x2bc>)
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	492c      	ldr	r1, [pc, #176]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	608b      	str	r3, [r1, #8]
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002486:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	43db      	mvns	r3, r3
 800248e:	4928      	ldr	r1, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 8002490:	4013      	ands	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4922      	ldr	r1, [pc, #136]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	491e      	ldr	r1, [pc, #120]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4918      	ldr	r1, [pc, #96]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4914      	ldr	r1, [pc, #80]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d021      	beq.n	8002534 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
 80024fc:	e021      	b.n	8002542 <HAL_GPIO_Init+0x2e2>
 80024fe:	bf00      	nop
 8002500:	10320000 	.word	0x10320000
 8002504:	10310000 	.word	0x10310000
 8002508:	10220000 	.word	0x10220000
 800250c:	10210000 	.word	0x10210000
 8002510:	10120000 	.word	0x10120000
 8002514:	10110000 	.word	0x10110000
 8002518:	40021000 	.word	0x40021000
 800251c:	40010000 	.word	0x40010000
 8002520:	40010800 	.word	0x40010800
 8002524:	40010c00 	.word	0x40010c00
 8002528:	40011000 	.word	0x40011000
 800252c:	40011400 	.word	0x40011400
 8002530:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_GPIO_Init+0x304>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	43db      	mvns	r3, r3
 800253c:	4909      	ldr	r1, [pc, #36]	; (8002564 <HAL_GPIO_Init+0x304>)
 800253e:	4013      	ands	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	3301      	adds	r3, #1
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	f47f ae8e 	bne.w	8002274 <HAL_GPIO_Init+0x14>
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	372c      	adds	r7, #44	; 0x2c
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40010400 	.word	0x40010400

08002568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]
 8002574:	4613      	mov	r3, r2
 8002576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002584:	e003      	b.n	800258e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	041a      	lsls	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	43d9      	mvns	r1, r3
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	400b      	ands	r3, r1
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e12b      	b.n	8002836 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff fa58 	bl	8001aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0201 	bic.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002630:	f003 f8d6 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a81      	ldr	r2, [pc, #516]	; (8002840 <HAL_I2C_Init+0x274>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d807      	bhi.n	8002650 <HAL_I2C_Init+0x84>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a80      	ldr	r2, [pc, #512]	; (8002844 <HAL_I2C_Init+0x278>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e006      	b.n	800265e <HAL_I2C_Init+0x92>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <HAL_I2C_Init+0x27c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0e7      	b.n	8002836 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_I2C_Init+0x280>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_I2C_Init+0x274>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d802      	bhi.n	80026a0 <HAL_I2C_Init+0xd4>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	e009      	b.n	80026b4 <HAL_I2C_Init+0xe8>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_I2C_Init+0x284>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	495c      	ldr	r1, [pc, #368]	; (8002840 <HAL_I2C_Init+0x274>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d819      	bhi.n	8002708 <HAL_I2C_Init+0x13c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e59      	subs	r1, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_I2C_Init+0x138>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e59      	subs	r1, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	e051      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002704:	2304      	movs	r3, #4
 8002706:	e04f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <HAL_I2C_Init+0x168>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_I2C_Init+0x18e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Init+0x196>
 800275e:	2301      	movs	r3, #1
 8002760:	e022      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <HAL_I2C_Init+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e58      	subs	r0, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002786:	e00f      	b.n	80027a8 <HAL_I2C_Init+0x1dc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e58      	subs	r0, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6859      	ldr	r1, [r3, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	0099      	lsls	r1, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	fbb0 f3f3 	udiv	r3, r0, r3
 800279e:	3301      	adds	r3, #1
 80027a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	6809      	ldr	r1, [r1, #0]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6911      	ldr	r1, [r2, #16]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	4311      	orrs	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	000186a0 	.word	0x000186a0
 8002844:	001e847f 	.word	0x001e847f
 8002848:	003d08ff 	.word	0x003d08ff
 800284c:	431bde83 	.word	0x431bde83
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b80      	cmp	r3, #128	; 0x80
 8002868:	d103      	bne.n	8002872 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	461a      	mov	r2, r3
 8002888:	460b      	mov	r3, r1
 800288a:	817b      	strh	r3, [r7, #10]
 800288c:	4613      	mov	r3, r2
 800288e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff faea 	bl	8001e68 <HAL_GetTick>
 8002894:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	f040 80e0 	bne.w	8002a64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2319      	movs	r3, #25
 80028aa:	2201      	movs	r2, #1
 80028ac:	4970      	ldr	r1, [pc, #448]	; (8002a70 <HAL_I2C_Master_Transmit+0x1f4>)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f002 f94c 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0d3      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_I2C_Master_Transmit+0x50>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0cc      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d007      	beq.n	80028f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002900:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2221      	movs	r2, #33	; 0x21
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2210      	movs	r2, #16
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	893a      	ldrh	r2, [r7, #8]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a50      	ldr	r2, [pc, #320]	; (8002a74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002934:	8979      	ldrh	r1, [r7, #10]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6a3a      	ldr	r2, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 ff0e 	bl	800475c <I2C_MasterRequestWrite>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e08d      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002960:	e066      	b.n	8002a30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	6a39      	ldr	r1, [r7, #32]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f002 fa0a 	bl	8004d80 <I2C_WaitOnTXEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b04      	cmp	r3, #4
 8002978:	d107      	bne.n	800298a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06b      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11b      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x188>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d017      	beq.n	8002a04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	6a39      	ldr	r1, [r7, #32]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f002 fa01 	bl	8004e10 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00d      	beq.n	8002a30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d107      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e01a      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d194      	bne.n	8002962 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	00100002 	.word	0x00100002
 8002a74:	ffff0000 	.word	0xffff0000

08002a78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	461a      	mov	r2, r3
 8002a84:	460b      	mov	r3, r1
 8002a86:	817b      	strh	r3, [r7, #10]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff f9ea 	bl	8001e68 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f040 824b 	bne.w	8002f3a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2319      	movs	r3, #25
 8002aaa:	2201      	movs	r2, #1
 8002aac:	497f      	ldr	r1, [pc, #508]	; (8002cac <HAL_I2C_Master_Receive+0x234>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f002 f84c 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
 8002abc:	e23e      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2C_Master_Receive+0x54>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e237      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d007      	beq.n	8002af2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2222      	movs	r2, #34	; 0x22
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a5f      	ldr	r2, [pc, #380]	; (8002cb0 <HAL_I2C_Master_Receive+0x238>)
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b34:	8979      	ldrh	r1, [r7, #10]
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 fe90 	bl	8004860 <I2C_MasterRequestRead>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1f8      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d113      	bne.n	8002b7a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e1cc      	b.n	8002f14 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d11e      	bne.n	8002bc0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b92:	b672      	cpsid	i
}
 8002b94:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bbc:	b662      	cpsie	i
}
 8002bbe:	e035      	b.n	8002c2c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d11e      	bne.n	8002c06 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c02:	b662      	cpsie	i
}
 8002c04:	e012      	b.n	8002c2c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c2c:	e172      	b.n	8002f14 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	f200 811f 	bhi.w	8002e76 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d123      	bne.n	8002c88 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f002 f95d 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e173      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c86:	e145      	b.n	8002f14 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d152      	bne.n	8002d36 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	2200      	movs	r2, #0
 8002c98:	4906      	ldr	r1, [pc, #24]	; (8002cb4 <HAL_I2C_Master_Receive+0x23c>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f001 ff56 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e148      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000
 8002cb4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cfe:	b662      	cpsie	i
}
 8002d00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d34:	e0ee      	b.n	8002f14 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4981      	ldr	r1, [pc, #516]	; (8002f44 <HAL_I2C_Master_Receive+0x4cc>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f001 ff03 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0f5      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d60:	b672      	cpsid	i
}
 8002d62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d96:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <HAL_I2C_Master_Receive+0x4d0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	08db      	lsrs	r3, r3, #3
 8002d9c:	4a6b      	ldr	r2, [pc, #428]	; (8002f4c <HAL_I2C_Master_Receive+0x4d4>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0a1a      	lsrs	r2, r3, #8
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00da      	lsls	r2, r3, #3
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d118      	bne.n	8002dee <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dde:	b662      	cpsie	i
}
 8002de0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0a6      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d1d9      	bne.n	8002db0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e3e:	b662      	cpsie	i
}
 8002e40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e74:	e04e      	b.n	8002f14 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f002 f842 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e058      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d124      	bne.n	8002f14 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f ae88 	bne.w	8002c2e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3728      	adds	r7, #40	; 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010004 	.word	0x00010004
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	14f8b589 	.word	0x14f8b589

08002f50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d003      	beq.n	8002f88 <HAL_I2C_EV_IRQHandler+0x38>
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	f040 80c1 	bne.w	800310a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_I2C_EV_IRQHandler+0x6e>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fa8:	d003      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x62>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x66>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x68>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f000 8132 	beq.w	8003222 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x92>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f002 f820 	bl	800501a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fd99 	bl	8003b12 <I2C_Master_SB>
 8002fe0:	e092      	b.n	8003108 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0xb2>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	0a5b      	lsrs	r3, r3, #9
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fe0e 	bl	8003c1c <I2C_Master_ADD10>
 8003000:	e082      	b.n	8003108 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0xd2>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	0a5b      	lsrs	r3, r3, #9
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fe27 	bl	8003c6e <I2C_Master_ADDR>
 8003020:	e072      	b.n	8003108 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d03b      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303c:	f000 80f3 	beq.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	09db      	lsrs	r3, r3, #7
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00f      	beq.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f9f1 	bl	800344c <I2C_MasterTransmit_TXE>
 800306a:	e04d      	b.n	8003108 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80d6 	beq.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	0a5b      	lsrs	r3, r3, #9
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80cf 	beq.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003088:	7bbb      	ldrb	r3, [r7, #14]
 800308a:	2b21      	cmp	r3, #33	; 0x21
 800308c:	d103      	bne.n	8003096 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa78 	bl	8003584 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003094:	e0c7      	b.n	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	f040 80c4 	bne.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fae6 	bl	8003670 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a4:	e0bf      	b.n	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	f000 80b7 	beq.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00f      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x194>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x194>
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fb5f 	bl	80037a0 <I2C_MasterReceive_RXNE>
 80030e2:	e011      	b.n	8003108 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 809a 	beq.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0a5b      	lsrs	r3, r3, #9
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8093 	beq.w	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fc15 	bl	8003930 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003106:	e08e      	b.n	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003108:	e08d      	b.n	8003226 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e007      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d012      	beq.n	800315e <HAL_I2C_EV_IRQHandler+0x20e>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	0a5b      	lsrs	r3, r3, #9
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003154:	69b9      	ldr	r1, [r7, #24]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 ffe0 	bl	800411c <I2C_Slave_ADDR>
 800315c:	e066      	b.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x22e>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	0a5b      	lsrs	r3, r3, #9
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f001 f81a 	bl	80041b0 <I2C_Slave_STOPF>
 800317c:	e056      	b.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800317e:	7bbb      	ldrb	r3, [r7, #14]
 8003180:	2b21      	cmp	r3, #33	; 0x21
 8003182:	d002      	beq.n	800318a <HAL_I2C_EV_IRQHandler+0x23a>
 8003184:	7bbb      	ldrb	r3, [r7, #14]
 8003186:	2b29      	cmp	r3, #41	; 0x29
 8003188:	d125      	bne.n	80031d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	09db      	lsrs	r3, r3, #7
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00f      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x266>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	0a9b      	lsrs	r3, r3, #10
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_I2C_EV_IRQHandler+0x266>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fef8 	bl	8003fa4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031b4:	e039      	b.n	800322a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d033      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0x2da>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	0a5b      	lsrs	r3, r3, #9
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d02d      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 ff25 	bl	800401e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d4:	e029      	b.n	800322a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00f      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x2b2>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	0a9b      	lsrs	r3, r3, #10
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x2b2>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff2f 	bl	800405e <I2C_SlaveReceive_RXNE>
 8003200:	e014      	b.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	0a5b      	lsrs	r3, r3, #9
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 ff5d 	bl	80040da <I2C_SlaveReceive_BTF>
 8003220:	e004      	b.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800322a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	; 0x28
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003254:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_I2C_ER_IRQHandler+0x5e>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800327e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	0a5b      	lsrs	r3, r3, #9
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0x88>
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80032b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	0a9b      	lsrs	r3, r3, #10
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03f      	beq.n	8003346 <HAL_I2C_ER_IRQHandler+0x114>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d039      	beq.n	8003346 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80032d2:	7efb      	ldrb	r3, [r7, #27]
 80032d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032ec:	7ebb      	ldrb	r3, [r7, #26]
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d112      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xe6>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xe6>
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b21      	cmp	r3, #33	; 0x21
 80032fc:	d008      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b29      	cmp	r3, #41	; 0x29
 8003302:	d005      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0xde>
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	2b28      	cmp	r3, #40	; 0x28
 8003308:	d106      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b21      	cmp	r3, #33	; 0x21
 800330e:	d103      	bne.n	8003318 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 f87d 	bl	8004410 <I2C_Slave_AF>
 8003316:	e016      	b.n	8003346 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003320:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800332a:	7efb      	ldrb	r3, [r7, #27]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d002      	beq.n	8003336 <HAL_I2C_ER_IRQHandler+0x104>
 8003330:	7efb      	ldrb	r3, [r7, #27]
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d107      	bne.n	8003346 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003344:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	0adb      	lsrs	r3, r3, #11
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0x13e>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800336e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f001 f8b8 	bl	80044f8 <I2C_ITError>
  }
}
 8003388:	bf00      	nop
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
 80033e4:	4613      	mov	r3, r2
 80033e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003462:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d150      	bne.n	8003514 <I2C_MasterTransmit_TXE+0xc8>
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b21      	cmp	r3, #33	; 0x21
 8003476:	d14d      	bne.n	8003514 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d01d      	beq.n	80034ba <I2C_MasterTransmit_TXE+0x6e>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b20      	cmp	r3, #32
 8003482:	d01a      	beq.n	80034ba <I2C_MasterTransmit_TXE+0x6e>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800348a:	d016      	beq.n	80034ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800349a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2211      	movs	r2, #17
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ff6c 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034b8:	e060      	b.n	800357c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d107      	bne.n	8003504 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff81 	bl	8003404 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003502:	e03b      	b.n	800357c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff3f 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003512:	e033      	b.n	800357c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b21      	cmp	r3, #33	; 0x21
 8003518:	d005      	beq.n	8003526 <I2C_MasterTransmit_TXE+0xda>
 800351a:	7bbb      	ldrb	r3, [r7, #14]
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d12d      	bne.n	800357c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b22      	cmp	r3, #34	; 0x22
 8003524:	d12a      	bne.n	800357c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003540:	e01c      	b.n	800357c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d103      	bne.n	8003556 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f88e 	bl	8003670 <I2C_MemoryTransmit_TXE_BTF>
}
 8003554:	e012      	b.n	800357c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800357a:	e7ff      	b.n	800357c <I2C_MasterTransmit_TXE+0x130>
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b21      	cmp	r3, #33	; 0x21
 800359c:	d164      	bne.n	8003668 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d012      	beq.n	80035ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035cc:	e04c      	b.n	8003668 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d01d      	beq.n	8003610 <I2C_MasterTransmit_BTF+0x8c>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d01a      	beq.n	8003610 <I2C_MasterTransmit_BTF+0x8c>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e0:	d016      	beq.n	8003610 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2211      	movs	r2, #17
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fec1 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
}
 800360e:	e02b      	b.n	8003668 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800361e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d107      	bne.n	800365a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fed6 	bl	8003404 <HAL_I2C_MemTxCpltCallback>
}
 8003658:	e006      	b.n	8003668 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fe94 	bl	8003390 <HAL_I2C_MasterTxCpltCallback>
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11d      	bne.n	80036c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10b      	bne.n	80036a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	b2da      	uxtb	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80036a6:	e077      	b.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	121b      	asrs	r3, r3, #8
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036c2:	e069      	b.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10b      	bne.n	80036e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036e2:	e059      	b.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d152      	bne.n	8003792 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b22      	cmp	r3, #34	; 0x22
 80036f0:	d10d      	bne.n	800370e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003700:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800370c:	e044      	b.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b21      	cmp	r3, #33	; 0x21
 800371c:	d112      	bne.n	8003744 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003742:	e029      	b.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d124      	bne.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	2b21      	cmp	r3, #33	; 0x21
 8003752:	d121      	bne.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003762:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fe3a 	bl	8003404 <HAL_I2C_MemTxCpltCallback>
}
 8003790:	e002      	b.n	8003798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff f85e 	bl	8002854 <I2C_Flush_DR>
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b22      	cmp	r3, #34	; 0x22
 80037b2:	f040 80b9 	bne.w	8003928 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d921      	bls.n	800380e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	f040 8096 	bne.w	8003928 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800380c:	e08c      	b.n	8003928 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	2b02      	cmp	r3, #2
 8003814:	d07f      	beq.n	8003916 <I2C_MasterReceive_RXNE+0x176>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <I2C_MasterReceive_RXNE+0x82>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d179      	bne.n	8003916 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f001 fb3c 	bl	8004ea0 <I2C_WaitOnSTOPRequestThroughIT>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d14c      	bne.n	80038c8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800384c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d10a      	bne.n	800389e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fdbd 	bl	8003416 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800389c:	e044      	b.n	8003928 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d002      	beq.n	80038b2 <I2C_MasterReceive_RXNE+0x112>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d103      	bne.n	80038ba <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
 80038b8:	e002      	b.n	80038c0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2212      	movs	r2, #18
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fd6e 	bl	80033a2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038c6:	e02f      	b.n	8003928 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fd8a 	bl	8003428 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003914:	e008      	b.n	8003928 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003924:	605a      	str	r2, [r3, #4]
}
 8003926:	e7ff      	b.n	8003928 <I2C_MasterReceive_RXNE+0x188>
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b04      	cmp	r3, #4
 8003946:	d11b      	bne.n	8003980 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800397e:	e0c4      	b.n	8003b0a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d129      	bne.n	80039de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00a      	beq.n	80039b6 <I2C_MasterReceive_BTF+0x86>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d007      	beq.n	80039b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039dc:	e095      	b.n	8003b0a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d17d      	bne.n	8003ae4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d002      	beq.n	80039f4 <I2C_MasterReceive_BTF+0xc4>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d108      	bne.n	8003a06 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e016      	b.n	8003a34 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d002      	beq.n	8003a12 <I2C_MasterReceive_BTF+0xe2>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d108      	bne.n	8003a24 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e007      	b.n	8003a34 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d10a      	bne.n	8003aba <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fcaf 	bl	8003416 <HAL_I2C_MemRxCpltCallback>
}
 8003ab8:	e027      	b.n	8003b0a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d002      	beq.n	8003ace <I2C_MasterReceive_BTF+0x19e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d103      	bne.n	8003ad6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ad4:	e002      	b.n	8003adc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2212      	movs	r2, #18
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fc60 	bl	80033a2 <HAL_I2C_MasterRxCpltCallback>
}
 8003ae2:	e012      	b.n	8003b0a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d117      	bne.n	8003b56 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b3e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b40:	e067      	b.n	8003c12 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
}
 8003b54:	e05d      	b.n	8003c12 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5e:	d133      	bne.n	8003bc8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b21      	cmp	r3, #33	; 0x21
 8003b6a:	d109      	bne.n	8003b80 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b7c:	611a      	str	r2, [r3, #16]
 8003b7e:	e008      	b.n	8003b92 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <I2C_Master_SB+0x92>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d108      	bne.n	8003bb6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d032      	beq.n	8003c12 <I2C_Master_SB+0x100>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02d      	beq.n	8003c12 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc4:	605a      	str	r2, [r3, #4]
}
 8003bc6:	e024      	b.n	8003c12 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10e      	bne.n	8003bee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	11db      	asrs	r3, r3, #7
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0306 	and.w	r3, r3, #6
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f063 030f 	orn	r3, r3, #15
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]
}
 8003bec:	e011      	b.n	8003c12 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10d      	bne.n	8003c12 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	11db      	asrs	r3, r3, #7
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0306 	and.w	r3, r3, #6
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f063 030e 	orn	r3, r3, #14
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d004      	beq.n	8003c42 <I2C_Master_ADD10+0x26>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <I2C_Master_ADD10+0x48>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b091      	sub	sp, #68	; 0x44
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b22      	cmp	r3, #34	; 0x22
 8003c96:	f040 8174 	bne.w	8003f82 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <I2C_Master_ADDR+0x54>
 8003ca2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d10b      	bne.n	8003cc2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003caa:	2300      	movs	r3, #0
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	e16b      	b.n	8003f9a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11d      	bne.n	8003d06 <I2C_Master_ADDR+0x98>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cd2:	d118      	bne.n	8003d06 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	651a      	str	r2, [r3, #80]	; 0x50
 8003d04:	e149      	b.n	8003f9a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d113      	bne.n	8003d38 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e120      	b.n	8003f7a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	f040 808a 	bne.w	8003e58 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d4a:	d137      	bne.n	8003dbc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6a:	d113      	bne.n	8003d94 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	e0f2      	b.n	8003f7a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d94:	2300      	movs	r3, #0
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e0de      	b.n	8003f7a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d02e      	beq.n	8003e20 <I2C_Master_ADDR+0x1b2>
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d02b      	beq.n	8003e20 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	2b12      	cmp	r3, #18
 8003dcc:	d102      	bne.n	8003dd4 <I2C_Master_ADDR+0x166>
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d125      	bne.n	8003e20 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00e      	beq.n	8003df8 <I2C_Master_ADDR+0x18a>
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d00b      	beq.n	8003df8 <I2C_Master_ADDR+0x18a>
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d008      	beq.n	8003df8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e007      	b.n	8003e08 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e06:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	e0ac      	b.n	8003f7a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e090      	b.n	8003f7a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d158      	bne.n	8003f14 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d021      	beq.n	8003eac <I2C_Master_ADDR+0x23e>
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d01e      	beq.n	8003eac <I2C_Master_ADDR+0x23e>
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d01b      	beq.n	8003eac <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e012      	b.n	8003ed2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d14b      	bne.n	8003f7a <I2C_Master_ADDR+0x30c>
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee8:	d00b      	beq.n	8003f02 <I2C_Master_ADDR+0x294>
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d008      	beq.n	8003f02 <I2C_Master_ADDR+0x294>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d005      	beq.n	8003f02 <I2C_Master_ADDR+0x294>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d002      	beq.n	8003f02 <I2C_Master_ADDR+0x294>
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d13b      	bne.n	8003f7a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e032      	b.n	8003f7a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f22:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f32:	d117      	bne.n	8003f64 <I2C_Master_ADDR+0x2f6>
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f3a:	d00b      	beq.n	8003f54 <I2C_Master_ADDR+0x2e6>
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d008      	beq.n	8003f54 <I2C_Master_ADDR+0x2e6>
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d005      	beq.n	8003f54 <I2C_Master_ADDR+0x2e6>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d002      	beq.n	8003f54 <I2C_Master_ADDR+0x2e6>
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d107      	bne.n	8003f64 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f62:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f80:	e00b      	b.n	8003f9a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
}
 8003f98:	e7ff      	b.n	8003f9a <I2C_Master_ADDR+0x32c>
 8003f9a:	bf00      	nop
 8003f9c:	3744      	adds	r7, #68	; 0x44
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02b      	beq.n	8004016 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d114      	bne.n	8004016 <I2C_SlaveTransmit_TXE+0x72>
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b29      	cmp	r3, #41	; 0x29
 8003ff0:	d111      	bne.n	8004016 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004000:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2221      	movs	r2, #33	; 0x21
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2228      	movs	r2, #40	; 0x28
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff f9cf 	bl	80033b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d011      	beq.n	8004054 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02c      	beq.n	80040d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d114      	bne.n	80040d2 <I2C_SlaveReceive_RXNE+0x74>
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d111      	bne.n	80040d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2222      	movs	r2, #34	; 0x22
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2228      	movs	r2, #40	; 0x28
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff f97a 	bl	80033c6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004136:	2b28      	cmp	r3, #40	; 0x28
 8004138:	d127      	bne.n	800418a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	09db      	lsrs	r3, r3, #7
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	81bb      	strh	r3, [r7, #12]
 800416c:	e002      	b.n	8004174 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800417c:	89ba      	ldrh	r2, [r7, #12]
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff f928 	bl	80033d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004188:	e00e      	b.n	80041a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041d0:	2300      	movs	r3, #0
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420c:	d172      	bne.n	80042f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b22      	cmp	r3, #34	; 0x22
 8004212:	d002      	beq.n	800421a <I2C_Slave_STOPF+0x6a>
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d135      	bne.n	8004286 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f043 0204 	orr.w	r2, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fff6 	bl	8002244 <HAL_DMA_GetState>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d049      	beq.n	80042f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	4a69      	ldr	r2, [pc, #420]	; (8004408 <I2C_Slave_STOPF+0x258>)
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd ff72 	bl	8002154 <HAL_DMA_Abort_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03d      	beq.n	80042f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004284:	e035      	b.n	80042f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd ffc0 	bl	8002244 <HAL_DMA_GetState>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d014      	beq.n	80042f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	4a4e      	ldr	r2, [pc, #312]	; (8004408 <I2C_Slave_STOPF+0x258>)
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd ff3c 	bl	8002154 <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
 80042f0:	e000      	b.n	80042f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03e      	beq.n	800437c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d112      	bne.n	8004332 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d112      	bne.n	8004366 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f8b7 	bl	80044f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800438a:	e039      	b.n	8004400 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b2a      	cmp	r3, #42	; 0x2a
 8004390:	d109      	bne.n	80043a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2228      	movs	r2, #40	; 0x28
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff f810 	bl	80033c6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b28      	cmp	r3, #40	; 0x28
 80043b0:	d111      	bne.n	80043d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <I2C_Slave_STOPF+0x25c>)
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff f80f 	bl	80033f2 <HAL_I2C_ListenCpltCallback>
}
 80043d4:	e014      	b.n	8004400 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	d002      	beq.n	80043e4 <I2C_Slave_STOPF+0x234>
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b22      	cmp	r3, #34	; 0x22
 80043e2:	d10d      	bne.n	8004400 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fe ffe3 	bl	80033c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	080049fd 	.word	0x080049fd
 800440c:	ffff0000 	.word	0xffff0000

08004410 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d002      	beq.n	8004432 <I2C_Slave_AF+0x22>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b20      	cmp	r3, #32
 8004430:	d129      	bne.n	8004486 <I2C_Slave_AF+0x76>
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b28      	cmp	r3, #40	; 0x28
 8004436:	d126      	bne.n	8004486 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <I2C_Slave_AF+0xe4>)
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800444c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004456:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004466:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fe ffb7 	bl	80033f2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004484:	e031      	b.n	80044ea <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b21      	cmp	r3, #33	; 0x21
 800448a:	d129      	bne.n	80044e0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <I2C_Slave_AF+0xe4>)
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2221      	movs	r2, #33	; 0x21
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe f9be 	bl	8002854 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fe ff6b 	bl	80033b4 <HAL_I2C_SlaveTxCpltCallback>
}
 80044de:	e004      	b.n	80044ea <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044e8:	615a      	str	r2, [r3, #20]
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	ffff0000 	.word	0xffff0000

080044f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	2b10      	cmp	r3, #16
 8004514:	d002      	beq.n	800451c <I2C_ITError+0x24>
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d10a      	bne.n	8004532 <I2C_ITError+0x3a>
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b22      	cmp	r3, #34	; 0x22
 8004520:	d107      	bne.n	8004532 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004530:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004538:	2b28      	cmp	r3, #40	; 0x28
 800453a:	d107      	bne.n	800454c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2228      	movs	r2, #40	; 0x28
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800454a:	e015      	b.n	8004578 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455a:	d00a      	beq.n	8004572 <I2C_ITError+0x7a>
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b60      	cmp	r3, #96	; 0x60
 8004560:	d007      	beq.n	8004572 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004586:	d162      	bne.n	800464e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004596:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d020      	beq.n	80045e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <I2C_ITError+0x25c>)
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd fdce 	bl	8002154 <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8089 	beq.w	80046d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e2:	4610      	mov	r0, r2
 80045e4:	4798      	blx	r3
 80045e6:	e074      	b.n	80046d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	4a59      	ldr	r2, [pc, #356]	; (8004754 <I2C_ITError+0x25c>)
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fdad 	bl	8002154 <HAL_DMA_Abort_IT>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d068      	beq.n	80046d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d10b      	bne.n	8004626 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004648:	4610      	mov	r0, r2
 800464a:	4798      	blx	r3
 800464c:	e041      	b.n	80046d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b60      	cmp	r3, #96	; 0x60
 8004658:	d125      	bne.n	80046a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d10b      	bne.n	800468e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fe fecb 	bl	800343a <HAL_I2C_AbortCpltCallback>
 80046a4:	e015      	b.n	80046d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d10b      	bne.n	80046cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe feab 	bl	8003428 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10e      	bne.n	8004700 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d113      	bne.n	800474c <I2C_ITError+0x254>
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b28      	cmp	r3, #40	; 0x28
 8004728:	d110      	bne.n	800474c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <I2C_ITError+0x260>)
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fe53 	bl	80033f2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	080049fd 	.word	0x080049fd
 8004758:	ffff0000 	.word	0xffff0000

0800475c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	460b      	mov	r3, r1
 800476a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d006      	beq.n	8004786 <I2C_MasterRequestWrite+0x2a>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d003      	beq.n	8004786 <I2C_MasterRequestWrite+0x2a>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004784:	d108      	bne.n	8004798 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e00b      	b.n	80047b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	2b12      	cmp	r3, #18
 800479e:	d107      	bne.n	80047b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f9c5 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	d103      	bne.n	80047e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e035      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ec:	d108      	bne.n	8004800 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047fc:	611a      	str	r2, [r3, #16]
 80047fe:	e01b      	b.n	8004838 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004800:	897b      	ldrh	r3, [r7, #10]
 8004802:	11db      	asrs	r3, r3, #7
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f063 030f 	orn	r3, r3, #15
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <I2C_MasterRequestWrite+0xfc>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fa0e 	bl	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e010      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4907      	ldr	r1, [pc, #28]	; (800485c <I2C_MasterRequestWrite+0x100>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f9fe 	bl	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010008 	.word	0x00010008
 800485c:	00010002 	.word	0x00010002

08004860 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	460b      	mov	r3, r1
 800486e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004884:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d006      	beq.n	800489a <I2C_MasterRequestRead+0x3a>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d003      	beq.n	800489a <I2C_MasterRequestRead+0x3a>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004898:	d108      	bne.n	80048ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e00b      	b.n	80048c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	2b11      	cmp	r3, #17
 80048b2:	d107      	bne.n	80048c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f93b 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00d      	beq.n	80048f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d103      	bne.n	80048f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e079      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004900:	d108      	bne.n	8004914 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]
 8004912:	e05f      	b.n	80049d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004914:	897b      	ldrh	r3, [r7, #10]
 8004916:	11db      	asrs	r3, r3, #7
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f003 0306 	and.w	r3, r3, #6
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f063 030f 	orn	r3, r3, #15
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4930      	ldr	r1, [pc, #192]	; (80049f4 <I2C_MasterRequestRead+0x194>)
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f984 	bl	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e054      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4929      	ldr	r1, [pc, #164]	; (80049f8 <I2C_MasterRequestRead+0x198>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f974 	bl	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e044      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004986:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f8d9 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ae:	d103      	bne.n	80049b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e017      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049bc:	897b      	ldrh	r3, [r7, #10]
 80049be:	11db      	asrs	r3, r3, #7
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f063 030e 	orn	r3, r3, #14
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4907      	ldr	r1, [pc, #28]	; (80049f8 <I2C_MasterRequestRead+0x198>)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f930 	bl	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	00010008 	.word	0x00010008
 80049f8:	00010002 	.word	0x00010002

080049fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <I2C_DMAAbort+0x148>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	4a4a      	ldr	r2, [pc, #296]	; (8004b48 <I2C_DMAAbort+0x14c>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0a1a      	lsrs	r2, r3, #8
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00da      	lsls	r2, r3, #3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a42:	e00a      	b.n	8004a5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d0ea      	beq.n	8004a30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	2200      	movs	r2, #0
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	2200      	movs	r2, #0
 8004a78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	2200      	movs	r2, #0
 8004aae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b60      	cmp	r3, #96	; 0x60
 8004aca:	d10e      	bne.n	8004aea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7fe fca9 	bl	800343a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ae8:	e027      	b.n	8004b3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004af0:	2b28      	cmp	r3, #40	; 0x28
 8004af2:	d117      	bne.n	8004b24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2228      	movs	r2, #40	; 0x28
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b22:	e007      	b.n	8004b34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b34:	6978      	ldr	r0, [r7, #20]
 8004b36:	f7fe fc77 	bl	8003428 <HAL_I2C_ErrorCallback>
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000004 	.word	0x20000004
 8004b48:	14f8b589 	.word	0x14f8b589

08004b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5c:	e048      	b.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d044      	beq.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fd f97f 	bl	8001e68 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d139      	bne.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10d      	bne.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	e00c      	b.n	8004bbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d116      	bne.n	8004bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f043 0220 	orr.w	r2, r3, #32
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e023      	b.n	8004c38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10d      	bne.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	43da      	mvns	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	e00c      	b.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d093      	beq.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c4e:	e071      	b.n	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5e:	d123      	bne.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0204 	orr.w	r2, r3, #4
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e067      	b.n	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d041      	beq.n	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb0:	f7fd f8da 	bl	8001e68 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d136      	bne.n	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	0c1b      	lsrs	r3, r3, #16
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d10c      	bne.n	8004cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e00b      	b.n	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	43da      	mvns	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e021      	b.n	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d10c      	bne.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e00b      	b.n	8004d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f47f af6d 	bne.w	8004c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d8c:	e034      	b.n	8004df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f915 	bl	8004fbe <I2C_IsAcknowledgeFailed>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e034      	b.n	8004e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d028      	beq.n	8004df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fd f85f 	bl	8001e68 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11d      	bne.n	8004df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d016      	beq.n	8004df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e007      	b.n	8004e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d1c3      	bne.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e1c:	e034      	b.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f8cd 	bl	8004fbe <I2C_IsAcknowledgeFailed>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e034      	b.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d028      	beq.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fd f817 	bl	8001e68 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d11d      	bne.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d016      	beq.n	8004e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e007      	b.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d1c3      	bne.n	8004e1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	08db      	lsrs	r3, r3, #3
 8004eb2:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	0a1a      	lsrs	r2, r3, #8
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e008      	b.n	8004ef0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eec:	d0e9      	beq.n	8004ec2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000004 	.word	0x20000004
 8004f00:	14f8b589 	.word	0x14f8b589

08004f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f10:	e049      	b.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d119      	bne.n	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e030      	b.n	8004fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fc ff88 	bl	8001e68 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11d      	bne.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d016      	beq.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e007      	b.n	8004fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d1ae      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d11b      	bne.n	800500e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fde:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800502a:	d103      	bne.n	8005034 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005032:	e007      	b.n	8005044 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800503c:	d102      	bne.n	8005044 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2208      	movs	r2, #8
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
	...

08005050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e26c      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8087 	beq.w	800517e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005070:	4b92      	ldr	r3, [pc, #584]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b04      	cmp	r3, #4
 800507a:	d00c      	beq.n	8005096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800507c:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b08      	cmp	r3, #8
 8005086:	d112      	bne.n	80050ae <HAL_RCC_OscConfig+0x5e>
 8005088:	4b8c      	ldr	r3, [pc, #560]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d10b      	bne.n	80050ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005096:	4b89      	ldr	r3, [pc, #548]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d06c      	beq.n	800517c <HAL_RCC_OscConfig+0x12c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d168      	bne.n	800517c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e246      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_OscConfig+0x76>
 80050b8:	4b80      	ldr	r3, [pc, #512]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7f      	ldr	r2, [pc, #508]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	e02e      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x98>
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a7a      	ldr	r2, [pc, #488]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b78      	ldr	r3, [pc, #480]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a77      	ldr	r2, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e01d      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f0:	d10c      	bne.n	800510c <HAL_RCC_OscConfig+0xbc>
 80050f2:	4b72      	ldr	r3, [pc, #456]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a71      	ldr	r2, [pc, #452]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80050f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b6f      	ldr	r3, [pc, #444]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6e      	ldr	r2, [pc, #440]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e00b      	b.n	8005124 <HAL_RCC_OscConfig+0xd4>
 800510c:	4b6b      	ldr	r3, [pc, #428]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6a      	ldr	r2, [pc, #424]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b68      	ldr	r3, [pc, #416]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a67      	ldr	r2, [pc, #412]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800511e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fc fe9c 	bl	8001e68 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fc fe98 	bl	8001e68 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e1fa      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005146:	4b5d      	ldr	r3, [pc, #372]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0xe4>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fc fe88 	bl	8001e68 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fc fe84 	bl	8001e68 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1e6      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516e:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x10c>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d063      	beq.n	8005252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518a:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005196:	4b49      	ldr	r3, [pc, #292]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f003 030c 	and.w	r3, r3, #12
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d11c      	bne.n	80051dc <HAL_RCC_OscConfig+0x18c>
 80051a2:	4b46      	ldr	r3, [pc, #280]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_RCC_OscConfig+0x176>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e1ba      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4939      	ldr	r1, [pc, #228]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	e03a      	b.n	8005252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e4:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <HAL_RCC_OscConfig+0x270>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fc fe3d 	bl	8001e68 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f2:	f7fc fe39 	bl	8001e68 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e19b      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4927      	ldr	r1, [pc, #156]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]
 8005224:	e015      	b.n	8005252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005226:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <HAL_RCC_OscConfig+0x270>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fc fe1c 	bl	8001e68 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005234:	f7fc fe18 	bl	8001e68 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e17a      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03a      	beq.n	80052d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d019      	beq.n	800529a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005266:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <HAL_RCC_OscConfig+0x274>)
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526c:	f7fc fdfc 	bl	8001e68 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005274:	f7fc fdf8 	bl	8001e68 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e15a      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_RCC_OscConfig+0x26c>)
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005292:	2001      	movs	r0, #1
 8005294:	f000 facc 	bl	8005830 <RCC_Delay>
 8005298:	e01c      	b.n	80052d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_OscConfig+0x274>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a0:	f7fc fde2 	bl	8001e68 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a6:	e00f      	b.n	80052c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fc fdde 	bl	8001e68 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d908      	bls.n	80052c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e140      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
 80052c0:	42420000 	.word	0x42420000
 80052c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	4b9e      	ldr	r3, [pc, #632]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e9      	bne.n	80052a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a6 	beq.w	800542e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e6:	4b97      	ldr	r3, [pc, #604]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10d      	bne.n	800530e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b94      	ldr	r3, [pc, #592]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4a93      	ldr	r2, [pc, #588]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fc:	61d3      	str	r3, [r2, #28]
 80052fe:	4b91      	ldr	r3, [pc, #580]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b8e      	ldr	r3, [pc, #568]	; (8005548 <HAL_RCC_OscConfig+0x4f8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d118      	bne.n	800534c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531a:	4b8b      	ldr	r3, [pc, #556]	; (8005548 <HAL_RCC_OscConfig+0x4f8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a8a      	ldr	r2, [pc, #552]	; (8005548 <HAL_RCC_OscConfig+0x4f8>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005326:	f7fc fd9f 	bl	8001e68 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fc fd9b 	bl	8001e68 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	; 0x64
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e0fd      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b81      	ldr	r3, [pc, #516]	; (8005548 <HAL_RCC_OscConfig+0x4f8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x312>
 8005354:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	4a7a      	ldr	r2, [pc, #488]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6213      	str	r3, [r2, #32]
 8005360:	e02d      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x334>
 800536a:	4b76      	ldr	r3, [pc, #472]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a75      	ldr	r2, [pc, #468]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4b73      	ldr	r3, [pc, #460]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4a72      	ldr	r2, [pc, #456]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6213      	str	r3, [r2, #32]
 8005382:	e01c      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x356>
 800538c:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	4a6c      	ldr	r2, [pc, #432]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6213      	str	r3, [r2, #32]
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	4a69      	ldr	r2, [pc, #420]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6213      	str	r3, [r2, #32]
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x36e>
 80053a6:	4b67      	ldr	r3, [pc, #412]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4a66      	ldr	r2, [pc, #408]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6213      	str	r3, [r2, #32]
 80053b2:	4b64      	ldr	r3, [pc, #400]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4a63      	ldr	r2, [pc, #396]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c6:	f7fc fd4f 	bl	8001e68 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fc fd4b 	bl	8001e68 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e0ab      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b57      	ldr	r3, [pc, #348]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCC_OscConfig+0x37e>
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f2:	f7fc fd39 	bl	8001e68 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fc fd35 	bl	8001e68 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e095      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005410:	4b4c      	ldr	r3, [pc, #304]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b48      	ldr	r3, [pc, #288]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	4a47      	ldr	r2, [pc, #284]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8081 	beq.w	800553a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b08      	cmp	r3, #8
 8005442:	d061      	beq.n	8005508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d146      	bne.n	80054da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <HAL_RCC_OscConfig+0x4fc>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fc fd09 	bl	8001e68 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545a:	f7fc fd05 	bl	8001e68 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e067      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800546c:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d108      	bne.n	8005494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	492d      	ldr	r1, [pc, #180]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005494:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a19      	ldr	r1, [r3, #32]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	430b      	orrs	r3, r1
 80054a6:	4927      	ldr	r1, [pc, #156]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <HAL_RCC_OscConfig+0x4fc>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fc fcd9 	bl	8001e68 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fc fcd5 	bl	8001e68 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e037      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054cc:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x46a>
 80054d8:	e02f      	b.n	800553a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054da:	4b1c      	ldr	r3, [pc, #112]	; (800554c <HAL_RCC_OscConfig+0x4fc>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fc fcc2 	bl	8001e68 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc fcbe 	bl	8001e68 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e020      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x498>
 8005506:	e018      	b.n	800553a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e013      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_OscConfig+0x4f4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	429a      	cmp	r2, r3
 8005526:	d106      	bne.n	8005536 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d001      	beq.n	800553a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	40007000 	.word	0x40007000
 800554c:	42420060 	.word	0x42420060

08005550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0d0      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005564:	4b6a      	ldr	r3, [pc, #424]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d910      	bls.n	8005594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005572:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 0207 	bic.w	r2, r3, #7
 800557a:	4965      	ldr	r1, [pc, #404]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0b8      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ac:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	494d      	ldr	r1, [pc, #308]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d040      	beq.n	8005670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d115      	bne.n	800562e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e07f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560e:	4b41      	ldr	r3, [pc, #260]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e073      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561e:	4b3d      	ldr	r3, [pc, #244]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e06b      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800562e:	4b39      	ldr	r3, [pc, #228]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f023 0203 	bic.w	r2, r3, #3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4936      	ldr	r1, [pc, #216]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005640:	f7fc fc12 	bl	8001e68 <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005646:	e00a      	b.n	800565e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fc fc0e 	bl	8001e68 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	; 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e053      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	4b2d      	ldr	r3, [pc, #180]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 020c 	and.w	r2, r3, #12
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	429a      	cmp	r2, r3
 800566e:	d1eb      	bne.n	8005648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005670:	4b27      	ldr	r3, [pc, #156]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d210      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b24      	ldr	r3, [pc, #144]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 0207 	bic.w	r2, r3, #7
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <HAL_RCC_ClockConfig+0x1c0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e032      	b.n	8005706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4916      	ldr	r1, [pc, #88]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056de:	f000 f821 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_ClockConfig+0x1c4>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <HAL_RCC_ClockConfig+0x1c8>)
 80056f0:	5ccb      	ldrb	r3, [r1, r3]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1cc>)
 80056f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1d0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fb70 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40022000 	.word	0x40022000
 8005714:	40021000 	.word	0x40021000
 8005718:	080082ec 	.word	0x080082ec
 800571c:	20000004 	.word	0x20000004
 8005720:	20000008 	.word	0x20000008

08005724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b04      	cmp	r3, #4
 800574c:	d002      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x30>
 800574e:	2b08      	cmp	r3, #8
 8005750:	d003      	beq.n	800575a <HAL_RCC_GetSysClockFreq+0x36>
 8005752:	e027      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005756:	613b      	str	r3, [r7, #16]
      break;
 8005758:	e027      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	0c9b      	lsrs	r3, r3, #18
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	4a17      	ldr	r2, [pc, #92]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005764:	5cd3      	ldrb	r3, [r2, r3]
 8005766:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d010      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	0c5b      	lsrs	r3, r3, #17
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800577e:	5cd3      	ldrb	r3, [r2, r3]
 8005780:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a0d      	ldr	r2, [pc, #52]	; (80057bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005786:	fb02 f203 	mul.w	r2, r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e004      	b.n	800579e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	613b      	str	r3, [r7, #16]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetSysClockFreq+0x98>)
 80057a6:	613b      	str	r3, [r7, #16]
      break;
 80057a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057aa:	693b      	ldr	r3, [r7, #16]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000
 80057bc:	007a1200 	.word	0x007a1200
 80057c0:	08008304 	.word	0x08008304
 80057c4:	08008314 	.word	0x08008314
 80057c8:	003d0900 	.word	0x003d0900

080057cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d0:	4b02      	ldr	r3, [pc, #8]	; (80057dc <HAL_RCC_GetHCLKFreq+0x10>)
 80057d2:	681b      	ldr	r3, [r3, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	20000004 	.word	0x20000004

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e4:	f7ff fff2 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4903      	ldr	r1, [pc, #12]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	080082fc 	.word	0x080082fc

08005808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800580c:	f7ff ffde 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	0adb      	lsrs	r3, r3, #11
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	; (800582c <HAL_RCC_GetPCLK2Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000
 800582c:	080082fc 	.word	0x080082fc

08005830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <RCC_Delay+0x34>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <RCC_Delay+0x38>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	0a5b      	lsrs	r3, r3, #9
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800584c:	bf00      	nop
  }
  while (Delay --);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1e5a      	subs	r2, r3, #1
 8005852:	60fa      	str	r2, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f9      	bne.n	800584c <RCC_Delay+0x1c>
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	20000004 	.word	0x20000004
 8005868:	10624dd3 	.word	0x10624dd3

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e041      	b.n	8005902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc f968 	bl	8001b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 fa5c 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d001      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e03a      	b.n	800599a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_TIM_Base_Start_IT+0x98>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x58>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594e:	d009      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x58>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x58>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a13      	ldr	r2, [pc, #76]	; (80059ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d111      	bne.n	8005988 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b06      	cmp	r3, #6
 8005974:	d010      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005986:	e007      	b.n	8005998 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800

080059b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d020      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f998 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f98b 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f99a 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0204 	mvn.w	r2, #4
 8005a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f972 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f965 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f974 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0208 	mvn.w	r2, #8
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2204      	movs	r2, #4
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f94c 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f93f 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f94e 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0210 	mvn.w	r2, #16
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2208      	movs	r2, #8
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f926 	bl	8005d30 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f919 	bl	8005d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f928 	bl	8005d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0201 	mvn.w	r2, #1
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fb ff28 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa7f 	bl	800603e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8f8 	bl	8005d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0220 	mvn.w	r2, #32
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa52 	bl	800602c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_TIM_ConfigClockSource+0x1c>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e0b4      	b.n	8005d16 <HAL_TIM_ConfigClockSource+0x186>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be4:	d03e      	beq.n	8005c64 <HAL_TIM_ConfigClockSource+0xd4>
 8005be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bea:	f200 8087 	bhi.w	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	f000 8086 	beq.w	8005d02 <HAL_TIM_ConfigClockSource+0x172>
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d87f      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b70      	cmp	r3, #112	; 0x70
 8005bfe:	d01a      	beq.n	8005c36 <HAL_TIM_ConfigClockSource+0xa6>
 8005c00:	2b70      	cmp	r3, #112	; 0x70
 8005c02:	d87b      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b60      	cmp	r3, #96	; 0x60
 8005c06:	d050      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x11a>
 8005c08:	2b60      	cmp	r3, #96	; 0x60
 8005c0a:	d877      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b50      	cmp	r3, #80	; 0x50
 8005c0e:	d03c      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0xfa>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d873      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d058      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x13a>
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d86f      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d064      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c20:	2b30      	cmp	r3, #48	; 0x30
 8005c22:	d86b      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d060      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d867      	bhi.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05c      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d05a      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x15a>
 8005c34:	e062      	b.n	8005cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	6899      	ldr	r1, [r3, #8]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f000 f974 	bl	8005f32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	609a      	str	r2, [r3, #8]
      break;
 8005c62:	e04f      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6899      	ldr	r1, [r3, #8]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f000 f95d 	bl	8005f32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c86:	609a      	str	r2, [r3, #8]
      break;
 8005c88:	e03c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f000 f8d4 	bl	8005e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2150      	movs	r1, #80	; 0x50
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 f92b 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005ca8:	e02c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f000 f8f2 	bl	8005ea0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2160      	movs	r1, #96	; 0x60
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 f91b 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005cc8:	e01c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 f8b4 	bl	8005e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2140      	movs	r1, #64	; 0x40
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f90b 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e00c      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f000 f902 	bl	8005efe <TIM_ITRx_SetConfig>
      break;
 8005cfa:	e003      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e000      	b.n	8005d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr
	...

08005d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a2f      	ldr	r2, [pc, #188]	; (8005e38 <TIM_Base_SetConfig+0xd0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_Base_SetConfig+0x30>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d007      	beq.n	8005d98 <TIM_Base_SetConfig+0x30>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <TIM_Base_SetConfig+0xd4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_Base_SetConfig+0x30>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <TIM_Base_SetConfig+0xd8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d108      	bne.n	8005daa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <TIM_Base_SetConfig+0xd0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_Base_SetConfig+0x62>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d007      	beq.n	8005dca <TIM_Base_SetConfig+0x62>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <TIM_Base_SetConfig+0xd4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_Base_SetConfig+0x62>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <TIM_Base_SetConfig+0xd8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a0d      	ldr	r2, [pc, #52]	; (8005e38 <TIM_Base_SetConfig+0xd0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f023 0201 	bic.w	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]
  }
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800

08005e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0201 	bic.w	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 030a 	bic.w	r3, r3, #10
 8005e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0210 	bic.w	r2, r3, #16
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	031b      	lsls	r3, r3, #12
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr

08005efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f043 0307 	orr.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr

08005f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b087      	sub	sp, #28
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	021a      	lsls	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e046      	b.n	8006016 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a16      	ldr	r2, [pc, #88]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00e      	beq.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d009      	beq.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a10      	ldr	r2, [pc, #64]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10c      	bne.n	8006004 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800

0800602c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e042      	b.n	80060e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fb fd9a 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2224      	movs	r2, #36	; 0x24
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fc7f 	bl	8006998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b0ba      	sub	sp, #232	; 0xe8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800612e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10f      	bne.n	8006156 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_UART_IRQHandler+0x66>
 8006142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb63 	bl	800681a <UART_Receive_IT>
      return;
 8006154:	e25b      	b.n	800660e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80de 	beq.w	800631c <HAL_UART_IRQHandler+0x22c>
 8006160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800616c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006170:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80d1 	beq.w	800631c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_UART_IRQHandler+0xae>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	f043 0201 	orr.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800619e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <HAL_UART_IRQHandler+0xd2>
 80061aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f043 0202 	orr.w	r2, r3, #2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_UART_IRQHandler+0xf6>
 80061ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f043 0204 	orr.w	r2, r3, #4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d011      	beq.n	8006216 <HAL_UART_IRQHandler+0x126>
 80061f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d105      	bne.n	800620a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f043 0208 	orr.w	r2, r3, #8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 81f2 	beq.w	8006604 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_UART_IRQHandler+0x14e>
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 faee 	bl	800681a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <HAL_UART_IRQHandler+0x17a>
 8006262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04f      	beq.n	800630a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f9f8 	bl	8006660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d041      	beq.n	8006302 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3314      	adds	r3, #20
 80062a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1d9      	bne.n	800627e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d013      	beq.n	80062fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d6:	4a7e      	ldr	r2, [pc, #504]	; (80064d0 <HAL_UART_IRQHandler+0x3e0>)
 80062d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fb ff38 	bl	8002154 <HAL_DMA_Abort_IT>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d016      	beq.n	8006318 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	e00e      	b.n	8006318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f99c 	bl	8006638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	e00a      	b.n	8006318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f998 	bl	8006638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006308:	e006      	b.n	8006318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f994 	bl	8006638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006316:	e175      	b.n	8006604 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	bf00      	nop
    return;
 800631a:	e173      	b.n	8006604 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	2b01      	cmp	r3, #1
 8006322:	f040 814f 	bne.w	80065c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8148 	beq.w	80065c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8141 	beq.w	80065c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60bb      	str	r3, [r7, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 80b6 	beq.w	80064d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006374:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8145 	beq.w	8006608 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006386:	429a      	cmp	r2, r3
 8006388:	f080 813e 	bcs.w	8006608 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006392:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b20      	cmp	r3, #32
 800639c:	f000 8088 	beq.w	80064b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1d9      	bne.n	80063a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3314      	adds	r3, #20
 80063f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006410:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006414:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006418:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e1      	bne.n	80063ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800643a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800644c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800644e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006452:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800645a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e3      	bne.n	8006428 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800647e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006480:	f023 0310 	bic.w	r3, r3, #16
 8006484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006492:	65ba      	str	r2, [r7, #88]	; 0x58
 8006494:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e3      	bne.n	800646e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fb fe17 	bl	80020de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8bf 	bl	800664a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064cc:	e09c      	b.n	8006608 <HAL_UART_IRQHandler+0x518>
 80064ce:	bf00      	nop
 80064d0:	08006725 	.word	0x08006725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 808e 	beq.w	800660c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8089 	beq.w	800660c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800651e:	647a      	str	r2, [r7, #68]	; 0x44
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	623b      	str	r3, [r7, #32]
   return(result);
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f023 0301 	bic.w	r3, r3, #1
 8006548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3314      	adds	r3, #20
 8006552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006556:	633a      	str	r2, [r7, #48]	; 0x30
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	60fb      	str	r3, [r7, #12]
   return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0310 	bic.w	r3, r3, #16
 800658e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	69b9      	ldr	r1, [r7, #24]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	617b      	str	r3, [r7, #20]
   return(result);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e3      	bne.n	8006578 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f844 	bl	800664a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065c2:	e023      	b.n	800660c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_UART_IRQHandler+0x4f4>
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8b5 	bl	800674c <UART_Transmit_IT>
    return;
 80065e2:	e014      	b.n	800660e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00e      	beq.n	800660e <HAL_UART_IRQHandler+0x51e>
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f8f4 	bl	80067ea <UART_EndTransmit_IT>
    return;
 8006602:	e004      	b.n	800660e <HAL_UART_IRQHandler+0x51e>
    return;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <HAL_UART_IRQHandler+0x51e>
      return;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <HAL_UART_IRQHandler+0x51e>
      return;
 800660c:	bf00      	nop
  }
}
 800660e:	37e8      	adds	r7, #232	; 0xe8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b095      	sub	sp, #84	; 0x54
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800667e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006688:	643a      	str	r2, [r7, #64]	; 0x40
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800668e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006690:	e841 2300 	strex	r3, r2, [r1]
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e5      	bne.n	8006668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3314      	adds	r3, #20
 80066a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3314      	adds	r3, #20
 80066ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e5      	bne.n	800669c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d119      	bne.n	800670c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f023 0310 	bic.w	r3, r3, #16
 80066ee:	647b      	str	r3, [r7, #68]	; 0x44
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	330c      	adds	r3, #12
 80066f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f8:	61ba      	str	r2, [r7, #24]
 80066fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6979      	ldr	r1, [r7, #20]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	613b      	str	r3, [r7, #16]
   return(result);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
}
 800671a:	bf00      	nop
 800671c:	3754      	adds	r7, #84	; 0x54
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff7a 	bl	8006638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b21      	cmp	r3, #33	; 0x21
 800675e:	d13e      	bne.n	80067de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d114      	bne.n	8006794 <UART_Transmit_IT+0x48>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d110      	bne.n	8006794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	1c9a      	adds	r2, r3, #2
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]
 8006792:	e008      	b.n	80067a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	1c59      	adds	r1, r3, #1
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6211      	str	r1, [r2, #32]
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	4619      	mov	r1, r3
 80067b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	e000      	b.n	80067e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067de:	2302      	movs	r3, #2
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ff02 	bl	8006614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b08c      	sub	sp, #48	; 0x30
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b22      	cmp	r3, #34	; 0x22
 800682c:	f040 80ae 	bne.w	800698c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006838:	d117      	bne.n	800686a <UART_Receive_IT+0x50>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d113      	bne.n	800686a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006858:	b29a      	uxth	r2, r3
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	1c9a      	adds	r2, r3, #2
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28
 8006868:	e026      	b.n	80068b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687c:	d007      	beq.n	800688e <UART_Receive_IT+0x74>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <UART_Receive_IT+0x82>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	b2da      	uxtb	r2, r3
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e008      	b.n	80068ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	4619      	mov	r1, r3
 80068c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d15d      	bne.n	8006988 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0220 	bic.w	r2, r2, #32
 80068da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0201 	bic.w	r2, r2, #1
 80068fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	2b01      	cmp	r3, #1
 8006910:	d135      	bne.n	800697e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	613b      	str	r3, [r7, #16]
   return(result);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006938:	623a      	str	r2, [r7, #32]
 800693a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	69f9      	ldr	r1, [r7, #28]
 800693e:	6a3a      	ldr	r2, [r7, #32]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	61bb      	str	r3, [r7, #24]
   return(result);
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e5      	bne.n	8006918 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b10      	cmp	r3, #16
 8006958:	d10a      	bne.n	8006970 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fe67 	bl	800664a <HAL_UARTEx_RxEventCallback>
 800697c:	e002      	b.n	8006984 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe51 	bl	8006626 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	e002      	b.n	800698e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	3730      	adds	r7, #48	; 0x30
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80069d2:	f023 030c 	bic.w	r3, r3, #12
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	430b      	orrs	r3, r1
 80069de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2c      	ldr	r2, [pc, #176]	; (8006aac <UART_SetConfig+0x114>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d103      	bne.n	8006a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a00:	f7fe ff02 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	e002      	b.n	8006a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fe feea 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	009a      	lsls	r2, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	4a22      	ldr	r2, [pc, #136]	; (8006ab0 <UART_SetConfig+0x118>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	0119      	lsls	r1, r3, #4
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009a      	lsls	r2, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <UART_SetConfig+0x118>)
 8006a46:	fba3 0302 	umull	r0, r3, r3, r2
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	2064      	movs	r0, #100	; 0x64
 8006a4e:	fb00 f303 	mul.w	r3, r0, r3
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	3332      	adds	r3, #50	; 0x32
 8006a58:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <UART_SetConfig+0x118>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a64:	4419      	add	r1, r3
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009a      	lsls	r2, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a7c:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <UART_SetConfig+0x118>)
 8006a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a82:	095b      	lsrs	r3, r3, #5
 8006a84:	2064      	movs	r0, #100	; 0x64
 8006a86:	fb00 f303 	mul.w	r3, r0, r3
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	3332      	adds	r3, #50	; 0x32
 8006a90:	4a07      	ldr	r2, [pc, #28]	; (8006ab0 <UART_SetConfig+0x118>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40013800 	.word	0x40013800
 8006ab0:	51eb851f 	.word	0x51eb851f

08006ab4 <__errno>:
 8006ab4:	4b01      	ldr	r3, [pc, #4]	; (8006abc <__errno+0x8>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000010 	.word	0x20000010

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	4d0c      	ldr	r5, [pc, #48]	; (8006af8 <__libc_init_array+0x38>)
 8006ac6:	4c0d      	ldr	r4, [pc, #52]	; (8006afc <__libc_init_array+0x3c>)
 8006ac8:	1b64      	subs	r4, r4, r5
 8006aca:	10a4      	asrs	r4, r4, #2
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	f001 fbec 	bl	80082ac <_init>
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4d0a      	ldr	r5, [pc, #40]	; (8006b00 <__libc_init_array+0x40>)
 8006ad8:	4c0a      	ldr	r4, [pc, #40]	; (8006b04 <__libc_init_array+0x44>)
 8006ada:	1b64      	subs	r4, r4, r5
 8006adc:	10a4      	asrs	r4, r4, #2
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	08008390 	.word	0x08008390
 8006afc:	08008390 	.word	0x08008390
 8006b00:	08008390 	.word	0x08008390
 8006b04:	08008394 	.word	0x08008394

08006b08 <memset>:
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4402      	add	r2, r0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d100      	bne.n	8006b12 <memset+0xa>
 8006b10:	4770      	bx	lr
 8006b12:	f803 1b01 	strb.w	r1, [r3], #1
 8006b16:	e7f9      	b.n	8006b0c <memset+0x4>

08006b18 <siprintf>:
 8006b18:	b40e      	push	{r1, r2, r3}
 8006b1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b1e:	b500      	push	{lr}
 8006b20:	b09c      	sub	sp, #112	; 0x70
 8006b22:	ab1d      	add	r3, sp, #116	; 0x74
 8006b24:	9002      	str	r0, [sp, #8]
 8006b26:	9006      	str	r0, [sp, #24]
 8006b28:	9107      	str	r1, [sp, #28]
 8006b2a:	9104      	str	r1, [sp, #16]
 8006b2c:	4808      	ldr	r0, [pc, #32]	; (8006b50 <siprintf+0x38>)
 8006b2e:	4909      	ldr	r1, [pc, #36]	; (8006b54 <siprintf+0x3c>)
 8006b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b34:	9105      	str	r1, [sp, #20]
 8006b36:	6800      	ldr	r0, [r0, #0]
 8006b38:	a902      	add	r1, sp, #8
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	f000 f868 	bl	8006c10 <_svfiprintf_r>
 8006b40:	2200      	movs	r2, #0
 8006b42:	9b02      	ldr	r3, [sp, #8]
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	b01c      	add	sp, #112	; 0x70
 8006b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b4c:	b003      	add	sp, #12
 8006b4e:	4770      	bx	lr
 8006b50:	20000010 	.word	0x20000010
 8006b54:	ffff0208 	.word	0xffff0208

08006b58 <__ssputs_r>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	688e      	ldr	r6, [r1, #8]
 8006b5e:	4682      	mov	sl, r0
 8006b60:	429e      	cmp	r6, r3
 8006b62:	460c      	mov	r4, r1
 8006b64:	4690      	mov	r8, r2
 8006b66:	461f      	mov	r7, r3
 8006b68:	d838      	bhi.n	8006bdc <__ssputs_r+0x84>
 8006b6a:	898a      	ldrh	r2, [r1, #12]
 8006b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b70:	d032      	beq.n	8006bd8 <__ssputs_r+0x80>
 8006b72:	6825      	ldr	r5, [r4, #0]
 8006b74:	6909      	ldr	r1, [r1, #16]
 8006b76:	3301      	adds	r3, #1
 8006b78:	eba5 0901 	sub.w	r9, r5, r1
 8006b7c:	6965      	ldr	r5, [r4, #20]
 8006b7e:	444b      	add	r3, r9
 8006b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	429d      	cmp	r5, r3
 8006b8c:	bf38      	it	cc
 8006b8e:	461d      	movcc	r5, r3
 8006b90:	0553      	lsls	r3, r2, #21
 8006b92:	d531      	bpl.n	8006bf8 <__ssputs_r+0xa0>
 8006b94:	4629      	mov	r1, r5
 8006b96:	f000 fb53 	bl	8007240 <_malloc_r>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	b950      	cbnz	r0, 8006bb4 <__ssputs_r+0x5c>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	f8ca 3000 	str.w	r3, [sl]
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	6921      	ldr	r1, [r4, #16]
 8006bb8:	f000 face 	bl	8007158 <memcpy>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	6126      	str	r6, [r4, #16]
 8006bca:	444e      	add	r6, r9
 8006bcc:	6026      	str	r6, [r4, #0]
 8006bce:	463e      	mov	r6, r7
 8006bd0:	6165      	str	r5, [r4, #20]
 8006bd2:	eba5 0509 	sub.w	r5, r5, r9
 8006bd6:	60a5      	str	r5, [r4, #8]
 8006bd8:	42be      	cmp	r6, r7
 8006bda:	d900      	bls.n	8006bde <__ssputs_r+0x86>
 8006bdc:	463e      	mov	r6, r7
 8006bde:	4632      	mov	r2, r6
 8006be0:	4641      	mov	r1, r8
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	f000 fac6 	bl	8007174 <memmove>
 8006be8:	68a3      	ldr	r3, [r4, #8]
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	1b9b      	subs	r3, r3, r6
 8006bee:	4432      	add	r2, r6
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	e7db      	b.n	8006bb0 <__ssputs_r+0x58>
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	f000 fb7b 	bl	80072f4 <_realloc_r>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1e1      	bne.n	8006bc8 <__ssputs_r+0x70>
 8006c04:	4650      	mov	r0, sl
 8006c06:	6921      	ldr	r1, [r4, #16]
 8006c08:	f000 face 	bl	80071a8 <_free_r>
 8006c0c:	e7c7      	b.n	8006b9e <__ssputs_r+0x46>
	...

08006c10 <_svfiprintf_r>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	4698      	mov	r8, r3
 8006c16:	898b      	ldrh	r3, [r1, #12]
 8006c18:	4607      	mov	r7, r0
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	4614      	mov	r4, r2
 8006c20:	b09d      	sub	sp, #116	; 0x74
 8006c22:	d50e      	bpl.n	8006c42 <_svfiprintf_r+0x32>
 8006c24:	690b      	ldr	r3, [r1, #16]
 8006c26:	b963      	cbnz	r3, 8006c42 <_svfiprintf_r+0x32>
 8006c28:	2140      	movs	r1, #64	; 0x40
 8006c2a:	f000 fb09 	bl	8007240 <_malloc_r>
 8006c2e:	6028      	str	r0, [r5, #0]
 8006c30:	6128      	str	r0, [r5, #16]
 8006c32:	b920      	cbnz	r0, 8006c3e <_svfiprintf_r+0x2e>
 8006c34:	230c      	movs	r3, #12
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	e0d1      	b.n	8006de2 <_svfiprintf_r+0x1d2>
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	616b      	str	r3, [r5, #20]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	2320      	movs	r3, #32
 8006c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c4c:	2330      	movs	r3, #48	; 0x30
 8006c4e:	f04f 0901 	mov.w	r9, #1
 8006c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006dfc <_svfiprintf_r+0x1ec>
 8006c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c5e:	4623      	mov	r3, r4
 8006c60:	469a      	mov	sl, r3
 8006c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c66:	b10a      	cbz	r2, 8006c6c <_svfiprintf_r+0x5c>
 8006c68:	2a25      	cmp	r2, #37	; 0x25
 8006c6a:	d1f9      	bne.n	8006c60 <_svfiprintf_r+0x50>
 8006c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c70:	d00b      	beq.n	8006c8a <_svfiprintf_r+0x7a>
 8006c72:	465b      	mov	r3, fp
 8006c74:	4622      	mov	r2, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ff6d 	bl	8006b58 <__ssputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f000 80aa 	beq.w	8006dd8 <_svfiprintf_r+0x1c8>
 8006c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c86:	445a      	add	r2, fp
 8006c88:	9209      	str	r2, [sp, #36]	; 0x24
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80a2 	beq.w	8006dd8 <_svfiprintf_r+0x1c8>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006caa:	931a      	str	r3, [sp, #104]	; 0x68
 8006cac:	4654      	mov	r4, sl
 8006cae:	2205      	movs	r2, #5
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	4851      	ldr	r0, [pc, #324]	; (8006dfc <_svfiprintf_r+0x1ec>)
 8006cb6:	f000 fa41 	bl	800713c <memchr>
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_svfiprintf_r+0xe6>
 8006cbe:	06d0      	lsls	r0, r2, #27
 8006cc0:	bf44      	itt	mi
 8006cc2:	2320      	movmi	r3, #32
 8006cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc8:	0711      	lsls	r1, r2, #28
 8006cca:	bf44      	itt	mi
 8006ccc:	232b      	movmi	r3, #43	; 0x2b
 8006cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd8:	d015      	beq.n	8006d06 <_svfiprintf_r+0xf6>
 8006cda:	4654      	mov	r4, sl
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cea:	3b30      	subs	r3, #48	; 0x30
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d94e      	bls.n	8006d8e <_svfiprintf_r+0x17e>
 8006cf0:	b1b0      	cbz	r0, 8006d20 <_svfiprintf_r+0x110>
 8006cf2:	9207      	str	r2, [sp, #28]
 8006cf4:	e014      	b.n	8006d20 <_svfiprintf_r+0x110>
 8006cf6:	eba0 0308 	sub.w	r3, r0, r8
 8006cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	46a2      	mov	sl, r4
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	e7d2      	b.n	8006cac <_svfiprintf_r+0x9c>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d19      	adds	r1, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9103      	str	r1, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbb      	ittet	lt
 8006d12:	425b      	neglt	r3, r3
 8006d14:	f042 0202 	orrlt.w	r2, r2, #2
 8006d18:	9307      	strge	r3, [sp, #28]
 8006d1a:	9307      	strlt	r3, [sp, #28]
 8006d1c:	bfb8      	it	lt
 8006d1e:	9204      	strlt	r2, [sp, #16]
 8006d20:	7823      	ldrb	r3, [r4, #0]
 8006d22:	2b2e      	cmp	r3, #46	; 0x2e
 8006d24:	d10c      	bne.n	8006d40 <_svfiprintf_r+0x130>
 8006d26:	7863      	ldrb	r3, [r4, #1]
 8006d28:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2a:	d135      	bne.n	8006d98 <_svfiprintf_r+0x188>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	3402      	adds	r4, #2
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9203      	str	r2, [sp, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfb8      	it	lt
 8006d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d3e:	9305      	str	r3, [sp, #20]
 8006d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e0c <_svfiprintf_r+0x1fc>
 8006d44:	2203      	movs	r2, #3
 8006d46:	4650      	mov	r0, sl
 8006d48:	7821      	ldrb	r1, [r4, #0]
 8006d4a:	f000 f9f7 	bl	800713c <memchr>
 8006d4e:	b140      	cbz	r0, 8006d62 <_svfiprintf_r+0x152>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	eba0 000a 	sub.w	r0, r0, sl
 8006d56:	fa03 f000 	lsl.w	r0, r3, r0
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	3401      	adds	r4, #1
 8006d5e:	4303      	orrs	r3, r0
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	2206      	movs	r2, #6
 8006d68:	4825      	ldr	r0, [pc, #148]	; (8006e00 <_svfiprintf_r+0x1f0>)
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d6e:	f000 f9e5 	bl	800713c <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d038      	beq.n	8006de8 <_svfiprintf_r+0x1d8>
 8006d76:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <_svfiprintf_r+0x1f4>)
 8006d78:	bb1b      	cbnz	r3, 8006dc2 <_svfiprintf_r+0x1b2>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	3308      	adds	r3, #8
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	4433      	add	r3, r6
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	e767      	b.n	8006c5e <_svfiprintf_r+0x4e>
 8006d8e:	460c      	mov	r4, r1
 8006d90:	2001      	movs	r0, #1
 8006d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d96:	e7a5      	b.n	8006ce4 <_svfiprintf_r+0xd4>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f04f 0c0a 	mov.w	ip, #10
 8006d9e:	4619      	mov	r1, r3
 8006da0:	3401      	adds	r4, #1
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006daa:	3a30      	subs	r2, #48	; 0x30
 8006dac:	2a09      	cmp	r2, #9
 8006dae:	d903      	bls.n	8006db8 <_svfiprintf_r+0x1a8>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c5      	beq.n	8006d40 <_svfiprintf_r+0x130>
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	e7c3      	b.n	8006d40 <_svfiprintf_r+0x130>
 8006db8:	4604      	mov	r4, r0
 8006dba:	2301      	movs	r3, #1
 8006dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dc0:	e7f0      	b.n	8006da4 <_svfiprintf_r+0x194>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4638      	mov	r0, r7
 8006dca:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <_svfiprintf_r+0x1f8>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	f3af 8000 	nop.w
 8006dd2:	1c42      	adds	r2, r0, #1
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	d1d6      	bne.n	8006d86 <_svfiprintf_r+0x176>
 8006dd8:	89ab      	ldrh	r3, [r5, #12]
 8006dda:	065b      	lsls	r3, r3, #25
 8006ddc:	f53f af2c 	bmi.w	8006c38 <_svfiprintf_r+0x28>
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	b01d      	add	sp, #116	; 0x74
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	462a      	mov	r2, r5
 8006dee:	4638      	mov	r0, r7
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <_svfiprintf_r+0x1f8>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	f000 f87c 	bl	8006ef0 <_printf_i>
 8006df8:	e7eb      	b.n	8006dd2 <_svfiprintf_r+0x1c2>
 8006dfa:	bf00      	nop
 8006dfc:	08008316 	.word	0x08008316
 8006e00:	08008320 	.word	0x08008320
 8006e04:	00000000 	.word	0x00000000
 8006e08:	08006b59 	.word	0x08006b59
 8006e0c:	0800831c 	.word	0x0800831c

08006e10 <_printf_common>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	4616      	mov	r6, r2
 8006e16:	4699      	mov	r9, r3
 8006e18:	688a      	ldr	r2, [r1, #8]
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfb8      	it	lt
 8006e22:	4613      	movlt	r3, r2
 8006e24:	6033      	str	r3, [r6, #0]
 8006e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e30:	b10a      	cbz	r2, 8006e36 <_printf_common+0x26>
 8006e32:	3301      	adds	r3, #1
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	0699      	lsls	r1, r3, #26
 8006e3a:	bf42      	ittt	mi
 8006e3c:	6833      	ldrmi	r3, [r6, #0]
 8006e3e:	3302      	addmi	r3, #2
 8006e40:	6033      	strmi	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	f015 0506 	ands.w	r5, r5, #6
 8006e48:	d106      	bne.n	8006e58 <_printf_common+0x48>
 8006e4a:	f104 0a19 	add.w	sl, r4, #25
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	6832      	ldr	r2, [r6, #0]
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dc28      	bgt.n	8006eaa <_printf_common+0x9a>
 8006e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e5c:	1e13      	subs	r3, r2, #0
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	bf18      	it	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	0692      	lsls	r2, r2, #26
 8006e66:	d42d      	bmi.n	8006ec4 <_printf_common+0xb4>
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e70:	47c0      	blx	r8
 8006e72:	3001      	adds	r0, #1
 8006e74:	d020      	beq.n	8006eb8 <_printf_common+0xa8>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	68e5      	ldr	r5, [r4, #12]
 8006e7a:	f003 0306 	and.w	r3, r3, #6
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	bf18      	it	ne
 8006e82:	2500      	movne	r5, #0
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	f04f 0600 	mov.w	r6, #0
 8006e8a:	68a3      	ldr	r3, [r4, #8]
 8006e8c:	bf08      	it	eq
 8006e8e:	1aad      	subeq	r5, r5, r2
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	bf08      	it	eq
 8006e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	bfc4      	itt	gt
 8006e9c:	1a9b      	subgt	r3, r3, r2
 8006e9e:	18ed      	addgt	r5, r5, r3
 8006ea0:	341a      	adds	r4, #26
 8006ea2:	42b5      	cmp	r5, r6
 8006ea4:	d11a      	bne.n	8006edc <_printf_common+0xcc>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e008      	b.n	8006ebc <_printf_common+0xac>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4649      	mov	r1, r9
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	47c0      	blx	r8
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d103      	bne.n	8006ec0 <_printf_common+0xb0>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	e7c4      	b.n	8006e4e <_printf_common+0x3e>
 8006ec4:	2030      	movs	r0, #48	; 0x30
 8006ec6:	18e1      	adds	r1, r4, r3
 8006ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ed2:	4422      	add	r2, r4
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eda:	e7c5      	b.n	8006e68 <_printf_common+0x58>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c0      	blx	r8
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d0e6      	beq.n	8006eb8 <_printf_common+0xa8>
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7d9      	b.n	8006ea2 <_printf_common+0x92>
	...

08006ef0 <_printf_i>:
 8006ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	7e27      	ldrb	r7, [r4, #24]
 8006ef8:	4691      	mov	r9, r2
 8006efa:	2f78      	cmp	r7, #120	; 0x78
 8006efc:	4680      	mov	r8, r0
 8006efe:	469a      	mov	sl, r3
 8006f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f06:	d807      	bhi.n	8006f18 <_printf_i+0x28>
 8006f08:	2f62      	cmp	r7, #98	; 0x62
 8006f0a:	d80a      	bhi.n	8006f22 <_printf_i+0x32>
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	f000 80d9 	beq.w	80070c4 <_printf_i+0x1d4>
 8006f12:	2f58      	cmp	r7, #88	; 0x58
 8006f14:	f000 80a4 	beq.w	8007060 <_printf_i+0x170>
 8006f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f20:	e03a      	b.n	8006f98 <_printf_i+0xa8>
 8006f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f26:	2b15      	cmp	r3, #21
 8006f28:	d8f6      	bhi.n	8006f18 <_printf_i+0x28>
 8006f2a:	a001      	add	r0, pc, #4	; (adr r0, 8006f30 <_printf_i+0x40>)
 8006f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f30:	08006f89 	.word	0x08006f89
 8006f34:	08006f9d 	.word	0x08006f9d
 8006f38:	08006f19 	.word	0x08006f19
 8006f3c:	08006f19 	.word	0x08006f19
 8006f40:	08006f19 	.word	0x08006f19
 8006f44:	08006f19 	.word	0x08006f19
 8006f48:	08006f9d 	.word	0x08006f9d
 8006f4c:	08006f19 	.word	0x08006f19
 8006f50:	08006f19 	.word	0x08006f19
 8006f54:	08006f19 	.word	0x08006f19
 8006f58:	08006f19 	.word	0x08006f19
 8006f5c:	080070ab 	.word	0x080070ab
 8006f60:	08006fcd 	.word	0x08006fcd
 8006f64:	0800708d 	.word	0x0800708d
 8006f68:	08006f19 	.word	0x08006f19
 8006f6c:	08006f19 	.word	0x08006f19
 8006f70:	080070cd 	.word	0x080070cd
 8006f74:	08006f19 	.word	0x08006f19
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f19 	.word	0x08006f19
 8006f80:	08006f19 	.word	0x08006f19
 8006f84:	08007095 	.word	0x08007095
 8006f88:	680b      	ldr	r3, [r1, #0]
 8006f8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	600a      	str	r2, [r1, #0]
 8006f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0a4      	b.n	80070e6 <_printf_i+0x1f6>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	6808      	ldr	r0, [r1, #0]
 8006fa0:	062e      	lsls	r6, r5, #24
 8006fa2:	f100 0304 	add.w	r3, r0, #4
 8006fa6:	d50a      	bpl.n	8006fbe <_printf_i+0xce>
 8006fa8:	6805      	ldr	r5, [r0, #0]
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	da03      	bge.n	8006fb8 <_printf_i+0xc8>
 8006fb0:	232d      	movs	r3, #45	; 0x2d
 8006fb2:	426d      	negs	r5, r5
 8006fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb8:	230a      	movs	r3, #10
 8006fba:	485e      	ldr	r0, [pc, #376]	; (8007134 <_printf_i+0x244>)
 8006fbc:	e019      	b.n	8006ff2 <_printf_i+0x102>
 8006fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006fc2:	6805      	ldr	r5, [r0, #0]
 8006fc4:	600b      	str	r3, [r1, #0]
 8006fc6:	bf18      	it	ne
 8006fc8:	b22d      	sxthne	r5, r5
 8006fca:	e7ef      	b.n	8006fac <_printf_i+0xbc>
 8006fcc:	680b      	ldr	r3, [r1, #0]
 8006fce:	6825      	ldr	r5, [r4, #0]
 8006fd0:	1d18      	adds	r0, r3, #4
 8006fd2:	6008      	str	r0, [r1, #0]
 8006fd4:	0628      	lsls	r0, r5, #24
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0xec>
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0xf2>
 8006fdc:	0669      	lsls	r1, r5, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0xe8>
 8006fe0:	881d      	ldrh	r5, [r3, #0]
 8006fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2308      	moveq	r3, #8
 8006fe8:	230a      	movne	r3, #10
 8006fea:	4852      	ldr	r0, [pc, #328]	; (8007134 <_printf_i+0x244>)
 8006fec:	2100      	movs	r1, #0
 8006fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ff2:	6866      	ldr	r6, [r4, #4]
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	bfa8      	it	ge
 8006ff8:	6821      	ldrge	r1, [r4, #0]
 8006ffa:	60a6      	str	r6, [r4, #8]
 8006ffc:	bfa4      	itt	ge
 8006ffe:	f021 0104 	bicge.w	r1, r1, #4
 8007002:	6021      	strge	r1, [r4, #0]
 8007004:	b90d      	cbnz	r5, 800700a <_printf_i+0x11a>
 8007006:	2e00      	cmp	r6, #0
 8007008:	d04d      	beq.n	80070a6 <_printf_i+0x1b6>
 800700a:	4616      	mov	r6, r2
 800700c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007010:	fb03 5711 	mls	r7, r3, r1, r5
 8007014:	5dc7      	ldrb	r7, [r0, r7]
 8007016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800701a:	462f      	mov	r7, r5
 800701c:	42bb      	cmp	r3, r7
 800701e:	460d      	mov	r5, r1
 8007020:	d9f4      	bls.n	800700c <_printf_i+0x11c>
 8007022:	2b08      	cmp	r3, #8
 8007024:	d10b      	bne.n	800703e <_printf_i+0x14e>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	07df      	lsls	r7, r3, #31
 800702a:	d508      	bpl.n	800703e <_printf_i+0x14e>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	6861      	ldr	r1, [r4, #4]
 8007030:	4299      	cmp	r1, r3
 8007032:	bfde      	ittt	le
 8007034:	2330      	movle	r3, #48	; 0x30
 8007036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800703a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800703e:	1b92      	subs	r2, r2, r6
 8007040:	6122      	str	r2, [r4, #16]
 8007042:	464b      	mov	r3, r9
 8007044:	4621      	mov	r1, r4
 8007046:	4640      	mov	r0, r8
 8007048:	f8cd a000 	str.w	sl, [sp]
 800704c:	aa03      	add	r2, sp, #12
 800704e:	f7ff fedf 	bl	8006e10 <_printf_common>
 8007052:	3001      	adds	r0, #1
 8007054:	d14c      	bne.n	80070f0 <_printf_i+0x200>
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	b004      	add	sp, #16
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	4834      	ldr	r0, [pc, #208]	; (8007134 <_printf_i+0x244>)
 8007062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007066:	680e      	ldr	r6, [r1, #0]
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	f856 5b04 	ldr.w	r5, [r6], #4
 800706e:	061f      	lsls	r7, r3, #24
 8007070:	600e      	str	r6, [r1, #0]
 8007072:	d514      	bpl.n	800709e <_printf_i+0x1ae>
 8007074:	07d9      	lsls	r1, r3, #31
 8007076:	bf44      	itt	mi
 8007078:	f043 0320 	orrmi.w	r3, r3, #32
 800707c:	6023      	strmi	r3, [r4, #0]
 800707e:	b91d      	cbnz	r5, 8007088 <_printf_i+0x198>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	f023 0320 	bic.w	r3, r3, #32
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	2310      	movs	r3, #16
 800708a:	e7af      	b.n	8006fec <_printf_i+0xfc>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f043 0320 	orr.w	r3, r3, #32
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	2378      	movs	r3, #120	; 0x78
 8007096:	4828      	ldr	r0, [pc, #160]	; (8007138 <_printf_i+0x248>)
 8007098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800709c:	e7e3      	b.n	8007066 <_printf_i+0x176>
 800709e:	065e      	lsls	r6, r3, #25
 80070a0:	bf48      	it	mi
 80070a2:	b2ad      	uxthmi	r5, r5
 80070a4:	e7e6      	b.n	8007074 <_printf_i+0x184>
 80070a6:	4616      	mov	r6, r2
 80070a8:	e7bb      	b.n	8007022 <_printf_i+0x132>
 80070aa:	680b      	ldr	r3, [r1, #0]
 80070ac:	6826      	ldr	r6, [r4, #0]
 80070ae:	1d1d      	adds	r5, r3, #4
 80070b0:	6960      	ldr	r0, [r4, #20]
 80070b2:	600d      	str	r5, [r1, #0]
 80070b4:	0635      	lsls	r5, r6, #24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	d501      	bpl.n	80070be <_printf_i+0x1ce>
 80070ba:	6018      	str	r0, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <_printf_i+0x1d4>
 80070be:	0671      	lsls	r1, r6, #25
 80070c0:	d5fb      	bpl.n	80070ba <_printf_i+0x1ca>
 80070c2:	8018      	strh	r0, [r3, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	4616      	mov	r6, r2
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	e7ba      	b.n	8007042 <_printf_i+0x152>
 80070cc:	680b      	ldr	r3, [r1, #0]
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	600a      	str	r2, [r1, #0]
 80070d2:	681e      	ldr	r6, [r3, #0]
 80070d4:	2100      	movs	r1, #0
 80070d6:	4630      	mov	r0, r6
 80070d8:	6862      	ldr	r2, [r4, #4]
 80070da:	f000 f82f 	bl	800713c <memchr>
 80070de:	b108      	cbz	r0, 80070e4 <_printf_i+0x1f4>
 80070e0:	1b80      	subs	r0, r0, r6
 80070e2:	6060      	str	r0, [r4, #4]
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	2300      	movs	r3, #0
 80070ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ee:	e7a8      	b.n	8007042 <_printf_i+0x152>
 80070f0:	4632      	mov	r2, r6
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	47d0      	blx	sl
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0ab      	beq.n	8007056 <_printf_i+0x166>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	079b      	lsls	r3, r3, #30
 8007102:	d413      	bmi.n	800712c <_printf_i+0x23c>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e7a4      	b.n	800705a <_printf_i+0x16a>
 8007110:	2301      	movs	r3, #1
 8007112:	4632      	mov	r2, r6
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	47d0      	blx	sl
 800711a:	3001      	adds	r0, #1
 800711c:	d09b      	beq.n	8007056 <_printf_i+0x166>
 800711e:	3501      	adds	r5, #1
 8007120:	68e3      	ldr	r3, [r4, #12]
 8007122:	9903      	ldr	r1, [sp, #12]
 8007124:	1a5b      	subs	r3, r3, r1
 8007126:	42ab      	cmp	r3, r5
 8007128:	dcf2      	bgt.n	8007110 <_printf_i+0x220>
 800712a:	e7eb      	b.n	8007104 <_printf_i+0x214>
 800712c:	2500      	movs	r5, #0
 800712e:	f104 0619 	add.w	r6, r4, #25
 8007132:	e7f5      	b.n	8007120 <_printf_i+0x230>
 8007134:	08008327 	.word	0x08008327
 8007138:	08008338 	.word	0x08008338

0800713c <memchr>:
 800713c:	4603      	mov	r3, r0
 800713e:	b510      	push	{r4, lr}
 8007140:	b2c9      	uxtb	r1, r1
 8007142:	4402      	add	r2, r0
 8007144:	4293      	cmp	r3, r2
 8007146:	4618      	mov	r0, r3
 8007148:	d101      	bne.n	800714e <memchr+0x12>
 800714a:	2000      	movs	r0, #0
 800714c:	e003      	b.n	8007156 <memchr+0x1a>
 800714e:	7804      	ldrb	r4, [r0, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	428c      	cmp	r4, r1
 8007154:	d1f6      	bne.n	8007144 <memchr+0x8>
 8007156:	bd10      	pop	{r4, pc}

08007158 <memcpy>:
 8007158:	440a      	add	r2, r1
 800715a:	4291      	cmp	r1, r2
 800715c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007160:	d100      	bne.n	8007164 <memcpy+0xc>
 8007162:	4770      	bx	lr
 8007164:	b510      	push	{r4, lr}
 8007166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716a:	4291      	cmp	r1, r2
 800716c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007170:	d1f9      	bne.n	8007166 <memcpy+0xe>
 8007172:	bd10      	pop	{r4, pc}

08007174 <memmove>:
 8007174:	4288      	cmp	r0, r1
 8007176:	b510      	push	{r4, lr}
 8007178:	eb01 0402 	add.w	r4, r1, r2
 800717c:	d902      	bls.n	8007184 <memmove+0x10>
 800717e:	4284      	cmp	r4, r0
 8007180:	4623      	mov	r3, r4
 8007182:	d807      	bhi.n	8007194 <memmove+0x20>
 8007184:	1e43      	subs	r3, r0, #1
 8007186:	42a1      	cmp	r1, r4
 8007188:	d008      	beq.n	800719c <memmove+0x28>
 800718a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007192:	e7f8      	b.n	8007186 <memmove+0x12>
 8007194:	4601      	mov	r1, r0
 8007196:	4402      	add	r2, r0
 8007198:	428a      	cmp	r2, r1
 800719a:	d100      	bne.n	800719e <memmove+0x2a>
 800719c:	bd10      	pop	{r4, pc}
 800719e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071a6:	e7f7      	b.n	8007198 <memmove+0x24>

080071a8 <_free_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4605      	mov	r5, r0
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d043      	beq.n	8007238 <_free_r+0x90>
 80071b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b4:	1f0c      	subs	r4, r1, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfb8      	it	lt
 80071ba:	18e4      	addlt	r4, r4, r3
 80071bc:	f000 f8d0 	bl	8007360 <__malloc_lock>
 80071c0:	4a1e      	ldr	r2, [pc, #120]	; (800723c <_free_r+0x94>)
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	4610      	mov	r0, r2
 80071c6:	b933      	cbnz	r3, 80071d6 <_free_r+0x2e>
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	6014      	str	r4, [r2, #0]
 80071cc:	4628      	mov	r0, r5
 80071ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071d2:	f000 b8cb 	b.w	800736c <__malloc_unlock>
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	d90a      	bls.n	80071f0 <_free_r+0x48>
 80071da:	6821      	ldr	r1, [r4, #0]
 80071dc:	1862      	adds	r2, r4, r1
 80071de:	4293      	cmp	r3, r2
 80071e0:	bf01      	itttt	eq
 80071e2:	681a      	ldreq	r2, [r3, #0]
 80071e4:	685b      	ldreq	r3, [r3, #4]
 80071e6:	1852      	addeq	r2, r2, r1
 80071e8:	6022      	streq	r2, [r4, #0]
 80071ea:	6063      	str	r3, [r4, #4]
 80071ec:	6004      	str	r4, [r0, #0]
 80071ee:	e7ed      	b.n	80071cc <_free_r+0x24>
 80071f0:	461a      	mov	r2, r3
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	b10b      	cbz	r3, 80071fa <_free_r+0x52>
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	d9fa      	bls.n	80071f0 <_free_r+0x48>
 80071fa:	6811      	ldr	r1, [r2, #0]
 80071fc:	1850      	adds	r0, r2, r1
 80071fe:	42a0      	cmp	r0, r4
 8007200:	d10b      	bne.n	800721a <_free_r+0x72>
 8007202:	6820      	ldr	r0, [r4, #0]
 8007204:	4401      	add	r1, r0
 8007206:	1850      	adds	r0, r2, r1
 8007208:	4283      	cmp	r3, r0
 800720a:	6011      	str	r1, [r2, #0]
 800720c:	d1de      	bne.n	80071cc <_free_r+0x24>
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4401      	add	r1, r0
 8007214:	6011      	str	r1, [r2, #0]
 8007216:	6053      	str	r3, [r2, #4]
 8007218:	e7d8      	b.n	80071cc <_free_r+0x24>
 800721a:	d902      	bls.n	8007222 <_free_r+0x7a>
 800721c:	230c      	movs	r3, #12
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	e7d4      	b.n	80071cc <_free_r+0x24>
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1821      	adds	r1, r4, r0
 8007226:	428b      	cmp	r3, r1
 8007228:	bf01      	itttt	eq
 800722a:	6819      	ldreq	r1, [r3, #0]
 800722c:	685b      	ldreq	r3, [r3, #4]
 800722e:	1809      	addeq	r1, r1, r0
 8007230:	6021      	streq	r1, [r4, #0]
 8007232:	6063      	str	r3, [r4, #4]
 8007234:	6054      	str	r4, [r2, #4]
 8007236:	e7c9      	b.n	80071cc <_free_r+0x24>
 8007238:	bd38      	pop	{r3, r4, r5, pc}
 800723a:	bf00      	nop
 800723c:	200000a8 	.word	0x200000a8

08007240 <_malloc_r>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	1ccd      	adds	r5, r1, #3
 8007244:	f025 0503 	bic.w	r5, r5, #3
 8007248:	3508      	adds	r5, #8
 800724a:	2d0c      	cmp	r5, #12
 800724c:	bf38      	it	cc
 800724e:	250c      	movcc	r5, #12
 8007250:	2d00      	cmp	r5, #0
 8007252:	4606      	mov	r6, r0
 8007254:	db01      	blt.n	800725a <_malloc_r+0x1a>
 8007256:	42a9      	cmp	r1, r5
 8007258:	d903      	bls.n	8007262 <_malloc_r+0x22>
 800725a:	230c      	movs	r3, #12
 800725c:	6033      	str	r3, [r6, #0]
 800725e:	2000      	movs	r0, #0
 8007260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007262:	f000 f87d 	bl	8007360 <__malloc_lock>
 8007266:	4921      	ldr	r1, [pc, #132]	; (80072ec <_malloc_r+0xac>)
 8007268:	680a      	ldr	r2, [r1, #0]
 800726a:	4614      	mov	r4, r2
 800726c:	b99c      	cbnz	r4, 8007296 <_malloc_r+0x56>
 800726e:	4f20      	ldr	r7, [pc, #128]	; (80072f0 <_malloc_r+0xb0>)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	b923      	cbnz	r3, 800727e <_malloc_r+0x3e>
 8007274:	4621      	mov	r1, r4
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f862 	bl	8007340 <_sbrk_r>
 800727c:	6038      	str	r0, [r7, #0]
 800727e:	4629      	mov	r1, r5
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f85d 	bl	8007340 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d123      	bne.n	80072d2 <_malloc_r+0x92>
 800728a:	230c      	movs	r3, #12
 800728c:	4630      	mov	r0, r6
 800728e:	6033      	str	r3, [r6, #0]
 8007290:	f000 f86c 	bl	800736c <__malloc_unlock>
 8007294:	e7e3      	b.n	800725e <_malloc_r+0x1e>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	1b5b      	subs	r3, r3, r5
 800729a:	d417      	bmi.n	80072cc <_malloc_r+0x8c>
 800729c:	2b0b      	cmp	r3, #11
 800729e:	d903      	bls.n	80072a8 <_malloc_r+0x68>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	441c      	add	r4, r3
 80072a4:	6025      	str	r5, [r4, #0]
 80072a6:	e004      	b.n	80072b2 <_malloc_r+0x72>
 80072a8:	6863      	ldr	r3, [r4, #4]
 80072aa:	42a2      	cmp	r2, r4
 80072ac:	bf0c      	ite	eq
 80072ae:	600b      	streq	r3, [r1, #0]
 80072b0:	6053      	strne	r3, [r2, #4]
 80072b2:	4630      	mov	r0, r6
 80072b4:	f000 f85a 	bl	800736c <__malloc_unlock>
 80072b8:	f104 000b 	add.w	r0, r4, #11
 80072bc:	1d23      	adds	r3, r4, #4
 80072be:	f020 0007 	bic.w	r0, r0, #7
 80072c2:	1ac2      	subs	r2, r0, r3
 80072c4:	d0cc      	beq.n	8007260 <_malloc_r+0x20>
 80072c6:	1a1b      	subs	r3, r3, r0
 80072c8:	50a3      	str	r3, [r4, r2]
 80072ca:	e7c9      	b.n	8007260 <_malloc_r+0x20>
 80072cc:	4622      	mov	r2, r4
 80072ce:	6864      	ldr	r4, [r4, #4]
 80072d0:	e7cc      	b.n	800726c <_malloc_r+0x2c>
 80072d2:	1cc4      	adds	r4, r0, #3
 80072d4:	f024 0403 	bic.w	r4, r4, #3
 80072d8:	42a0      	cmp	r0, r4
 80072da:	d0e3      	beq.n	80072a4 <_malloc_r+0x64>
 80072dc:	1a21      	subs	r1, r4, r0
 80072de:	4630      	mov	r0, r6
 80072e0:	f000 f82e 	bl	8007340 <_sbrk_r>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d1dd      	bne.n	80072a4 <_malloc_r+0x64>
 80072e8:	e7cf      	b.n	800728a <_malloc_r+0x4a>
 80072ea:	bf00      	nop
 80072ec:	200000a8 	.word	0x200000a8
 80072f0:	200000ac 	.word	0x200000ac

080072f4 <_realloc_r>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	4607      	mov	r7, r0
 80072f8:	4614      	mov	r4, r2
 80072fa:	460e      	mov	r6, r1
 80072fc:	b921      	cbnz	r1, 8007308 <_realloc_r+0x14>
 80072fe:	4611      	mov	r1, r2
 8007300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007304:	f7ff bf9c 	b.w	8007240 <_malloc_r>
 8007308:	b922      	cbnz	r2, 8007314 <_realloc_r+0x20>
 800730a:	f7ff ff4d 	bl	80071a8 <_free_r>
 800730e:	4625      	mov	r5, r4
 8007310:	4628      	mov	r0, r5
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007314:	f000 f830 	bl	8007378 <_malloc_usable_size_r>
 8007318:	42a0      	cmp	r0, r4
 800731a:	d20f      	bcs.n	800733c <_realloc_r+0x48>
 800731c:	4621      	mov	r1, r4
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff ff8e 	bl	8007240 <_malloc_r>
 8007324:	4605      	mov	r5, r0
 8007326:	2800      	cmp	r0, #0
 8007328:	d0f2      	beq.n	8007310 <_realloc_r+0x1c>
 800732a:	4631      	mov	r1, r6
 800732c:	4622      	mov	r2, r4
 800732e:	f7ff ff13 	bl	8007158 <memcpy>
 8007332:	4631      	mov	r1, r6
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff ff37 	bl	80071a8 <_free_r>
 800733a:	e7e9      	b.n	8007310 <_realloc_r+0x1c>
 800733c:	4635      	mov	r5, r6
 800733e:	e7e7      	b.n	8007310 <_realloc_r+0x1c>

08007340 <_sbrk_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	; (800735c <_sbrk_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7fa fcd2 	bl	8001cf4 <_sbrk>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_sbrk_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_sbrk_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200001c8 	.word	0x200001c8

08007360 <__malloc_lock>:
 8007360:	4801      	ldr	r0, [pc, #4]	; (8007368 <__malloc_lock+0x8>)
 8007362:	f000 b811 	b.w	8007388 <__retarget_lock_acquire_recursive>
 8007366:	bf00      	nop
 8007368:	200001d0 	.word	0x200001d0

0800736c <__malloc_unlock>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__malloc_unlock+0x8>)
 800736e:	f000 b80c 	b.w	800738a <__retarget_lock_release_recursive>
 8007372:	bf00      	nop
 8007374:	200001d0 	.word	0x200001d0

08007378 <_malloc_usable_size_r>:
 8007378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800737c:	1f18      	subs	r0, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	bfbc      	itt	lt
 8007382:	580b      	ldrlt	r3, [r1, r0]
 8007384:	18c0      	addlt	r0, r0, r3
 8007386:	4770      	bx	lr

08007388 <__retarget_lock_acquire_recursive>:
 8007388:	4770      	bx	lr

0800738a <__retarget_lock_release_recursive>:
 800738a:	4770      	bx	lr

0800738c <pow>:
 800738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007390:	461f      	mov	r7, r3
 8007392:	4680      	mov	r8, r0
 8007394:	4689      	mov	r9, r1
 8007396:	4616      	mov	r6, r2
 8007398:	f000 f8a6 	bl	80074e8 <__ieee754_pow>
 800739c:	4b4d      	ldr	r3, [pc, #308]	; (80074d4 <pow+0x148>)
 800739e:	4604      	mov	r4, r0
 80073a0:	f993 3000 	ldrsb.w	r3, [r3]
 80073a4:	460d      	mov	r5, r1
 80073a6:	3301      	adds	r3, #1
 80073a8:	d015      	beq.n	80073d6 <pow+0x4a>
 80073aa:	4632      	mov	r2, r6
 80073ac:	463b      	mov	r3, r7
 80073ae:	4630      	mov	r0, r6
 80073b0:	4639      	mov	r1, r7
 80073b2:	f7f9 fb23 	bl	80009fc <__aeabi_dcmpun>
 80073b6:	b970      	cbnz	r0, 80073d6 <pow+0x4a>
 80073b8:	4642      	mov	r2, r8
 80073ba:	464b      	mov	r3, r9
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f9 fb1c 	bl	80009fc <__aeabi_dcmpun>
 80073c4:	2200      	movs	r2, #0
 80073c6:	2300      	movs	r3, #0
 80073c8:	b148      	cbz	r0, 80073de <pow+0x52>
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f9 fae3 	bl	8000998 <__aeabi_dcmpeq>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d17b      	bne.n	80074ce <pow+0x142>
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 fad9 	bl	8000998 <__aeabi_dcmpeq>
 80073e6:	b1e0      	cbz	r0, 8007422 <pow+0x96>
 80073e8:	2200      	movs	r2, #0
 80073ea:	2300      	movs	r3, #0
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f9 fad2 	bl	8000998 <__aeabi_dcmpeq>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d16a      	bne.n	80074ce <pow+0x142>
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f000 fe39 	bl	8008072 <finite>
 8007400:	2800      	cmp	r0, #0
 8007402:	d0e8      	beq.n	80073d6 <pow+0x4a>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	f7f9 face 	bl	80009ac <__aeabi_dcmplt>
 8007410:	2800      	cmp	r0, #0
 8007412:	d0e0      	beq.n	80073d6 <pow+0x4a>
 8007414:	f7ff fb4e 	bl	8006ab4 <__errno>
 8007418:	2321      	movs	r3, #33	; 0x21
 800741a:	2400      	movs	r4, #0
 800741c:	6003      	str	r3, [r0, #0]
 800741e:	4d2e      	ldr	r5, [pc, #184]	; (80074d8 <pow+0x14c>)
 8007420:	e7d9      	b.n	80073d6 <pow+0x4a>
 8007422:	4620      	mov	r0, r4
 8007424:	4629      	mov	r1, r5
 8007426:	f000 fe24 	bl	8008072 <finite>
 800742a:	bba8      	cbnz	r0, 8007498 <pow+0x10c>
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f000 fe1f 	bl	8008072 <finite>
 8007434:	b380      	cbz	r0, 8007498 <pow+0x10c>
 8007436:	4630      	mov	r0, r6
 8007438:	4639      	mov	r1, r7
 800743a:	f000 fe1a 	bl	8008072 <finite>
 800743e:	b358      	cbz	r0, 8007498 <pow+0x10c>
 8007440:	4622      	mov	r2, r4
 8007442:	462b      	mov	r3, r5
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 fad8 	bl	80009fc <__aeabi_dcmpun>
 800744c:	b160      	cbz	r0, 8007468 <pow+0xdc>
 800744e:	f7ff fb31 	bl	8006ab4 <__errno>
 8007452:	2321      	movs	r3, #33	; 0x21
 8007454:	2200      	movs	r2, #0
 8007456:	6003      	str	r3, [r0, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	4610      	mov	r0, r2
 800745c:	4619      	mov	r1, r3
 800745e:	f7f9 f95d 	bl	800071c <__aeabi_ddiv>
 8007462:	4604      	mov	r4, r0
 8007464:	460d      	mov	r5, r1
 8007466:	e7b6      	b.n	80073d6 <pow+0x4a>
 8007468:	f7ff fb24 	bl	8006ab4 <__errno>
 800746c:	2322      	movs	r3, #34	; 0x22
 800746e:	2200      	movs	r2, #0
 8007470:	6003      	str	r3, [r0, #0]
 8007472:	4649      	mov	r1, r9
 8007474:	2300      	movs	r3, #0
 8007476:	4640      	mov	r0, r8
 8007478:	f7f9 fa98 	bl	80009ac <__aeabi_dcmplt>
 800747c:	2400      	movs	r4, #0
 800747e:	b148      	cbz	r0, 8007494 <pow+0x108>
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	f000 fe02 	bl	800808c <rint>
 8007488:	4632      	mov	r2, r6
 800748a:	463b      	mov	r3, r7
 800748c:	f7f9 fa84 	bl	8000998 <__aeabi_dcmpeq>
 8007490:	2800      	cmp	r0, #0
 8007492:	d0c4      	beq.n	800741e <pow+0x92>
 8007494:	4d11      	ldr	r5, [pc, #68]	; (80074dc <pow+0x150>)
 8007496:	e79e      	b.n	80073d6 <pow+0x4a>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f9 fa7a 	bl	8000998 <__aeabi_dcmpeq>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d096      	beq.n	80073d6 <pow+0x4a>
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	f000 fde1 	bl	8008072 <finite>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d090      	beq.n	80073d6 <pow+0x4a>
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f000 fddb 	bl	8008072 <finite>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d08a      	beq.n	80073d6 <pow+0x4a>
 80074c0:	f7ff faf8 	bl	8006ab4 <__errno>
 80074c4:	2322      	movs	r3, #34	; 0x22
 80074c6:	2400      	movs	r4, #0
 80074c8:	2500      	movs	r5, #0
 80074ca:	6003      	str	r3, [r0, #0]
 80074cc:	e783      	b.n	80073d6 <pow+0x4a>
 80074ce:	2400      	movs	r4, #0
 80074d0:	4d03      	ldr	r5, [pc, #12]	; (80074e0 <pow+0x154>)
 80074d2:	e780      	b.n	80073d6 <pow+0x4a>
 80074d4:	20000074 	.word	0x20000074
 80074d8:	fff00000 	.word	0xfff00000
 80074dc:	7ff00000 	.word	0x7ff00000
 80074e0:	3ff00000 	.word	0x3ff00000
 80074e4:	00000000 	.word	0x00000000

080074e8 <__ieee754_pow>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b093      	sub	sp, #76	; 0x4c
 80074ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074f2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80074f6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80074fa:	ea55 0302 	orrs.w	r3, r5, r2
 80074fe:	4607      	mov	r7, r0
 8007500:	4688      	mov	r8, r1
 8007502:	f000 84bf 	beq.w	8007e84 <__ieee754_pow+0x99c>
 8007506:	4b7e      	ldr	r3, [pc, #504]	; (8007700 <__ieee754_pow+0x218>)
 8007508:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800750c:	429c      	cmp	r4, r3
 800750e:	4689      	mov	r9, r1
 8007510:	4682      	mov	sl, r0
 8007512:	dc09      	bgt.n	8007528 <__ieee754_pow+0x40>
 8007514:	d103      	bne.n	800751e <__ieee754_pow+0x36>
 8007516:	b978      	cbnz	r0, 8007538 <__ieee754_pow+0x50>
 8007518:	42a5      	cmp	r5, r4
 800751a:	dd02      	ble.n	8007522 <__ieee754_pow+0x3a>
 800751c:	e00c      	b.n	8007538 <__ieee754_pow+0x50>
 800751e:	429d      	cmp	r5, r3
 8007520:	dc02      	bgt.n	8007528 <__ieee754_pow+0x40>
 8007522:	429d      	cmp	r5, r3
 8007524:	d10e      	bne.n	8007544 <__ieee754_pow+0x5c>
 8007526:	b16a      	cbz	r2, 8007544 <__ieee754_pow+0x5c>
 8007528:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800752c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007530:	ea54 030a 	orrs.w	r3, r4, sl
 8007534:	f000 84a6 	beq.w	8007e84 <__ieee754_pow+0x99c>
 8007538:	4872      	ldr	r0, [pc, #456]	; (8007704 <__ieee754_pow+0x21c>)
 800753a:	b013      	add	sp, #76	; 0x4c
 800753c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	f000 bd9e 	b.w	8008080 <nan>
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	da39      	bge.n	80075be <__ieee754_pow+0xd6>
 800754a:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <__ieee754_pow+0x220>)
 800754c:	429d      	cmp	r5, r3
 800754e:	dc54      	bgt.n	80075fa <__ieee754_pow+0x112>
 8007550:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007554:	429d      	cmp	r5, r3
 8007556:	f340 84a6 	ble.w	8007ea6 <__ieee754_pow+0x9be>
 800755a:	152b      	asrs	r3, r5, #20
 800755c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007560:	2b14      	cmp	r3, #20
 8007562:	dd0f      	ble.n	8007584 <__ieee754_pow+0x9c>
 8007564:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007568:	fa22 f103 	lsr.w	r1, r2, r3
 800756c:	fa01 f303 	lsl.w	r3, r1, r3
 8007570:	4293      	cmp	r3, r2
 8007572:	f040 8498 	bne.w	8007ea6 <__ieee754_pow+0x9be>
 8007576:	f001 0101 	and.w	r1, r1, #1
 800757a:	f1c1 0302 	rsb	r3, r1, #2
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	b182      	cbz	r2, 80075a4 <__ieee754_pow+0xbc>
 8007582:	e05e      	b.n	8007642 <__ieee754_pow+0x15a>
 8007584:	2a00      	cmp	r2, #0
 8007586:	d15a      	bne.n	800763e <__ieee754_pow+0x156>
 8007588:	f1c3 0314 	rsb	r3, r3, #20
 800758c:	fa45 f103 	asr.w	r1, r5, r3
 8007590:	fa01 f303 	lsl.w	r3, r1, r3
 8007594:	42ab      	cmp	r3, r5
 8007596:	f040 8483 	bne.w	8007ea0 <__ieee754_pow+0x9b8>
 800759a:	f001 0101 	and.w	r1, r1, #1
 800759e:	f1c1 0302 	rsb	r3, r1, #2
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	4b59      	ldr	r3, [pc, #356]	; (800770c <__ieee754_pow+0x224>)
 80075a6:	429d      	cmp	r5, r3
 80075a8:	d130      	bne.n	800760c <__ieee754_pow+0x124>
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	f280 8474 	bge.w	8007e98 <__ieee754_pow+0x9b0>
 80075b0:	463a      	mov	r2, r7
 80075b2:	4643      	mov	r3, r8
 80075b4:	2000      	movs	r0, #0
 80075b6:	4955      	ldr	r1, [pc, #340]	; (800770c <__ieee754_pow+0x224>)
 80075b8:	f7f9 f8b0 	bl	800071c <__aeabi_ddiv>
 80075bc:	e02f      	b.n	800761e <__ieee754_pow+0x136>
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	2a00      	cmp	r2, #0
 80075c4:	d13d      	bne.n	8007642 <__ieee754_pow+0x15a>
 80075c6:	4b4e      	ldr	r3, [pc, #312]	; (8007700 <__ieee754_pow+0x218>)
 80075c8:	429d      	cmp	r5, r3
 80075ca:	d1eb      	bne.n	80075a4 <__ieee754_pow+0xbc>
 80075cc:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80075d0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80075d4:	ea53 030a 	orrs.w	r3, r3, sl
 80075d8:	f000 8454 	beq.w	8007e84 <__ieee754_pow+0x99c>
 80075dc:	4b4c      	ldr	r3, [pc, #304]	; (8007710 <__ieee754_pow+0x228>)
 80075de:	429c      	cmp	r4, r3
 80075e0:	dd0d      	ble.n	80075fe <__ieee754_pow+0x116>
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	f280 8454 	bge.w	8007e90 <__ieee754_pow+0x9a8>
 80075e8:	f04f 0b00 	mov.w	fp, #0
 80075ec:	f04f 0c00 	mov.w	ip, #0
 80075f0:	4658      	mov	r0, fp
 80075f2:	4661      	mov	r1, ip
 80075f4:	b013      	add	sp, #76	; 0x4c
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fa:	2302      	movs	r3, #2
 80075fc:	e7e0      	b.n	80075c0 <__ieee754_pow+0xd8>
 80075fe:	2e00      	cmp	r6, #0
 8007600:	daf2      	bge.n	80075e8 <__ieee754_pow+0x100>
 8007602:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007606:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800760a:	e7f1      	b.n	80075f0 <__ieee754_pow+0x108>
 800760c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007610:	d108      	bne.n	8007624 <__ieee754_pow+0x13c>
 8007612:	463a      	mov	r2, r7
 8007614:	4643      	mov	r3, r8
 8007616:	4638      	mov	r0, r7
 8007618:	4641      	mov	r1, r8
 800761a:	f7f8 ff55 	bl	80004c8 <__aeabi_dmul>
 800761e:	4683      	mov	fp, r0
 8007620:	468c      	mov	ip, r1
 8007622:	e7e5      	b.n	80075f0 <__ieee754_pow+0x108>
 8007624:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <__ieee754_pow+0x22c>)
 8007626:	429e      	cmp	r6, r3
 8007628:	d10b      	bne.n	8007642 <__ieee754_pow+0x15a>
 800762a:	f1b9 0f00 	cmp.w	r9, #0
 800762e:	db08      	blt.n	8007642 <__ieee754_pow+0x15a>
 8007630:	4638      	mov	r0, r7
 8007632:	4641      	mov	r1, r8
 8007634:	b013      	add	sp, #76	; 0x4c
 8007636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763a:	f000 bc6b 	b.w	8007f14 <__ieee754_sqrt>
 800763e:	2300      	movs	r3, #0
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4638      	mov	r0, r7
 8007644:	4641      	mov	r1, r8
 8007646:	f000 fd11 	bl	800806c <fabs>
 800764a:	4683      	mov	fp, r0
 800764c:	468c      	mov	ip, r1
 800764e:	f1ba 0f00 	cmp.w	sl, #0
 8007652:	d129      	bne.n	80076a8 <__ieee754_pow+0x1c0>
 8007654:	b124      	cbz	r4, 8007660 <__ieee754_pow+0x178>
 8007656:	4b2d      	ldr	r3, [pc, #180]	; (800770c <__ieee754_pow+0x224>)
 8007658:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800765c:	429a      	cmp	r2, r3
 800765e:	d123      	bne.n	80076a8 <__ieee754_pow+0x1c0>
 8007660:	2e00      	cmp	r6, #0
 8007662:	da07      	bge.n	8007674 <__ieee754_pow+0x18c>
 8007664:	465a      	mov	r2, fp
 8007666:	4663      	mov	r3, ip
 8007668:	2000      	movs	r0, #0
 800766a:	4928      	ldr	r1, [pc, #160]	; (800770c <__ieee754_pow+0x224>)
 800766c:	f7f9 f856 	bl	800071c <__aeabi_ddiv>
 8007670:	4683      	mov	fp, r0
 8007672:	468c      	mov	ip, r1
 8007674:	f1b9 0f00 	cmp.w	r9, #0
 8007678:	daba      	bge.n	80075f0 <__ieee754_pow+0x108>
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007680:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007684:	4323      	orrs	r3, r4
 8007686:	d108      	bne.n	800769a <__ieee754_pow+0x1b2>
 8007688:	465a      	mov	r2, fp
 800768a:	4663      	mov	r3, ip
 800768c:	4658      	mov	r0, fp
 800768e:	4661      	mov	r1, ip
 8007690:	f7f8 fd62 	bl	8000158 <__aeabi_dsub>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e78e      	b.n	80075b8 <__ieee754_pow+0xd0>
 800769a:	9b00      	ldr	r3, [sp, #0]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d1a7      	bne.n	80075f0 <__ieee754_pow+0x108>
 80076a0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80076a4:	469c      	mov	ip, r3
 80076a6:	e7a3      	b.n	80075f0 <__ieee754_pow+0x108>
 80076a8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80076ac:	3b01      	subs	r3, #1
 80076ae:	930c      	str	r3, [sp, #48]	; 0x30
 80076b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d104      	bne.n	80076c2 <__ieee754_pow+0x1da>
 80076b8:	463a      	mov	r2, r7
 80076ba:	4643      	mov	r3, r8
 80076bc:	4638      	mov	r0, r7
 80076be:	4641      	mov	r1, r8
 80076c0:	e7e6      	b.n	8007690 <__ieee754_pow+0x1a8>
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <__ieee754_pow+0x230>)
 80076c4:	429d      	cmp	r5, r3
 80076c6:	f340 80f9 	ble.w	80078bc <__ieee754_pow+0x3d4>
 80076ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80076ce:	429d      	cmp	r5, r3
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <__ieee754_pow+0x228>)
 80076d2:	dd09      	ble.n	80076e8 <__ieee754_pow+0x200>
 80076d4:	429c      	cmp	r4, r3
 80076d6:	dc0c      	bgt.n	80076f2 <__ieee754_pow+0x20a>
 80076d8:	2e00      	cmp	r6, #0
 80076da:	da85      	bge.n	80075e8 <__ieee754_pow+0x100>
 80076dc:	a306      	add	r3, pc, #24	; (adr r3, 80076f8 <__ieee754_pow+0x210>)
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	e798      	b.n	800761a <__ieee754_pow+0x132>
 80076e8:	429c      	cmp	r4, r3
 80076ea:	dbf5      	blt.n	80076d8 <__ieee754_pow+0x1f0>
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <__ieee754_pow+0x224>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	dd14      	ble.n	800771c <__ieee754_pow+0x234>
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	dcf2      	bgt.n	80076dc <__ieee754_pow+0x1f4>
 80076f6:	e777      	b.n	80075e8 <__ieee754_pow+0x100>
 80076f8:	8800759c 	.word	0x8800759c
 80076fc:	7e37e43c 	.word	0x7e37e43c
 8007700:	7ff00000 	.word	0x7ff00000
 8007704:	0800831b 	.word	0x0800831b
 8007708:	433fffff 	.word	0x433fffff
 800770c:	3ff00000 	.word	0x3ff00000
 8007710:	3fefffff 	.word	0x3fefffff
 8007714:	3fe00000 	.word	0x3fe00000
 8007718:	41e00000 	.word	0x41e00000
 800771c:	4661      	mov	r1, ip
 800771e:	2200      	movs	r2, #0
 8007720:	4658      	mov	r0, fp
 8007722:	4b61      	ldr	r3, [pc, #388]	; (80078a8 <__ieee754_pow+0x3c0>)
 8007724:	f7f8 fd18 	bl	8000158 <__aeabi_dsub>
 8007728:	a355      	add	r3, pc, #340	; (adr r3, 8007880 <__ieee754_pow+0x398>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	4604      	mov	r4, r0
 8007730:	460d      	mov	r5, r1
 8007732:	f7f8 fec9 	bl	80004c8 <__aeabi_dmul>
 8007736:	a354      	add	r3, pc, #336	; (adr r3, 8007888 <__ieee754_pow+0x3a0>)
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 fec0 	bl	80004c8 <__aeabi_dmul>
 8007748:	2200      	movs	r2, #0
 800774a:	4682      	mov	sl, r0
 800774c:	468b      	mov	fp, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	4b56      	ldr	r3, [pc, #344]	; (80078ac <__ieee754_pow+0x3c4>)
 8007754:	f7f8 feb8 	bl	80004c8 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	a14c      	add	r1, pc, #304	; (adr r1, 8007890 <__ieee754_pow+0x3a8>)
 800775e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007762:	f7f8 fcf9 	bl	8000158 <__aeabi_dsub>
 8007766:	4622      	mov	r2, r4
 8007768:	462b      	mov	r3, r5
 800776a:	f7f8 fead 	bl	80004c8 <__aeabi_dmul>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	2000      	movs	r0, #0
 8007774:	494e      	ldr	r1, [pc, #312]	; (80078b0 <__ieee754_pow+0x3c8>)
 8007776:	f7f8 fcef 	bl	8000158 <__aeabi_dsub>
 800777a:	4622      	mov	r2, r4
 800777c:	462b      	mov	r3, r5
 800777e:	4680      	mov	r8, r0
 8007780:	4689      	mov	r9, r1
 8007782:	4620      	mov	r0, r4
 8007784:	4629      	mov	r1, r5
 8007786:	f7f8 fe9f 	bl	80004c8 <__aeabi_dmul>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f8 fe99 	bl	80004c8 <__aeabi_dmul>
 8007796:	a340      	add	r3, pc, #256	; (adr r3, 8007898 <__ieee754_pow+0x3b0>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fe94 	bl	80004c8 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4650      	mov	r0, sl
 80077a6:	4659      	mov	r1, fp
 80077a8:	f7f8 fcd6 	bl	8000158 <__aeabi_dsub>
 80077ac:	f04f 0a00 	mov.w	sl, #0
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4604      	mov	r4, r0
 80077b6:	460d      	mov	r5, r1
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f8 fcce 	bl	800015c <__adddf3>
 80077c0:	4632      	mov	r2, r6
 80077c2:	463b      	mov	r3, r7
 80077c4:	4650      	mov	r0, sl
 80077c6:	468b      	mov	fp, r1
 80077c8:	f7f8 fcc6 	bl	8000158 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 fcc0 	bl	8000158 <__aeabi_dsub>
 80077d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077dc:	9b00      	ldr	r3, [sp, #0]
 80077de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e0:	3b01      	subs	r3, #1
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f04f 0600 	mov.w	r6, #0
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	bf0c      	ite	eq
 80077ee:	4b31      	ldreq	r3, [pc, #196]	; (80078b4 <__ieee754_pow+0x3cc>)
 80077f0:	4b2d      	ldrne	r3, [pc, #180]	; (80078a8 <__ieee754_pow+0x3c0>)
 80077f2:	4604      	mov	r4, r0
 80077f4:	460d      	mov	r5, r1
 80077f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fa:	e9cd 2300 	strd	r2, r3, [sp]
 80077fe:	4632      	mov	r2, r6
 8007800:	463b      	mov	r3, r7
 8007802:	f7f8 fca9 	bl	8000158 <__aeabi_dsub>
 8007806:	4652      	mov	r2, sl
 8007808:	465b      	mov	r3, fp
 800780a:	f7f8 fe5d 	bl	80004c8 <__aeabi_dmul>
 800780e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f8 fe55 	bl	80004c8 <__aeabi_dmul>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	f7f8 fc99 	bl	800015c <__adddf3>
 800782a:	4632      	mov	r2, r6
 800782c:	463b      	mov	r3, r7
 800782e:	4680      	mov	r8, r0
 8007830:	4689      	mov	r9, r1
 8007832:	4650      	mov	r0, sl
 8007834:	4659      	mov	r1, fp
 8007836:	f7f8 fe47 	bl	80004c8 <__aeabi_dmul>
 800783a:	4604      	mov	r4, r0
 800783c:	460d      	mov	r5, r1
 800783e:	460b      	mov	r3, r1
 8007840:	4602      	mov	r2, r0
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800784a:	f7f8 fc87 	bl	800015c <__adddf3>
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <__ieee754_pow+0x3d0>)
 8007850:	4682      	mov	sl, r0
 8007852:	4299      	cmp	r1, r3
 8007854:	460f      	mov	r7, r1
 8007856:	460e      	mov	r6, r1
 8007858:	f340 82ed 	ble.w	8007e36 <__ieee754_pow+0x94e>
 800785c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007860:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007864:	4303      	orrs	r3, r0
 8007866:	f000 81e7 	beq.w	8007c38 <__ieee754_pow+0x750>
 800786a:	a30d      	add	r3, pc, #52	; (adr r3, 80078a0 <__ieee754_pow+0x3b8>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007874:	f7f8 fe28 	bl	80004c8 <__aeabi_dmul>
 8007878:	a309      	add	r3, pc, #36	; (adr r3, 80078a0 <__ieee754_pow+0x3b8>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	e6cc      	b.n	800761a <__ieee754_pow+0x132>
 8007880:	60000000 	.word	0x60000000
 8007884:	3ff71547 	.word	0x3ff71547
 8007888:	f85ddf44 	.word	0xf85ddf44
 800788c:	3e54ae0b 	.word	0x3e54ae0b
 8007890:	55555555 	.word	0x55555555
 8007894:	3fd55555 	.word	0x3fd55555
 8007898:	652b82fe 	.word	0x652b82fe
 800789c:	3ff71547 	.word	0x3ff71547
 80078a0:	8800759c 	.word	0x8800759c
 80078a4:	7e37e43c 	.word	0x7e37e43c
 80078a8:	3ff00000 	.word	0x3ff00000
 80078ac:	3fd00000 	.word	0x3fd00000
 80078b0:	3fe00000 	.word	0x3fe00000
 80078b4:	bff00000 	.word	0xbff00000
 80078b8:	408fffff 	.word	0x408fffff
 80078bc:	4bd4      	ldr	r3, [pc, #848]	; (8007c10 <__ieee754_pow+0x728>)
 80078be:	2200      	movs	r2, #0
 80078c0:	ea09 0303 	and.w	r3, r9, r3
 80078c4:	b943      	cbnz	r3, 80078d8 <__ieee754_pow+0x3f0>
 80078c6:	4658      	mov	r0, fp
 80078c8:	4661      	mov	r1, ip
 80078ca:	4bd2      	ldr	r3, [pc, #840]	; (8007c14 <__ieee754_pow+0x72c>)
 80078cc:	f7f8 fdfc 	bl	80004c8 <__aeabi_dmul>
 80078d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80078d4:	4683      	mov	fp, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	1523      	asrs	r3, r4, #20
 80078da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078de:	4413      	add	r3, r2
 80078e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e2:	4bcd      	ldr	r3, [pc, #820]	; (8007c18 <__ieee754_pow+0x730>)
 80078e4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80078e8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80078ec:	429c      	cmp	r4, r3
 80078ee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80078f2:	dd08      	ble.n	8007906 <__ieee754_pow+0x41e>
 80078f4:	4bc9      	ldr	r3, [pc, #804]	; (8007c1c <__ieee754_pow+0x734>)
 80078f6:	429c      	cmp	r4, r3
 80078f8:	f340 819c 	ble.w	8007c34 <__ieee754_pow+0x74c>
 80078fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007902:	3301      	adds	r3, #1
 8007904:	930b      	str	r3, [sp, #44]	; 0x2c
 8007906:	2600      	movs	r6, #0
 8007908:	00f3      	lsls	r3, r6, #3
 800790a:	930d      	str	r3, [sp, #52]	; 0x34
 800790c:	4bc4      	ldr	r3, [pc, #784]	; (8007c20 <__ieee754_pow+0x738>)
 800790e:	4658      	mov	r0, fp
 8007910:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007914:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007918:	4629      	mov	r1, r5
 800791a:	461a      	mov	r2, r3
 800791c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007920:	4623      	mov	r3, r4
 8007922:	f7f8 fc19 	bl	8000158 <__aeabi_dsub>
 8007926:	46da      	mov	sl, fp
 8007928:	462b      	mov	r3, r5
 800792a:	4652      	mov	r2, sl
 800792c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007930:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007934:	f7f8 fc12 	bl	800015c <__adddf3>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	2000      	movs	r0, #0
 800793e:	49b9      	ldr	r1, [pc, #740]	; (8007c24 <__ieee754_pow+0x73c>)
 8007940:	f7f8 feec 	bl	800071c <__aeabi_ddiv>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800794c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007950:	f7f8 fdba 	bl	80004c8 <__aeabi_dmul>
 8007954:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007958:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800795c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007960:	2300      	movs	r3, #0
 8007962:	2200      	movs	r2, #0
 8007964:	46ab      	mov	fp, r5
 8007966:	106d      	asrs	r5, r5, #1
 8007968:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007972:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007976:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800797a:	4640      	mov	r0, r8
 800797c:	4649      	mov	r1, r9
 800797e:	4614      	mov	r4, r2
 8007980:	461d      	mov	r5, r3
 8007982:	f7f8 fda1 	bl	80004c8 <__aeabi_dmul>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800798e:	f7f8 fbe3 	bl	8000158 <__aeabi_dsub>
 8007992:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007996:	4606      	mov	r6, r0
 8007998:	460f      	mov	r7, r1
 800799a:	4620      	mov	r0, r4
 800799c:	4629      	mov	r1, r5
 800799e:	f7f8 fbdb 	bl	8000158 <__aeabi_dsub>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4650      	mov	r0, sl
 80079a8:	4659      	mov	r1, fp
 80079aa:	f7f8 fbd5 	bl	8000158 <__aeabi_dsub>
 80079ae:	4642      	mov	r2, r8
 80079b0:	464b      	mov	r3, r9
 80079b2:	f7f8 fd89 	bl	80004c8 <__aeabi_dmul>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4630      	mov	r0, r6
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f8 fbcb 	bl	8000158 <__aeabi_dsub>
 80079c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079c6:	f7f8 fd7f 	bl	80004c8 <__aeabi_dmul>
 80079ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079d2:	4610      	mov	r0, r2
 80079d4:	4619      	mov	r1, r3
 80079d6:	f7f8 fd77 	bl	80004c8 <__aeabi_dmul>
 80079da:	a37b      	add	r3, pc, #492	; (adr r3, 8007bc8 <__ieee754_pow+0x6e0>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	4604      	mov	r4, r0
 80079e2:	460d      	mov	r5, r1
 80079e4:	f7f8 fd70 	bl	80004c8 <__aeabi_dmul>
 80079e8:	a379      	add	r3, pc, #484	; (adr r3, 8007bd0 <__ieee754_pow+0x6e8>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fbb5 	bl	800015c <__adddf3>
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	f7f8 fd67 	bl	80004c8 <__aeabi_dmul>
 80079fa:	a377      	add	r3, pc, #476	; (adr r3, 8007bd8 <__ieee754_pow+0x6f0>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fbac 	bl	800015c <__adddf3>
 8007a04:	4622      	mov	r2, r4
 8007a06:	462b      	mov	r3, r5
 8007a08:	f7f8 fd5e 	bl	80004c8 <__aeabi_dmul>
 8007a0c:	a374      	add	r3, pc, #464	; (adr r3, 8007be0 <__ieee754_pow+0x6f8>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fba3 	bl	800015c <__adddf3>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fd55 	bl	80004c8 <__aeabi_dmul>
 8007a1e:	a372      	add	r3, pc, #456	; (adr r3, 8007be8 <__ieee754_pow+0x700>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fb9a 	bl	800015c <__adddf3>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	f7f8 fd4c 	bl	80004c8 <__aeabi_dmul>
 8007a30:	a36f      	add	r3, pc, #444	; (adr r3, 8007bf0 <__ieee754_pow+0x708>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fb91 	bl	800015c <__adddf3>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	462b      	mov	r3, r5
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7f8 fd3f 	bl	80004c8 <__aeabi_dmul>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4630      	mov	r0, r6
 8007a50:	4639      	mov	r1, r7
 8007a52:	f7f8 fd39 	bl	80004c8 <__aeabi_dmul>
 8007a56:	4604      	mov	r4, r0
 8007a58:	460d      	mov	r5, r1
 8007a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a5e:	4642      	mov	r2, r8
 8007a60:	464b      	mov	r3, r9
 8007a62:	f7f8 fb7b 	bl	800015c <__adddf3>
 8007a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a6a:	f7f8 fd2d 	bl	80004c8 <__aeabi_dmul>
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	f7f8 fb73 	bl	800015c <__adddf3>
 8007a76:	4642      	mov	r2, r8
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4649      	mov	r1, r9
 8007a82:	f7f8 fd21 	bl	80004c8 <__aeabi_dmul>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b67      	ldr	r3, [pc, #412]	; (8007c28 <__ieee754_pow+0x740>)
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	468b      	mov	fp, r1
 8007a8e:	f7f8 fb65 	bl	800015c <__adddf3>
 8007a92:	4632      	mov	r2, r6
 8007a94:	463b      	mov	r3, r7
 8007a96:	f7f8 fb61 	bl	800015c <__adddf3>
 8007a9a:	9c04      	ldr	r4, [sp, #16]
 8007a9c:	460d      	mov	r5, r1
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	f7f8 fd0f 	bl	80004c8 <__aeabi_dmul>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4b5c      	ldr	r3, [pc, #368]	; (8007c28 <__ieee754_pow+0x740>)
 8007ab6:	f7f8 fb4f 	bl	8000158 <__aeabi_dsub>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fb4b 	bl	8000158 <__aeabi_dsub>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	f7f8 fb45 	bl	8000158 <__aeabi_dsub>
 8007ace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ad2:	f7f8 fcf9 	bl	80004c8 <__aeabi_dmul>
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4606      	mov	r6, r0
 8007ada:	460f      	mov	r7, r1
 8007adc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	f7f8 fcf1 	bl	80004c8 <__aeabi_dmul>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4630      	mov	r0, r6
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fb35 	bl	800015c <__adddf3>
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	f7f8 fb2d 	bl	800015c <__adddf3>
 8007b02:	a33d      	add	r3, pc, #244	; (adr r3, 8007bf8 <__ieee754_pow+0x710>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	9c04      	ldr	r4, [sp, #16]
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7f8 fcdb 	bl	80004c8 <__aeabi_dmul>
 8007b12:	4642      	mov	r2, r8
 8007b14:	464b      	mov	r3, r9
 8007b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fb1b 	bl	8000158 <__aeabi_dsub>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 fb15 	bl	8000158 <__aeabi_dsub>
 8007b2e:	a334      	add	r3, pc, #208	; (adr r3, 8007c00 <__ieee754_pow+0x718>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 fcc8 	bl	80004c8 <__aeabi_dmul>
 8007b38:	a333      	add	r3, pc, #204	; (adr r3, 8007c08 <__ieee754_pow+0x720>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460f      	mov	r7, r1
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fcbf 	bl	80004c8 <__aeabi_dmul>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4630      	mov	r0, r6
 8007b50:	4639      	mov	r1, r7
 8007b52:	f7f8 fb03 	bl	800015c <__adddf3>
 8007b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b58:	4b34      	ldr	r3, [pc, #208]	; (8007c2c <__ieee754_pow+0x744>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fafc 	bl	800015c <__adddf3>
 8007b64:	4680      	mov	r8, r0
 8007b66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007b68:	4689      	mov	r9, r1
 8007b6a:	f7f8 fc43 	bl	80003f4 <__aeabi_i2d>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b74:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <__ieee754_pow+0x748>)
 8007b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	f7f8 faea 	bl	800015c <__adddf3>
 8007b88:	4632      	mov	r2, r6
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	f7f8 fae6 	bl	800015c <__adddf3>
 8007b90:	4622      	mov	r2, r4
 8007b92:	462b      	mov	r3, r5
 8007b94:	f7f8 fae2 	bl	800015c <__adddf3>
 8007b98:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	468b      	mov	fp, r1
 8007ba4:	f7f8 fad8 	bl	8000158 <__aeabi_dsub>
 8007ba8:	4632      	mov	r2, r6
 8007baa:	463b      	mov	r3, r7
 8007bac:	f7f8 fad4 	bl	8000158 <__aeabi_dsub>
 8007bb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bb4:	f7f8 fad0 	bl	8000158 <__aeabi_dsub>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	e608      	b.n	80077d4 <__ieee754_pow+0x2ec>
 8007bc2:	bf00      	nop
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	4a454eef 	.word	0x4a454eef
 8007bcc:	3fca7e28 	.word	0x3fca7e28
 8007bd0:	93c9db65 	.word	0x93c9db65
 8007bd4:	3fcd864a 	.word	0x3fcd864a
 8007bd8:	a91d4101 	.word	0xa91d4101
 8007bdc:	3fd17460 	.word	0x3fd17460
 8007be0:	518f264d 	.word	0x518f264d
 8007be4:	3fd55555 	.word	0x3fd55555
 8007be8:	db6fabff 	.word	0xdb6fabff
 8007bec:	3fdb6db6 	.word	0x3fdb6db6
 8007bf0:	33333303 	.word	0x33333303
 8007bf4:	3fe33333 	.word	0x3fe33333
 8007bf8:	e0000000 	.word	0xe0000000
 8007bfc:	3feec709 	.word	0x3feec709
 8007c00:	dc3a03fd 	.word	0xdc3a03fd
 8007c04:	3feec709 	.word	0x3feec709
 8007c08:	145b01f5 	.word	0x145b01f5
 8007c0c:	be3e2fe0 	.word	0xbe3e2fe0
 8007c10:	7ff00000 	.word	0x7ff00000
 8007c14:	43400000 	.word	0x43400000
 8007c18:	0003988e 	.word	0x0003988e
 8007c1c:	000bb679 	.word	0x000bb679
 8007c20:	08008350 	.word	0x08008350
 8007c24:	3ff00000 	.word	0x3ff00000
 8007c28:	40080000 	.word	0x40080000
 8007c2c:	08008370 	.word	0x08008370
 8007c30:	08008360 	.word	0x08008360
 8007c34:	2601      	movs	r6, #1
 8007c36:	e667      	b.n	8007908 <__ieee754_pow+0x420>
 8007c38:	a39d      	add	r3, pc, #628	; (adr r3, 8007eb0 <__ieee754_pow+0x9c8>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	4640      	mov	r0, r8
 8007c40:	4649      	mov	r1, r9
 8007c42:	f7f8 fa8b 	bl	800015c <__adddf3>
 8007c46:	4622      	mov	r2, r4
 8007c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	4650      	mov	r0, sl
 8007c50:	4639      	mov	r1, r7
 8007c52:	f7f8 fa81 	bl	8000158 <__aeabi_dsub>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c5e:	f7f8 fec3 	bl	80009e8 <__aeabi_dcmpgt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	f47f ae01 	bne.w	800786a <__ieee754_pow+0x382>
 8007c68:	4aa5      	ldr	r2, [pc, #660]	; (8007f00 <__ieee754_pow+0xa18>)
 8007c6a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	f340 8103 	ble.w	8007e7a <__ieee754_pow+0x992>
 8007c74:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007c78:	2000      	movs	r0, #0
 8007c7a:	151b      	asrs	r3, r3, #20
 8007c7c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007c80:	fa4a f303 	asr.w	r3, sl, r3
 8007c84:	4433      	add	r3, r6
 8007c86:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007c8a:	4f9e      	ldr	r7, [pc, #632]	; (8007f04 <__ieee754_pow+0xa1c>)
 8007c8c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007c90:	4117      	asrs	r7, r2
 8007c92:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007c96:	ea23 0107 	bic.w	r1, r3, r7
 8007c9a:	f1c2 0214 	rsb	r2, r2, #20
 8007c9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	fa4a fa02 	asr.w	sl, sl, r2
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	4602      	mov	r2, r0
 8007cac:	4629      	mov	r1, r5
 8007cae:	4620      	mov	r0, r4
 8007cb0:	bfb8      	it	lt
 8007cb2:	f1ca 0a00 	rsblt	sl, sl, #0
 8007cb6:	f7f8 fa4f 	bl	8000158 <__aeabi_dsub>
 8007cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc2:	2400      	movs	r4, #0
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	f7f8 fa48 	bl	800015c <__adddf3>
 8007ccc:	a37a      	add	r3, pc, #488	; (adr r3, 8007eb8 <__ieee754_pow+0x9d0>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	f7f8 fbf7 	bl	80004c8 <__aeabi_dmul>
 8007cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cde:	4606      	mov	r6, r0
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 fa37 	bl	8000158 <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4640      	mov	r0, r8
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	f7f8 fa31 	bl	8000158 <__aeabi_dsub>
 8007cf6:	a372      	add	r3, pc, #456	; (adr r3, 8007ec0 <__ieee754_pow+0x9d8>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fbe4 	bl	80004c8 <__aeabi_dmul>
 8007d00:	a371      	add	r3, pc, #452	; (adr r3, 8007ec8 <__ieee754_pow+0x9e0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	4680      	mov	r8, r0
 8007d08:	4689      	mov	r9, r1
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f7f8 fbdb 	bl	80004c8 <__aeabi_dmul>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4640      	mov	r0, r8
 8007d18:	4649      	mov	r1, r9
 8007d1a:	f7f8 fa1f 	bl	800015c <__adddf3>
 8007d1e:	4604      	mov	r4, r0
 8007d20:	460d      	mov	r5, r1
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	f7f8 fa17 	bl	800015c <__adddf3>
 8007d2e:	4632      	mov	r2, r6
 8007d30:	463b      	mov	r3, r7
 8007d32:	4680      	mov	r8, r0
 8007d34:	4689      	mov	r9, r1
 8007d36:	f7f8 fa0f 	bl	8000158 <__aeabi_dsub>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fa09 	bl	8000158 <__aeabi_dsub>
 8007d46:	4642      	mov	r2, r8
 8007d48:	4606      	mov	r6, r0
 8007d4a:	460f      	mov	r7, r1
 8007d4c:	464b      	mov	r3, r9
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4649      	mov	r1, r9
 8007d52:	f7f8 fbb9 	bl	80004c8 <__aeabi_dmul>
 8007d56:	a35e      	add	r3, pc, #376	; (adr r3, 8007ed0 <__ieee754_pow+0x9e8>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	460d      	mov	r5, r1
 8007d60:	f7f8 fbb2 	bl	80004c8 <__aeabi_dmul>
 8007d64:	a35c      	add	r3, pc, #368	; (adr r3, 8007ed8 <__ieee754_pow+0x9f0>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 f9f5 	bl	8000158 <__aeabi_dsub>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	f7f8 fba9 	bl	80004c8 <__aeabi_dmul>
 8007d76:	a35a      	add	r3, pc, #360	; (adr r3, 8007ee0 <__ieee754_pow+0x9f8>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f7f8 f9ee 	bl	800015c <__adddf3>
 8007d80:	4622      	mov	r2, r4
 8007d82:	462b      	mov	r3, r5
 8007d84:	f7f8 fba0 	bl	80004c8 <__aeabi_dmul>
 8007d88:	a357      	add	r3, pc, #348	; (adr r3, 8007ee8 <__ieee754_pow+0xa00>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 f9e3 	bl	8000158 <__aeabi_dsub>
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	f7f8 fb97 	bl	80004c8 <__aeabi_dmul>
 8007d9a:	a355      	add	r3, pc, #340	; (adr r3, 8007ef0 <__ieee754_pow+0xa08>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 f9dc 	bl	800015c <__adddf3>
 8007da4:	4622      	mov	r2, r4
 8007da6:	462b      	mov	r3, r5
 8007da8:	f7f8 fb8e 	bl	80004c8 <__aeabi_dmul>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4640      	mov	r0, r8
 8007db2:	4649      	mov	r1, r9
 8007db4:	f7f8 f9d0 	bl	8000158 <__aeabi_dsub>
 8007db8:	4604      	mov	r4, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 fb80 	bl	80004c8 <__aeabi_dmul>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f7f8 f9bf 	bl	8000158 <__aeabi_dsub>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de2:	f7f8 fc9b 	bl	800071c <__aeabi_ddiv>
 8007de6:	4632      	mov	r2, r6
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	463b      	mov	r3, r7
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 fb69 	bl	80004c8 <__aeabi_dmul>
 8007df6:	4632      	mov	r2, r6
 8007df8:	463b      	mov	r3, r7
 8007dfa:	f7f8 f9af 	bl	800015c <__adddf3>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4620      	mov	r0, r4
 8007e04:	4629      	mov	r1, r5
 8007e06:	f7f8 f9a7 	bl	8000158 <__aeabi_dsub>
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	f7f8 f9a3 	bl	8000158 <__aeabi_dsub>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	2000      	movs	r0, #0
 8007e18:	493b      	ldr	r1, [pc, #236]	; (8007f08 <__ieee754_pow+0xa20>)
 8007e1a:	f7f8 f99d 	bl	8000158 <__aeabi_dsub>
 8007e1e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007e22:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007e26:	da2b      	bge.n	8007e80 <__ieee754_pow+0x998>
 8007e28:	4652      	mov	r2, sl
 8007e2a:	f000 f9b9 	bl	80081a0 <scalbn>
 8007e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e32:	f7ff bbf2 	b.w	800761a <__ieee754_pow+0x132>
 8007e36:	4b35      	ldr	r3, [pc, #212]	; (8007f0c <__ieee754_pow+0xa24>)
 8007e38:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007e3c:	429f      	cmp	r7, r3
 8007e3e:	f77f af13 	ble.w	8007c68 <__ieee754_pow+0x780>
 8007e42:	4b33      	ldr	r3, [pc, #204]	; (8007f10 <__ieee754_pow+0xa28>)
 8007e44:	440b      	add	r3, r1
 8007e46:	4303      	orrs	r3, r0
 8007e48:	d00b      	beq.n	8007e62 <__ieee754_pow+0x97a>
 8007e4a:	a32b      	add	r3, pc, #172	; (adr r3, 8007ef8 <__ieee754_pow+0xa10>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e54:	f7f8 fb38 	bl	80004c8 <__aeabi_dmul>
 8007e58:	a327      	add	r3, pc, #156	; (adr r3, 8007ef8 <__ieee754_pow+0xa10>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7ff bbdc 	b.w	800761a <__ieee754_pow+0x132>
 8007e62:	4622      	mov	r2, r4
 8007e64:	462b      	mov	r3, r5
 8007e66:	f7f8 f977 	bl	8000158 <__aeabi_dsub>
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	f7f8 fdb1 	bl	80009d4 <__aeabi_dcmpge>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f43f aef8 	beq.w	8007c68 <__ieee754_pow+0x780>
 8007e78:	e7e7      	b.n	8007e4a <__ieee754_pow+0x962>
 8007e7a:	f04f 0a00 	mov.w	sl, #0
 8007e7e:	e71e      	b.n	8007cbe <__ieee754_pow+0x7d6>
 8007e80:	4621      	mov	r1, r4
 8007e82:	e7d4      	b.n	8007e2e <__ieee754_pow+0x946>
 8007e84:	f04f 0b00 	mov.w	fp, #0
 8007e88:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007f08 <__ieee754_pow+0xa20>
 8007e8c:	f7ff bbb0 	b.w	80075f0 <__ieee754_pow+0x108>
 8007e90:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007e94:	f7ff bbac 	b.w	80075f0 <__ieee754_pow+0x108>
 8007e98:	4638      	mov	r0, r7
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	f7ff bbbf 	b.w	800761e <__ieee754_pow+0x136>
 8007ea0:	9200      	str	r2, [sp, #0]
 8007ea2:	f7ff bb7f 	b.w	80075a4 <__ieee754_pow+0xbc>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f7ff bb69 	b.w	800757e <__ieee754_pow+0x96>
 8007eac:	f3af 8000 	nop.w
 8007eb0:	652b82fe 	.word	0x652b82fe
 8007eb4:	3c971547 	.word	0x3c971547
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	3fe62e43 	.word	0x3fe62e43
 8007ec0:	fefa39ef 	.word	0xfefa39ef
 8007ec4:	3fe62e42 	.word	0x3fe62e42
 8007ec8:	0ca86c39 	.word	0x0ca86c39
 8007ecc:	be205c61 	.word	0xbe205c61
 8007ed0:	72bea4d0 	.word	0x72bea4d0
 8007ed4:	3e663769 	.word	0x3e663769
 8007ed8:	c5d26bf1 	.word	0xc5d26bf1
 8007edc:	3ebbbd41 	.word	0x3ebbbd41
 8007ee0:	af25de2c 	.word	0xaf25de2c
 8007ee4:	3f11566a 	.word	0x3f11566a
 8007ee8:	16bebd93 	.word	0x16bebd93
 8007eec:	3f66c16c 	.word	0x3f66c16c
 8007ef0:	5555553e 	.word	0x5555553e
 8007ef4:	3fc55555 	.word	0x3fc55555
 8007ef8:	c2f8f359 	.word	0xc2f8f359
 8007efc:	01a56e1f 	.word	0x01a56e1f
 8007f00:	3fe00000 	.word	0x3fe00000
 8007f04:	000fffff 	.word	0x000fffff
 8007f08:	3ff00000 	.word	0x3ff00000
 8007f0c:	4090cbff 	.word	0x4090cbff
 8007f10:	3f6f3400 	.word	0x3f6f3400

08007f14 <__ieee754_sqrt>:
 8007f14:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008068 <__ieee754_sqrt+0x154>
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007f20:	460b      	mov	r3, r1
 8007f22:	4606      	mov	r6, r0
 8007f24:	460d      	mov	r5, r1
 8007f26:	460a      	mov	r2, r1
 8007f28:	4607      	mov	r7, r0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	d10e      	bne.n	8007f4c <__ieee754_sqrt+0x38>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	f7f8 faca 	bl	80004c8 <__aeabi_dmul>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	f7f8 f90e 	bl	800015c <__adddf3>
 8007f40:	4606      	mov	r6, r0
 8007f42:	460d      	mov	r5, r1
 8007f44:	4630      	mov	r0, r6
 8007f46:	4629      	mov	r1, r5
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	dc0d      	bgt.n	8007f6c <__ieee754_sqrt+0x58>
 8007f50:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007f54:	ea5c 0707 	orrs.w	r7, ip, r7
 8007f58:	d0f4      	beq.n	8007f44 <__ieee754_sqrt+0x30>
 8007f5a:	b139      	cbz	r1, 8007f6c <__ieee754_sqrt+0x58>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	f7f8 f8fb 	bl	8000158 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	f7f8 fbd9 	bl	800071c <__aeabi_ddiv>
 8007f6a:	e7e9      	b.n	8007f40 <__ieee754_sqrt+0x2c>
 8007f6c:	1512      	asrs	r2, r2, #20
 8007f6e:	d074      	beq.n	800805a <__ieee754_sqrt+0x146>
 8007f70:	2000      	movs	r0, #0
 8007f72:	07d5      	lsls	r5, r2, #31
 8007f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f78:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8007f7c:	bf5e      	ittt	pl
 8007f7e:	0fe3      	lsrpl	r3, r4, #31
 8007f80:	0064      	lslpl	r4, r4, #1
 8007f82:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8007f86:	0fe3      	lsrs	r3, r4, #31
 8007f88:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007f8c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007f90:	2516      	movs	r5, #22
 8007f92:	4601      	mov	r1, r0
 8007f94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007f98:	1076      	asrs	r6, r6, #1
 8007f9a:	0064      	lsls	r4, r4, #1
 8007f9c:	188f      	adds	r7, r1, r2
 8007f9e:	429f      	cmp	r7, r3
 8007fa0:	bfde      	ittt	le
 8007fa2:	1bdb      	suble	r3, r3, r7
 8007fa4:	18b9      	addle	r1, r7, r2
 8007fa6:	1880      	addle	r0, r0, r2
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	3d01      	subs	r5, #1
 8007fac:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007fb0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007fb4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007fb8:	d1f0      	bne.n	8007f9c <__ieee754_sqrt+0x88>
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f04f 0e20 	mov.w	lr, #32
 8007fc0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007fc4:	428b      	cmp	r3, r1
 8007fc6:	eb07 0c05 	add.w	ip, r7, r5
 8007fca:	dc02      	bgt.n	8007fd2 <__ieee754_sqrt+0xbe>
 8007fcc:	d113      	bne.n	8007ff6 <__ieee754_sqrt+0xe2>
 8007fce:	45a4      	cmp	ip, r4
 8007fd0:	d811      	bhi.n	8007ff6 <__ieee754_sqrt+0xe2>
 8007fd2:	f1bc 0f00 	cmp.w	ip, #0
 8007fd6:	eb0c 0507 	add.w	r5, ip, r7
 8007fda:	da43      	bge.n	8008064 <__ieee754_sqrt+0x150>
 8007fdc:	2d00      	cmp	r5, #0
 8007fde:	db41      	blt.n	8008064 <__ieee754_sqrt+0x150>
 8007fe0:	f101 0801 	add.w	r8, r1, #1
 8007fe4:	1a5b      	subs	r3, r3, r1
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	45a4      	cmp	ip, r4
 8007fea:	bf88      	it	hi
 8007fec:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007ff0:	eba4 040c 	sub.w	r4, r4, ip
 8007ff4:	443a      	add	r2, r7
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	f1be 0e01 	subs.w	lr, lr, #1
 8007ffc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008000:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008004:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008008:	d1dc      	bne.n	8007fc4 <__ieee754_sqrt+0xb0>
 800800a:	4323      	orrs	r3, r4
 800800c:	d006      	beq.n	800801c <__ieee754_sqrt+0x108>
 800800e:	1c54      	adds	r4, r2, #1
 8008010:	bf0b      	itete	eq
 8008012:	4672      	moveq	r2, lr
 8008014:	3201      	addne	r2, #1
 8008016:	3001      	addeq	r0, #1
 8008018:	f022 0201 	bicne.w	r2, r2, #1
 800801c:	1043      	asrs	r3, r0, #1
 800801e:	07c1      	lsls	r1, r0, #31
 8008020:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008024:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008028:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800802c:	bf48      	it	mi
 800802e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008032:	4610      	mov	r0, r2
 8008034:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008038:	e782      	b.n	8007f40 <__ieee754_sqrt+0x2c>
 800803a:	0ae3      	lsrs	r3, r4, #11
 800803c:	3915      	subs	r1, #21
 800803e:	0564      	lsls	r4, r4, #21
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0fa      	beq.n	800803a <__ieee754_sqrt+0x126>
 8008044:	02de      	lsls	r6, r3, #11
 8008046:	d50a      	bpl.n	800805e <__ieee754_sqrt+0x14a>
 8008048:	f1c2 0020 	rsb	r0, r2, #32
 800804c:	fa24 f000 	lsr.w	r0, r4, r0
 8008050:	1e55      	subs	r5, r2, #1
 8008052:	4094      	lsls	r4, r2
 8008054:	4303      	orrs	r3, r0
 8008056:	1b4a      	subs	r2, r1, r5
 8008058:	e78a      	b.n	8007f70 <__ieee754_sqrt+0x5c>
 800805a:	4611      	mov	r1, r2
 800805c:	e7f0      	b.n	8008040 <__ieee754_sqrt+0x12c>
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	3201      	adds	r2, #1
 8008062:	e7ef      	b.n	8008044 <__ieee754_sqrt+0x130>
 8008064:	4688      	mov	r8, r1
 8008066:	e7bd      	b.n	8007fe4 <__ieee754_sqrt+0xd0>
 8008068:	7ff00000 	.word	0x7ff00000

0800806c <fabs>:
 800806c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008070:	4770      	bx	lr

08008072 <finite>:
 8008072:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8008076:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800807a:	0fc0      	lsrs	r0, r0, #31
 800807c:	4770      	bx	lr
	...

08008080 <nan>:
 8008080:	2000      	movs	r0, #0
 8008082:	4901      	ldr	r1, [pc, #4]	; (8008088 <nan+0x8>)
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	7ff80000 	.word	0x7ff80000

0800808c <rint>:
 800808c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8008090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008092:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8008096:	2f13      	cmp	r7, #19
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	460c      	mov	r4, r1
 800809e:	4605      	mov	r5, r0
 80080a0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80080a4:	dc59      	bgt.n	800815a <rint+0xce>
 80080a6:	2f00      	cmp	r7, #0
 80080a8:	da2a      	bge.n	8008100 <rint+0x74>
 80080aa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80080ae:	4301      	orrs	r1, r0
 80080b0:	d022      	beq.n	80080f8 <rint+0x6c>
 80080b2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80080b6:	4301      	orrs	r1, r0
 80080b8:	424d      	negs	r5, r1
 80080ba:	430d      	orrs	r5, r1
 80080bc:	4936      	ldr	r1, [pc, #216]	; (8008198 <rint+0x10c>)
 80080be:	0c5c      	lsrs	r4, r3, #17
 80080c0:	0b2d      	lsrs	r5, r5, #12
 80080c2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80080c6:	0464      	lsls	r4, r4, #17
 80080c8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080cc:	ea45 0304 	orr.w	r3, r5, r4
 80080d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 f840 	bl	800015c <__adddf3>
 80080dc:	e9cd 0100 	strd	r0, r1, [sp]
 80080e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e4:	462b      	mov	r3, r5
 80080e6:	4622      	mov	r2, r4
 80080e8:	f7f8 f836 	bl	8000158 <__aeabi_dsub>
 80080ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080f0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4610      	mov	r0, r2
 80080fa:	4619      	mov	r1, r3
 80080fc:	b003      	add	sp, #12
 80080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008100:	4926      	ldr	r1, [pc, #152]	; (800819c <rint+0x110>)
 8008102:	4139      	asrs	r1, r7
 8008104:	ea03 0001 	and.w	r0, r3, r1
 8008108:	4310      	orrs	r0, r2
 800810a:	d0f5      	beq.n	80080f8 <rint+0x6c>
 800810c:	084b      	lsrs	r3, r1, #1
 800810e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8008112:	ea52 0501 	orrs.w	r5, r2, r1
 8008116:	d00c      	beq.n	8008132 <rint+0xa6>
 8008118:	ea24 0303 	bic.w	r3, r4, r3
 800811c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8008120:	2f13      	cmp	r7, #19
 8008122:	bf0c      	ite	eq
 8008124:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8008128:	2500      	movne	r5, #0
 800812a:	fa44 f707 	asr.w	r7, r4, r7
 800812e:	ea43 0407 	orr.w	r4, r3, r7
 8008132:	4919      	ldr	r1, [pc, #100]	; (8008198 <rint+0x10c>)
 8008134:	4623      	mov	r3, r4
 8008136:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800813a:	462a      	mov	r2, r5
 800813c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008140:	4620      	mov	r0, r4
 8008142:	4629      	mov	r1, r5
 8008144:	f7f8 f80a 	bl	800015c <__adddf3>
 8008148:	e9cd 0100 	strd	r0, r1, [sp]
 800814c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008150:	4622      	mov	r2, r4
 8008152:	462b      	mov	r3, r5
 8008154:	f7f8 f800 	bl	8000158 <__aeabi_dsub>
 8008158:	e7cc      	b.n	80080f4 <rint+0x68>
 800815a:	2f33      	cmp	r7, #51	; 0x33
 800815c:	dd05      	ble.n	800816a <rint+0xde>
 800815e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8008162:	d1c9      	bne.n	80080f8 <rint+0x6c>
 8008164:	f7f7 fffa 	bl	800015c <__adddf3>
 8008168:	e7c4      	b.n	80080f4 <rint+0x68>
 800816a:	f04f 31ff 	mov.w	r1, #4294967295
 800816e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8008172:	fa21 f10c 	lsr.w	r1, r1, ip
 8008176:	4208      	tst	r0, r1
 8008178:	d0be      	beq.n	80080f8 <rint+0x6c>
 800817a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800817e:	bf18      	it	ne
 8008180:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8008184:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8008188:	bf1e      	ittt	ne
 800818a:	ea20 0303 	bicne.w	r3, r0, r3
 800818e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8008192:	ea43 050c 	orrne.w	r5, r3, ip
 8008196:	e7cc      	b.n	8008132 <rint+0xa6>
 8008198:	08008380 	.word	0x08008380
 800819c:	000fffff 	.word	0x000fffff

080081a0 <scalbn>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	4617      	mov	r7, r2
 80081ac:	460b      	mov	r3, r1
 80081ae:	b996      	cbnz	r6, 80081d6 <scalbn+0x36>
 80081b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081b4:	4303      	orrs	r3, r0
 80081b6:	d039      	beq.n	800822c <scalbn+0x8c>
 80081b8:	4b35      	ldr	r3, [pc, #212]	; (8008290 <scalbn+0xf0>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7f8 f984 	bl	80004c8 <__aeabi_dmul>
 80081c0:	4b34      	ldr	r3, [pc, #208]	; (8008294 <scalbn+0xf4>)
 80081c2:	4604      	mov	r4, r0
 80081c4:	429f      	cmp	r7, r3
 80081c6:	460d      	mov	r5, r1
 80081c8:	da0f      	bge.n	80081ea <scalbn+0x4a>
 80081ca:	a32d      	add	r3, pc, #180	; (adr r3, 8008280 <scalbn+0xe0>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 f97a 	bl	80004c8 <__aeabi_dmul>
 80081d4:	e006      	b.n	80081e4 <scalbn+0x44>
 80081d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081da:	4296      	cmp	r6, r2
 80081dc:	d10a      	bne.n	80081f4 <scalbn+0x54>
 80081de:	4602      	mov	r2, r0
 80081e0:	f7f7 ffbc 	bl	800015c <__adddf3>
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	e020      	b.n	800822c <scalbn+0x8c>
 80081ea:	460b      	mov	r3, r1
 80081ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80081f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80081f8:	19b9      	adds	r1, r7, r6
 80081fa:	4291      	cmp	r1, r2
 80081fc:	dd0e      	ble.n	800821c <scalbn+0x7c>
 80081fe:	a322      	add	r3, pc, #136	; (adr r3, 8008288 <scalbn+0xe8>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008208:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800820c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008210:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008214:	4820      	ldr	r0, [pc, #128]	; (8008298 <scalbn+0xf8>)
 8008216:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800821a:	e7d9      	b.n	80081d0 <scalbn+0x30>
 800821c:	2900      	cmp	r1, #0
 800821e:	dd08      	ble.n	8008232 <scalbn+0x92>
 8008220:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008228:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008232:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008236:	da16      	bge.n	8008266 <scalbn+0xc6>
 8008238:	f24c 3350 	movw	r3, #50000	; 0xc350
 800823c:	429f      	cmp	r7, r3
 800823e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008242:	dd08      	ble.n	8008256 <scalbn+0xb6>
 8008244:	4c15      	ldr	r4, [pc, #84]	; (800829c <scalbn+0xfc>)
 8008246:	4814      	ldr	r0, [pc, #80]	; (8008298 <scalbn+0xf8>)
 8008248:	f363 74df 	bfi	r4, r3, #31, #1
 800824c:	a30e      	add	r3, pc, #56	; (adr r3, 8008288 <scalbn+0xe8>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	4621      	mov	r1, r4
 8008254:	e7bc      	b.n	80081d0 <scalbn+0x30>
 8008256:	4c12      	ldr	r4, [pc, #72]	; (80082a0 <scalbn+0x100>)
 8008258:	4812      	ldr	r0, [pc, #72]	; (80082a4 <scalbn+0x104>)
 800825a:	f363 74df 	bfi	r4, r3, #31, #1
 800825e:	a308      	add	r3, pc, #32	; (adr r3, 8008280 <scalbn+0xe0>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	e7f5      	b.n	8008252 <scalbn+0xb2>
 8008266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800826a:	3136      	adds	r1, #54	; 0x36
 800826c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008270:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	2200      	movs	r2, #0
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <scalbn+0x108>)
 800827c:	e7a8      	b.n	80081d0 <scalbn+0x30>
 800827e:	bf00      	nop
 8008280:	c2f8f359 	.word	0xc2f8f359
 8008284:	01a56e1f 	.word	0x01a56e1f
 8008288:	8800759c 	.word	0x8800759c
 800828c:	7e37e43c 	.word	0x7e37e43c
 8008290:	43500000 	.word	0x43500000
 8008294:	ffff3cb0 	.word	0xffff3cb0
 8008298:	8800759c 	.word	0x8800759c
 800829c:	7e37e43c 	.word	0x7e37e43c
 80082a0:	01a56e1f 	.word	0x01a56e1f
 80082a4:	c2f8f359 	.word	0xc2f8f359
 80082a8:	3c900000 	.word	0x3c900000

080082ac <_init>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr

080082b8 <_fini>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr
