
logic-design-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08009548  08009548  00019548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009984  08009984  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009984  08009984  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009984  08009984  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009984  08009984  00019984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800998c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001e0  08009b6c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08009b6c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001429f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d6  00000000  00000000  000344a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00036d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00037e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019880  00000000  00000000  00038dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001383b  00000000  00000000  00052640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f304  00000000  00000000  00065e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f517f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005734  00000000  00000000  000f51d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800952c 	.word	0x0800952c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800952c 	.word	0x0800952c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <DHT20_Init>:
#include <dht20.h>

#include "i2c_master.h"
#define Slave_address_dht20 0x38

void DHT20_Init(DHT20_t *dht20, I2C_HandleTypeDef *hi2c) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
    dht20->hi2c = hi2c;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	601a      	str	r2, [r3, #0]
    dht20->humidity = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
    dht20->temperature = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    dht20->humOffset = 0;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f04f 0200 	mov.w	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    dht20->tempOffset = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
    dht20->status = DHT20_OK;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	751a      	strb	r2, [r3, #20]
    dht20->lastRequest = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    dht20->lastRead = 0;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <DHT20_IsConnected>:



uint8_t DHT20_IsConnected(DHT20_t *dht20) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	6078      	str	r0, [r7, #4]
    uint8_t dummy = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &dummy, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	f107 020f 	add.w	r2, r7, #15
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	2170      	movs	r1, #112	; 0x70
 8000b92:	f001 fccf 	bl	8002534 <HAL_I2C_Master_Transmit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <DHT20_IsConnected+0x2c>
        return 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <DHT20_IsConnected+0x2e>
    }
    return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <DHT20_RequestData>:

uint8_t DHT20_RequestData(DHT20_t *dht20) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
    uint8_t data[3] = {0xAC, 0x33, 0x00};
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <DHT20_RequestData+0x50>)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	8019      	strh	r1, [r3, #0]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	0c12      	lsrs	r2, r2, #16
 8000bc4:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f107 020c 	add.w	r2, r7, #12
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	2170      	movs	r1, #112	; 0x70
 8000bd8:	f001 fcac 	bl	8002534 <HAL_I2C_Master_Transmit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <DHT20_RequestData+0x3a>
        return DHT20_ERROR_CONNECT;
 8000be2:	2302      	movs	r3, #2
 8000be4:	e005      	b.n	8000bf2 <DHT20_RequestData+0x46>
    }
    dht20->lastRequest = HAL_GetTick();
 8000be6:	f000 ffb5 	bl	8001b54 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
    return DHT20_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08009548 	.word	0x08009548

08000c00 <DHT20_ReadData>:


uint8_t DHT20_ReadData(DHT20_t *dht20) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
    uint8_t length = 7;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, dht20->bytes, length, HAL_MAX_DELAY) != HAL_OK) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f103 0220 	add.w	r2, r3, #32
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1e:	9100      	str	r1, [sp, #0]
 8000c20:	2170      	movs	r1, #112	; 0x70
 8000c22:	f001 fd85 	bl	8002730 <HAL_I2C_Master_Receive>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <DHT20_ReadData+0x30>
        return DHT20_ERROR_CONNECT;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e020      	b.n	8000c72 <DHT20_ReadData+0x72>
    }

    // Kiểm tra nếu tất cả các byte đều bằng 0
    uint8_t allZero = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < length; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	e00c      	b.n	8000c54 <DHT20_ReadData+0x54>
        if (dht20->bytes[i] != 0) {
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4413      	add	r3, r2
 8000c40:	3320      	adds	r3, #32
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <DHT20_ReadData+0x4e>
            allZero = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
            break;
 8000c4c:	e006      	b.n	8000c5c <DHT20_ReadData+0x5c>
    for (int i = 0; i < length; i++) {
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	3301      	adds	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbee      	blt.n	8000c3a <DHT20_ReadData+0x3a>
        }
    }
    if (allZero) return DHT20_ERROR_BYTES_ALL_ZERO;
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <DHT20_ReadData+0x66>
 8000c62:	2304      	movs	r3, #4
 8000c64:	e005      	b.n	8000c72 <DHT20_ReadData+0x72>

    dht20->lastRead = HAL_GetTick();
 8000c66:	f000 ff75 	bl	8001b54 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	61da      	str	r2, [r3, #28]
    return DHT20_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <DHT20_Convert>:


uint8_t DHT20_Convert(DHT20_t *dht20) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    dht20->status = dht20->bytes[0];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	751a      	strb	r2, [r3, #20]

    // Chuyển đổi độ ẩm
    uint32_t rawHumidity = (dht20->bytes[1] << 12) | (dht20->bytes[2] << 4) | (dht20->bytes[3] >> 4);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c94:	031a      	lsls	r2, r3, #12
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000ca6:	0912      	lsrs	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	4313      	orrs	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]
    dht20->humidity = rawHumidity * 9.5367431640625e-5; // Chuyển đổi theo công thức datasheet
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff fb98 	bl	80003e4 <__aeabi_ui2d>
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <DHT20_Convert+0xd4>)
 8000cba:	f7ff fc0d 	bl	80004d8 <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4610      	mov	r0, r2
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f7ff fedf 	bl	8000a88 <__aeabi_d2f>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	605a      	str	r2, [r3, #4]

    // Chuyển đổi nhiệt độ
    uint32_t rawTemperature = ((dht20->bytes[3] & 0x0F) << 16) | (dht20->bytes[4] << 8) | dht20->bytes[5];
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
    dht20->temperature = rawTemperature * 1.9073486328125e-4 - 50; // Chuyển đổi theo công thức datasheet
 8000cf0:	6938      	ldr	r0, [r7, #16]
 8000cf2:	f7ff fb77 	bl	80003e4 <__aeabi_ui2d>
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <DHT20_Convert+0xd8>)
 8000cfc:	f7ff fbec 	bl	80004d8 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <DHT20_Convert+0xdc>)
 8000d0e:	f7ff fa2b 	bl	8000168 <__aeabi_dsub>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f7ff feb5 	bl	8000a88 <__aeabi_d2f>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]

    // Kiểm tra CRC
    uint8_t crc = DHT20_CRC8(dht20->bytes, 6);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3320      	adds	r3, #32
 8000d28:	2106      	movs	r1, #6
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f82f 	bl	8000d8e <DHT20_CRC8>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
    if (crc != dht20->bytes[6]) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000d3a:	7bfa      	ldrb	r2, [r7, #15]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d001      	beq.n	8000d44 <DHT20_Convert+0xc8>
        return DHT20_ERROR_CHECKSUM;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <DHT20_Convert+0xca>
    }

    return DHT20_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	3f190000 	.word	0x3f190000
 8000d54:	3f290000 	.word	0x3f290000
 8000d58:	40490000 	.word	0x40490000

08000d5c <DHT20_ReadStatus>:
    if (status < 0) return status;

    return DHT20_Convert(dht20);
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1, HAL_MAX_DELAY);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	f107 020f 	add.w	r2, r7, #15
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	2170      	movs	r1, #112	; 0x70
 8000d7a:	f001 fcd9 	bl	8002730 <HAL_I2C_Master_Receive>
    HAL_Delay(1);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fef2 	bl	8001b68 <HAL_Delay>
    return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <DHT20_CRC8>:

uint8_t DHT20_IsMeasuring(DHT20_t *dht20) {
    return (DHT20_ReadStatus(dht20) & 0x80) == 0x80;
}

uint8_t DHT20_CRC8(uint8_t *ptr, uint8_t len) {
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000d9a:	23ff      	movs	r3, #255	; 0xff
 8000d9c:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 8000d9e:	e01e      	b.n	8000dde <DHT20_CRC8+0x50>
        crc ^= *ptr++;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	4053      	eors	r3, r2
 8000dac:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
 8000db2:	e011      	b.n	8000dd8 <DHT20_CRC8+0x4a>
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da07      	bge.n	8000dcc <DHT20_CRC8+0x3e>
            crc = (crc << 1) ^ 0x31;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e002      	b.n	8000dd2 <DHT20_CRC8+0x44>
        } else {
            crc <<= 1;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	73bb      	strb	r3, [r7, #14]
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	d9ea      	bls.n	8000db4 <DHT20_CRC8+0x26>
    while (len--) {
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	70fa      	strb	r2, [r7, #3]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1db      	bne.n	8000da0 <DHT20_CRC8+0x12>
        }
    }
}
return crc;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <DHT20_ResetSensor>:

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
uint8_t count = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

// Đọc trạng thái và reset nếu không phải là 0x18
if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffab 	bl	8000d5c <DHT20_ReadStatus>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f003 0318 	and.w	r3, r3, #24
 8000e0c:	2b18      	cmp	r3, #24
 8000e0e:	d023      	beq.n	8000e58 <DHT20_ResetSensor+0x64>
    count++;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	3301      	adds	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1B)) count++;
 8000e16:	211b      	movs	r1, #27
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f823 	bl	8000e64 <DHT20_ResetRegister>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <DHT20_ResetSensor+0x36>
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	3301      	adds	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1C)) count++;
 8000e2a:	211c      	movs	r1, #28
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f819 	bl	8000e64 <DHT20_ResetRegister>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <DHT20_ResetSensor+0x4a>
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1E)) count++;
 8000e3e:	211e      	movs	r1, #30
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f80f 	bl	8000e64 <DHT20_ResetRegister>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <DHT20_ResetSensor+0x5e>
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8000e52:	200a      	movs	r0, #10
 8000e54:	f000 fe88 	bl	8001b68 <HAL_Delay>
}
return count;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <DHT20_ResetRegister>:

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
uint8_t value[3] = {0};
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <DHT20_ResetRegister+0xa4>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	81bb      	strh	r3, [r7, #12]
 8000e76:	2300      	movs	r3, #0
 8000e78:	73bb      	strb	r3, [r7, #14]

// Bắt đầu giao tiếp với cảm biến để reset
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	1cfa      	adds	r2, r7, #3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	2170      	movs	r1, #112	; 0x70
 8000e8a:	f001 fb53 	bl	8002534 <HAL_I2C_Master_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <DHT20_ResetRegister+0x34>
    return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e032      	b.n	8000efe <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f000 fe65 	bl	8001b68 <HAL_Delay>

// Đọc giá trị từ cảm biến
if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2303      	movs	r3, #3
 8000eae:	2170      	movs	r1, #112	; 0x70
 8000eb0:	f001 fc3e 	bl	8002730 <HAL_I2C_Master_Receive>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <DHT20_ResetRegister+0x5a>
    return 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e01f      	b.n	8000efe <DHT20_ResetRegister+0x9a>
}
HAL_Delay(10);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f000 fe52 	bl	8001b68 <HAL_Delay>

// Ghi lại giá trị điều chỉnh vào thanh ghi
uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	723b      	strb	r3, [r7, #8]
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	727b      	strb	r3, [r7, #9]
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	72bb      	strb	r3, [r7, #10]
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	2170      	movs	r1, #112	; 0x70
 8000ee8:	f001 fb24 	bl	8002534 <HAL_I2C_Master_Transmit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <DHT20_ResetRegister+0x92>
    return 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e003      	b.n	8000efe <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8000ef6:	2005      	movs	r0, #5
 8000ef8:	f000 fe36 	bl	8001b68 <HAL_Delay>

return 1;
 8000efc:	2301      	movs	r3, #1
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	0800954c 	.word	0x0800954c

08000f0c <lcd_send_buffer>:
state status;
DHT20_t dht20;   // Định nghĩa cấu trúc DHT20
status_active active;      // Định nghĩa biến trạng thái hoạt động
static char lcd_buffer_1[17];
static char lcd_buffer_2[17];
static void lcd_send_buffer(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	lcd_goto_XY(1, 0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f9bd 	bl	8001292 <lcd_goto_XY>
	lcd_send_string(lcd_buffer_1);
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <lcd_send_buffer+0x24>)
 8000f1a:	f000 f9a5 	bl	8001268 <lcd_send_string>
	lcd_goto_XY(2, 0);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2002      	movs	r0, #2
 8000f22:	f000 f9b6 	bl	8001292 <lcd_goto_XY>
	lcd_send_string(lcd_buffer_2);
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <lcd_send_buffer+0x28>)
 8000f28:	f000 f99e 	bl	8001268 <lcd_send_string>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001fc 	.word	0x200001fc
 8000f34:	20000210 	.word	0x20000210

08000f38 <global_init>:
void global_init(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	lcd_init();
 8000f3c:	f000 f966 	bl	800120c <lcd_init>
	DHT20_Init(&dht20, &hi2c1);
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <global_init+0x28>)
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <global_init+0x2c>)
 8000f44:	f7ff fdf0 	bl	8000b28 <DHT20_Init>
	lcd_send_string("Loading...");
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <global_init+0x30>)
 8000f4a:	f000 f98d 	bl	8001268 <lcd_send_string>
	setTimer(GLOBAL_TIMER, 100); // Cho khoi dong cac thiet bi
 8000f4e:	2164      	movs	r1, #100	; 0x64
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 fb17 	bl	8001584 <setTimer>
	status = INIT;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <global_init+0x34>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000240 	.word	0x20000240
 8000f64:	20000298 	.word	0x20000298
 8000f68:	08009550 	.word	0x08009550
 8000f6c:	200002c0 	.word	0x200002c0

08000f70 <global_fsm>:
void global_fsm(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af02      	add	r7, sp, #8
	switch(status){
 8000f76:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <global_fsm+0x1c0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	f200 80cb 	bhi.w	8001116 <global_fsm+0x1a6>
 8000f80:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <global_fsm+0x18>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000fad 	.word	0x08000fad
 8000f8c:	08000fc3 	.word	0x08000fc3
 8000f90:	08000feb 	.word	0x08000feb
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800105d 	.word	0x0800105d
 8000f9c:	0800109d 	.word	0x0800109d
 8000fa0:	080010bb 	.word	0x080010bb
 8000fa4:	080010ff 	.word	0x080010ff
 8000fa8:	08001107 	.word	0x08001107
	case INIT:
		if(isFlagTimer(GLOBAL_TIMER)){
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 fad9 	bl	8001564 <isFlagTimer>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80b0 	beq.w	800111a <global_fsm+0x1aa>
			status = CHECK_CONNECTION;
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <global_fsm+0x1c0>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
		}
	 	 break;
 8000fc0:	e0ab      	b.n	800111a <global_fsm+0x1aa>
	case CHECK_CONNECTION:
		if(DHT20_IsConnected(&dht20) ){
 8000fc2:	485c      	ldr	r0, [pc, #368]	; (8001134 <global_fsm+0x1c4>)
 8000fc4:	f7ff fdd6 	bl	8000b74 <DHT20_IsConnected>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <global_fsm+0x6c>
			active = DHT20_OK;
 8000fce:	4b5a      	ldr	r3, [pc, #360]	; (8001138 <global_fsm+0x1c8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
			status = CHECK_READY;
 8000fd4:	4b56      	ldr	r3, [pc, #344]	; (8001130 <global_fsm+0x1c0>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
		}
		else{
			active = DHT20_ERROR_CONNECT;
			status = ERROR_STATE;
		}
		break;
 8000fda:	e0a5      	b.n	8001128 <global_fsm+0x1b8>
			active = DHT20_ERROR_CONNECT;
 8000fdc:	4b56      	ldr	r3, [pc, #344]	; (8001138 <global_fsm+0x1c8>)
 8000fde:	2202      	movs	r2, #2
 8000fe0:	701a      	strb	r2, [r3, #0]
			status = ERROR_STATE;
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <global_fsm+0x1c0>)
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	701a      	strb	r2, [r3, #0]
		break;
 8000fe8:	e09e      	b.n	8001128 <global_fsm+0x1b8>
	case CHECK_READY:
		if((DHT20_ReadStatus(&dht20) & 0x18) != 0x18){
 8000fea:	4852      	ldr	r0, [pc, #328]	; (8001134 <global_fsm+0x1c4>)
 8000fec:	f7ff feb6 	bl	8000d5c <DHT20_ReadStatus>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f003 0318 	and.w	r3, r3, #24
 8000ff6:	2b18      	cmp	r3, #24
 8000ff8:	d00a      	beq.n	8001010 <global_fsm+0xa0>
			DHT20_ResetSensor(&dht20);
 8000ffa:	484e      	ldr	r0, [pc, #312]	; (8001134 <global_fsm+0x1c4>)
 8000ffc:	f7ff fefa 	bl	8000df4 <DHT20_ResetSensor>
		 	HAL_Delay(1000);
 8001000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001004:	f000 fdb0 	bl	8001b68 <HAL_Delay>
			status = CHECK_CONNECTION;
 8001008:	4b49      	ldr	r3, [pc, #292]	; (8001130 <global_fsm+0x1c0>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
		}
		else {
			HAL_Delay(10);
			status = REQUEST_DATA;
		}
		break;
 800100e:	e08b      	b.n	8001128 <global_fsm+0x1b8>
			HAL_Delay(10);
 8001010:	200a      	movs	r0, #10
 8001012:	f000 fda9 	bl	8001b68 <HAL_Delay>
			status = REQUEST_DATA;
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <global_fsm+0x1c0>)
 8001018:	2203      	movs	r2, #3
 800101a:	701a      	strb	r2, [r3, #0]
		break;
 800101c:	e084      	b.n	8001128 <global_fsm+0x1b8>
	case REQUEST_DATA:
		if(HAL_GetTick() - dht20.lastRead >= 1000){
 800101e:	f000 fd99 	bl	8001b54 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	4b43      	ldr	r3, [pc, #268]	; (8001134 <global_fsm+0x1c4>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800102e:	d311      	bcc.n	8001054 <global_fsm+0xe4>
			active = DHT20_RequestData(&dht20);
 8001030:	4840      	ldr	r0, [pc, #256]	; (8001134 <global_fsm+0x1c4>)
 8001032:	f7ff fdbb 	bl	8000bac <DHT20_RequestData>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <global_fsm+0x1c8>)
 800103c:	701a      	strb	r2, [r3, #0]
			if (active == DHT20_OK){
 800103e:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <global_fsm+0x1c8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d16b      	bne.n	800111e <global_fsm+0x1ae>
				HAL_Delay(80);
 8001046:	2050      	movs	r0, #80	; 0x50
 8001048:	f000 fd8e 	bl	8001b68 <HAL_Delay>
				status = READ_DATA;
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <global_fsm+0x1c0>)
 800104e:	2204      	movs	r2, #4
 8001050:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_LASTREAD;
		}
		break;
 8001052:	e064      	b.n	800111e <global_fsm+0x1ae>
			active = DHT20_ERROR_LASTREAD;
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <global_fsm+0x1c8>)
 8001056:	2206      	movs	r2, #6
 8001058:	701a      	strb	r2, [r3, #0]
		break;
 800105a:	e060      	b.n	800111e <global_fsm+0x1ae>
	case READ_DATA:
		if(HAL_GetTick() - dht20.lastRequest < 1000){
 800105c:	f000 fd7a 	bl	8001b54 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <global_fsm+0x1c4>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106c:	d212      	bcs.n	8001094 <global_fsm+0x124>
			active = DHT20_ReadData(&dht20);
 800106e:	4831      	ldr	r0, [pc, #196]	; (8001134 <global_fsm+0x1c4>)
 8001070:	f7ff fdc6 	bl	8000c00 <DHT20_ReadData>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <global_fsm+0x1c8>)
 800107a:	701a      	strb	r2, [r3, #0]
			if(active == DHT20_OK){
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <global_fsm+0x1c8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <global_fsm+0x11c>
				status = CONVERT_DATA;
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <global_fsm+0x1c0>)
 8001086:	2205      	movs	r2, #5
 8001088:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_READ_TIMEOUT;
		}
		break;
 800108a:	e04d      	b.n	8001128 <global_fsm+0x1b8>
				status = REQUEST_DATA;
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <global_fsm+0x1c0>)
 800108e:	2203      	movs	r2, #3
 8001090:	701a      	strb	r2, [r3, #0]
		break;
 8001092:	e049      	b.n	8001128 <global_fsm+0x1b8>
			active = DHT20_ERROR_READ_TIMEOUT;
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <global_fsm+0x1c8>)
 8001096:	2205      	movs	r2, #5
 8001098:	701a      	strb	r2, [r3, #0]
		break;
 800109a:	e045      	b.n	8001128 <global_fsm+0x1b8>
	case CONVERT_DATA:
		active = DHT20_Convert(&dht20);
 800109c:	4825      	ldr	r0, [pc, #148]	; (8001134 <global_fsm+0x1c4>)
 800109e:	f7ff fded 	bl	8000c7c <DHT20_Convert>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <global_fsm+0x1c8>)
 80010a8:	701a      	strb	r2, [r3, #0]
		if(active == DHT20_OK){
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <global_fsm+0x1c8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d137      	bne.n	8001122 <global_fsm+0x1b2>
			status = SEND_DATA;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <global_fsm+0x1c0>)
 80010b4:	2206      	movs	r2, #6
 80010b6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010b8:	e033      	b.n	8001122 <global_fsm+0x1b2>
	case SEND_DATA:
		snprintf(lcd_buffer_1,17,"Temp: %.2f",dht20.temperature);
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <global_fsm+0x1c4>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9b2 	bl	8000428 <__aeabi_f2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	e9cd 2300 	strd	r2, r3, [sp]
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <global_fsm+0x1cc>)
 80010ce:	2111      	movs	r1, #17
 80010d0:	481b      	ldr	r0, [pc, #108]	; (8001140 <global_fsm+0x1d0>)
 80010d2:	f005 ffdd 	bl	8007090 <sniprintf>
		snprintf(lcd_buffer_2,17,"Humi: %.2f",dht20.humidity);
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <global_fsm+0x1c4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9a4 	bl	8000428 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9cd 2300 	strd	r2, r3, [sp]
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <global_fsm+0x1d4>)
 80010ea:	2111      	movs	r1, #17
 80010ec:	4816      	ldr	r0, [pc, #88]	; (8001148 <global_fsm+0x1d8>)
 80010ee:	f005 ffcf 	bl	8007090 <sniprintf>
		lcd_send_buffer();
 80010f2:	f7ff ff0b 	bl	8000f0c <lcd_send_buffer>
		status = DONE;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <global_fsm+0x1c0>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	701a      	strb	r2, [r3, #0]
		break;
 80010fc:	e014      	b.n	8001128 <global_fsm+0x1b8>
	case DONE:
	{
		status = CHECK_READY;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <global_fsm+0x1c0>)
 8001100:	2202      	movs	r2, #2
 8001102:	701a      	strb	r2, [r3, #0]
		break;
 8001104:	e010      	b.n	8001128 <global_fsm+0x1b8>
	}
	case ERROR_STATE:
			if(active == DHT20_ERROR_CONNECT){
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <global_fsm+0x1c8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d10b      	bne.n	8001126 <global_fsm+0x1b6>
	 * 		do{
				  HAL_Delay(100);
			  }while(!DHT20_IsConnected(&dht20));
			  active = DHT20_OK;
			 */
			  status = INIT;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <global_fsm+0x1c0>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		  }
		else{
		  }
	    break;
 8001114:	e007      	b.n	8001126 <global_fsm+0x1b6>
	default :
		break;
 8001116:	bf00      	nop
 8001118:	e006      	b.n	8001128 <global_fsm+0x1b8>
	 	 break;
 800111a:	bf00      	nop
 800111c:	e004      	b.n	8001128 <global_fsm+0x1b8>
		break;
 800111e:	bf00      	nop
 8001120:	e002      	b.n	8001128 <global_fsm+0x1b8>
		break;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <global_fsm+0x1b8>
	    break;
 8001126:	bf00      	nop
	}

}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200002c0 	.word	0x200002c0
 8001134:	20000298 	.word	0x20000298
 8001138:	20000294 	.word	0x20000294
 800113c:	0800955c 	.word	0x0800955c
 8001140:	200001fc 	.word	0x200001fc
 8001144:	08009568 	.word	0x08009568
 8001148:	20000210 	.word	0x20000210

0800114c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f023 030f 	bic.w	r3, r3, #15
 800115c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f043 030c 	orr.w	r3, r3, #12
 800116a:	b2db      	uxtb	r3, r3
 800116c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	b2db      	uxtb	r3, r3
 8001176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	f043 030c 	orr.w	r3, r3, #12
 800117e:	b2db      	uxtb	r3, r3
 8001180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	b2db      	uxtb	r3, r3
 800118a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800118c:	f107 0208 	add.w	r2, r7, #8
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2304      	movs	r3, #4
 8001196:	2142      	movs	r1, #66	; 0x42
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <lcd_send_cmd+0x5c>)
 800119a:	f001 f9cb 	bl	8002534 <HAL_I2C_Master_Transmit>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000240 	.word	0x20000240

080011ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f023 030f 	bic.w	r3, r3, #15
 80011bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 030d 	orr.w	r3, r3, #13
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f043 0309 	orr.w	r3, r3, #9
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	f043 030d 	orr.w	r3, r3, #13
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f043 0309 	orr.w	r3, r3, #9
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2304      	movs	r3, #4
 80011f6:	2142      	movs	r1, #66	; 0x42
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <lcd_send_data+0x5c>)
 80011fa:	f001 f99b 	bl	8002534 <HAL_I2C_Master_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000240 	.word	0x20000240

0800120c <lcd_init>:

void lcd_init (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001210:	2033      	movs	r0, #51	; 0x33
 8001212:	f7ff ff9b 	bl	800114c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001216:	2032      	movs	r0, #50	; 0x32
 8001218:	f7ff ff98 	bl	800114c <lcd_send_cmd>
	HAL_Delay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f000 fca3 	bl	8001b68 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001222:	2028      	movs	r0, #40	; 0x28
 8001224:	f7ff ff92 	bl	800114c <lcd_send_cmd>
	HAL_Delay(50);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f000 fc9d 	bl	8001b68 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff ff8c 	bl	800114c <lcd_send_cmd>
	HAL_Delay(50);
 8001234:	2032      	movs	r0, #50	; 0x32
 8001236:	f000 fc97 	bl	8001b68 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800123a:	2006      	movs	r0, #6
 800123c:	f7ff ff86 	bl	800114c <lcd_send_cmd>
	HAL_Delay(50);
 8001240:	2032      	movs	r0, #50	; 0x32
 8001242:	f000 fc91 	bl	8001b68 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001246:	200c      	movs	r0, #12
 8001248:	f7ff ff80 	bl	800114c <lcd_send_cmd>
	HAL_Delay(50);
 800124c:	2032      	movs	r0, #50	; 0x32
 800124e:	f000 fc8b 	bl	8001b68 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff ff7a 	bl	800114c <lcd_send_cmd>
	HAL_Delay(50);
 8001258:	2032      	movs	r0, #50	; 0x32
 800125a:	f000 fc85 	bl	8001b68 <HAL_Delay>
	lcd_send_cmd (0x80);
 800125e:	2080      	movs	r0, #128	; 0x80
 8001260:	f7ff ff74 	bl	800114c <lcd_send_cmd>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001270:	e006      	b.n	8001280 <lcd_send_string+0x18>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff96 	bl	80011ac <lcd_send_data>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f4      	bne.n	8001272 <lcd_send_string+0xa>
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <lcd_goto_XY>:
	lcd_send_cmd (0x01); //clear display

}

void lcd_goto_XY (int row, int col)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d108      	bne.n	80012b4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	337f      	adds	r3, #127	; 0x7f
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e008      	b.n	80012c6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3340      	adds	r3, #64	; 0x40
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff3f 	bl	800114c <lcd_send_cmd>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fbe2 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f812 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f000 f8f0 	bl	80014c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012e8:	f000 f84a 	bl	8001380 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80012ec:	f000 f8c2 	bl	8001474 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80012f0:	f000 f874 	bl	80013dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <main+0x2c>)
 80012f6:	f004 f965 	bl	80055c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  global_init();
 80012fa:	f7ff fe1d 	bl	8000f38 <global_init>
  while (1)
  {
	  global_fsm();
 80012fe:	f7ff fe37 	bl	8000f70 <global_fsm>
 8001302:	e7fc      	b.n	80012fe <main+0x26>
 8001304:	200002c4 	.word	0x200002c4

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b090      	sub	sp, #64	; 0x40
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f005 fa52 	bl	80067c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132e:	2301      	movs	r3, #1
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001332:	2310      	movs	r3, #16
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fce2 	bl	8004d08 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800134a:	f000 f905 	bl	8001558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f003 ff4e 	bl	8005208 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001372:	f000 f8f1 	bl	8001558 <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3740      	adds	r7, #64	; 0x40
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <MX_I2C1_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x50>)
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_I2C1_Init+0x58>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_I2C1_Init+0x50>)
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013be:	f000 ff61 	bl	8002284 <HAL_I2C_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c8:	f000 f8c6 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000240 	.word	0x20000240
 80013d4:	40005400 	.word	0x40005400
 80013d8:	000186a0 	.word	0x000186a0

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_TIM2_Init+0x94>)
 80013fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_TIM2_Init+0x94>)
 8001402:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_TIM2_Init+0x94>)
 8001410:	2209      	movs	r2, #9
 8001412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_TIM2_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_TIM2_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <MX_TIM2_Init+0x94>)
 8001422:	f004 f87f 	bl	8005524 <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800142c:	f000 f894 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_TIM2_Init+0x94>)
 800143e:	f004 fa03 	bl	8005848 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001448:	f000 f886 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001454:	463b      	mov	r3, r7
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM2_Init+0x94>)
 800145a:	f004 fbe5 	bl	8005c28 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 f878 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200002c4 	.word	0x200002c4

08001474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART2_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014ac:	f004 fc2c 	bl	8005d08 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f84f 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000030c 	.word	0x2000030c
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_GPIO_Init+0x74>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <MX_GPIO_Init+0x74>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_GPIO_Init+0x74>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_GPIO_Init+0x74>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a10      	ldr	r2, [pc, #64]	; (800153c <MX_GPIO_Init+0x74>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_GPIO_Init+0x74>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2120      	movs	r1, #32
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <MX_GPIO_Init+0x78>)
 8001512:	f000 fe9f 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8001516:	2320      	movs	r3, #32
 8001518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4619      	mov	r1, r3
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_GPIO_Init+0x78>)
 800152e:	f000 fd0d 	bl	8001f4c <HAL_GPIO_Init>

}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40010800 	.word	0x40010800

08001544 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	timerRun();
 800154c:	f000 f838 	bl	80015c0 <timerRun>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <isFlagTimer+0x1c>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000230 	.word	0x20000230

08001584 <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <setTimer+0x30>)
 8001594:	2100      	movs	r1, #0
 8001596:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration / TIMER_CYCLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <setTimer+0x34>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	fbb1 f2f2 	udiv	r2, r1, r2
 80015a4:	4905      	ldr	r1, [pc, #20]	; (80015bc <setTimer+0x38>)
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000230 	.word	0x20000230
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000224 	.word	0x20000224

080015c0 <timerRun>:
void timerInit(uint32_t prescaler, uint32_t period){
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
	TIMER_CYCLE  = (prescaler+1)*(period+1)*1000/frequency;
}
void timerRun(){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	e01a      	b.n	8001602 <timerRun+0x42>
		if(timer_counters[i] > 0){
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4a11      	ldr	r2, [pc, #68]	; (8001614 <timerRun+0x54>)
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d011      	beq.n	80015fc <timerRun+0x3c>
			timer_counters[i] --;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <timerRun+0x54>)
 80015dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015e0:	3a01      	subs	r2, #1
 80015e2:	490c      	ldr	r1, [pc, #48]	; (8001614 <timerRun+0x54>)
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <timerRun+0x54>)
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <timerRun+0x3c>
				timer_flags[i] = 1;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <timerRun+0x58>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	3301      	adds	r3, #1
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d9e1      	bls.n	80015cc <timerRun+0xc>
			}
		}
	}

}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000224 	.word	0x20000224
 8001618:	20000230 	.word	0x20000230

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_MspInit+0x5c>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_MspInit+0x5c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6193      	str	r3, [r2, #24]
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x5c>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x5c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_MspInit+0x60>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_MspInit+0x60>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a25      	ldr	r2, [pc, #148]	; (8001730 <HAL_I2C_MspInit+0xb0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d142      	bne.n	8001726 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_I2C_MspInit+0xb4>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a23      	ldr	r2, [pc, #140]	; (8001734 <HAL_I2C_MspInit+0xb4>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_I2C_MspInit+0xb4>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016be:	2312      	movs	r3, #18
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	481a      	ldr	r0, [pc, #104]	; (8001738 <HAL_I2C_MspInit+0xb8>)
 80016ce:	f000 fc3d 	bl	8001f4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_I2C_MspInit+0xbc>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_I2C_MspInit+0xbc>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_I2C_MspInit+0xb4>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_I2C_MspInit+0xb4>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_I2C_MspInit+0xb4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201f      	movs	r0, #31
 800170c:	f000 fb27 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001710:	201f      	movs	r0, #31
 8001712:	f000 fb40 	bl	8001d96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2020      	movs	r0, #32
 800171c:	f000 fb1f 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001720:	2020      	movs	r0, #32
 8001722:	f000 fb38 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40005400 	.word	0x40005400
 8001734:	40021000 	.word	0x40021000
 8001738:	40010c00 	.word	0x40010c00
 800173c:	40010000 	.word	0x40010000

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d113      	bne.n	800177a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_TIM_Base_MspInit+0x44>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_TIM_Base_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_TIM_Base_MspInit+0x44>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201c      	movs	r0, #28
 8001770:	f000 faf5 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001774:	201c      	movs	r0, #28
 8001776:	f000 fb0e 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d137      	bne.n	8001818 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b2:	61d3      	str	r3, [r2, #28]
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d8:	2304      	movs	r3, #4
 80017da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_UART_MspInit+0xa0>)
 80017ec:	f000 fbae 	bl	8001f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f0:	2308      	movs	r3, #8
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_UART_MspInit+0xa0>)
 8001804:	f000 fba2 	bl	8001f4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2026      	movs	r0, #38	; 0x26
 800180e:	f000 faa6 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001812:	2026      	movs	r0, #38	; 0x26
 8001814:	f000 fabf 	bl	8001d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004400 	.word	0x40004400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f95d 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM2_IRQHandler+0x10>)
 8001882:	f003 fef1 	bl	8005668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200002c4 	.word	0x200002c4

08001890 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <I2C1_EV_IRQHandler+0x10>)
 8001896:	f001 f9b7 	bl	8002c08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000240 	.word	0x20000240

080018a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <I2C1_ER_IRQHandler+0x10>)
 80018aa:	f001 fb1e 	bl	8002eea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000240 	.word	0x20000240

080018b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <USART2_IRQHandler+0x10>)
 80018be:	f004 fa73 	bl	8005da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000030c 	.word	0x2000030c

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <_kill>:

int _kill(int pid, int sig)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018e4:	f004 ff42 	bl	800676c <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2216      	movs	r2, #22
 80018ec:	601a      	str	r2, [r3, #0]
	return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_exit>:

void _exit (int status)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001902:	f04f 31ff 	mov.w	r1, #4294967295
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffe7 	bl	80018da <_kill>
	while (1) {}		/* Make sure we hang here */
 800190c:	e7fe      	b.n	800190c <_exit+0x12>

0800190e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e00a      	b.n	8001936 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001920:	f3af 8000 	nop.w
 8001924:	4601      	mov	r1, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60ba      	str	r2, [r7, #8]
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf0      	blt.n	8001920 <_read+0x12>
	}

return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e009      	b.n	800196e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	60ba      	str	r2, [r7, #8]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbf1      	blt.n	800195a <_write+0x12>
	}
	return len;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_close>:

int _close(int file)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
	return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <_isatty>:

int _isatty(int file)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a10:	f004 feac 	bl	800676c <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <_sbrk+0x64>)
 8001a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20005000 	.word	0x20005000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000234 	.word	0x20000234
 8001a48:	20000368 	.word	0x20000368

08001a4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a58:	f7ff fff8 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a5c:	480b      	ldr	r0, [pc, #44]	; (8001a8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a74:	4c09      	ldr	r4, [pc, #36]	; (8001a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a82:	f004 fe79 	bl	8006778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a86:	f7ff fc27 	bl	80012d8 <main>
  bx lr
 8001a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a94:	0800998c 	.word	0x0800998c
  ldr r2, =_sbss
 8001a98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a9c:	20000368 	.word	0x20000368

08001aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_2_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_Init+0x28>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_Init+0x28>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 f947 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	200f      	movs	r0, #15
 8001abc:	f000 f808 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff fdac 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f95f 	bl	8001db2 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 f927 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000004 	.word	0x20000004
 8001b28:	2000000c 	.word	0x2000000c
 8001b2c:	20000008 	.word	0x20000008

08001b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_IncTick+0x1c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_IncTick+0x20>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_IncTick+0x20>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	2000000c 	.word	0x2000000c
 8001b50:	20000354 	.word	0x20000354

08001b54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <HAL_GetTick+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20000354 	.word	0x20000354

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffe0 	bl	8001b54 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000000c 	.word	0x2000000c

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <__NVIC_EnableIRQ+0x34>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff90 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff2d 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff42 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff90 	bl	8001ca0 <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5f 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff35 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d008      	beq.n	8001df4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2204      	movs	r2, #4
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e020      	b.n	8001e36 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 020e 	bic.w	r2, r2, #14
 8001e02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d005      	beq.n	8001e64 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e051      	b.n	8001f08 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 020e 	bic.w	r2, r2, #14
 8001e72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_DMA_Abort_IT+0xd4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d029      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0xa2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <HAL_DMA_Abort_IT+0xd8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_Abort_IT+0x9e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_DMA_Abort_IT+0xdc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01a      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x98>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_DMA_Abort_IT+0xe0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d012      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x92>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_DMA_Abort_IT+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00a      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_DMA_Abort_IT+0xe8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <HAL_DMA_Abort_IT+0x86>
 8001ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ec4:	e00e      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eca:	e00b      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	e008      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	e005      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001edc:	e002      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ede:	2310      	movs	r3, #16
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_Abort_IT+0xa4>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_DMA_Abort_IT+0xec>)
 8001ee6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
    } 
  }
  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40020008 	.word	0x40020008
 8001f18:	4002001c 	.word	0x4002001c
 8001f1c:	40020030 	.word	0x40020030
 8001f20:	40020044 	.word	0x40020044
 8001f24:	40020058 	.word	0x40020058
 8001f28:	4002006c 	.word	0x4002006c
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f3e:	b2db      	uxtb	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e169      	b.n	8002234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f60:	2201      	movs	r2, #1
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8158 	bne.w	800222e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a9a      	ldr	r2, [pc, #616]	; (80021ec <HAL_GPIO_Init+0x2a0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05e      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001f88:	4a98      	ldr	r2, [pc, #608]	; (80021ec <HAL_GPIO_Init+0x2a0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d875      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001f8e:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d058      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001f94:	4a96      	ldr	r2, [pc, #600]	; (80021f0 <HAL_GPIO_Init+0x2a4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d86f      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001f9a:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d052      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fa0:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <HAL_GPIO_Init+0x2a8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d869      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fa6:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2ac>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d04c      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fac:	4a92      	ldr	r2, [pc, #584]	; (80021f8 <HAL_GPIO_Init+0x2ac>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d863      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fb2:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2b0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d046      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a90      	ldr	r2, [pc, #576]	; (80021fc <HAL_GPIO_Init+0x2b0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d85d      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d82a      	bhi.n	8002018 <HAL_GPIO_Init+0xcc>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d859      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_GPIO_Init+0x80>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08002047 	.word	0x08002047
 8001fd0:	08002021 	.word	0x08002021
 8001fd4:	08002033 	.word	0x08002033
 8001fd8:	08002075 	.word	0x08002075
 8001fdc:	0800207b 	.word	0x0800207b
 8001fe0:	0800207b 	.word	0x0800207b
 8001fe4:	0800207b 	.word	0x0800207b
 8001fe8:	0800207b 	.word	0x0800207b
 8001fec:	0800207b 	.word	0x0800207b
 8001ff0:	0800207b 	.word	0x0800207b
 8001ff4:	0800207b 	.word	0x0800207b
 8001ff8:	0800207b 	.word	0x0800207b
 8001ffc:	0800207b 	.word	0x0800207b
 8002000:	0800207b 	.word	0x0800207b
 8002004:	0800207b 	.word	0x0800207b
 8002008:	0800207b 	.word	0x0800207b
 800200c:	0800207b 	.word	0x0800207b
 8002010:	08002029 	.word	0x08002029
 8002014:	0800203d 	.word	0x0800203d
 8002018:	4a79      	ldr	r2, [pc, #484]	; (8002200 <HAL_GPIO_Init+0x2b4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201e:	e02c      	b.n	800207a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	623b      	str	r3, [r7, #32]
          break;
 8002026:	e029      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	3304      	adds	r3, #4
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e024      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	3308      	adds	r3, #8
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e01f      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	330c      	adds	r3, #12
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	e01a      	b.n	800207c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800204e:	2304      	movs	r3, #4
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e013      	b.n	800207c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	611a      	str	r2, [r3, #16]
          break;
 8002066:	e009      	b.n	800207c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	615a      	str	r2, [r3, #20]
          break;
 8002072:	e003      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x130>
          break;
 800207a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d801      	bhi.n	8002086 <HAL_GPIO_Init+0x13a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	e001      	b.n	800208a <HAL_GPIO_Init+0x13e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2bff      	cmp	r3, #255	; 0xff
 8002090:	d802      	bhi.n	8002098 <HAL_GPIO_Init+0x14c>
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	e002      	b.n	800209e <HAL_GPIO_Init+0x152>
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	3b08      	subs	r3, #8
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	210f      	movs	r1, #15
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	431a      	orrs	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80b1 	beq.w	800222e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e4:	4a48      	ldr	r2, [pc, #288]	; (8002208 <HAL_GPIO_Init+0x2bc>)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a40      	ldr	r2, [pc, #256]	; (800220c <HAL_GPIO_Init+0x2c0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_GPIO_Init+0x1ec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3f      	ldr	r2, [pc, #252]	; (8002210 <HAL_GPIO_Init+0x2c4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00d      	beq.n	8002134 <HAL_GPIO_Init+0x1e8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3e      	ldr	r2, [pc, #248]	; (8002214 <HAL_GPIO_Init+0x2c8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x1e4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_GPIO_Init+0x1e0>
 8002128:	2303      	movs	r3, #3
 800212a:	e006      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 800212c:	2304      	movs	r3, #4
 800212e:	e004      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002130:	2302      	movs	r3, #2
 8002132:	e002      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002138:	2300      	movs	r3, #0
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	f002 0203 	and.w	r2, r2, #3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4093      	lsls	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214a:	492f      	ldr	r1, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x2bc>)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	492c      	ldr	r1, [pc, #176]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4928      	ldr	r1, [pc, #160]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800217c:	4013      	ands	r3, r2
 800217e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	4922      	ldr	r1, [pc, #136]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	491e      	ldr	r1, [pc, #120]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4918      	ldr	r1, [pc, #96]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4914      	ldr	r1, [pc, #80]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d021      	beq.n	8002220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e021      	b.n	800222e <HAL_GPIO_Init+0x2e2>
 80021ea:	bf00      	nop
 80021ec:	10320000 	.word	0x10320000
 80021f0:	10310000 	.word	0x10310000
 80021f4:	10220000 	.word	0x10220000
 80021f8:	10210000 	.word	0x10210000
 80021fc:	10120000 	.word	0x10120000
 8002200:	10110000 	.word	0x10110000
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	40010800 	.word	0x40010800
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40011000 	.word	0x40011000
 8002218:	40011400 	.word	0x40011400
 800221c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	43db      	mvns	r3, r3
 8002228:	4909      	ldr	r1, [pc, #36]	; (8002250 <HAL_GPIO_Init+0x304>)
 800222a:	4013      	ands	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	3301      	adds	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	f47f ae8e 	bne.w	8001f60 <HAL_GPIO_Init+0x14>
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	372c      	adds	r7, #44	; 0x2c
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e12b      	b.n	80024ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff f9e8 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e8:	f003 f8d6 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80022ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a81      	ldr	r2, [pc, #516]	; (80024f8 <HAL_I2C_Init+0x274>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d807      	bhi.n	8002308 <HAL_I2C_Init+0x84>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a80      	ldr	r2, [pc, #512]	; (80024fc <HAL_I2C_Init+0x278>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e006      	b.n	8002316 <HAL_I2C_Init+0x92>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a7d      	ldr	r2, [pc, #500]	; (8002500 <HAL_I2C_Init+0x27c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	bf94      	ite	ls
 8002310:	2301      	movls	r3, #1
 8002312:	2300      	movhi	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0e7      	b.n	80024ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a78      	ldr	r2, [pc, #480]	; (8002504 <HAL_I2C_Init+0x280>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9b      	lsrs	r3, r3, #18
 8002328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_I2C_Init+0x274>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d802      	bhi.n	8002358 <HAL_I2C_Init+0xd4>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	e009      	b.n	800236c <HAL_I2C_Init+0xe8>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	4a69      	ldr	r2, [pc, #420]	; (8002508 <HAL_I2C_Init+0x284>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	3301      	adds	r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	430b      	orrs	r3, r1
 8002372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800237e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	495c      	ldr	r1, [pc, #368]	; (80024f8 <HAL_I2C_Init+0x274>)
 8002388:	428b      	cmp	r3, r1
 800238a:	d819      	bhi.n	80023c0 <HAL_I2C_Init+0x13c>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e59      	subs	r1, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fbb1 f3f3 	udiv	r3, r1, r3
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a0:	400b      	ands	r3, r1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_I2C_Init+0x138>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e59      	subs	r1, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ba:	e051      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 80023bc:	2304      	movs	r3, #4
 80023be:	e04f      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d111      	bne.n	80023ec <HAL_I2C_Init+0x168>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e012      	b.n	8002412 <HAL_I2C_Init+0x18e>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Init+0x196>
 8002416:	2301      	movs	r3, #1
 8002418:	e022      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10e      	bne.n	8002440 <HAL_I2C_Init+0x1bc>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e58      	subs	r0, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	440b      	add	r3, r1
 8002430:	fbb0 f3f3 	udiv	r3, r0, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243e:	e00f      	b.n	8002460 <HAL_I2C_Init+0x1dc>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e58      	subs	r0, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	0099      	lsls	r1, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	fbb0 f3f3 	udiv	r3, r0, r3
 8002456:	3301      	adds	r3, #1
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	6809      	ldr	r1, [r1, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69da      	ldr	r2, [r3, #28]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800248e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6911      	ldr	r1, [r2, #16]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	000186a0 	.word	0x000186a0
 80024fc:	001e847f 	.word	0x001e847f
 8002500:	003d08ff 	.word	0x003d08ff
 8002504:	431bde83 	.word	0x431bde83
 8002508:	10624dd3 	.word	0x10624dd3

0800250c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b80      	cmp	r3, #128	; 0x80
 8002520:	d103      	bne.n	800252a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	460b      	mov	r3, r1
 8002542:	817b      	strh	r3, [r7, #10]
 8002544:	4613      	mov	r3, r2
 8002546:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff fb04 	bl	8001b54 <HAL_GetTick>
 800254c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b20      	cmp	r3, #32
 8002558:	f040 80e0 	bne.w	800271c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2319      	movs	r3, #25
 8002562:	2201      	movs	r2, #1
 8002564:	4970      	ldr	r1, [pc, #448]	; (8002728 <HAL_I2C_Master_Transmit+0x1f4>)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f002 f94c 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	e0d3      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_I2C_Master_Transmit+0x50>
 8002580:	2302      	movs	r3, #2
 8002582:	e0cc      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d007      	beq.n	80025aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2221      	movs	r2, #33	; 0x21
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2210      	movs	r2, #16
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	893a      	ldrh	r2, [r7, #8]
 80025da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a50      	ldr	r2, [pc, #320]	; (800272c <HAL_I2C_Master_Transmit+0x1f8>)
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f001 ff0e 	bl	8004414 <I2C_MasterRequestWrite>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e08d      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002618:	e066      	b.n	80026e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	6a39      	ldr	r1, [r7, #32]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f002 fa0a 	bl	8004a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	2b04      	cmp	r3, #4
 8002630:	d107      	bne.n	8002642 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11b      	bne.n	80026bc <HAL_I2C_Master_Transmit+0x188>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	d017      	beq.n	80026bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	6a39      	ldr	r1, [r7, #32]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f002 fa01 	bl	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d107      	bne.n	80026e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e01a      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d194      	bne.n	800261a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e000      	b.n	800271e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	00100002 	.word	0x00100002
 800272c:	ffff0000 	.word	0xffff0000

08002730 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fa04 	bl	8001b54 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 824b 	bne.w	8002bf2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2319      	movs	r3, #25
 8002762:	2201      	movs	r2, #1
 8002764:	497f      	ldr	r1, [pc, #508]	; (8002964 <HAL_I2C_Master_Receive+0x234>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f002 f84c 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e23e      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2C_Master_Receive+0x54>
 8002780:	2302      	movs	r3, #2
 8002782:	e237      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d007      	beq.n	80027aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2222      	movs	r2, #34	; 0x22
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2210      	movs	r2, #16
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a5f      	ldr	r2, [pc, #380]	; (8002968 <HAL_I2C_Master_Receive+0x238>)
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f001 fe90 	bl	8004518 <I2C_MasterRequestRead>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1f8      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d113      	bne.n	8002832 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e1cc      	b.n	8002bcc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11e      	bne.n	8002878 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800284a:	b672      	cpsid	i
}
 800284c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002874:	b662      	cpsie	i
}
 8002876:	e035      	b.n	80028e4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11e      	bne.n	80028be <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028ba:	b662      	cpsie	i
}
 80028bc:	e012      	b.n	80028e4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028e4:	e172      	b.n	8002bcc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	f200 811f 	bhi.w	8002b2e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d123      	bne.n	8002940 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f002 f95d 	bl	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e173      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800293e:	e145      	b.n	8002bcc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	2b02      	cmp	r3, #2
 8002946:	d152      	bne.n	80029ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	2200      	movs	r2, #0
 8002950:	4906      	ldr	r1, [pc, #24]	; (800296c <HAL_I2C_Master_Receive+0x23c>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f001 ff56 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e148      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000
 800296c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029b6:	b662      	cpsie	i
}
 80029b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ec:	e0ee      	b.n	8002bcc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2200      	movs	r2, #0
 80029f6:	4981      	ldr	r1, [pc, #516]	; (8002bfc <HAL_I2C_Master_Receive+0x4cc>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f001 ff03 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0f5      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a4e:	4b6c      	ldr	r3, [pc, #432]	; (8002c00 <HAL_I2C_Master_Receive+0x4d0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	4a6b      	ldr	r2, [pc, #428]	; (8002c04 <HAL_I2C_Master_Receive+0x4d4>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0a1a      	lsrs	r2, r3, #8
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00da      	lsls	r2, r3, #3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d118      	bne.n	8002aa6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a96:	b662      	cpsie	i
}
 8002a98:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0a6      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d1d9      	bne.n	8002a68 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002af6:	b662      	cpsie	i
}
 8002af8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b2c:	e04e      	b.n	8002bcc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f002 f842 	bl	8004bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e058      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d124      	bne.n	8002bcc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f ae88 	bne.w	80028e6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	00010004 	.word	0x00010004
 8002c00:	20000004 	.word	0x20000004
 8002c04:	14f8b589 	.word	0x14f8b589

08002c08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d003      	beq.n	8002c40 <HAL_I2C_EV_IRQHandler+0x38>
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	f040 80c1 	bne.w	8002dc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c60:	d003      	beq.n	8002c6a <HAL_I2C_EV_IRQHandler+0x62>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_EV_IRQHandler+0x66>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_I2C_EV_IRQHandler+0x68>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f000 8132 	beq.w	8002eda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00c      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0x92>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	0a5b      	lsrs	r3, r3, #9
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f002 f820 	bl	8004cd2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fd99 	bl	80037ca <I2C_Master_SB>
 8002c98:	e092      	b.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0xb2>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	0a5b      	lsrs	r3, r3, #9
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fe0e 	bl	80038d4 <I2C_Master_ADD10>
 8002cb8:	e082      	b.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_I2C_EV_IRQHandler+0xd2>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	0a5b      	lsrs	r3, r3, #9
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fe27 	bl	8003926 <I2C_Master_ADDR>
 8002cd8:	e072      	b.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03b      	beq.n	8002d5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf4:	f000 80f3 	beq.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	09db      	lsrs	r3, r3, #7
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00f      	beq.n	8002d24 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	0a9b      	lsrs	r3, r3, #10
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_I2C_EV_IRQHandler+0x11c>
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f9f1 	bl	8003104 <I2C_MasterTransmit_TXE>
 8002d22:	e04d      	b.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80d6 	beq.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	0a5b      	lsrs	r3, r3, #9
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80cf 	beq.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d40:	7bbb      	ldrb	r3, [r7, #14]
 8002d42:	2b21      	cmp	r3, #33	; 0x21
 8002d44:	d103      	bne.n	8002d4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa78 	bl	800323c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d4c:	e0c7      	b.n	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	f040 80c4 	bne.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fae6 	bl	8003328 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d5c:	e0bf      	b.n	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6c:	f000 80b7 	beq.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00f      	beq.n	8002d9c <HAL_I2C_EV_IRQHandler+0x194>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	0a9b      	lsrs	r3, r3, #10
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_I2C_EV_IRQHandler+0x194>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fb5f 	bl	8003458 <I2C_MasterReceive_RXNE>
 8002d9a:	e011      	b.n	8002dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 809a 	beq.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	0a5b      	lsrs	r3, r3, #9
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8093 	beq.w	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fc15 	bl	80035e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dbe:	e08e      	b.n	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8002dc0:	e08d      	b.n	8002ede <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e007      	b.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x20e>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e0c:	69b9      	ldr	r1, [r7, #24]
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 ffe0 	bl	8003dd4 <I2C_Slave_ADDR>
 8002e14:	e066      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x22e>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	0a5b      	lsrs	r3, r3, #9
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f001 f81a 	bl	8003e68 <I2C_Slave_STOPF>
 8002e34:	e056      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e36:	7bbb      	ldrb	r3, [r7, #14]
 8002e38:	2b21      	cmp	r3, #33	; 0x21
 8002e3a:	d002      	beq.n	8002e42 <HAL_I2C_EV_IRQHandler+0x23a>
 8002e3c:	7bbb      	ldrb	r3, [r7, #14]
 8002e3e:	2b29      	cmp	r3, #41	; 0x29
 8002e40:	d125      	bne.n	8002e8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	09db      	lsrs	r3, r3, #7
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <HAL_I2C_EV_IRQHandler+0x266>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	0a9b      	lsrs	r3, r3, #10
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_I2C_EV_IRQHandler+0x266>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fef8 	bl	8003c5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e6c:	e039      	b.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d033      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x2da>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	0a5b      	lsrs	r3, r3, #9
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d02d      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 ff25 	bl	8003cd6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e8c:	e029      	b.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00f      	beq.n	8002eba <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	0a9b      	lsrs	r3, r3, #10
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 ff2f 	bl	8003d16 <I2C_SlaveReceive_RXNE>
 8002eb8:	e014      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	0a5b      	lsrs	r3, r3, #9
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 ff5d 	bl	8003d92 <I2C_SlaveReceive_BTF>
 8002ed8:	e004      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ee2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b08a      	sub	sp, #40	; 0x28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_I2C_ER_IRQHandler+0x5e>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f36:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f46:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	0a5b      	lsrs	r3, r3, #9
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00e      	beq.n	8002f72 <HAL_I2C_ER_IRQHandler+0x88>
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	0a9b      	lsrs	r3, r3, #10
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03f      	beq.n	8002ffe <HAL_I2C_ER_IRQHandler+0x114>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d039      	beq.n	8002ffe <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002f8a:	7efb      	ldrb	r3, [r7, #27]
 8002f8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002fa4:	7ebb      	ldrb	r3, [r7, #26]
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d112      	bne.n	8002fd0 <HAL_I2C_ER_IRQHandler+0xe6>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <HAL_I2C_ER_IRQHandler+0xe6>
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	2b21      	cmp	r3, #33	; 0x21
 8002fb4:	d008      	beq.n	8002fc8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b29      	cmp	r3, #41	; 0x29
 8002fba:	d005      	beq.n	8002fc8 <HAL_I2C_ER_IRQHandler+0xde>
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b28      	cmp	r3, #40	; 0x28
 8002fc0:	d106      	bne.n	8002fd0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b21      	cmp	r3, #33	; 0x21
 8002fc6:	d103      	bne.n	8002fd0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f001 f87d 	bl	80040c8 <I2C_Slave_AF>
 8002fce:	e016      	b.n	8002ffe <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fe2:	7efb      	ldrb	r3, [r7, #27]
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d002      	beq.n	8002fee <HAL_I2C_ER_IRQHandler+0x104>
 8002fe8:	7efb      	ldrb	r3, [r7, #27]
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d107      	bne.n	8002ffe <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	0adb      	lsrs	r3, r3, #11
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <HAL_I2C_ER_IRQHandler+0x13e>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003026:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f001 f8b8 	bl	80041b0 <I2C_ITError>
  }
}
 8003040:	bf00      	nop
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
 800309c:	4613      	mov	r3, r2
 800309e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800311a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d150      	bne.n	80031cc <I2C_MasterTransmit_TXE+0xc8>
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b21      	cmp	r3, #33	; 0x21
 800312e:	d14d      	bne.n	80031cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d01d      	beq.n	8003172 <I2C_MasterTransmit_TXE+0x6e>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b20      	cmp	r3, #32
 800313a:	d01a      	beq.n	8003172 <I2C_MasterTransmit_TXE+0x6e>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003142:	d016      	beq.n	8003172 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003152:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2211      	movs	r2, #17
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ff6c 	bl	8003048 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003170:	e060      	b.n	8003234 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003180:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d107      	bne.n	80031bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff81 	bl	80030bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ba:	e03b      	b.n	8003234 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff3f 	bl	8003048 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ca:	e033      	b.n	8003234 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b21      	cmp	r3, #33	; 0x21
 80031d0:	d005      	beq.n	80031de <I2C_MasterTransmit_TXE+0xda>
 80031d2:	7bbb      	ldrb	r3, [r7, #14]
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d12d      	bne.n	8003234 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b22      	cmp	r3, #34	; 0x22
 80031dc:	d12a      	bne.n	8003234 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d108      	bne.n	80031fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031f8:	e01c      	b.n	8003234 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b40      	cmp	r3, #64	; 0x40
 8003204:	d103      	bne.n	800320e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f88e 	bl	8003328 <I2C_MemoryTransmit_TXE_BTF>
}
 800320c:	e012      	b.n	8003234 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003232:	e7ff      	b.n	8003234 <I2C_MasterTransmit_TXE+0x130>
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b21      	cmp	r3, #33	; 0x21
 8003254:	d164      	bne.n	8003320 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003284:	e04c      	b.n	8003320 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d01d      	beq.n	80032c8 <I2C_MasterTransmit_BTF+0x8c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b20      	cmp	r3, #32
 8003290:	d01a      	beq.n	80032c8 <I2C_MasterTransmit_BTF+0x8c>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003298:	d016      	beq.n	80032c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2211      	movs	r2, #17
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fec1 	bl	8003048 <HAL_I2C_MasterTxCpltCallback>
}
 80032c6:	e02b      	b.n	8003320 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d107      	bne.n	8003312 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fed6 	bl	80030bc <HAL_I2C_MemTxCpltCallback>
}
 8003310:	e006      	b.n	8003320 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fe94 	bl	8003048 <HAL_I2C_MasterTxCpltCallback>
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11d      	bne.n	800337c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10b      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334c:	b2da      	uxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800335e:	e077      	b.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003364:	b29b      	uxth	r3, r3
 8003366:	121b      	asrs	r3, r3, #8
 8003368:	b2da      	uxtb	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	651a      	str	r2, [r3, #80]	; 0x50
}
 800337a:	e069      	b.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003380:	2b01      	cmp	r3, #1
 8003382:	d10b      	bne.n	800339c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	b2da      	uxtb	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	651a      	str	r2, [r3, #80]	; 0x50
}
 800339a:	e059      	b.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d152      	bne.n	800344a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b22      	cmp	r3, #34	; 0x22
 80033a8:	d10d      	bne.n	80033c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033c4:	e044      	b.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b21      	cmp	r3, #33	; 0x21
 80033d4:	d112      	bne.n	80033fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033fa:	e029      	b.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d124      	bne.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b21      	cmp	r3, #33	; 0x21
 800340a:	d121      	bne.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800341a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fe3a 	bl	80030bc <HAL_I2C_MemTxCpltCallback>
}
 8003448:	e002      	b.n	8003450 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff f85e 	bl	800250c <I2C_Flush_DR>
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b22      	cmp	r3, #34	; 0x22
 800346a:	f040 80b9 	bne.w	80035e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d921      	bls.n	80034c6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	f040 8096 	bne.w	80035e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80034c4:	e08c      	b.n	80035e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d07f      	beq.n	80035ce <I2C_MasterReceive_RXNE+0x176>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d002      	beq.n	80034da <I2C_MasterReceive_RXNE+0x82>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d179      	bne.n	80035ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 fb3c 	bl	8004b58 <I2C_WaitOnSTOPRequestThroughIT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d14c      	bne.n	8003580 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003504:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d10a      	bne.n	8003556 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fdbd 	bl	80030ce <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003554:	e044      	b.n	80035e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d002      	beq.n	800356a <I2C_MasterReceive_RXNE+0x112>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b20      	cmp	r3, #32
 8003568:	d103      	bne.n	8003572 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
 8003570:	e002      	b.n	8003578 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2212      	movs	r2, #18
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fd6e 	bl	800305a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800357e:	e02f      	b.n	80035e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800358e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fd8a 	bl	80030e0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035cc:	e008      	b.n	80035e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	605a      	str	r2, [r3, #4]
}
 80035de:	e7ff      	b.n	80035e0 <I2C_MasterReceive_RXNE+0x188>
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d11b      	bne.n	8003638 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003636:	e0c4      	b.n	80037c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b03      	cmp	r3, #3
 8003640:	d129      	bne.n	8003696 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003650:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00a      	beq.n	800366e <I2C_MasterReceive_BTF+0x86>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d007      	beq.n	800366e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003694:	e095      	b.n	80037c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d17d      	bne.n	800379c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d002      	beq.n	80036ac <I2C_MasterReceive_BTF+0xc4>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d108      	bne.n	80036be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e016      	b.n	80036ec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d002      	beq.n	80036ca <I2C_MasterReceive_BTF+0xe2>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d108      	bne.n	80036dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e007      	b.n	80036ec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003746:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d10a      	bne.n	8003772 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fcaf 	bl	80030ce <HAL_I2C_MemRxCpltCallback>
}
 8003770:	e027      	b.n	80037c2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d002      	beq.n	8003786 <I2C_MasterReceive_BTF+0x19e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b20      	cmp	r3, #32
 8003784:	d103      	bne.n	800378e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
 800378c:	e002      	b.n	8003794 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2212      	movs	r2, #18
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fc60 	bl	800305a <HAL_I2C_MasterRxCpltCallback>
}
 800379a:	e012      	b.n	80037c2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d117      	bne.n	800380e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80037f8:	e067      	b.n	80038ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	b2da      	uxtb	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]
}
 800380c:	e05d      	b.n	80038ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003816:	d133      	bne.n	8003880 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b21      	cmp	r3, #33	; 0x21
 8003822:	d109      	bne.n	8003838 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	e008      	b.n	800384a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <I2C_Master_SB+0x92>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d032      	beq.n	80038ca <I2C_Master_SB+0x100>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02d      	beq.n	80038ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387c:	605a      	str	r2, [r3, #4]
}
 800387e:	e024      	b.n	80038ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10e      	bne.n	80038a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	b29b      	uxth	r3, r3
 800388e:	11db      	asrs	r3, r3, #7
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f063 030f 	orn	r3, r3, #15
 800389c:	b2da      	uxtb	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	611a      	str	r2, [r3, #16]
}
 80038a4:	e011      	b.n	80038ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10d      	bne.n	80038ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	11db      	asrs	r3, r3, #7
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 0306 	and.w	r3, r3, #6
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f063 030e 	orn	r3, r3, #14
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <I2C_Master_ADD10+0x26>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <I2C_Master_ADD10+0x48>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391a:	605a      	str	r2, [r3, #4]
  }
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003926:	b480      	push	{r7}
 8003928:	b091      	sub	sp, #68	; 0x44
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b22      	cmp	r3, #34	; 0x22
 800394e:	f040 8174 	bne.w	8003c3a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <I2C_Master_ADDR+0x54>
 800395a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d10b      	bne.n	800397a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	633b      	str	r3, [r7, #48]	; 0x30
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	633b      	str	r3, [r7, #48]	; 0x30
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	e16b      	b.n	8003c52 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11d      	bne.n	80039be <I2C_Master_ADDR+0x98>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800398a:	d118      	bne.n	80039be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	651a      	str	r2, [r3, #80]	; 0x50
 80039bc:	e149      	b.n	8003c52 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d113      	bne.n	80039f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c8:	2300      	movs	r3, #0
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e120      	b.n	8003c32 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 808a 	bne.w	8003b10 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a02:	d137      	bne.n	8003a74 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d113      	bne.n	8003a4c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a32:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	e0f2      	b.n	8003c32 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	623b      	str	r3, [r7, #32]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e0de      	b.n	8003c32 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d02e      	beq.n	8003ad8 <I2C_Master_ADDR+0x1b2>
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d02b      	beq.n	8003ad8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	2b12      	cmp	r3, #18
 8003a84:	d102      	bne.n	8003a8c <I2C_Master_ADDR+0x166>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d125      	bne.n	8003ad8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00e      	beq.n	8003ab0 <I2C_Master_ADDR+0x18a>
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d00b      	beq.n	8003ab0 <I2C_Master_ADDR+0x18a>
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d008      	beq.n	8003ab0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e007      	b.n	8003ac0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	e0ac      	b.n	8003c32 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e090      	b.n	8003c32 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d158      	bne.n	8003bcc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d021      	beq.n	8003b64 <I2C_Master_ADDR+0x23e>
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d01e      	beq.n	8003b64 <I2C_Master_ADDR+0x23e>
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d01b      	beq.n	8003b64 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e012      	b.n	8003b8a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b98:	d14b      	bne.n	8003c32 <I2C_Master_ADDR+0x30c>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ba0:	d00b      	beq.n	8003bba <I2C_Master_ADDR+0x294>
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d008      	beq.n	8003bba <I2C_Master_ADDR+0x294>
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d005      	beq.n	8003bba <I2C_Master_ADDR+0x294>
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d002      	beq.n	8003bba <I2C_Master_ADDR+0x294>
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d13b      	bne.n	8003c32 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	e032      	b.n	8003c32 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bda:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bea:	d117      	bne.n	8003c1c <I2C_Master_ADDR+0x2f6>
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf2:	d00b      	beq.n	8003c0c <I2C_Master_ADDR+0x2e6>
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d008      	beq.n	8003c0c <I2C_Master_ADDR+0x2e6>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d005      	beq.n	8003c0c <I2C_Master_ADDR+0x2e6>
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d002      	beq.n	8003c0c <I2C_Master_ADDR+0x2e6>
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d107      	bne.n	8003c1c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003c38:	e00b      	b.n	8003c52 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
}
 8003c50:	e7ff      	b.n	8003c52 <I2C_Master_ADDR+0x32c>
 8003c52:	bf00      	nop
 8003c54:	3744      	adds	r7, #68	; 0x44
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02b      	beq.n	8003cce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d114      	bne.n	8003cce <I2C_SlaveTransmit_TXE+0x72>
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b29      	cmp	r3, #41	; 0x29
 8003ca8:	d111      	bne.n	8003cce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2221      	movs	r2, #33	; 0x21
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2228      	movs	r2, #40	; 0x28
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff f9cf 	bl	800306c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d011      	beq.n	8003d0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d02c      	beq.n	8003d8a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d114      	bne.n	8003d8a <I2C_SlaveReceive_RXNE+0x74>
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b2a      	cmp	r3, #42	; 0x2a
 8003d64:	d111      	bne.n	8003d8a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2222      	movs	r2, #34	; 0x22
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2228      	movs	r2, #40	; 0x28
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff f97a 	bl	800307e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dee:	2b28      	cmp	r3, #40	; 0x28
 8003df0:	d127      	bne.n	8003e42 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	09db      	lsrs	r3, r3, #7
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	81bb      	strh	r3, [r7, #12]
 8003e24:	e002      	b.n	8003e2c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e34:	89ba      	ldrh	r2, [r7, #12]
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff f928 	bl	8003090 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e40:	e00e      	b.n	8003e60 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec4:	d172      	bne.n	8003fac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b22      	cmp	r3, #34	; 0x22
 8003eca:	d002      	beq.n	8003ed2 <I2C_Slave_STOPF+0x6a>
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed0:	d135      	bne.n	8003f3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe f810 	bl	8001f30 <HAL_DMA_GetState>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d049      	beq.n	8003faa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	4a69      	ldr	r2, [pc, #420]	; (80040c0 <I2C_Slave_STOPF+0x258>)
 8003f1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd ff8c 	bl	8001e40 <HAL_DMA_Abort_IT>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03d      	beq.n	8003faa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f3c:	e035      	b.n	8003faa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0204 	orr.w	r2, r3, #4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd ffda 	bl	8001f30 <HAL_DMA_GetState>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d014      	beq.n	8003fac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	4a4e      	ldr	r2, [pc, #312]	; (80040c0 <I2C_Slave_STOPF+0x258>)
 8003f88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd ff56 	bl	8001e40 <HAL_DMA_Abort_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
 8003fa8:	e000      	b.n	8003fac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003faa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d03e      	beq.n	8004034 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d112      	bne.n	8003fea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d112      	bne.n	800401e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f8b7 	bl	80041b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004042:	e039      	b.n	80040b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b2a      	cmp	r3, #42	; 0x2a
 8004048:	d109      	bne.n	800405e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2228      	movs	r2, #40	; 0x28
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff f810 	bl	800307e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b28      	cmp	r3, #40	; 0x28
 8004068:	d111      	bne.n	800408e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <I2C_Slave_STOPF+0x25c>)
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff f80f 	bl	80030aa <HAL_I2C_ListenCpltCallback>
}
 800408c:	e014      	b.n	80040b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	2b22      	cmp	r3, #34	; 0x22
 8004094:	d002      	beq.n	800409c <I2C_Slave_STOPF+0x234>
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b22      	cmp	r3, #34	; 0x22
 800409a:	d10d      	bne.n	80040b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe ffe3 	bl	800307e <HAL_I2C_SlaveRxCpltCallback>
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	080046b5 	.word	0x080046b5
 80040c4:	ffff0000 	.word	0xffff0000

080040c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d002      	beq.n	80040ea <I2C_Slave_AF+0x22>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d129      	bne.n	800413e <I2C_Slave_AF+0x76>
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b28      	cmp	r3, #40	; 0x28
 80040ee:	d126      	bne.n	800413e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a2e      	ldr	r2, [pc, #184]	; (80041ac <I2C_Slave_AF+0xe4>)
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004104:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800410e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe ffb7 	bl	80030aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800413c:	e031      	b.n	80041a2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b21      	cmp	r3, #33	; 0x21
 8004142:	d129      	bne.n	8004198 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a19      	ldr	r2, [pc, #100]	; (80041ac <I2C_Slave_AF+0xe4>)
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2221      	movs	r2, #33	; 0x21
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800416e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004178:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe f9be 	bl	800250c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fe ff6b 	bl	800306c <HAL_I2C_SlaveTxCpltCallback>
}
 8004196:	e004      	b.n	80041a2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041a0:	615a      	str	r2, [r3, #20]
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d002      	beq.n	80041d4 <I2C_ITError+0x24>
 80041ce:	7bbb      	ldrb	r3, [r7, #14]
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d10a      	bne.n	80041ea <I2C_ITError+0x3a>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b22      	cmp	r3, #34	; 0x22
 80041d8:	d107      	bne.n	80041ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041f0:	2b28      	cmp	r3, #40	; 0x28
 80041f2:	d107      	bne.n	8004204 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2228      	movs	r2, #40	; 0x28
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004202:	e015      	b.n	8004230 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d00a      	beq.n	800422a <I2C_ITError+0x7a>
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b60      	cmp	r3, #96	; 0x60
 8004218:	d007      	beq.n	800422a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423e:	d162      	bne.n	8004306 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d020      	beq.n	80042a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4a6a      	ldr	r2, [pc, #424]	; (800440c <I2C_ITError+0x25c>)
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fde8 	bl	8001e40 <HAL_DMA_Abort_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8089 	beq.w	800438a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800429a:	4610      	mov	r0, r2
 800429c:	4798      	blx	r3
 800429e:	e074      	b.n	800438a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	4a59      	ldr	r2, [pc, #356]	; (800440c <I2C_ITError+0x25c>)
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fd fdc7 	bl	8001e40 <HAL_DMA_Abort_IT>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d068      	beq.n	800438a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d10b      	bne.n	80042de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
 8004304:	e041      	b.n	800438a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b60      	cmp	r3, #96	; 0x60
 8004310:	d125      	bne.n	800435e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d10b      	bne.n	8004346 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fe fecb 	bl	80030f2 <HAL_I2C_AbortCpltCallback>
 800435c:	e015      	b.n	800438a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d10b      	bne.n	8004384 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fe feab 	bl	80030e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10e      	bne.n	80043b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d113      	bne.n	8004404 <I2C_ITError+0x254>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b28      	cmp	r3, #40	; 0x28
 80043e0:	d110      	bne.n	8004404 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <I2C_ITError+0x260>)
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fe fe53 	bl	80030aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	080046b5 	.word	0x080046b5
 8004410:	ffff0000 	.word	0xffff0000

08004414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	460b      	mov	r3, r1
 8004422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d006      	beq.n	800443e <I2C_MasterRequestWrite+0x2a>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d003      	beq.n	800443e <I2C_MasterRequestWrite+0x2a>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800443c:	d108      	bne.n	8004450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e00b      	b.n	8004468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	2b12      	cmp	r3, #18
 8004456:	d107      	bne.n	8004468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f9c5 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448e:	d103      	bne.n	8004498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e035      	b.n	8004508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a4:	d108      	bne.n	80044b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	e01b      	b.n	80044f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	11db      	asrs	r3, r3, #7
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	f003 0306 	and.w	r3, r3, #6
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f063 030f 	orn	r3, r3, #15
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	490e      	ldr	r1, [pc, #56]	; (8004510 <I2C_MasterRequestWrite+0xfc>)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa0e 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e010      	b.n	8004508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4907      	ldr	r1, [pc, #28]	; (8004514 <I2C_MasterRequestWrite+0x100>)
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f9fe 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	00010008 	.word	0x00010008
 8004514:	00010002 	.word	0x00010002

08004518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	460b      	mov	r3, r1
 8004526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800453c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d006      	beq.n	8004552 <I2C_MasterRequestRead+0x3a>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d003      	beq.n	8004552 <I2C_MasterRequestRead+0x3a>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004550:	d108      	bne.n	8004564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e00b      	b.n	800457c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	2b11      	cmp	r3, #17
 800456a:	d107      	bne.n	800457c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f93b 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d103      	bne.n	80045ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e079      	b.n	80046a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b8:	d108      	bne.n	80045cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045ba:	897b      	ldrh	r3, [r7, #10]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	e05f      	b.n	800468c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045cc:	897b      	ldrh	r3, [r7, #10]
 80045ce:	11db      	asrs	r3, r3, #7
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f063 030f 	orn	r3, r3, #15
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4930      	ldr	r1, [pc, #192]	; (80046ac <I2C_MasterRequestRead+0x194>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f984 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e054      	b.n	80046a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045fa:	897b      	ldrh	r3, [r7, #10]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4929      	ldr	r1, [pc, #164]	; (80046b0 <I2C_MasterRequestRead+0x198>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f974 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e044      	b.n	80046a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f8d9 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d103      	bne.n	8004670 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e017      	b.n	80046a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004674:	897b      	ldrh	r3, [r7, #10]
 8004676:	11db      	asrs	r3, r3, #7
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f003 0306 	and.w	r3, r3, #6
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f063 030e 	orn	r3, r3, #14
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <I2C_MasterRequestRead+0x198>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f930 	bl	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	00010008 	.word	0x00010008
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046ce:	4b4b      	ldr	r3, [pc, #300]	; (80047fc <I2C_DMAAbort+0x148>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	08db      	lsrs	r3, r3, #3
 80046d4:	4a4a      	ldr	r2, [pc, #296]	; (8004800 <I2C_DMAAbort+0x14c>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a1a      	lsrs	r2, r3, #8
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00da      	lsls	r2, r3, #3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80046fa:	e00a      	b.n	8004712 <I2C_DMAAbort+0x5e>
    }
    count--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3b01      	subs	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800470c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004710:	d0ea      	beq.n	80046e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	2200      	movs	r2, #0
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	2200      	movs	r2, #0
 8004730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004740:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	2200      	movs	r2, #0
 8004756:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	2200      	movs	r2, #0
 8004766:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d10e      	bne.n	80047a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2200      	movs	r2, #0
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7fe fca9 	bl	80030f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047a0:	e027      	b.n	80047f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047a8:	2b28      	cmp	r3, #40	; 0x28
 80047aa:	d117      	bne.n	80047dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2228      	movs	r2, #40	; 0x28
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047da:	e007      	b.n	80047ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80047ec:	6978      	ldr	r0, [r7, #20]
 80047ee:	f7fe fc77 	bl	80030e0 <HAL_I2C_ErrorCallback>
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000004 	.word	0x20000004
 8004800:	14f8b589 	.word	0x14f8b589

08004804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004814:	e048      	b.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d044      	beq.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fd f999 	bl	8001b54 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d139      	bne.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10d      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x56>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	43da      	mvns	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4013      	ands	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	e00c      	b.n	8004874 <I2C_WaitOnFlagUntilTimeout+0x70>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	429a      	cmp	r2, r3
 8004878:	d116      	bne.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e023      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10d      	bne.n	80048ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	43da      	mvns	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	e00c      	b.n	80048e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	43da      	mvns	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4013      	ands	r3, r2
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d093      	beq.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004906:	e071      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004916:	d123      	bne.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004930:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e067      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d041      	beq.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004968:	f7fd f8f4 	bl	8001b54 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d136      	bne.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10c      	bne.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	43da      	mvns	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf14      	ite	ne
 800499a:	2301      	movne	r3, #1
 800499c:	2300      	moveq	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e00b      	b.n	80049ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	43da      	mvns	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4013      	ands	r3, r2
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e021      	b.n	8004a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10c      	bne.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	43da      	mvns	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf14      	ite	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	2300      	moveq	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e00b      	b.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	43da      	mvns	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf14      	ite	ne
 8004a22:	2301      	movne	r3, #1
 8004a24:	2300      	moveq	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f47f af6d 	bne.w	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a44:	e034      	b.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f915 	bl	8004c76 <I2C_IsAcknowledgeFailed>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e034      	b.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d028      	beq.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fd f879 	bl	8001b54 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11d      	bne.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d016      	beq.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e007      	b.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d1c3      	bne.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad4:	e034      	b.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f8cd 	bl	8004c76 <I2C_IsAcknowledgeFailed>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e034      	b.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d028      	beq.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fd f831 	bl	8001b54 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11d      	bne.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d016      	beq.n	8004b40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e007      	b.n	8004b50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d1c3      	bne.n	8004ad6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b64:	4b13      	ldr	r3, [pc, #76]	; (8004bb4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	0a1a      	lsrs	r2, r3, #8
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d107      	bne.n	8004b96 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e008      	b.n	8004ba8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba4:	d0e9      	beq.n	8004b7a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000004 	.word	0x20000004
 8004bb8:	14f8b589 	.word	0x14f8b589

08004bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bc8:	e049      	b.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d119      	bne.n	8004c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0210 	mvn.w	r2, #16
 8004be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e030      	b.n	8004c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0c:	f7fc ffa2 	bl	8001b54 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11d      	bne.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d016      	beq.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e007      	b.n	8004c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d1ae      	bne.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d11b      	bne.n	8004cc6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f043 0204 	orr.w	r2, r3, #4
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ce2:	d103      	bne.n	8004cec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cea:	e007      	b.n	8004cfc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cf4:	d102      	bne.n	8004cfc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e26c      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8087 	beq.w	8004e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d28:	4b92      	ldr	r3, [pc, #584]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d34:	4b8f      	ldr	r3, [pc, #572]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d112      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	4b89      	ldr	r3, [pc, #548]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x12c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d168      	bne.n	8004e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e246      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCC_OscConfig+0x76>
 8004d70:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02e      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b78      	ldr	r3, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a77      	ldr	r2, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xbc>
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a67      	ldr	r2, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fc feb6 	bl	8001b54 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fc feb2 	bl	8001b54 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1fa      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xe4>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fc fea2 	bl	8001b54 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fc fe9e 	bl	8001b54 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1e6      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x10c>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d063      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e42:	4b4c      	ldr	r3, [pc, #304]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
 8004e5a:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e1ba      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4939      	ldr	r1, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	e03a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7fc fe57 	bl	8001b54 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fc fe53 	bl	8001b54 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e19b      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4927      	ldr	r1, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fc fe36 	bl	8001b54 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7fc fe32 	bl	8001b54 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e17a      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03a      	beq.n	8004f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d019      	beq.n	8004f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7fc fe16 	bl	8001b54 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fc fe12 	bl	8001b54 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e15a      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 facc 	bl	80054e8 <RCC_Delay>
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7fc fdfc 	bl	8001b54 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fc fdf8 	bl	8001b54 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d908      	bls.n	8004f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e140      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	42420000 	.word	0x42420000
 8004f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e9      	bne.n	8004f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a6 	beq.w	80050e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b97      	ldr	r3, [pc, #604]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	4b94      	ldr	r3, [pc, #592]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4a93      	ldr	r2, [pc, #588]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	61d3      	str	r3, [r2, #28]
 8004fb6:	4b91      	ldr	r3, [pc, #580]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b8e      	ldr	r3, [pc, #568]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d118      	bne.n	8005004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a8a      	ldr	r2, [pc, #552]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fde:	f7fc fdb9 	bl	8001b54 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fc fdb5 	bl	8001b54 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0fd      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x312>
 800500c:	4b7b      	ldr	r3, [pc, #492]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a7a      	ldr	r2, [pc, #488]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6213      	str	r3, [r2, #32]
 8005018:	e02d      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x334>
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6213      	str	r3, [r2, #32]
 800502e:	4b73      	ldr	r3, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	e01c      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0x356>
 8005044:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4a6c      	ldr	r2, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6213      	str	r3, [r2, #32]
 8005050:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a69      	ldr	r2, [pc, #420]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e00b      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800505e:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a66      	ldr	r2, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	4b64      	ldr	r3, [pc, #400]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a63      	ldr	r2, [pc, #396]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507e:	f7fc fd69 	bl	8001b54 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fc fd65 	bl	8001b54 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0ab      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCC_OscConfig+0x37e>
 80050a8:	e014      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fc fd53 	bl	8001b54 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7fc fd4f 	bl	8001b54 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e095      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4a47      	ldr	r2, [pc, #284]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8081 	beq.w	80051f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f0:	4b42      	ldr	r3, [pc, #264]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d061      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d146      	bne.n	8005192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005104:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fc fd23 	bl	8001b54 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fc fd1f 	bl	8001b54 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e067      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005124:	4b35      	ldr	r3, [pc, #212]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d108      	bne.n	800514c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800513a:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	492d      	ldr	r1, [pc, #180]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a19      	ldr	r1, [r3, #32]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	430b      	orrs	r3, r1
 800515e:	4927      	ldr	r1, [pc, #156]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fc fcf3 	bl	8001b54 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fc fcef 	bl	8001b54 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e037      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x46a>
 8005190:	e02f      	b.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fc fcdc 	bl	8001b54 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc fcd8 	bl	8001b54 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e020      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x498>
 80051be:	e018      	b.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e013      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d106      	bne.n	80051ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
 8005204:	42420060 	.word	0x42420060

08005208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0d0      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800521c:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d910      	bls.n	800524c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f023 0207 	bic.w	r2, r3, #7
 8005232:	4965      	ldr	r1, [pc, #404]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0b8      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a58      	ldr	r2, [pc, #352]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800526e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a52      	ldr	r2, [pc, #328]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005286:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b50      	ldr	r3, [pc, #320]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	494d      	ldr	r1, [pc, #308]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d040      	beq.n	8005328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b47      	ldr	r3, [pc, #284]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d115      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e07f      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c6:	4b41      	ldr	r3, [pc, #260]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e073      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06b      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f023 0203 	bic.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4936      	ldr	r1, [pc, #216]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f8:	f7fc fc2c 	bl	8001b54 <HAL_GetTick>
 80052fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005300:	f7fc fc28 	bl	8001b54 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	; 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e053      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005316:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 020c 	and.w	r2, r3, #12
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	429a      	cmp	r2, r3
 8005326:	d1eb      	bne.n	8005300 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d210      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 0207 	bic.w	r2, r3, #7
 800533e:	4922      	ldr	r1, [pc, #136]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e032      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4916      	ldr	r1, [pc, #88]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490e      	ldr	r1, [pc, #56]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005396:	f000 f821 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800539a:	4602      	mov	r2, r0
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	490a      	ldr	r1, [pc, #40]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80053a8:	5ccb      	ldrb	r3, [r1, r3]
 80053aa:	fa22 f303 	lsr.w	r3, r2, r3
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <HAL_RCC_ClockConfig+0x1cc>)
 80053b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_ClockConfig+0x1d0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc fb8a 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40022000 	.word	0x40022000
 80053cc:	40021000 	.word	0x40021000
 80053d0:	08009574 	.word	0x08009574
 80053d4:	20000004 	.word	0x20000004
 80053d8:	20000008 	.word	0x20000008

080053dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <HAL_RCC_GetSysClockFreq+0x94>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b04      	cmp	r3, #4
 8005404:	d002      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x30>
 8005406:	2b08      	cmp	r3, #8
 8005408:	d003      	beq.n	8005412 <HAL_RCC_GetSysClockFreq+0x36>
 800540a:	e027      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800540c:	4b19      	ldr	r3, [pc, #100]	; (8005474 <HAL_RCC_GetSysClockFreq+0x98>)
 800540e:	613b      	str	r3, [r7, #16]
      break;
 8005410:	e027      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	0c9b      	lsrs	r3, r3, #18
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	4a17      	ldr	r2, [pc, #92]	; (8005478 <HAL_RCC_GetSysClockFreq+0x9c>)
 800541c:	5cd3      	ldrb	r3, [r2, r3]
 800541e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_RCC_GetSysClockFreq+0x94>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	0c5b      	lsrs	r3, r3, #17
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <HAL_RCC_GetSysClockFreq+0x98>)
 800543e:	fb02 f203 	mul.w	r2, r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	e004      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	613b      	str	r3, [r7, #16]
      break;
 800545a:	e002      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCC_GetSysClockFreq+0x98>)
 800545e:	613b      	str	r3, [r7, #16]
      break;
 8005460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005462:	693b      	ldr	r3, [r7, #16]
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40021000 	.word	0x40021000
 8005474:	007a1200 	.word	0x007a1200
 8005478:	0800958c 	.word	0x0800958c
 800547c:	0800959c 	.word	0x0800959c
 8005480:	003d0900 	.word	0x003d0900

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b02      	ldr	r3, [pc, #8]	; (8005494 <HAL_RCC_GetHCLKFreq+0x10>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	20000004 	.word	0x20000004

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff2 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4903      	ldr	r1, [pc, #12]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000
 80054bc:	08009584 	.word	0x08009584

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054c4:	f7ff ffde 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	0adb      	lsrs	r3, r3, #11
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4903      	ldr	r1, [pc, #12]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000
 80054e4:	08009584 	.word	0x08009584

080054e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <RCC_Delay+0x34>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <RCC_Delay+0x38>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	0a5b      	lsrs	r3, r3, #9
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005504:	bf00      	nop
  }
  while (Delay --);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	60fa      	str	r2, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f9      	bne.n	8005504 <RCC_Delay+0x1c>
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr
 800551c:	20000004 	.word	0x20000004
 8005520:	10624dd3 	.word	0x10624dd3

08005524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f8f8 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 fa5c 	bl	8005a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e03a      	b.n	8005652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a18      	ldr	r2, [pc, #96]	; (800565c <HAL_TIM_Base_Start_IT+0x98>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x58>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d009      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x58>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <HAL_TIM_Base_Start_IT+0x9c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x58>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a13      	ldr	r2, [pc, #76]	; (8005664 <HAL_TIM_Base_Start_IT+0xa0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d111      	bne.n	8005640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b06      	cmp	r3, #6
 800562c:	d010      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563e:	e007      	b.n	8005650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800

08005668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01b      	beq.n	80056cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0202 	mvn.w	r2, #2
 800569c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f998 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f98b 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f99a 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d020      	beq.n	8005718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0204 	mvn.w	r2, #4
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f972 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f965 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f974 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d020      	beq.n	8005764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01b      	beq.n	8005764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0208 	mvn.w	r2, #8
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2204      	movs	r2, #4
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f94c 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f93f 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f94e 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d020      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0210 	mvn.w	r2, #16
 8005780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2208      	movs	r2, #8
 8005786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f926 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f919 	bl	80059d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f928 	bl	80059fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0201 	mvn.w	r2, #1
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fb feb8 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa7f 	bl	8005cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f8f8 	bl	8005a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00c      	beq.n	8005840 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0220 	mvn.w	r2, #32
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa52 	bl	8005ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIM_ConfigClockSource+0x1c>
 8005860:	2302      	movs	r3, #2
 8005862:	e0b4      	b.n	80059ce <HAL_TIM_ConfigClockSource+0x186>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589c:	d03e      	beq.n	800591c <HAL_TIM_ConfigClockSource+0xd4>
 800589e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a2:	f200 8087 	bhi.w	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058aa:	f000 8086 	beq.w	80059ba <HAL_TIM_ConfigClockSource+0x172>
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b2:	d87f      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b70      	cmp	r3, #112	; 0x70
 80058b6:	d01a      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0xa6>
 80058b8:	2b70      	cmp	r3, #112	; 0x70
 80058ba:	d87b      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b60      	cmp	r3, #96	; 0x60
 80058be:	d050      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x11a>
 80058c0:	2b60      	cmp	r3, #96	; 0x60
 80058c2:	d877      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b50      	cmp	r3, #80	; 0x50
 80058c6:	d03c      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0xfa>
 80058c8:	2b50      	cmp	r3, #80	; 0x50
 80058ca:	d873      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d058      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x13a>
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d86f      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	d064      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x15a>
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d86b      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d060      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d867      	bhi.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05c      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x15a>
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d05a      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x15a>
 80058ec:	e062      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6899      	ldr	r1, [r3, #8]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f000 f974 	bl	8005bea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
      break;
 800591a:	e04f      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6899      	ldr	r1, [r3, #8]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f000 f95d 	bl	8005bea <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800593e:	609a      	str	r2, [r3, #8]
      break;
 8005940:	e03c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	461a      	mov	r2, r3
 8005950:	f000 f8d4 	bl	8005afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2150      	movs	r1, #80	; 0x50
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f92b 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 8005960:	e02c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	461a      	mov	r2, r3
 8005970:	f000 f8f2 	bl	8005b58 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2160      	movs	r1, #96	; 0x60
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f91b 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 8005980:	e01c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	461a      	mov	r2, r3
 8005990:	f000 f8b4 	bl	8005afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f90b 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 80059a0:	e00c      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f000 f902 	bl	8005bb6 <TIM_ITRx_SetConfig>
      break;
 80059b2:	e003      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	e000      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
	...

08005a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <TIM_Base_SetConfig+0xd0>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_Base_SetConfig+0x30>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d007      	beq.n	8005a50 <TIM_Base_SetConfig+0x30>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <TIM_Base_SetConfig+0xd4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_Base_SetConfig+0x30>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <TIM_Base_SetConfig+0xd8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <TIM_Base_SetConfig+0xd0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1f      	ldr	r2, [pc, #124]	; (8005af4 <TIM_Base_SetConfig+0xd4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0x62>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <TIM_Base_SetConfig+0xd8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <TIM_Base_SetConfig+0xd0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d103      	bne.n	8005ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f023 0201 	bic.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800

08005afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f023 0201 	bic.w	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f023 030a 	bic.w	r3, r3, #10
 8005b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0210 	bic.w	r2, r3, #16
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	031b      	lsls	r3, r3, #12
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	621a      	str	r2, [r3, #32]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f043 0307 	orr.w	r3, r3, #7
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	021a      	lsls	r2, r3, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	609a      	str	r2, [r3, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e046      	b.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10c      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800

08005ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e042      	b.n	8005da0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fd2a 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	; 0x24
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fc7f 	bl	8006650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b0ba      	sub	sp, #232	; 0xe8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_UART_IRQHandler+0x66>
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fb63 	bl	80064d2 <UART_Receive_IT>
      return;
 8005e0c:	e25b      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 80de 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x22c>
 8005e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80d1 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_UART_IRQHandler+0xae>
 8005e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_UART_IRQHandler+0xd2>
 8005e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f043 0202 	orr.w	r2, r3, #2
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xf6>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <HAL_UART_IRQHandler+0x126>
 8005eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 81f2 	beq.w	80062bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x14e>
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 faee 	bl	80064d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_UART_IRQHandler+0x17a>
 8005f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04f      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9f8 	bl	8006318 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d041      	beq.n	8005fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3314      	adds	r3, #20
 8005f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1d9      	bne.n	8005f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d013      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	4a7e      	ldr	r2, [pc, #504]	; (8006188 <HAL_UART_IRQHandler+0x3e0>)
 8005f90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb ff52 	bl	8001e40 <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb0:	e00e      	b.n	8005fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f99c 	bl	80062f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00a      	b.n	8005fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f998 	bl	80062f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e006      	b.n	8005fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f994 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005fce:	e175      	b.n	80062bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	bf00      	nop
    return;
 8005fd2:	e173      	b.n	80062bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 814f 	bne.w	800627c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8148 	beq.w	800627c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8141 	beq.w	800627c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80b6 	beq.w	800618c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800602c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8145 	beq.w	80062c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800603a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800603e:	429a      	cmp	r2, r3
 8006040:	f080 813e 	bcs.w	80062c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800604a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	2b20      	cmp	r3, #32
 8006054:	f000 8088 	beq.w	8006168 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800606e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006084:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006090:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1d9      	bne.n	8006058 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3314      	adds	r3, #20
 80060aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e1      	bne.n	80060a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006104:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006106:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800610a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e3      	bne.n	80060e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006138:	f023 0310 	bic.w	r3, r3, #16
 800613c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800614a:	65ba      	str	r2, [r7, #88]	; 0x58
 800614c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e3      	bne.n	8006126 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	4618      	mov	r0, r3
 8006164:	f7fb fe31 	bl	8001dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006176:	b29b      	uxth	r3, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8bf 	bl	8006302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006184:	e09c      	b.n	80062c0 <HAL_UART_IRQHandler+0x518>
 8006186:	bf00      	nop
 8006188:	080063dd 	.word	0x080063dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006194:	b29b      	uxth	r3, r3
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 808e 	beq.w	80062c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8089 	beq.w	80062c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061d6:	647a      	str	r2, [r7, #68]	; 0x44
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e3      	bne.n	80061b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3314      	adds	r3, #20
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800620e:	633a      	str	r2, [r7, #48]	; 0x30
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006254:	61fa      	str	r2, [r7, #28]
 8006256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	617b      	str	r3, [r7, #20]
   return(result);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e3      	bne.n	8006230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800626e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f844 	bl	8006302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800627a:	e023      	b.n	80062c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <HAL_UART_IRQHandler+0x4f4>
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8b5 	bl	8006404 <UART_Transmit_IT>
    return;
 800629a:	e014      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <HAL_UART_IRQHandler+0x51e>
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f8f4 	bl	80064a2 <UART_EndTransmit_IT>
    return;
 80062ba:	e004      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80062bc:	bf00      	nop
 80062be:	e002      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80062c0:	bf00      	nop
 80062c2:	e000      	b.n	80062c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80062c4:	bf00      	nop
  }
}
 80062c6:	37e8      	adds	r7, #232	; 0xe8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006318:	b480      	push	{r7}
 800631a:	b095      	sub	sp, #84	; 0x54
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006340:	643a      	str	r2, [r7, #64]	; 0x40
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e5      	bne.n	8006320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3314      	adds	r3, #20
 800635a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	61fb      	str	r3, [r7, #28]
   return(result);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3314      	adds	r3, #20
 8006372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	2b01      	cmp	r3, #1
 800638e:	d119      	bne.n	80063c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	647b      	str	r3, [r7, #68]	; 0x44
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b0:	61ba      	str	r2, [r7, #24]
 80063b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063d2:	bf00      	nop
 80063d4:	3754      	adds	r7, #84	; 0x54
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff7a 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b21      	cmp	r3, #33	; 0x21
 8006416:	d13e      	bne.n	8006496 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d114      	bne.n	800644c <UART_Transmit_IT+0x48>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d110      	bne.n	800644c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800643e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	1c9a      	adds	r2, r3, #2
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	621a      	str	r2, [r3, #32]
 800644a:	e008      	b.n	800645e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	1c59      	adds	r1, r3, #1
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6211      	str	r1, [r2, #32]
 8006456:	781a      	ldrb	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29b      	uxth	r3, r3
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	4619      	mov	r1, r3
 800646c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10f      	bne.n	8006492 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff ff02 	bl	80062cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b08c      	sub	sp, #48	; 0x30
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b22      	cmp	r3, #34	; 0x22
 80064e4:	f040 80ae 	bne.w	8006644 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f0:	d117      	bne.n	8006522 <UART_Receive_IT+0x50>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d113      	bne.n	8006522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006510:	b29a      	uxth	r2, r3
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	629a      	str	r2, [r3, #40]	; 0x28
 8006520:	e026      	b.n	8006570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006534:	d007      	beq.n	8006546 <UART_Receive_IT+0x74>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <UART_Receive_IT+0x82>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	e008      	b.n	8006566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006560:	b2da      	uxtb	r2, r3
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29b      	uxth	r3, r3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4619      	mov	r1, r3
 800657e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006580:	2b00      	cmp	r3, #0
 8006582:	d15d      	bne.n	8006640 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0220 	bic.w	r2, r2, #32
 8006592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695a      	ldr	r2, [r3, #20]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d135      	bne.n	8006636 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	613b      	str	r3, [r7, #16]
   return(result);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f023 0310 	bic.w	r3, r3, #16
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	623a      	str	r2, [r7, #32]
 80065f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	69f9      	ldr	r1, [r7, #28]
 80065f6:	6a3a      	ldr	r2, [r7, #32]
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d10a      	bne.n	8006628 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fe67 	bl	8006302 <HAL_UARTEx_RxEventCallback>
 8006634:	e002      	b.n	800663c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff fe51 	bl	80062de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e002      	b.n	8006646 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3730      	adds	r7, #48	; 0x30
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800668a:	f023 030c 	bic.w	r3, r3, #12
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	430b      	orrs	r3, r1
 8006696:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a2c      	ldr	r2, [pc, #176]	; (8006764 <UART_SetConfig+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d103      	bne.n	80066c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066b8:	f7fe ff02 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	e002      	b.n	80066c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fe feea 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80066c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009a      	lsls	r2, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	4a22      	ldr	r2, [pc, #136]	; (8006768 <UART_SetConfig+0x118>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	0119      	lsls	r1, r3, #4
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009a      	lsls	r2, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <UART_SetConfig+0x118>)
 80066fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006702:	095b      	lsrs	r3, r3, #5
 8006704:	2064      	movs	r0, #100	; 0x64
 8006706:	fb00 f303 	mul.w	r3, r0, r3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	3332      	adds	r3, #50	; 0x32
 8006710:	4a15      	ldr	r2, [pc, #84]	; (8006768 <UART_SetConfig+0x118>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800671c:	4419      	add	r1, r3
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	009a      	lsls	r2, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	fbb2 f2f3 	udiv	r2, r2, r3
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <UART_SetConfig+0x118>)
 8006736:	fba3 0302 	umull	r0, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	2064      	movs	r0, #100	; 0x64
 800673e:	fb00 f303 	mul.w	r3, r0, r3
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	3332      	adds	r3, #50	; 0x32
 8006748:	4a07      	ldr	r2, [pc, #28]	; (8006768 <UART_SetConfig+0x118>)
 800674a:	fba2 2303 	umull	r2, r3, r2, r3
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	440a      	add	r2, r1
 800675a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40013800 	.word	0x40013800
 8006768:	51eb851f 	.word	0x51eb851f

0800676c <__errno>:
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <__errno+0x8>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000010 	.word	0x20000010

08006778 <__libc_init_array>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	2600      	movs	r6, #0
 800677c:	4d0c      	ldr	r5, [pc, #48]	; (80067b0 <__libc_init_array+0x38>)
 800677e:	4c0d      	ldr	r4, [pc, #52]	; (80067b4 <__libc_init_array+0x3c>)
 8006780:	1b64      	subs	r4, r4, r5
 8006782:	10a4      	asrs	r4, r4, #2
 8006784:	42a6      	cmp	r6, r4
 8006786:	d109      	bne.n	800679c <__libc_init_array+0x24>
 8006788:	f002 fed0 	bl	800952c <_init>
 800678c:	2600      	movs	r6, #0
 800678e:	4d0a      	ldr	r5, [pc, #40]	; (80067b8 <__libc_init_array+0x40>)
 8006790:	4c0a      	ldr	r4, [pc, #40]	; (80067bc <__libc_init_array+0x44>)
 8006792:	1b64      	subs	r4, r4, r5
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	42a6      	cmp	r6, r4
 8006798:	d105      	bne.n	80067a6 <__libc_init_array+0x2e>
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a0:	4798      	blx	r3
 80067a2:	3601      	adds	r6, #1
 80067a4:	e7ee      	b.n	8006784 <__libc_init_array+0xc>
 80067a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067aa:	4798      	blx	r3
 80067ac:	3601      	adds	r6, #1
 80067ae:	e7f2      	b.n	8006796 <__libc_init_array+0x1e>
 80067b0:	08009984 	.word	0x08009984
 80067b4:	08009984 	.word	0x08009984
 80067b8:	08009984 	.word	0x08009984
 80067bc:	08009988 	.word	0x08009988

080067c0 <memset>:
 80067c0:	4603      	mov	r3, r0
 80067c2:	4402      	add	r2, r0
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d100      	bne.n	80067ca <memset+0xa>
 80067c8:	4770      	bx	lr
 80067ca:	f803 1b01 	strb.w	r1, [r3], #1
 80067ce:	e7f9      	b.n	80067c4 <memset+0x4>

080067d0 <__cvt>:
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d6:	461f      	mov	r7, r3
 80067d8:	bfbb      	ittet	lt
 80067da:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80067de:	461f      	movlt	r7, r3
 80067e0:	2300      	movge	r3, #0
 80067e2:	232d      	movlt	r3, #45	; 0x2d
 80067e4:	b088      	sub	sp, #32
 80067e6:	4614      	mov	r4, r2
 80067e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80067ec:	7013      	strb	r3, [r2, #0]
 80067ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80067f4:	f023 0820 	bic.w	r8, r3, #32
 80067f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067fc:	d005      	beq.n	800680a <__cvt+0x3a>
 80067fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006802:	d100      	bne.n	8006806 <__cvt+0x36>
 8006804:	3501      	adds	r5, #1
 8006806:	2302      	movs	r3, #2
 8006808:	e000      	b.n	800680c <__cvt+0x3c>
 800680a:	2303      	movs	r3, #3
 800680c:	aa07      	add	r2, sp, #28
 800680e:	9204      	str	r2, [sp, #16]
 8006810:	aa06      	add	r2, sp, #24
 8006812:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006816:	e9cd 3500 	strd	r3, r5, [sp]
 800681a:	4622      	mov	r2, r4
 800681c:	463b      	mov	r3, r7
 800681e:	f000 fcfb 	bl	8007218 <_dtoa_r>
 8006822:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006826:	4606      	mov	r6, r0
 8006828:	d102      	bne.n	8006830 <__cvt+0x60>
 800682a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800682c:	07db      	lsls	r3, r3, #31
 800682e:	d522      	bpl.n	8006876 <__cvt+0xa6>
 8006830:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006834:	eb06 0905 	add.w	r9, r6, r5
 8006838:	d110      	bne.n	800685c <__cvt+0x8c>
 800683a:	7833      	ldrb	r3, [r6, #0]
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d10a      	bne.n	8006856 <__cvt+0x86>
 8006840:	2200      	movs	r2, #0
 8006842:	2300      	movs	r3, #0
 8006844:	4620      	mov	r0, r4
 8006846:	4639      	mov	r1, r7
 8006848:	f7fa f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800684c:	b918      	cbnz	r0, 8006856 <__cvt+0x86>
 800684e:	f1c5 0501 	rsb	r5, r5, #1
 8006852:	f8ca 5000 	str.w	r5, [sl]
 8006856:	f8da 3000 	ldr.w	r3, [sl]
 800685a:	4499      	add	r9, r3
 800685c:	2200      	movs	r2, #0
 800685e:	2300      	movs	r3, #0
 8006860:	4620      	mov	r0, r4
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8006868:	b108      	cbz	r0, 800686e <__cvt+0x9e>
 800686a:	f8cd 901c 	str.w	r9, [sp, #28]
 800686e:	2230      	movs	r2, #48	; 0x30
 8006870:	9b07      	ldr	r3, [sp, #28]
 8006872:	454b      	cmp	r3, r9
 8006874:	d307      	bcc.n	8006886 <__cvt+0xb6>
 8006876:	4630      	mov	r0, r6
 8006878:	9b07      	ldr	r3, [sp, #28]
 800687a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800687c:	1b9b      	subs	r3, r3, r6
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	b008      	add	sp, #32
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	1c59      	adds	r1, r3, #1
 8006888:	9107      	str	r1, [sp, #28]
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e7f0      	b.n	8006870 <__cvt+0xa0>

0800688e <__exponent>:
 800688e:	4603      	mov	r3, r0
 8006890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006892:	2900      	cmp	r1, #0
 8006894:	f803 2b02 	strb.w	r2, [r3], #2
 8006898:	bfb6      	itet	lt
 800689a:	222d      	movlt	r2, #45	; 0x2d
 800689c:	222b      	movge	r2, #43	; 0x2b
 800689e:	4249      	neglt	r1, r1
 80068a0:	2909      	cmp	r1, #9
 80068a2:	7042      	strb	r2, [r0, #1]
 80068a4:	dd2b      	ble.n	80068fe <__exponent+0x70>
 80068a6:	f10d 0407 	add.w	r4, sp, #7
 80068aa:	46a4      	mov	ip, r4
 80068ac:	270a      	movs	r7, #10
 80068ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80068b2:	460a      	mov	r2, r1
 80068b4:	46a6      	mov	lr, r4
 80068b6:	fb07 1516 	mls	r5, r7, r6, r1
 80068ba:	2a63      	cmp	r2, #99	; 0x63
 80068bc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80068c0:	4631      	mov	r1, r6
 80068c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80068c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80068ca:	dcf0      	bgt.n	80068ae <__exponent+0x20>
 80068cc:	3130      	adds	r1, #48	; 0x30
 80068ce:	f1ae 0502 	sub.w	r5, lr, #2
 80068d2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80068d6:	4629      	mov	r1, r5
 80068d8:	1c44      	adds	r4, r0, #1
 80068da:	4561      	cmp	r1, ip
 80068dc:	d30a      	bcc.n	80068f4 <__exponent+0x66>
 80068de:	f10d 0209 	add.w	r2, sp, #9
 80068e2:	eba2 020e 	sub.w	r2, r2, lr
 80068e6:	4565      	cmp	r5, ip
 80068e8:	bf88      	it	hi
 80068ea:	2200      	movhi	r2, #0
 80068ec:	4413      	add	r3, r2
 80068ee:	1a18      	subs	r0, r3, r0
 80068f0:	b003      	add	sp, #12
 80068f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068f8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068fc:	e7ed      	b.n	80068da <__exponent+0x4c>
 80068fe:	2330      	movs	r3, #48	; 0x30
 8006900:	3130      	adds	r1, #48	; 0x30
 8006902:	7083      	strb	r3, [r0, #2]
 8006904:	70c1      	strb	r1, [r0, #3]
 8006906:	1d03      	adds	r3, r0, #4
 8006908:	e7f1      	b.n	80068ee <__exponent+0x60>
	...

0800690c <_printf_float>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	b091      	sub	sp, #68	; 0x44
 8006912:	460c      	mov	r4, r1
 8006914:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006918:	4616      	mov	r6, r2
 800691a:	461f      	mov	r7, r3
 800691c:	4605      	mov	r5, r0
 800691e:	f001 fa69 	bl	8007df4 <_localeconv_r>
 8006922:	6803      	ldr	r3, [r0, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	9309      	str	r3, [sp, #36]	; 0x24
 8006928:	f7f9 fc12 	bl	8000150 <strlen>
 800692c:	2300      	movs	r3, #0
 800692e:	930e      	str	r3, [sp, #56]	; 0x38
 8006930:	f8d8 3000 	ldr.w	r3, [r8]
 8006934:	900a      	str	r0, [sp, #40]	; 0x28
 8006936:	3307      	adds	r3, #7
 8006938:	f023 0307 	bic.w	r3, r3, #7
 800693c:	f103 0208 	add.w	r2, r3, #8
 8006940:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006944:	f8d4 b000 	ldr.w	fp, [r4]
 8006948:	f8c8 2000 	str.w	r2, [r8]
 800694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006950:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006954:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006958:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800695c:	930b      	str	r3, [sp, #44]	; 0x2c
 800695e:	f04f 32ff 	mov.w	r2, #4294967295
 8006962:	4640      	mov	r0, r8
 8006964:	4b9c      	ldr	r3, [pc, #624]	; (8006bd8 <_printf_float+0x2cc>)
 8006966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006968:	f7fa f850 	bl	8000a0c <__aeabi_dcmpun>
 800696c:	bb70      	cbnz	r0, 80069cc <_printf_float+0xc0>
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	4640      	mov	r0, r8
 8006974:	4b98      	ldr	r3, [pc, #608]	; (8006bd8 <_printf_float+0x2cc>)
 8006976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006978:	f7fa f82a 	bl	80009d0 <__aeabi_dcmple>
 800697c:	bb30      	cbnz	r0, 80069cc <_printf_float+0xc0>
 800697e:	2200      	movs	r2, #0
 8006980:	2300      	movs	r3, #0
 8006982:	4640      	mov	r0, r8
 8006984:	4651      	mov	r1, sl
 8006986:	f7fa f819 	bl	80009bc <__aeabi_dcmplt>
 800698a:	b110      	cbz	r0, 8006992 <_printf_float+0x86>
 800698c:	232d      	movs	r3, #45	; 0x2d
 800698e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006992:	4b92      	ldr	r3, [pc, #584]	; (8006bdc <_printf_float+0x2d0>)
 8006994:	4892      	ldr	r0, [pc, #584]	; (8006be0 <_printf_float+0x2d4>)
 8006996:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800699a:	bf94      	ite	ls
 800699c:	4698      	movls	r8, r3
 800699e:	4680      	movhi	r8, r0
 80069a0:	2303      	movs	r3, #3
 80069a2:	f04f 0a00 	mov.w	sl, #0
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	f02b 0304 	bic.w	r3, fp, #4
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	4633      	mov	r3, r6
 80069b0:	4621      	mov	r1, r4
 80069b2:	4628      	mov	r0, r5
 80069b4:	9700      	str	r7, [sp, #0]
 80069b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80069b8:	f000 f9d4 	bl	8006d64 <_printf_common>
 80069bc:	3001      	adds	r0, #1
 80069be:	f040 8090 	bne.w	8006ae2 <_printf_float+0x1d6>
 80069c2:	f04f 30ff 	mov.w	r0, #4294967295
 80069c6:	b011      	add	sp, #68	; 0x44
 80069c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069cc:	4642      	mov	r2, r8
 80069ce:	4653      	mov	r3, sl
 80069d0:	4640      	mov	r0, r8
 80069d2:	4651      	mov	r1, sl
 80069d4:	f7fa f81a 	bl	8000a0c <__aeabi_dcmpun>
 80069d8:	b148      	cbz	r0, 80069ee <_printf_float+0xe2>
 80069da:	f1ba 0f00 	cmp.w	sl, #0
 80069de:	bfb8      	it	lt
 80069e0:	232d      	movlt	r3, #45	; 0x2d
 80069e2:	4880      	ldr	r0, [pc, #512]	; (8006be4 <_printf_float+0x2d8>)
 80069e4:	bfb8      	it	lt
 80069e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ea:	4b7f      	ldr	r3, [pc, #508]	; (8006be8 <_printf_float+0x2dc>)
 80069ec:	e7d3      	b.n	8006996 <_printf_float+0x8a>
 80069ee:	6863      	ldr	r3, [r4, #4]
 80069f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	d142      	bne.n	8006a7e <_printf_float+0x172>
 80069f8:	2306      	movs	r3, #6
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	9206      	str	r2, [sp, #24]
 8006a00:	aa0e      	add	r2, sp, #56	; 0x38
 8006a02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006a06:	aa0d      	add	r2, sp, #52	; 0x34
 8006a08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006a0c:	9203      	str	r2, [sp, #12]
 8006a0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006a12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4628      	mov	r0, r5
 8006a20:	4653      	mov	r3, sl
 8006a22:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a24:	f7ff fed4 	bl	80067d0 <__cvt>
 8006a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	2947      	cmp	r1, #71	; 0x47
 8006a2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a30:	d108      	bne.n	8006a44 <_printf_float+0x138>
 8006a32:	1cc8      	adds	r0, r1, #3
 8006a34:	db02      	blt.n	8006a3c <_printf_float+0x130>
 8006a36:	6863      	ldr	r3, [r4, #4]
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	dd40      	ble.n	8006abe <_printf_float+0x1b2>
 8006a3c:	f1a9 0902 	sub.w	r9, r9, #2
 8006a40:	fa5f f989 	uxtb.w	r9, r9
 8006a44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a48:	d81f      	bhi.n	8006a8a <_printf_float+0x17e>
 8006a4a:	464a      	mov	r2, r9
 8006a4c:	3901      	subs	r1, #1
 8006a4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a52:	910d      	str	r1, [sp, #52]	; 0x34
 8006a54:	f7ff ff1b 	bl	800688e <__exponent>
 8006a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	1813      	adds	r3, r2, r0
 8006a5e:	2a01      	cmp	r2, #1
 8006a60:	6123      	str	r3, [r4, #16]
 8006a62:	dc02      	bgt.n	8006a6a <_printf_float+0x15e>
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	07d2      	lsls	r2, r2, #31
 8006a68:	d501      	bpl.n	8006a6e <_printf_float+0x162>
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	6123      	str	r3, [r4, #16]
 8006a6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d09b      	beq.n	80069ae <_printf_float+0xa2>
 8006a76:	232d      	movs	r3, #45	; 0x2d
 8006a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a7c:	e797      	b.n	80069ae <_printf_float+0xa2>
 8006a7e:	2947      	cmp	r1, #71	; 0x47
 8006a80:	d1bc      	bne.n	80069fc <_printf_float+0xf0>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ba      	bne.n	80069fc <_printf_float+0xf0>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e7b7      	b.n	80069fa <_printf_float+0xee>
 8006a8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a8e:	d118      	bne.n	8006ac2 <_printf_float+0x1b6>
 8006a90:	2900      	cmp	r1, #0
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	dd0b      	ble.n	8006aae <_printf_float+0x1a2>
 8006a96:	6121      	str	r1, [r4, #16]
 8006a98:	b913      	cbnz	r3, 8006aa0 <_printf_float+0x194>
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	07d0      	lsls	r0, r2, #31
 8006a9e:	d502      	bpl.n	8006aa6 <_printf_float+0x19a>
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	440b      	add	r3, r1
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	f04f 0a00 	mov.w	sl, #0
 8006aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8006aac:	e7df      	b.n	8006a6e <_printf_float+0x162>
 8006aae:	b913      	cbnz	r3, 8006ab6 <_printf_float+0x1aa>
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	07d2      	lsls	r2, r2, #31
 8006ab4:	d501      	bpl.n	8006aba <_printf_float+0x1ae>
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	e7f4      	b.n	8006aa4 <_printf_float+0x198>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7f2      	b.n	8006aa4 <_printf_float+0x198>
 8006abe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	db05      	blt.n	8006ad4 <_printf_float+0x1c8>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	6121      	str	r1, [r4, #16]
 8006acc:	07d8      	lsls	r0, r3, #31
 8006ace:	d5ea      	bpl.n	8006aa6 <_printf_float+0x19a>
 8006ad0:	1c4b      	adds	r3, r1, #1
 8006ad2:	e7e7      	b.n	8006aa4 <_printf_float+0x198>
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	bfcc      	ite	gt
 8006ad8:	2201      	movgt	r2, #1
 8006ada:	f1c1 0202 	rsble	r2, r1, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	e7e0      	b.n	8006aa4 <_printf_float+0x198>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	055a      	lsls	r2, r3, #21
 8006ae6:	d407      	bmi.n	8006af8 <_printf_float+0x1ec>
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	4642      	mov	r2, r8
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	d12b      	bne.n	8006b4e <_printf_float+0x242>
 8006af6:	e764      	b.n	80069c2 <_printf_float+0xb6>
 8006af8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006afc:	f240 80dd 	bls.w	8006cba <_printf_float+0x3ae>
 8006b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	f7f9 ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d033      	beq.n	8006b78 <_printf_float+0x26c>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4631      	mov	r1, r6
 8006b14:	4628      	mov	r0, r5
 8006b16:	4a35      	ldr	r2, [pc, #212]	; (8006bec <_printf_float+0x2e0>)
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af51 	beq.w	80069c2 <_printf_float+0xb6>
 8006b20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b24:	429a      	cmp	r2, r3
 8006b26:	db02      	blt.n	8006b2e <_printf_float+0x222>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	07d8      	lsls	r0, r3, #31
 8006b2c:	d50f      	bpl.n	8006b4e <_printf_float+0x242>
 8006b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f af42 	beq.w	80069c2 <_printf_float+0xb6>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	f104 091a 	add.w	r9, r4, #26
 8006b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	4543      	cmp	r3, r8
 8006b4c:	dc09      	bgt.n	8006b62 <_printf_float+0x256>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	079b      	lsls	r3, r3, #30
 8006b52:	f100 8102 	bmi.w	8006d5a <_printf_float+0x44e>
 8006b56:	68e0      	ldr	r0, [r4, #12]
 8006b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b5a:	4298      	cmp	r0, r3
 8006b5c:	bfb8      	it	lt
 8006b5e:	4618      	movlt	r0, r3
 8006b60:	e731      	b.n	80069c6 <_printf_float+0xba>
 8006b62:	2301      	movs	r3, #1
 8006b64:	464a      	mov	r2, r9
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f af28 	beq.w	80069c2 <_printf_float+0xb6>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	e7e6      	b.n	8006b46 <_printf_float+0x23a>
 8006b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dc38      	bgt.n	8006bf0 <_printf_float+0x2e4>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	4a19      	ldr	r2, [pc, #100]	; (8006bec <_printf_float+0x2e0>)
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f af1a 	beq.w	80069c2 <_printf_float+0xb6>
 8006b8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b92:	4313      	orrs	r3, r2
 8006b94:	d102      	bne.n	8006b9c <_printf_float+0x290>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	07d9      	lsls	r1, r3, #31
 8006b9a:	d5d8      	bpl.n	8006b4e <_printf_float+0x242>
 8006b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f43f af0b 	beq.w	80069c2 <_printf_float+0xb6>
 8006bac:	f04f 0900 	mov.w	r9, #0
 8006bb0:	f104 0a1a 	add.w	sl, r4, #26
 8006bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bb6:	425b      	negs	r3, r3
 8006bb8:	454b      	cmp	r3, r9
 8006bba:	dc01      	bgt.n	8006bc0 <_printf_float+0x2b4>
 8006bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bbe:	e794      	b.n	8006aea <_printf_float+0x1de>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f aef9 	beq.w	80069c2 <_printf_float+0xb6>
 8006bd0:	f109 0901 	add.w	r9, r9, #1
 8006bd4:	e7ee      	b.n	8006bb4 <_printf_float+0x2a8>
 8006bd6:	bf00      	nop
 8006bd8:	7fefffff 	.word	0x7fefffff
 8006bdc:	080095a4 	.word	0x080095a4
 8006be0:	080095a8 	.word	0x080095a8
 8006be4:	080095b0 	.word	0x080095b0
 8006be8:	080095ac 	.word	0x080095ac
 8006bec:	080095b4 	.word	0x080095b4
 8006bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	bfa8      	it	ge
 8006bf8:	461a      	movge	r2, r3
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	4691      	mov	r9, r2
 8006bfe:	dc37      	bgt.n	8006c70 <_printf_float+0x364>
 8006c00:	f04f 0b00 	mov.w	fp, #0
 8006c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c08:	f104 021a 	add.w	r2, r4, #26
 8006c0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006c10:	ebaa 0309 	sub.w	r3, sl, r9
 8006c14:	455b      	cmp	r3, fp
 8006c16:	dc33      	bgt.n	8006c80 <_printf_float+0x374>
 8006c18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	db3b      	blt.n	8006c98 <_printf_float+0x38c>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	07da      	lsls	r2, r3, #31
 8006c24:	d438      	bmi.n	8006c98 <_printf_float+0x38c>
 8006c26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c2a:	eba2 030a 	sub.w	r3, r2, sl
 8006c2e:	eba2 0901 	sub.w	r9, r2, r1
 8006c32:	4599      	cmp	r9, r3
 8006c34:	bfa8      	it	ge
 8006c36:	4699      	movge	r9, r3
 8006c38:	f1b9 0f00 	cmp.w	r9, #0
 8006c3c:	dc34      	bgt.n	8006ca8 <_printf_float+0x39c>
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c46:	f104 0a1a 	add.w	sl, r4, #26
 8006c4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c4e:	1a9b      	subs	r3, r3, r2
 8006c50:	eba3 0309 	sub.w	r3, r3, r9
 8006c54:	4543      	cmp	r3, r8
 8006c56:	f77f af7a 	ble.w	8006b4e <_printf_float+0x242>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f aeac 	beq.w	80069c2 <_printf_float+0xb6>
 8006c6a:	f108 0801 	add.w	r8, r8, #1
 8006c6e:	e7ec      	b.n	8006c4a <_printf_float+0x33e>
 8006c70:	4613      	mov	r3, r2
 8006c72:	4631      	mov	r1, r6
 8006c74:	4642      	mov	r2, r8
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d1c0      	bne.n	8006c00 <_printf_float+0x2f4>
 8006c7e:	e6a0      	b.n	80069c2 <_printf_float+0xb6>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f ae99 	beq.w	80069c2 <_printf_float+0xb6>
 8006c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c92:	f10b 0b01 	add.w	fp, fp, #1
 8006c96:	e7b9      	b.n	8006c0c <_printf_float+0x300>
 8006c98:	4631      	mov	r1, r6
 8006c9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d1bf      	bne.n	8006c26 <_printf_float+0x31a>
 8006ca6:	e68c      	b.n	80069c2 <_printf_float+0xb6>
 8006ca8:	464b      	mov	r3, r9
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	eb08 020a 	add.w	r2, r8, sl
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1c2      	bne.n	8006c3e <_printf_float+0x332>
 8006cb8:	e683      	b.n	80069c2 <_printf_float+0xb6>
 8006cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	dc01      	bgt.n	8006cc4 <_printf_float+0x3b8>
 8006cc0:	07db      	lsls	r3, r3, #31
 8006cc2:	d537      	bpl.n	8006d34 <_printf_float+0x428>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f ae77 	beq.w	80069c2 <_printf_float+0xb6>
 8006cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f ae6f 	beq.w	80069c2 <_printf_float+0xb6>
 8006ce4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2300      	movs	r3, #0
 8006cec:	f7f9 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8006cf0:	b9d8      	cbnz	r0, 8006d2a <_printf_float+0x41e>
 8006cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cf4:	f108 0201 	add.w	r2, r8, #1
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	d10e      	bne.n	8006d22 <_printf_float+0x416>
 8006d04:	e65d      	b.n	80069c2 <_printf_float+0xb6>
 8006d06:	2301      	movs	r3, #1
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae56 	beq.w	80069c2 <_printf_float+0xb6>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	4543      	cmp	r3, r8
 8006d20:	dcf1      	bgt.n	8006d06 <_printf_float+0x3fa>
 8006d22:	4653      	mov	r3, sl
 8006d24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d28:	e6e0      	b.n	8006aec <_printf_float+0x1e0>
 8006d2a:	f04f 0800 	mov.w	r8, #0
 8006d2e:	f104 091a 	add.w	r9, r4, #26
 8006d32:	e7f2      	b.n	8006d1a <_printf_float+0x40e>
 8006d34:	2301      	movs	r3, #1
 8006d36:	4642      	mov	r2, r8
 8006d38:	e7df      	b.n	8006cfa <_printf_float+0x3ee>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	464a      	mov	r2, r9
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae3c 	beq.w	80069c2 <_printf_float+0xb6>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d52:	1a5b      	subs	r3, r3, r1
 8006d54:	4543      	cmp	r3, r8
 8006d56:	dcf0      	bgt.n	8006d3a <_printf_float+0x42e>
 8006d58:	e6fd      	b.n	8006b56 <_printf_float+0x24a>
 8006d5a:	f04f 0800 	mov.w	r8, #0
 8006d5e:	f104 0919 	add.w	r9, r4, #25
 8006d62:	e7f4      	b.n	8006d4e <_printf_float+0x442>

08006d64 <_printf_common>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	4616      	mov	r6, r2
 8006d6a:	4699      	mov	r9, r3
 8006d6c:	688a      	ldr	r2, [r1, #8]
 8006d6e:	690b      	ldr	r3, [r1, #16]
 8006d70:	4607      	mov	r7, r0
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bfb8      	it	lt
 8006d76:	4613      	movlt	r3, r2
 8006d78:	6033      	str	r3, [r6, #0]
 8006d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d7e:	460c      	mov	r4, r1
 8006d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d84:	b10a      	cbz	r2, 8006d8a <_printf_common+0x26>
 8006d86:	3301      	adds	r3, #1
 8006d88:	6033      	str	r3, [r6, #0]
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	0699      	lsls	r1, r3, #26
 8006d8e:	bf42      	ittt	mi
 8006d90:	6833      	ldrmi	r3, [r6, #0]
 8006d92:	3302      	addmi	r3, #2
 8006d94:	6033      	strmi	r3, [r6, #0]
 8006d96:	6825      	ldr	r5, [r4, #0]
 8006d98:	f015 0506 	ands.w	r5, r5, #6
 8006d9c:	d106      	bne.n	8006dac <_printf_common+0x48>
 8006d9e:	f104 0a19 	add.w	sl, r4, #25
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	6832      	ldr	r2, [r6, #0]
 8006da6:	1a9b      	subs	r3, r3, r2
 8006da8:	42ab      	cmp	r3, r5
 8006daa:	dc28      	bgt.n	8006dfe <_printf_common+0x9a>
 8006dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db0:	1e13      	subs	r3, r2, #0
 8006db2:	6822      	ldr	r2, [r4, #0]
 8006db4:	bf18      	it	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	0692      	lsls	r2, r2, #26
 8006dba:	d42d      	bmi.n	8006e18 <_printf_common+0xb4>
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc4:	47c0      	blx	r8
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d020      	beq.n	8006e0c <_printf_common+0xa8>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	68e5      	ldr	r5, [r4, #12]
 8006dce:	f003 0306 	and.w	r3, r3, #6
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	bf18      	it	ne
 8006dd6:	2500      	movne	r5, #0
 8006dd8:	6832      	ldr	r2, [r6, #0]
 8006dda:	f04f 0600 	mov.w	r6, #0
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	bf08      	it	eq
 8006de2:	1aad      	subeq	r5, r5, r2
 8006de4:	6922      	ldr	r2, [r4, #16]
 8006de6:	bf08      	it	eq
 8006de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dec:	4293      	cmp	r3, r2
 8006dee:	bfc4      	itt	gt
 8006df0:	1a9b      	subgt	r3, r3, r2
 8006df2:	18ed      	addgt	r5, r5, r3
 8006df4:	341a      	adds	r4, #26
 8006df6:	42b5      	cmp	r5, r6
 8006df8:	d11a      	bne.n	8006e30 <_printf_common+0xcc>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e008      	b.n	8006e10 <_printf_common+0xac>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4649      	mov	r1, r9
 8006e04:	4638      	mov	r0, r7
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0xb0>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	3501      	adds	r5, #1
 8006e16:	e7c4      	b.n	8006da2 <_printf_common+0x3e>
 8006e18:	2030      	movs	r0, #48	; 0x30
 8006e1a:	18e1      	adds	r1, r4, r3
 8006e1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e26:	4422      	add	r2, r4
 8006e28:	3302      	adds	r3, #2
 8006e2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e2e:	e7c5      	b.n	8006dbc <_printf_common+0x58>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4622      	mov	r2, r4
 8006e34:	4649      	mov	r1, r9
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d0e6      	beq.n	8006e0c <_printf_common+0xa8>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7d9      	b.n	8006df6 <_printf_common+0x92>
	...

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	460c      	mov	r4, r1
 8006e4a:	7e27      	ldrb	r7, [r4, #24]
 8006e4c:	4691      	mov	r9, r2
 8006e4e:	2f78      	cmp	r7, #120	; 0x78
 8006e50:	4680      	mov	r8, r0
 8006e52:	469a      	mov	sl, r3
 8006e54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	; 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d9 	beq.w	8007018 <_printf_i+0x1d4>
 8006e66:	2f58      	cmp	r7, #88	; 0x58
 8006e68:	f000 80a4 	beq.w	8006fb4 <_printf_i+0x170>
 8006e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a001      	add	r0, pc, #4	; (adr r0, 8006e84 <_printf_i+0x40>)
 8006e80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006fff 	.word	0x08006fff
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006fe1 	.word	0x08006fe1
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	08007021 	.word	0x08007021
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fe9 	.word	0x08006fe9
 8006edc:	680b      	ldr	r3, [r1, #0]
 8006ede:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	600a      	str	r2, [r1, #0]
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0a4      	b.n	800703a <_printf_i+0x1f6>
 8006ef0:	6825      	ldr	r5, [r4, #0]
 8006ef2:	6808      	ldr	r0, [r1, #0]
 8006ef4:	062e      	lsls	r6, r5, #24
 8006ef6:	f100 0304 	add.w	r3, r0, #4
 8006efa:	d50a      	bpl.n	8006f12 <_printf_i+0xce>
 8006efc:	6805      	ldr	r5, [r0, #0]
 8006efe:	600b      	str	r3, [r1, #0]
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	da03      	bge.n	8006f0c <_printf_i+0xc8>
 8006f04:	232d      	movs	r3, #45	; 0x2d
 8006f06:	426d      	negs	r5, r5
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0c:	230a      	movs	r3, #10
 8006f0e:	485e      	ldr	r0, [pc, #376]	; (8007088 <_printf_i+0x244>)
 8006f10:	e019      	b.n	8006f46 <_printf_i+0x102>
 8006f12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f16:	6805      	ldr	r5, [r0, #0]
 8006f18:	600b      	str	r3, [r1, #0]
 8006f1a:	bf18      	it	ne
 8006f1c:	b22d      	sxthne	r5, r5
 8006f1e:	e7ef      	b.n	8006f00 <_printf_i+0xbc>
 8006f20:	680b      	ldr	r3, [r1, #0]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	1d18      	adds	r0, r3, #4
 8006f26:	6008      	str	r0, [r1, #0]
 8006f28:	0628      	lsls	r0, r5, #24
 8006f2a:	d501      	bpl.n	8006f30 <_printf_i+0xec>
 8006f2c:	681d      	ldr	r5, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <_printf_i+0xf2>
 8006f30:	0669      	lsls	r1, r5, #25
 8006f32:	d5fb      	bpl.n	8006f2c <_printf_i+0xe8>
 8006f34:	881d      	ldrh	r5, [r3, #0]
 8006f36:	2f6f      	cmp	r7, #111	; 0x6f
 8006f38:	bf0c      	ite	eq
 8006f3a:	2308      	moveq	r3, #8
 8006f3c:	230a      	movne	r3, #10
 8006f3e:	4852      	ldr	r0, [pc, #328]	; (8007088 <_printf_i+0x244>)
 8006f40:	2100      	movs	r1, #0
 8006f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f46:	6866      	ldr	r6, [r4, #4]
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	bfa8      	it	ge
 8006f4c:	6821      	ldrge	r1, [r4, #0]
 8006f4e:	60a6      	str	r6, [r4, #8]
 8006f50:	bfa4      	itt	ge
 8006f52:	f021 0104 	bicge.w	r1, r1, #4
 8006f56:	6021      	strge	r1, [r4, #0]
 8006f58:	b90d      	cbnz	r5, 8006f5e <_printf_i+0x11a>
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	d04d      	beq.n	8006ffa <_printf_i+0x1b6>
 8006f5e:	4616      	mov	r6, r2
 8006f60:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f64:	fb03 5711 	mls	r7, r3, r1, r5
 8006f68:	5dc7      	ldrb	r7, [r0, r7]
 8006f6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f6e:	462f      	mov	r7, r5
 8006f70:	42bb      	cmp	r3, r7
 8006f72:	460d      	mov	r5, r1
 8006f74:	d9f4      	bls.n	8006f60 <_printf_i+0x11c>
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d10b      	bne.n	8006f92 <_printf_i+0x14e>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	07df      	lsls	r7, r3, #31
 8006f7e:	d508      	bpl.n	8006f92 <_printf_i+0x14e>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	6861      	ldr	r1, [r4, #4]
 8006f84:	4299      	cmp	r1, r3
 8006f86:	bfde      	ittt	le
 8006f88:	2330      	movle	r3, #48	; 0x30
 8006f8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f92:	1b92      	subs	r2, r2, r6
 8006f94:	6122      	str	r2, [r4, #16]
 8006f96:	464b      	mov	r3, r9
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	f8cd a000 	str.w	sl, [sp]
 8006fa0:	aa03      	add	r2, sp, #12
 8006fa2:	f7ff fedf 	bl	8006d64 <_printf_common>
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d14c      	bne.n	8007044 <_printf_i+0x200>
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295
 8006fae:	b004      	add	sp, #16
 8006fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb4:	4834      	ldr	r0, [pc, #208]	; (8007088 <_printf_i+0x244>)
 8006fb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fba:	680e      	ldr	r6, [r1, #0]
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fc2:	061f      	lsls	r7, r3, #24
 8006fc4:	600e      	str	r6, [r1, #0]
 8006fc6:	d514      	bpl.n	8006ff2 <_printf_i+0x1ae>
 8006fc8:	07d9      	lsls	r1, r3, #31
 8006fca:	bf44      	itt	mi
 8006fcc:	f043 0320 	orrmi.w	r3, r3, #32
 8006fd0:	6023      	strmi	r3, [r4, #0]
 8006fd2:	b91d      	cbnz	r5, 8006fdc <_printf_i+0x198>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f023 0320 	bic.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2310      	movs	r3, #16
 8006fde:	e7af      	b.n	8006f40 <_printf_i+0xfc>
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	f043 0320 	orr.w	r3, r3, #32
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	2378      	movs	r3, #120	; 0x78
 8006fea:	4828      	ldr	r0, [pc, #160]	; (800708c <_printf_i+0x248>)
 8006fec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ff0:	e7e3      	b.n	8006fba <_printf_i+0x176>
 8006ff2:	065e      	lsls	r6, r3, #25
 8006ff4:	bf48      	it	mi
 8006ff6:	b2ad      	uxthmi	r5, r5
 8006ff8:	e7e6      	b.n	8006fc8 <_printf_i+0x184>
 8006ffa:	4616      	mov	r6, r2
 8006ffc:	e7bb      	b.n	8006f76 <_printf_i+0x132>
 8006ffe:	680b      	ldr	r3, [r1, #0]
 8007000:	6826      	ldr	r6, [r4, #0]
 8007002:	1d1d      	adds	r5, r3, #4
 8007004:	6960      	ldr	r0, [r4, #20]
 8007006:	600d      	str	r5, [r1, #0]
 8007008:	0635      	lsls	r5, r6, #24
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	d501      	bpl.n	8007012 <_printf_i+0x1ce>
 800700e:	6018      	str	r0, [r3, #0]
 8007010:	e002      	b.n	8007018 <_printf_i+0x1d4>
 8007012:	0671      	lsls	r1, r6, #25
 8007014:	d5fb      	bpl.n	800700e <_printf_i+0x1ca>
 8007016:	8018      	strh	r0, [r3, #0]
 8007018:	2300      	movs	r3, #0
 800701a:	4616      	mov	r6, r2
 800701c:	6123      	str	r3, [r4, #16]
 800701e:	e7ba      	b.n	8006f96 <_printf_i+0x152>
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	1d1a      	adds	r2, r3, #4
 8007024:	600a      	str	r2, [r1, #0]
 8007026:	681e      	ldr	r6, [r3, #0]
 8007028:	2100      	movs	r1, #0
 800702a:	4630      	mov	r0, r6
 800702c:	6862      	ldr	r2, [r4, #4]
 800702e:	f000 feed 	bl	8007e0c <memchr>
 8007032:	b108      	cbz	r0, 8007038 <_printf_i+0x1f4>
 8007034:	1b80      	subs	r0, r0, r6
 8007036:	6060      	str	r0, [r4, #4]
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	2300      	movs	r3, #0
 800703e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007042:	e7a8      	b.n	8006f96 <_printf_i+0x152>
 8007044:	4632      	mov	r2, r6
 8007046:	4649      	mov	r1, r9
 8007048:	4640      	mov	r0, r8
 800704a:	6923      	ldr	r3, [r4, #16]
 800704c:	47d0      	blx	sl
 800704e:	3001      	adds	r0, #1
 8007050:	d0ab      	beq.n	8006faa <_printf_i+0x166>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	079b      	lsls	r3, r3, #30
 8007056:	d413      	bmi.n	8007080 <_printf_i+0x23c>
 8007058:	68e0      	ldr	r0, [r4, #12]
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	4298      	cmp	r0, r3
 800705e:	bfb8      	it	lt
 8007060:	4618      	movlt	r0, r3
 8007062:	e7a4      	b.n	8006fae <_printf_i+0x16a>
 8007064:	2301      	movs	r3, #1
 8007066:	4632      	mov	r2, r6
 8007068:	4649      	mov	r1, r9
 800706a:	4640      	mov	r0, r8
 800706c:	47d0      	blx	sl
 800706e:	3001      	adds	r0, #1
 8007070:	d09b      	beq.n	8006faa <_printf_i+0x166>
 8007072:	3501      	adds	r5, #1
 8007074:	68e3      	ldr	r3, [r4, #12]
 8007076:	9903      	ldr	r1, [sp, #12]
 8007078:	1a5b      	subs	r3, r3, r1
 800707a:	42ab      	cmp	r3, r5
 800707c:	dcf2      	bgt.n	8007064 <_printf_i+0x220>
 800707e:	e7eb      	b.n	8007058 <_printf_i+0x214>
 8007080:	2500      	movs	r5, #0
 8007082:	f104 0619 	add.w	r6, r4, #25
 8007086:	e7f5      	b.n	8007074 <_printf_i+0x230>
 8007088:	080095b6 	.word	0x080095b6
 800708c:	080095c7 	.word	0x080095c7

08007090 <sniprintf>:
 8007090:	b40c      	push	{r2, r3}
 8007092:	b530      	push	{r4, r5, lr}
 8007094:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <sniprintf+0x64>)
 8007096:	1e0c      	subs	r4, r1, #0
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	b09d      	sub	sp, #116	; 0x74
 800709c:	da08      	bge.n	80070b0 <sniprintf+0x20>
 800709e:	238b      	movs	r3, #139	; 0x8b
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	b01d      	add	sp, #116	; 0x74
 80070a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070ac:	b002      	add	sp, #8
 80070ae:	4770      	bx	lr
 80070b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070b8:	bf0c      	ite	eq
 80070ba:	4623      	moveq	r3, r4
 80070bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	9307      	str	r3, [sp, #28]
 80070c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	9006      	str	r0, [sp, #24]
 80070cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070d0:	4628      	mov	r0, r5
 80070d2:	ab21      	add	r3, sp, #132	; 0x84
 80070d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070d6:	a902      	add	r1, sp, #8
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	f001 fb45 	bl	8008768 <_svfiprintf_r>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	bfbc      	itt	lt
 80070e2:	238b      	movlt	r3, #139	; 0x8b
 80070e4:	602b      	strlt	r3, [r5, #0]
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	d0dd      	beq.n	80070a6 <sniprintf+0x16>
 80070ea:	2200      	movs	r2, #0
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	e7d9      	b.n	80070a6 <sniprintf+0x16>
 80070f2:	bf00      	nop
 80070f4:	20000010 	.word	0x20000010

080070f8 <quorem>:
 80070f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	6903      	ldr	r3, [r0, #16]
 80070fe:	690c      	ldr	r4, [r1, #16]
 8007100:	4607      	mov	r7, r0
 8007102:	42a3      	cmp	r3, r4
 8007104:	f2c0 8083 	blt.w	800720e <quorem+0x116>
 8007108:	3c01      	subs	r4, #1
 800710a:	f100 0514 	add.w	r5, r0, #20
 800710e:	f101 0814 	add.w	r8, r1, #20
 8007112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800711c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007120:	3301      	adds	r3, #1
 8007122:	429a      	cmp	r2, r3
 8007124:	fbb2 f6f3 	udiv	r6, r2, r3
 8007128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800712c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007130:	d332      	bcc.n	8007198 <quorem+0xa0>
 8007132:	f04f 0e00 	mov.w	lr, #0
 8007136:	4640      	mov	r0, r8
 8007138:	46ac      	mov	ip, r5
 800713a:	46f2      	mov	sl, lr
 800713c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007140:	b293      	uxth	r3, r2
 8007142:	fb06 e303 	mla	r3, r6, r3, lr
 8007146:	0c12      	lsrs	r2, r2, #16
 8007148:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800714c:	fb06 e202 	mla	r2, r6, r2, lr
 8007150:	b29b      	uxth	r3, r3
 8007152:	ebaa 0303 	sub.w	r3, sl, r3
 8007156:	f8dc a000 	ldr.w	sl, [ip]
 800715a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800715e:	fa1f fa8a 	uxth.w	sl, sl
 8007162:	4453      	add	r3, sl
 8007164:	fa1f fa82 	uxth.w	sl, r2
 8007168:	f8dc 2000 	ldr.w	r2, [ip]
 800716c:	4581      	cmp	r9, r0
 800716e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007176:	b29b      	uxth	r3, r3
 8007178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800717c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007180:	f84c 3b04 	str.w	r3, [ip], #4
 8007184:	d2da      	bcs.n	800713c <quorem+0x44>
 8007186:	f855 300b 	ldr.w	r3, [r5, fp]
 800718a:	b92b      	cbnz	r3, 8007198 <quorem+0xa0>
 800718c:	9b01      	ldr	r3, [sp, #4]
 800718e:	3b04      	subs	r3, #4
 8007190:	429d      	cmp	r5, r3
 8007192:	461a      	mov	r2, r3
 8007194:	d32f      	bcc.n	80071f6 <quorem+0xfe>
 8007196:	613c      	str	r4, [r7, #16]
 8007198:	4638      	mov	r0, r7
 800719a:	f001 f8cd 	bl	8008338 <__mcmp>
 800719e:	2800      	cmp	r0, #0
 80071a0:	db25      	blt.n	80071ee <quorem+0xf6>
 80071a2:	4628      	mov	r0, r5
 80071a4:	f04f 0c00 	mov.w	ip, #0
 80071a8:	3601      	adds	r6, #1
 80071aa:	f858 1b04 	ldr.w	r1, [r8], #4
 80071ae:	f8d0 e000 	ldr.w	lr, [r0]
 80071b2:	b28b      	uxth	r3, r1
 80071b4:	ebac 0303 	sub.w	r3, ip, r3
 80071b8:	fa1f f28e 	uxth.w	r2, lr
 80071bc:	4413      	add	r3, r2
 80071be:	0c0a      	lsrs	r2, r1, #16
 80071c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ce:	45c1      	cmp	r9, r8
 80071d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071d4:	f840 3b04 	str.w	r3, [r0], #4
 80071d8:	d2e7      	bcs.n	80071aa <quorem+0xb2>
 80071da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e2:	b922      	cbnz	r2, 80071ee <quorem+0xf6>
 80071e4:	3b04      	subs	r3, #4
 80071e6:	429d      	cmp	r5, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	d30a      	bcc.n	8007202 <quorem+0x10a>
 80071ec:	613c      	str	r4, [r7, #16]
 80071ee:	4630      	mov	r0, r6
 80071f0:	b003      	add	sp, #12
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	3b04      	subs	r3, #4
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d1cb      	bne.n	8007196 <quorem+0x9e>
 80071fe:	3c01      	subs	r4, #1
 8007200:	e7c6      	b.n	8007190 <quorem+0x98>
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	3b04      	subs	r3, #4
 8007206:	2a00      	cmp	r2, #0
 8007208:	d1f0      	bne.n	80071ec <quorem+0xf4>
 800720a:	3c01      	subs	r4, #1
 800720c:	e7eb      	b.n	80071e6 <quorem+0xee>
 800720e:	2000      	movs	r0, #0
 8007210:	e7ee      	b.n	80071f0 <quorem+0xf8>
 8007212:	0000      	movs	r0, r0
 8007214:	0000      	movs	r0, r0
	...

08007218 <_dtoa_r>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	4616      	mov	r6, r2
 800721e:	461f      	mov	r7, r3
 8007220:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007222:	b099      	sub	sp, #100	; 0x64
 8007224:	4605      	mov	r5, r0
 8007226:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800722a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800722e:	b974      	cbnz	r4, 800724e <_dtoa_r+0x36>
 8007230:	2010      	movs	r0, #16
 8007232:	f000 fde3 	bl	8007dfc <malloc>
 8007236:	4602      	mov	r2, r0
 8007238:	6268      	str	r0, [r5, #36]	; 0x24
 800723a:	b920      	cbnz	r0, 8007246 <_dtoa_r+0x2e>
 800723c:	21ea      	movs	r1, #234	; 0xea
 800723e:	4bae      	ldr	r3, [pc, #696]	; (80074f8 <_dtoa_r+0x2e0>)
 8007240:	48ae      	ldr	r0, [pc, #696]	; (80074fc <_dtoa_r+0x2e4>)
 8007242:	f001 fba1 	bl	8008988 <__assert_func>
 8007246:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800724a:	6004      	str	r4, [r0, #0]
 800724c:	60c4      	str	r4, [r0, #12]
 800724e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	b151      	cbz	r1, 800726a <_dtoa_r+0x52>
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	2301      	movs	r3, #1
 8007258:	4093      	lsls	r3, r2
 800725a:	604a      	str	r2, [r1, #4]
 800725c:	608b      	str	r3, [r1, #8]
 800725e:	4628      	mov	r0, r5
 8007260:	f000 fe30 	bl	8007ec4 <_Bfree>
 8007264:	2200      	movs	r2, #0
 8007266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	1e3b      	subs	r3, r7, #0
 800726c:	bfaf      	iteee	ge
 800726e:	2300      	movge	r3, #0
 8007270:	2201      	movlt	r2, #1
 8007272:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007276:	9305      	strlt	r3, [sp, #20]
 8007278:	bfa8      	it	ge
 800727a:	f8c8 3000 	strge.w	r3, [r8]
 800727e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007282:	4b9f      	ldr	r3, [pc, #636]	; (8007500 <_dtoa_r+0x2e8>)
 8007284:	bfb8      	it	lt
 8007286:	f8c8 2000 	strlt.w	r2, [r8]
 800728a:	ea33 0309 	bics.w	r3, r3, r9
 800728e:	d119      	bne.n	80072c4 <_dtoa_r+0xac>
 8007290:	f242 730f 	movw	r3, #9999	; 0x270f
 8007294:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800729c:	4333      	orrs	r3, r6
 800729e:	f000 8580 	beq.w	8007da2 <_dtoa_r+0xb8a>
 80072a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072a4:	b953      	cbnz	r3, 80072bc <_dtoa_r+0xa4>
 80072a6:	4b97      	ldr	r3, [pc, #604]	; (8007504 <_dtoa_r+0x2ec>)
 80072a8:	e022      	b.n	80072f0 <_dtoa_r+0xd8>
 80072aa:	4b97      	ldr	r3, [pc, #604]	; (8007508 <_dtoa_r+0x2f0>)
 80072ac:	9308      	str	r3, [sp, #32]
 80072ae:	3308      	adds	r3, #8
 80072b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	9808      	ldr	r0, [sp, #32]
 80072b6:	b019      	add	sp, #100	; 0x64
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	4b91      	ldr	r3, [pc, #580]	; (8007504 <_dtoa_r+0x2ec>)
 80072be:	9308      	str	r3, [sp, #32]
 80072c0:	3303      	adds	r3, #3
 80072c2:	e7f5      	b.n	80072b0 <_dtoa_r+0x98>
 80072c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80072cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	f7f9 fb68 	bl	80009a8 <__aeabi_dcmpeq>
 80072d8:	4680      	mov	r8, r0
 80072da:	b158      	cbz	r0, 80072f4 <_dtoa_r+0xdc>
 80072dc:	2301      	movs	r3, #1
 80072de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8559 	beq.w	8007d9c <_dtoa_r+0xb84>
 80072ea:	4888      	ldr	r0, [pc, #544]	; (800750c <_dtoa_r+0x2f4>)
 80072ec:	6018      	str	r0, [r3, #0]
 80072ee:	1e43      	subs	r3, r0, #1
 80072f0:	9308      	str	r3, [sp, #32]
 80072f2:	e7df      	b.n	80072b4 <_dtoa_r+0x9c>
 80072f4:	ab16      	add	r3, sp, #88	; 0x58
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	ab17      	add	r3, sp, #92	; 0x5c
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4628      	mov	r0, r5
 80072fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007302:	f001 f8c5 	bl	8008490 <__d2b>
 8007306:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800730a:	4682      	mov	sl, r0
 800730c:	2c00      	cmp	r4, #0
 800730e:	d07e      	beq.n	800740e <_dtoa_r+0x1f6>
 8007310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007316:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800731a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800731e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007322:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007326:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800732a:	2200      	movs	r2, #0
 800732c:	4b78      	ldr	r3, [pc, #480]	; (8007510 <_dtoa_r+0x2f8>)
 800732e:	f7f8 ff1b 	bl	8000168 <__aeabi_dsub>
 8007332:	a36b      	add	r3, pc, #428	; (adr r3, 80074e0 <_dtoa_r+0x2c8>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f7f9 f8ce 	bl	80004d8 <__aeabi_dmul>
 800733c:	a36a      	add	r3, pc, #424	; (adr r3, 80074e8 <_dtoa_r+0x2d0>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ff13 	bl	800016c <__adddf3>
 8007346:	4606      	mov	r6, r0
 8007348:	4620      	mov	r0, r4
 800734a:	460f      	mov	r7, r1
 800734c:	f7f9 f85a 	bl	8000404 <__aeabi_i2d>
 8007350:	a367      	add	r3, pc, #412	; (adr r3, 80074f0 <_dtoa_r+0x2d8>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f8 ff03 	bl	800016c <__adddf3>
 8007366:	4606      	mov	r6, r0
 8007368:	460f      	mov	r7, r1
 800736a:	f7f9 fb65 	bl	8000a38 <__aeabi_d2iz>
 800736e:	2200      	movs	r2, #0
 8007370:	4681      	mov	r9, r0
 8007372:	2300      	movs	r3, #0
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fb20 	bl	80009bc <__aeabi_dcmplt>
 800737c:	b148      	cbz	r0, 8007392 <_dtoa_r+0x17a>
 800737e:	4648      	mov	r0, r9
 8007380:	f7f9 f840 	bl	8000404 <__aeabi_i2d>
 8007384:	4632      	mov	r2, r6
 8007386:	463b      	mov	r3, r7
 8007388:	f7f9 fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800738c:	b908      	cbnz	r0, 8007392 <_dtoa_r+0x17a>
 800738e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007392:	f1b9 0f16 	cmp.w	r9, #22
 8007396:	d857      	bhi.n	8007448 <_dtoa_r+0x230>
 8007398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800739c:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <_dtoa_r+0x2fc>)
 800739e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	f7f9 fb09 	bl	80009bc <__aeabi_dcmplt>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d04e      	beq.n	800744c <_dtoa_r+0x234>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80073b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073b8:	1b1c      	subs	r4, r3, r4
 80073ba:	1e63      	subs	r3, r4, #1
 80073bc:	9309      	str	r3, [sp, #36]	; 0x24
 80073be:	bf49      	itett	mi
 80073c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80073c4:	2300      	movpl	r3, #0
 80073c6:	9306      	strmi	r3, [sp, #24]
 80073c8:	2300      	movmi	r3, #0
 80073ca:	bf54      	ite	pl
 80073cc:	9306      	strpl	r3, [sp, #24]
 80073ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	db3c      	blt.n	8007450 <_dtoa_r+0x238>
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80073dc:	444b      	add	r3, r9
 80073de:	9309      	str	r3, [sp, #36]	; 0x24
 80073e0:	2300      	movs	r3, #0
 80073e2:	930a      	str	r3, [sp, #40]	; 0x28
 80073e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e6:	2b09      	cmp	r3, #9
 80073e8:	d86c      	bhi.n	80074c4 <_dtoa_r+0x2ac>
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	bfc4      	itt	gt
 80073ee:	3b04      	subgt	r3, #4
 80073f0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80073f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f4:	bfc8      	it	gt
 80073f6:	2400      	movgt	r4, #0
 80073f8:	f1a3 0302 	sub.w	r3, r3, #2
 80073fc:	bfd8      	it	le
 80073fe:	2401      	movle	r4, #1
 8007400:	2b03      	cmp	r3, #3
 8007402:	f200 808b 	bhi.w	800751c <_dtoa_r+0x304>
 8007406:	e8df f003 	tbb	[pc, r3]
 800740a:	4f2d      	.short	0x4f2d
 800740c:	5b4d      	.short	0x5b4d
 800740e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007412:	441c      	add	r4, r3
 8007414:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007418:	2b20      	cmp	r3, #32
 800741a:	bfc3      	ittte	gt
 800741c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007420:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007424:	fa09 f303 	lslgt.w	r3, r9, r3
 8007428:	f1c3 0320 	rsble	r3, r3, #32
 800742c:	bfc6      	itte	gt
 800742e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007432:	4318      	orrgt	r0, r3
 8007434:	fa06 f003 	lslle.w	r0, r6, r3
 8007438:	f7f8 ffd4 	bl	80003e4 <__aeabi_ui2d>
 800743c:	2301      	movs	r3, #1
 800743e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007442:	3c01      	subs	r4, #1
 8007444:	9313      	str	r3, [sp, #76]	; 0x4c
 8007446:	e770      	b.n	800732a <_dtoa_r+0x112>
 8007448:	2301      	movs	r3, #1
 800744a:	e7b3      	b.n	80073b4 <_dtoa_r+0x19c>
 800744c:	900f      	str	r0, [sp, #60]	; 0x3c
 800744e:	e7b2      	b.n	80073b6 <_dtoa_r+0x19e>
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	eba3 0309 	sub.w	r3, r3, r9
 8007456:	9306      	str	r3, [sp, #24]
 8007458:	f1c9 0300 	rsb	r3, r9, #0
 800745c:	930a      	str	r3, [sp, #40]	; 0x28
 800745e:	2300      	movs	r3, #0
 8007460:	930e      	str	r3, [sp, #56]	; 0x38
 8007462:	e7bf      	b.n	80073e4 <_dtoa_r+0x1cc>
 8007464:	2300      	movs	r3, #0
 8007466:	930b      	str	r3, [sp, #44]	; 0x2c
 8007468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800746a:	2b00      	cmp	r3, #0
 800746c:	dc59      	bgt.n	8007522 <_dtoa_r+0x30a>
 800746e:	f04f 0b01 	mov.w	fp, #1
 8007472:	465b      	mov	r3, fp
 8007474:	f8cd b008 	str.w	fp, [sp, #8]
 8007478:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800747c:	2200      	movs	r2, #0
 800747e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007480:	6042      	str	r2, [r0, #4]
 8007482:	2204      	movs	r2, #4
 8007484:	f102 0614 	add.w	r6, r2, #20
 8007488:	429e      	cmp	r6, r3
 800748a:	6841      	ldr	r1, [r0, #4]
 800748c:	d94f      	bls.n	800752e <_dtoa_r+0x316>
 800748e:	4628      	mov	r0, r5
 8007490:	f000 fcd8 	bl	8007e44 <_Balloc>
 8007494:	9008      	str	r0, [sp, #32]
 8007496:	2800      	cmp	r0, #0
 8007498:	d14d      	bne.n	8007536 <_dtoa_r+0x31e>
 800749a:	4602      	mov	r2, r0
 800749c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074a0:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <_dtoa_r+0x300>)
 80074a2:	e6cd      	b.n	8007240 <_dtoa_r+0x28>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e7de      	b.n	8007466 <_dtoa_r+0x24e>
 80074a8:	2300      	movs	r3, #0
 80074aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074ae:	eb09 0b03 	add.w	fp, r9, r3
 80074b2:	f10b 0301 	add.w	r3, fp, #1
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	9302      	str	r3, [sp, #8]
 80074ba:	bfb8      	it	lt
 80074bc:	2301      	movlt	r3, #1
 80074be:	e7dd      	b.n	800747c <_dtoa_r+0x264>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e7f2      	b.n	80074aa <_dtoa_r+0x292>
 80074c4:	2401      	movs	r4, #1
 80074c6:	2300      	movs	r3, #0
 80074c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80074ca:	9322      	str	r3, [sp, #136]	; 0x88
 80074cc:	f04f 3bff 	mov.w	fp, #4294967295
 80074d0:	2200      	movs	r2, #0
 80074d2:	2312      	movs	r3, #18
 80074d4:	f8cd b008 	str.w	fp, [sp, #8]
 80074d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80074da:	e7cf      	b.n	800747c <_dtoa_r+0x264>
 80074dc:	f3af 8000 	nop.w
 80074e0:	636f4361 	.word	0x636f4361
 80074e4:	3fd287a7 	.word	0x3fd287a7
 80074e8:	8b60c8b3 	.word	0x8b60c8b3
 80074ec:	3fc68a28 	.word	0x3fc68a28
 80074f0:	509f79fb 	.word	0x509f79fb
 80074f4:	3fd34413 	.word	0x3fd34413
 80074f8:	080095e5 	.word	0x080095e5
 80074fc:	080095fc 	.word	0x080095fc
 8007500:	7ff00000 	.word	0x7ff00000
 8007504:	080095e1 	.word	0x080095e1
 8007508:	080095d8 	.word	0x080095d8
 800750c:	080095b5 	.word	0x080095b5
 8007510:	3ff80000 	.word	0x3ff80000
 8007514:	080096f8 	.word	0x080096f8
 8007518:	0800965b 	.word	0x0800965b
 800751c:	2301      	movs	r3, #1
 800751e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007520:	e7d4      	b.n	80074cc <_dtoa_r+0x2b4>
 8007522:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007526:	465b      	mov	r3, fp
 8007528:	f8cd b008 	str.w	fp, [sp, #8]
 800752c:	e7a6      	b.n	800747c <_dtoa_r+0x264>
 800752e:	3101      	adds	r1, #1
 8007530:	6041      	str	r1, [r0, #4]
 8007532:	0052      	lsls	r2, r2, #1
 8007534:	e7a6      	b.n	8007484 <_dtoa_r+0x26c>
 8007536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007538:	9a08      	ldr	r2, [sp, #32]
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	2b0e      	cmp	r3, #14
 8007540:	f200 80a8 	bhi.w	8007694 <_dtoa_r+0x47c>
 8007544:	2c00      	cmp	r4, #0
 8007546:	f000 80a5 	beq.w	8007694 <_dtoa_r+0x47c>
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	dd34      	ble.n	80075ba <_dtoa_r+0x3a2>
 8007550:	4a9a      	ldr	r2, [pc, #616]	; (80077bc <_dtoa_r+0x5a4>)
 8007552:	f009 030f 	and.w	r3, r9, #15
 8007556:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800755a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800755e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007562:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007566:	ea4f 1429 	mov.w	r4, r9, asr #4
 800756a:	d016      	beq.n	800759a <_dtoa_r+0x382>
 800756c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007570:	4b93      	ldr	r3, [pc, #588]	; (80077c0 <_dtoa_r+0x5a8>)
 8007572:	2703      	movs	r7, #3
 8007574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007578:	f7f9 f8d8 	bl	800072c <__aeabi_ddiv>
 800757c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007580:	f004 040f 	and.w	r4, r4, #15
 8007584:	4e8e      	ldr	r6, [pc, #568]	; (80077c0 <_dtoa_r+0x5a8>)
 8007586:	b954      	cbnz	r4, 800759e <_dtoa_r+0x386>
 8007588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800758c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007590:	f7f9 f8cc 	bl	800072c <__aeabi_ddiv>
 8007594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007598:	e029      	b.n	80075ee <_dtoa_r+0x3d6>
 800759a:	2702      	movs	r7, #2
 800759c:	e7f2      	b.n	8007584 <_dtoa_r+0x36c>
 800759e:	07e1      	lsls	r1, r4, #31
 80075a0:	d508      	bpl.n	80075b4 <_dtoa_r+0x39c>
 80075a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075aa:	f7f8 ff95 	bl	80004d8 <__aeabi_dmul>
 80075ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075b2:	3701      	adds	r7, #1
 80075b4:	1064      	asrs	r4, r4, #1
 80075b6:	3608      	adds	r6, #8
 80075b8:	e7e5      	b.n	8007586 <_dtoa_r+0x36e>
 80075ba:	f000 80a5 	beq.w	8007708 <_dtoa_r+0x4f0>
 80075be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075c2:	f1c9 0400 	rsb	r4, r9, #0
 80075c6:	4b7d      	ldr	r3, [pc, #500]	; (80077bc <_dtoa_r+0x5a4>)
 80075c8:	f004 020f 	and.w	r2, r4, #15
 80075cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 ff80 	bl	80004d8 <__aeabi_dmul>
 80075d8:	2702      	movs	r7, #2
 80075da:	2300      	movs	r3, #0
 80075dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075e0:	4e77      	ldr	r6, [pc, #476]	; (80077c0 <_dtoa_r+0x5a8>)
 80075e2:	1124      	asrs	r4, r4, #4
 80075e4:	2c00      	cmp	r4, #0
 80075e6:	f040 8084 	bne.w	80076f2 <_dtoa_r+0x4da>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1d2      	bne.n	8007594 <_dtoa_r+0x37c>
 80075ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 808b 	beq.w	800770c <_dtoa_r+0x4f4>
 80075f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007602:	2200      	movs	r2, #0
 8007604:	4b6f      	ldr	r3, [pc, #444]	; (80077c4 <_dtoa_r+0x5ac>)
 8007606:	f7f9 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800760a:	2800      	cmp	r0, #0
 800760c:	d07e      	beq.n	800770c <_dtoa_r+0x4f4>
 800760e:	9b02      	ldr	r3, [sp, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d07b      	beq.n	800770c <_dtoa_r+0x4f4>
 8007614:	f1bb 0f00 	cmp.w	fp, #0
 8007618:	dd38      	ble.n	800768c <_dtoa_r+0x474>
 800761a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800761e:	2200      	movs	r2, #0
 8007620:	4b69      	ldr	r3, [pc, #420]	; (80077c8 <_dtoa_r+0x5b0>)
 8007622:	f7f8 ff59 	bl	80004d8 <__aeabi_dmul>
 8007626:	465c      	mov	r4, fp
 8007628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800762c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007630:	3701      	adds	r7, #1
 8007632:	4638      	mov	r0, r7
 8007634:	f7f8 fee6 	bl	8000404 <__aeabi_i2d>
 8007638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800763c:	f7f8 ff4c 	bl	80004d8 <__aeabi_dmul>
 8007640:	2200      	movs	r2, #0
 8007642:	4b62      	ldr	r3, [pc, #392]	; (80077cc <_dtoa_r+0x5b4>)
 8007644:	f7f8 fd92 	bl	800016c <__adddf3>
 8007648:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800764c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007650:	9611      	str	r6, [sp, #68]	; 0x44
 8007652:	2c00      	cmp	r4, #0
 8007654:	d15d      	bne.n	8007712 <_dtoa_r+0x4fa>
 8007656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800765a:	2200      	movs	r2, #0
 800765c:	4b5c      	ldr	r3, [pc, #368]	; (80077d0 <_dtoa_r+0x5b8>)
 800765e:	f7f8 fd83 	bl	8000168 <__aeabi_dsub>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800766a:	4633      	mov	r3, r6
 800766c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800766e:	f7f9 f9c3 	bl	80009f8 <__aeabi_dcmpgt>
 8007672:	2800      	cmp	r0, #0
 8007674:	f040 829e 	bne.w	8007bb4 <_dtoa_r+0x99c>
 8007678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800767c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800767e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007682:	f7f9 f99b 	bl	80009bc <__aeabi_dcmplt>
 8007686:	2800      	cmp	r0, #0
 8007688:	f040 8292 	bne.w	8007bb0 <_dtoa_r+0x998>
 800768c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007690:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007696:	2b00      	cmp	r3, #0
 8007698:	f2c0 8153 	blt.w	8007942 <_dtoa_r+0x72a>
 800769c:	f1b9 0f0e 	cmp.w	r9, #14
 80076a0:	f300 814f 	bgt.w	8007942 <_dtoa_r+0x72a>
 80076a4:	4b45      	ldr	r3, [pc, #276]	; (80077bc <_dtoa_r+0x5a4>)
 80076a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80076aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80076b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f280 80db 	bge.w	8007870 <_dtoa_r+0x658>
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f300 80d7 	bgt.w	8007870 <_dtoa_r+0x658>
 80076c2:	f040 8274 	bne.w	8007bae <_dtoa_r+0x996>
 80076c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ca:	2200      	movs	r2, #0
 80076cc:	4b40      	ldr	r3, [pc, #256]	; (80077d0 <_dtoa_r+0x5b8>)
 80076ce:	f7f8 ff03 	bl	80004d8 <__aeabi_dmul>
 80076d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d6:	f7f9 f985 	bl	80009e4 <__aeabi_dcmpge>
 80076da:	9c02      	ldr	r4, [sp, #8]
 80076dc:	4626      	mov	r6, r4
 80076de:	2800      	cmp	r0, #0
 80076e0:	f040 824a 	bne.w	8007b78 <_dtoa_r+0x960>
 80076e4:	2331      	movs	r3, #49	; 0x31
 80076e6:	9f08      	ldr	r7, [sp, #32]
 80076e8:	f109 0901 	add.w	r9, r9, #1
 80076ec:	f807 3b01 	strb.w	r3, [r7], #1
 80076f0:	e246      	b.n	8007b80 <_dtoa_r+0x968>
 80076f2:	07e2      	lsls	r2, r4, #31
 80076f4:	d505      	bpl.n	8007702 <_dtoa_r+0x4ea>
 80076f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076fa:	f7f8 feed 	bl	80004d8 <__aeabi_dmul>
 80076fe:	2301      	movs	r3, #1
 8007700:	3701      	adds	r7, #1
 8007702:	1064      	asrs	r4, r4, #1
 8007704:	3608      	adds	r6, #8
 8007706:	e76d      	b.n	80075e4 <_dtoa_r+0x3cc>
 8007708:	2702      	movs	r7, #2
 800770a:	e770      	b.n	80075ee <_dtoa_r+0x3d6>
 800770c:	46c8      	mov	r8, r9
 800770e:	9c02      	ldr	r4, [sp, #8]
 8007710:	e78f      	b.n	8007632 <_dtoa_r+0x41a>
 8007712:	9908      	ldr	r1, [sp, #32]
 8007714:	4b29      	ldr	r3, [pc, #164]	; (80077bc <_dtoa_r+0x5a4>)
 8007716:	4421      	add	r1, r4
 8007718:	9112      	str	r1, [sp, #72]	; 0x48
 800771a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007720:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007724:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007728:	2900      	cmp	r1, #0
 800772a:	d055      	beq.n	80077d8 <_dtoa_r+0x5c0>
 800772c:	2000      	movs	r0, #0
 800772e:	4929      	ldr	r1, [pc, #164]	; (80077d4 <_dtoa_r+0x5bc>)
 8007730:	f7f8 fffc 	bl	800072c <__aeabi_ddiv>
 8007734:	463b      	mov	r3, r7
 8007736:	4632      	mov	r2, r6
 8007738:	f7f8 fd16 	bl	8000168 <__aeabi_dsub>
 800773c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007740:	9f08      	ldr	r7, [sp, #32]
 8007742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007746:	f7f9 f977 	bl	8000a38 <__aeabi_d2iz>
 800774a:	4604      	mov	r4, r0
 800774c:	f7f8 fe5a 	bl	8000404 <__aeabi_i2d>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007758:	f7f8 fd06 	bl	8000168 <__aeabi_dsub>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	3430      	adds	r4, #48	; 0x30
 8007762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800776a:	f807 4b01 	strb.w	r4, [r7], #1
 800776e:	f7f9 f925 	bl	80009bc <__aeabi_dcmplt>
 8007772:	2800      	cmp	r0, #0
 8007774:	d174      	bne.n	8007860 <_dtoa_r+0x648>
 8007776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800777a:	2000      	movs	r0, #0
 800777c:	4911      	ldr	r1, [pc, #68]	; (80077c4 <_dtoa_r+0x5ac>)
 800777e:	f7f8 fcf3 	bl	8000168 <__aeabi_dsub>
 8007782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007786:	f7f9 f919 	bl	80009bc <__aeabi_dcmplt>
 800778a:	2800      	cmp	r0, #0
 800778c:	f040 80b6 	bne.w	80078fc <_dtoa_r+0x6e4>
 8007790:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007792:	429f      	cmp	r7, r3
 8007794:	f43f af7a 	beq.w	800768c <_dtoa_r+0x474>
 8007798:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800779c:	2200      	movs	r2, #0
 800779e:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <_dtoa_r+0x5b0>)
 80077a0:	f7f8 fe9a 	bl	80004d8 <__aeabi_dmul>
 80077a4:	2200      	movs	r2, #0
 80077a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <_dtoa_r+0x5b0>)
 80077b0:	f7f8 fe92 	bl	80004d8 <__aeabi_dmul>
 80077b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077b8:	e7c3      	b.n	8007742 <_dtoa_r+0x52a>
 80077ba:	bf00      	nop
 80077bc:	080096f8 	.word	0x080096f8
 80077c0:	080096d0 	.word	0x080096d0
 80077c4:	3ff00000 	.word	0x3ff00000
 80077c8:	40240000 	.word	0x40240000
 80077cc:	401c0000 	.word	0x401c0000
 80077d0:	40140000 	.word	0x40140000
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f8 fe7c 	bl	80004d8 <__aeabi_dmul>
 80077e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077e6:	9c08      	ldr	r4, [sp, #32]
 80077e8:	9314      	str	r3, [sp, #80]	; 0x50
 80077ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ee:	f7f9 f923 	bl	8000a38 <__aeabi_d2iz>
 80077f2:	9015      	str	r0, [sp, #84]	; 0x54
 80077f4:	f7f8 fe06 	bl	8000404 <__aeabi_i2d>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007800:	f7f8 fcb2 	bl	8000168 <__aeabi_dsub>
 8007804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007806:	4606      	mov	r6, r0
 8007808:	3330      	adds	r3, #48	; 0x30
 800780a:	f804 3b01 	strb.w	r3, [r4], #1
 800780e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007810:	460f      	mov	r7, r1
 8007812:	429c      	cmp	r4, r3
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	d124      	bne.n	8007864 <_dtoa_r+0x64c>
 800781a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800781e:	4bb3      	ldr	r3, [pc, #716]	; (8007aec <_dtoa_r+0x8d4>)
 8007820:	f7f8 fca4 	bl	800016c <__adddf3>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f9 f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 8007830:	2800      	cmp	r0, #0
 8007832:	d162      	bne.n	80078fa <_dtoa_r+0x6e2>
 8007834:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007838:	2000      	movs	r0, #0
 800783a:	49ac      	ldr	r1, [pc, #688]	; (8007aec <_dtoa_r+0x8d4>)
 800783c:	f7f8 fc94 	bl	8000168 <__aeabi_dsub>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f9 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800784c:	2800      	cmp	r0, #0
 800784e:	f43f af1d 	beq.w	800768c <_dtoa_r+0x474>
 8007852:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007854:	1e7b      	subs	r3, r7, #1
 8007856:	9314      	str	r3, [sp, #80]	; 0x50
 8007858:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800785c:	2b30      	cmp	r3, #48	; 0x30
 800785e:	d0f8      	beq.n	8007852 <_dtoa_r+0x63a>
 8007860:	46c1      	mov	r9, r8
 8007862:	e03a      	b.n	80078da <_dtoa_r+0x6c2>
 8007864:	4ba2      	ldr	r3, [pc, #648]	; (8007af0 <_dtoa_r+0x8d8>)
 8007866:	f7f8 fe37 	bl	80004d8 <__aeabi_dmul>
 800786a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800786e:	e7bc      	b.n	80077ea <_dtoa_r+0x5d2>
 8007870:	9f08      	ldr	r7, [sp, #32]
 8007872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800787a:	f7f8 ff57 	bl	800072c <__aeabi_ddiv>
 800787e:	f7f9 f8db 	bl	8000a38 <__aeabi_d2iz>
 8007882:	4604      	mov	r4, r0
 8007884:	f7f8 fdbe 	bl	8000404 <__aeabi_i2d>
 8007888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800788c:	f7f8 fe24 	bl	80004d8 <__aeabi_dmul>
 8007890:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007894:	460b      	mov	r3, r1
 8007896:	4602      	mov	r2, r0
 8007898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800789c:	f7f8 fc64 	bl	8000168 <__aeabi_dsub>
 80078a0:	f807 6b01 	strb.w	r6, [r7], #1
 80078a4:	9e08      	ldr	r6, [sp, #32]
 80078a6:	9b02      	ldr	r3, [sp, #8]
 80078a8:	1bbe      	subs	r6, r7, r6
 80078aa:	42b3      	cmp	r3, r6
 80078ac:	d13a      	bne.n	8007924 <_dtoa_r+0x70c>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	f7f8 fc5b 	bl	800016c <__adddf3>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c2:	f7f9 f899 	bl	80009f8 <__aeabi_dcmpgt>
 80078c6:	bb58      	cbnz	r0, 8007920 <_dtoa_r+0x708>
 80078c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d0:	f7f9 f86a 	bl	80009a8 <__aeabi_dcmpeq>
 80078d4:	b108      	cbz	r0, 80078da <_dtoa_r+0x6c2>
 80078d6:	07e1      	lsls	r1, r4, #31
 80078d8:	d422      	bmi.n	8007920 <_dtoa_r+0x708>
 80078da:	4628      	mov	r0, r5
 80078dc:	4651      	mov	r1, sl
 80078de:	f000 faf1 	bl	8007ec4 <_Bfree>
 80078e2:	2300      	movs	r3, #0
 80078e4:	703b      	strb	r3, [r7, #0]
 80078e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078e8:	f109 0001 	add.w	r0, r9, #1
 80078ec:	6018      	str	r0, [r3, #0]
 80078ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f43f acdf 	beq.w	80072b4 <_dtoa_r+0x9c>
 80078f6:	601f      	str	r7, [r3, #0]
 80078f8:	e4dc      	b.n	80072b4 <_dtoa_r+0x9c>
 80078fa:	4627      	mov	r7, r4
 80078fc:	463b      	mov	r3, r7
 80078fe:	461f      	mov	r7, r3
 8007900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007904:	2a39      	cmp	r2, #57	; 0x39
 8007906:	d107      	bne.n	8007918 <_dtoa_r+0x700>
 8007908:	9a08      	ldr	r2, [sp, #32]
 800790a:	429a      	cmp	r2, r3
 800790c:	d1f7      	bne.n	80078fe <_dtoa_r+0x6e6>
 800790e:	2230      	movs	r2, #48	; 0x30
 8007910:	9908      	ldr	r1, [sp, #32]
 8007912:	f108 0801 	add.w	r8, r8, #1
 8007916:	700a      	strb	r2, [r1, #0]
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	3201      	adds	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e79f      	b.n	8007860 <_dtoa_r+0x648>
 8007920:	46c8      	mov	r8, r9
 8007922:	e7eb      	b.n	80078fc <_dtoa_r+0x6e4>
 8007924:	2200      	movs	r2, #0
 8007926:	4b72      	ldr	r3, [pc, #456]	; (8007af0 <_dtoa_r+0x8d8>)
 8007928:	f7f8 fdd6 	bl	80004d8 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
 8007938:	f7f9 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800793c:	2800      	cmp	r0, #0
 800793e:	d098      	beq.n	8007872 <_dtoa_r+0x65a>
 8007940:	e7cb      	b.n	80078da <_dtoa_r+0x6c2>
 8007942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007944:	2a00      	cmp	r2, #0
 8007946:	f000 80cd 	beq.w	8007ae4 <_dtoa_r+0x8cc>
 800794a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800794c:	2a01      	cmp	r2, #1
 800794e:	f300 80af 	bgt.w	8007ab0 <_dtoa_r+0x898>
 8007952:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007954:	2a00      	cmp	r2, #0
 8007956:	f000 80a7 	beq.w	8007aa8 <_dtoa_r+0x890>
 800795a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800795e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007960:	9f06      	ldr	r7, [sp, #24]
 8007962:	9a06      	ldr	r2, [sp, #24]
 8007964:	2101      	movs	r1, #1
 8007966:	441a      	add	r2, r3
 8007968:	9206      	str	r2, [sp, #24]
 800796a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796c:	4628      	mov	r0, r5
 800796e:	441a      	add	r2, r3
 8007970:	9209      	str	r2, [sp, #36]	; 0x24
 8007972:	f000 fb61 	bl	8008038 <__i2b>
 8007976:	4606      	mov	r6, r0
 8007978:	2f00      	cmp	r7, #0
 800797a:	dd0c      	ble.n	8007996 <_dtoa_r+0x77e>
 800797c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797e:	2b00      	cmp	r3, #0
 8007980:	dd09      	ble.n	8007996 <_dtoa_r+0x77e>
 8007982:	42bb      	cmp	r3, r7
 8007984:	bfa8      	it	ge
 8007986:	463b      	movge	r3, r7
 8007988:	9a06      	ldr	r2, [sp, #24]
 800798a:	1aff      	subs	r7, r7, r3
 800798c:	1ad2      	subs	r2, r2, r3
 800798e:	9206      	str	r2, [sp, #24]
 8007990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	9309      	str	r3, [sp, #36]	; 0x24
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	b1f3      	cbz	r3, 80079d8 <_dtoa_r+0x7c0>
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 80a9 	beq.w	8007af4 <_dtoa_r+0x8dc>
 80079a2:	2c00      	cmp	r4, #0
 80079a4:	dd10      	ble.n	80079c8 <_dtoa_r+0x7b0>
 80079a6:	4631      	mov	r1, r6
 80079a8:	4622      	mov	r2, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 fbfe 	bl	80081ac <__pow5mult>
 80079b0:	4652      	mov	r2, sl
 80079b2:	4601      	mov	r1, r0
 80079b4:	4606      	mov	r6, r0
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fb54 	bl	8008064 <__multiply>
 80079bc:	4680      	mov	r8, r0
 80079be:	4651      	mov	r1, sl
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 fa7f 	bl	8007ec4 <_Bfree>
 80079c6:	46c2      	mov	sl, r8
 80079c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ca:	1b1a      	subs	r2, r3, r4
 80079cc:	d004      	beq.n	80079d8 <_dtoa_r+0x7c0>
 80079ce:	4651      	mov	r1, sl
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fbeb 	bl	80081ac <__pow5mult>
 80079d6:	4682      	mov	sl, r0
 80079d8:	2101      	movs	r1, #1
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 fb2c 	bl	8008038 <__i2b>
 80079e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079e2:	4604      	mov	r4, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f340 8087 	ble.w	8007af8 <_dtoa_r+0x8e0>
 80079ea:	461a      	mov	r2, r3
 80079ec:	4601      	mov	r1, r0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fbdc 	bl	80081ac <__pow5mult>
 80079f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079f6:	4604      	mov	r4, r0
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	f340 8080 	ble.w	8007afe <_dtoa_r+0x8e6>
 80079fe:	f04f 0800 	mov.w	r8, #0
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a08:	6918      	ldr	r0, [r3, #16]
 8007a0a:	f000 fac7 	bl	8007f9c <__hi0bits>
 8007a0e:	f1c0 0020 	rsb	r0, r0, #32
 8007a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a14:	4418      	add	r0, r3
 8007a16:	f010 001f 	ands.w	r0, r0, #31
 8007a1a:	f000 8092 	beq.w	8007b42 <_dtoa_r+0x92a>
 8007a1e:	f1c0 0320 	rsb	r3, r0, #32
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	f340 808a 	ble.w	8007b3c <_dtoa_r+0x924>
 8007a28:	f1c0 001c 	rsb	r0, r0, #28
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	4407      	add	r7, r0
 8007a30:	4403      	add	r3, r0
 8007a32:	9306      	str	r3, [sp, #24]
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	4403      	add	r3, r0
 8007a38:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dd05      	ble.n	8007a4c <_dtoa_r+0x834>
 8007a40:	4651      	mov	r1, sl
 8007a42:	461a      	mov	r2, r3
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 fc0b 	bl	8008260 <__lshift>
 8007a4a:	4682      	mov	sl, r0
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd05      	ble.n	8007a5e <_dtoa_r+0x846>
 8007a52:	4621      	mov	r1, r4
 8007a54:	461a      	mov	r2, r3
 8007a56:	4628      	mov	r0, r5
 8007a58:	f000 fc02 	bl	8008260 <__lshift>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d070      	beq.n	8007b46 <_dtoa_r+0x92e>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4650      	mov	r0, sl
 8007a68:	f000 fc66 	bl	8008338 <__mcmp>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	da6a      	bge.n	8007b46 <_dtoa_r+0x92e>
 8007a70:	2300      	movs	r3, #0
 8007a72:	4651      	mov	r1, sl
 8007a74:	220a      	movs	r2, #10
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 fa46 	bl	8007f08 <__multadd>
 8007a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a7e:	4682      	mov	sl, r0
 8007a80:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8193 	beq.w	8007db0 <_dtoa_r+0xb98>
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	220a      	movs	r2, #10
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 fa39 	bl	8007f08 <__multadd>
 8007a96:	f1bb 0f00 	cmp.w	fp, #0
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	f300 8093 	bgt.w	8007bc6 <_dtoa_r+0x9ae>
 8007aa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	dc57      	bgt.n	8007b56 <_dtoa_r+0x93e>
 8007aa6:	e08e      	b.n	8007bc6 <_dtoa_r+0x9ae>
 8007aa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007aaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007aae:	e756      	b.n	800795e <_dtoa_r+0x746>
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	1e5c      	subs	r4, r3, #1
 8007ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab6:	42a3      	cmp	r3, r4
 8007ab8:	bfb7      	itett	lt
 8007aba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007abc:	1b1c      	subge	r4, r3, r4
 8007abe:	1ae2      	sublt	r2, r4, r3
 8007ac0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ac2:	bfbe      	ittt	lt
 8007ac4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007ac6:	189b      	addlt	r3, r3, r2
 8007ac8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007aca:	9b02      	ldr	r3, [sp, #8]
 8007acc:	bfb8      	it	lt
 8007ace:	2400      	movlt	r4, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bfbb      	ittet	lt
 8007ad4:	9b06      	ldrlt	r3, [sp, #24]
 8007ad6:	9a02      	ldrlt	r2, [sp, #8]
 8007ad8:	9f06      	ldrge	r7, [sp, #24]
 8007ada:	1a9f      	sublt	r7, r3, r2
 8007adc:	bfac      	ite	ge
 8007ade:	9b02      	ldrge	r3, [sp, #8]
 8007ae0:	2300      	movlt	r3, #0
 8007ae2:	e73e      	b.n	8007962 <_dtoa_r+0x74a>
 8007ae4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ae6:	9f06      	ldr	r7, [sp, #24]
 8007ae8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007aea:	e745      	b.n	8007978 <_dtoa_r+0x760>
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	40240000 	.word	0x40240000
 8007af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007af6:	e76a      	b.n	80079ce <_dtoa_r+0x7b6>
 8007af8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	dc19      	bgt.n	8007b32 <_dtoa_r+0x91a>
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	b9bb      	cbnz	r3, 8007b32 <_dtoa_r+0x91a>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b08:	b99b      	cbnz	r3, 8007b32 <_dtoa_r+0x91a>
 8007b0a:	9b05      	ldr	r3, [sp, #20]
 8007b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b10:	0d1b      	lsrs	r3, r3, #20
 8007b12:	051b      	lsls	r3, r3, #20
 8007b14:	b183      	cbz	r3, 8007b38 <_dtoa_r+0x920>
 8007b16:	f04f 0801 	mov.w	r8, #1
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	9306      	str	r3, [sp, #24]
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	3301      	adds	r3, #1
 8007b24:	9309      	str	r3, [sp, #36]	; 0x24
 8007b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f af6a 	bne.w	8007a02 <_dtoa_r+0x7ea>
 8007b2e:	2001      	movs	r0, #1
 8007b30:	e76f      	b.n	8007a12 <_dtoa_r+0x7fa>
 8007b32:	f04f 0800 	mov.w	r8, #0
 8007b36:	e7f6      	b.n	8007b26 <_dtoa_r+0x90e>
 8007b38:	4698      	mov	r8, r3
 8007b3a:	e7f4      	b.n	8007b26 <_dtoa_r+0x90e>
 8007b3c:	f43f af7d 	beq.w	8007a3a <_dtoa_r+0x822>
 8007b40:	4618      	mov	r0, r3
 8007b42:	301c      	adds	r0, #28
 8007b44:	e772      	b.n	8007a2c <_dtoa_r+0x814>
 8007b46:	9b02      	ldr	r3, [sp, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc36      	bgt.n	8007bba <_dtoa_r+0x9a2>
 8007b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	dd33      	ble.n	8007bba <_dtoa_r+0x9a2>
 8007b52:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007b56:	f1bb 0f00 	cmp.w	fp, #0
 8007b5a:	d10d      	bne.n	8007b78 <_dtoa_r+0x960>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	465b      	mov	r3, fp
 8007b60:	2205      	movs	r2, #5
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f9d0 	bl	8007f08 <__multadd>
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f000 fbe3 	bl	8008338 <__mcmp>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f73f adb6 	bgt.w	80076e4 <_dtoa_r+0x4cc>
 8007b78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b7a:	9f08      	ldr	r7, [sp, #32]
 8007b7c:	ea6f 0903 	mvn.w	r9, r3
 8007b80:	f04f 0800 	mov.w	r8, #0
 8007b84:	4621      	mov	r1, r4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f99c 	bl	8007ec4 <_Bfree>
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	f43f aea4 	beq.w	80078da <_dtoa_r+0x6c2>
 8007b92:	f1b8 0f00 	cmp.w	r8, #0
 8007b96:	d005      	beq.n	8007ba4 <_dtoa_r+0x98c>
 8007b98:	45b0      	cmp	r8, r6
 8007b9a:	d003      	beq.n	8007ba4 <_dtoa_r+0x98c>
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 f990 	bl	8007ec4 <_Bfree>
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f98c 	bl	8007ec4 <_Bfree>
 8007bac:	e695      	b.n	80078da <_dtoa_r+0x6c2>
 8007bae:	2400      	movs	r4, #0
 8007bb0:	4626      	mov	r6, r4
 8007bb2:	e7e1      	b.n	8007b78 <_dtoa_r+0x960>
 8007bb4:	46c1      	mov	r9, r8
 8007bb6:	4626      	mov	r6, r4
 8007bb8:	e594      	b.n	80076e4 <_dtoa_r+0x4cc>
 8007bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bbc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 80fc 	beq.w	8007dbe <_dtoa_r+0xba6>
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	dd05      	ble.n	8007bd6 <_dtoa_r+0x9be>
 8007bca:	4631      	mov	r1, r6
 8007bcc:	463a      	mov	r2, r7
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fb46 	bl	8008260 <__lshift>
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	d05c      	beq.n	8007c96 <_dtoa_r+0xa7e>
 8007bdc:	4628      	mov	r0, r5
 8007bde:	6871      	ldr	r1, [r6, #4]
 8007be0:	f000 f930 	bl	8007e44 <_Balloc>
 8007be4:	4607      	mov	r7, r0
 8007be6:	b928      	cbnz	r0, 8007bf4 <_dtoa_r+0x9dc>
 8007be8:	4602      	mov	r2, r0
 8007bea:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bee:	4b7e      	ldr	r3, [pc, #504]	; (8007de8 <_dtoa_r+0xbd0>)
 8007bf0:	f7ff bb26 	b.w	8007240 <_dtoa_r+0x28>
 8007bf4:	6932      	ldr	r2, [r6, #16]
 8007bf6:	f106 010c 	add.w	r1, r6, #12
 8007bfa:	3202      	adds	r2, #2
 8007bfc:	0092      	lsls	r2, r2, #2
 8007bfe:	300c      	adds	r0, #12
 8007c00:	f000 f912 	bl	8007e28 <memcpy>
 8007c04:	2201      	movs	r2, #1
 8007c06:	4639      	mov	r1, r7
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 fb29 	bl	8008260 <__lshift>
 8007c0e:	46b0      	mov	r8, r6
 8007c10:	4606      	mov	r6, r0
 8007c12:	9b08      	ldr	r3, [sp, #32]
 8007c14:	3301      	adds	r3, #1
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	9b08      	ldr	r3, [sp, #32]
 8007c1a:	445b      	add	r3, fp
 8007c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	9309      	str	r3, [sp, #36]	; 0x24
 8007c26:	9b02      	ldr	r3, [sp, #8]
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c30:	f7ff fa62 	bl	80070f8 <quorem>
 8007c34:	4603      	mov	r3, r0
 8007c36:	4641      	mov	r1, r8
 8007c38:	3330      	adds	r3, #48	; 0x30
 8007c3a:	9004      	str	r0, [sp, #16]
 8007c3c:	4650      	mov	r0, sl
 8007c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c40:	f000 fb7a 	bl	8008338 <__mcmp>
 8007c44:	4632      	mov	r2, r6
 8007c46:	9006      	str	r0, [sp, #24]
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 fb90 	bl	8008370 <__mdiff>
 8007c50:	68c2      	ldr	r2, [r0, #12]
 8007c52:	4607      	mov	r7, r0
 8007c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c56:	bb02      	cbnz	r2, 8007c9a <_dtoa_r+0xa82>
 8007c58:	4601      	mov	r1, r0
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f000 fb6c 	bl	8008338 <__mcmp>
 8007c60:	4602      	mov	r2, r0
 8007c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c64:	4639      	mov	r1, r7
 8007c66:	4628      	mov	r0, r5
 8007c68:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007c6c:	f000 f92a 	bl	8007ec4 <_Bfree>
 8007c70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c74:	9f02      	ldr	r7, [sp, #8]
 8007c76:	ea43 0102 	orr.w	r1, r3, r2
 8007c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c80:	d10d      	bne.n	8007c9e <_dtoa_r+0xa86>
 8007c82:	2b39      	cmp	r3, #57	; 0x39
 8007c84:	d027      	beq.n	8007cd6 <_dtoa_r+0xabe>
 8007c86:	9a06      	ldr	r2, [sp, #24]
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	dd01      	ble.n	8007c90 <_dtoa_r+0xa78>
 8007c8c:	9b04      	ldr	r3, [sp, #16]
 8007c8e:	3331      	adds	r3, #49	; 0x31
 8007c90:	f88b 3000 	strb.w	r3, [fp]
 8007c94:	e776      	b.n	8007b84 <_dtoa_r+0x96c>
 8007c96:	4630      	mov	r0, r6
 8007c98:	e7b9      	b.n	8007c0e <_dtoa_r+0x9f6>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	e7e2      	b.n	8007c64 <_dtoa_r+0xa4c>
 8007c9e:	9906      	ldr	r1, [sp, #24]
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	db04      	blt.n	8007cae <_dtoa_r+0xa96>
 8007ca4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007ca6:	4301      	orrs	r1, r0
 8007ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007caa:	4301      	orrs	r1, r0
 8007cac:	d120      	bne.n	8007cf0 <_dtoa_r+0xad8>
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	ddee      	ble.n	8007c90 <_dtoa_r+0xa78>
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	9302      	str	r3, [sp, #8]
 8007cba:	f000 fad1 	bl	8008260 <__lshift>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	f000 fb39 	bl	8008338 <__mcmp>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	9b02      	ldr	r3, [sp, #8]
 8007cca:	dc02      	bgt.n	8007cd2 <_dtoa_r+0xaba>
 8007ccc:	d1e0      	bne.n	8007c90 <_dtoa_r+0xa78>
 8007cce:	07da      	lsls	r2, r3, #31
 8007cd0:	d5de      	bpl.n	8007c90 <_dtoa_r+0xa78>
 8007cd2:	2b39      	cmp	r3, #57	; 0x39
 8007cd4:	d1da      	bne.n	8007c8c <_dtoa_r+0xa74>
 8007cd6:	2339      	movs	r3, #57	; 0x39
 8007cd8:	f88b 3000 	strb.w	r3, [fp]
 8007cdc:	463b      	mov	r3, r7
 8007cde:	461f      	mov	r7, r3
 8007ce0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	2a39      	cmp	r2, #57	; 0x39
 8007ce8:	d050      	beq.n	8007d8c <_dtoa_r+0xb74>
 8007cea:	3201      	adds	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e749      	b.n	8007b84 <_dtoa_r+0x96c>
 8007cf0:	2a00      	cmp	r2, #0
 8007cf2:	dd03      	ble.n	8007cfc <_dtoa_r+0xae4>
 8007cf4:	2b39      	cmp	r3, #57	; 0x39
 8007cf6:	d0ee      	beq.n	8007cd6 <_dtoa_r+0xabe>
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	e7c9      	b.n	8007c90 <_dtoa_r+0xa78>
 8007cfc:	9a02      	ldr	r2, [sp, #8]
 8007cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d04:	428a      	cmp	r2, r1
 8007d06:	d02a      	beq.n	8007d5e <_dtoa_r+0xb46>
 8007d08:	4651      	mov	r1, sl
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 f8fa 	bl	8007f08 <__multadd>
 8007d14:	45b0      	cmp	r8, r6
 8007d16:	4682      	mov	sl, r0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	f04f 020a 	mov.w	r2, #10
 8007d20:	4641      	mov	r1, r8
 8007d22:	4628      	mov	r0, r5
 8007d24:	d107      	bne.n	8007d36 <_dtoa_r+0xb1e>
 8007d26:	f000 f8ef 	bl	8007f08 <__multadd>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	9b02      	ldr	r3, [sp, #8]
 8007d30:	3301      	adds	r3, #1
 8007d32:	9302      	str	r3, [sp, #8]
 8007d34:	e777      	b.n	8007c26 <_dtoa_r+0xa0e>
 8007d36:	f000 f8e7 	bl	8007f08 <__multadd>
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4680      	mov	r8, r0
 8007d3e:	2300      	movs	r3, #0
 8007d40:	220a      	movs	r2, #10
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f8e0 	bl	8007f08 <__multadd>
 8007d48:	4606      	mov	r6, r0
 8007d4a:	e7f0      	b.n	8007d2e <_dtoa_r+0xb16>
 8007d4c:	f1bb 0f00 	cmp.w	fp, #0
 8007d50:	bfcc      	ite	gt
 8007d52:	465f      	movgt	r7, fp
 8007d54:	2701      	movle	r7, #1
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	9a08      	ldr	r2, [sp, #32]
 8007d5c:	4417      	add	r7, r2
 8007d5e:	4651      	mov	r1, sl
 8007d60:	2201      	movs	r2, #1
 8007d62:	4628      	mov	r0, r5
 8007d64:	9302      	str	r3, [sp, #8]
 8007d66:	f000 fa7b 	bl	8008260 <__lshift>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4682      	mov	sl, r0
 8007d6e:	f000 fae3 	bl	8008338 <__mcmp>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	dcb2      	bgt.n	8007cdc <_dtoa_r+0xac4>
 8007d76:	d102      	bne.n	8007d7e <_dtoa_r+0xb66>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	07db      	lsls	r3, r3, #31
 8007d7c:	d4ae      	bmi.n	8007cdc <_dtoa_r+0xac4>
 8007d7e:	463b      	mov	r3, r7
 8007d80:	461f      	mov	r7, r3
 8007d82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d86:	2a30      	cmp	r2, #48	; 0x30
 8007d88:	d0fa      	beq.n	8007d80 <_dtoa_r+0xb68>
 8007d8a:	e6fb      	b.n	8007b84 <_dtoa_r+0x96c>
 8007d8c:	9a08      	ldr	r2, [sp, #32]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d1a5      	bne.n	8007cde <_dtoa_r+0xac6>
 8007d92:	2331      	movs	r3, #49	; 0x31
 8007d94:	f109 0901 	add.w	r9, r9, #1
 8007d98:	7013      	strb	r3, [r2, #0]
 8007d9a:	e6f3      	b.n	8007b84 <_dtoa_r+0x96c>
 8007d9c:	4b13      	ldr	r3, [pc, #76]	; (8007dec <_dtoa_r+0xbd4>)
 8007d9e:	f7ff baa7 	b.w	80072f0 <_dtoa_r+0xd8>
 8007da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f47f aa80 	bne.w	80072aa <_dtoa_r+0x92>
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <_dtoa_r+0xbd8>)
 8007dac:	f7ff baa0 	b.w	80072f0 <_dtoa_r+0xd8>
 8007db0:	f1bb 0f00 	cmp.w	fp, #0
 8007db4:	dc03      	bgt.n	8007dbe <_dtoa_r+0xba6>
 8007db6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	f73f aecc 	bgt.w	8007b56 <_dtoa_r+0x93e>
 8007dbe:	9f08      	ldr	r7, [sp, #32]
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4650      	mov	r0, sl
 8007dc4:	f7ff f998 	bl	80070f8 <quorem>
 8007dc8:	9a08      	ldr	r2, [sp, #32]
 8007dca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007dce:	f807 3b01 	strb.w	r3, [r7], #1
 8007dd2:	1aba      	subs	r2, r7, r2
 8007dd4:	4593      	cmp	fp, r2
 8007dd6:	ddb9      	ble.n	8007d4c <_dtoa_r+0xb34>
 8007dd8:	4651      	mov	r1, sl
 8007dda:	2300      	movs	r3, #0
 8007ddc:	220a      	movs	r2, #10
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 f892 	bl	8007f08 <__multadd>
 8007de4:	4682      	mov	sl, r0
 8007de6:	e7eb      	b.n	8007dc0 <_dtoa_r+0xba8>
 8007de8:	0800965b 	.word	0x0800965b
 8007dec:	080095b4 	.word	0x080095b4
 8007df0:	080095d8 	.word	0x080095d8

08007df4 <_localeconv_r>:
 8007df4:	4800      	ldr	r0, [pc, #0]	; (8007df8 <_localeconv_r+0x4>)
 8007df6:	4770      	bx	lr
 8007df8:	20000164 	.word	0x20000164

08007dfc <malloc>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <malloc+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f000 bbfb 	b.w	80085fc <_malloc_r>
 8007e06:	bf00      	nop
 8007e08:	20000010 	.word	0x20000010

08007e0c <memchr>:
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	b2c9      	uxtb	r1, r1
 8007e12:	4402      	add	r2, r0
 8007e14:	4293      	cmp	r3, r2
 8007e16:	4618      	mov	r0, r3
 8007e18:	d101      	bne.n	8007e1e <memchr+0x12>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e003      	b.n	8007e26 <memchr+0x1a>
 8007e1e:	7804      	ldrb	r4, [r0, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	428c      	cmp	r4, r1
 8007e24:	d1f6      	bne.n	8007e14 <memchr+0x8>
 8007e26:	bd10      	pop	{r4, pc}

08007e28 <memcpy>:
 8007e28:	440a      	add	r2, r1
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e30:	d100      	bne.n	8007e34 <memcpy+0xc>
 8007e32:	4770      	bx	lr
 8007e34:	b510      	push	{r4, lr}
 8007e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e40:	d1f9      	bne.n	8007e36 <memcpy+0xe>
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <_Balloc>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e48:	4604      	mov	r4, r0
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	b976      	cbnz	r6, 8007e6c <_Balloc+0x28>
 8007e4e:	2010      	movs	r0, #16
 8007e50:	f7ff ffd4 	bl	8007dfc <malloc>
 8007e54:	4602      	mov	r2, r0
 8007e56:	6260      	str	r0, [r4, #36]	; 0x24
 8007e58:	b920      	cbnz	r0, 8007e64 <_Balloc+0x20>
 8007e5a:	2166      	movs	r1, #102	; 0x66
 8007e5c:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <_Balloc+0x78>)
 8007e5e:	4818      	ldr	r0, [pc, #96]	; (8007ec0 <_Balloc+0x7c>)
 8007e60:	f000 fd92 	bl	8008988 <__assert_func>
 8007e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e68:	6006      	str	r6, [r0, #0]
 8007e6a:	60c6      	str	r6, [r0, #12]
 8007e6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e6e:	68f3      	ldr	r3, [r6, #12]
 8007e70:	b183      	cbz	r3, 8007e94 <_Balloc+0x50>
 8007e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e7a:	b9b8      	cbnz	r0, 8007eac <_Balloc+0x68>
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	fa01 f605 	lsl.w	r6, r1, r5
 8007e82:	1d72      	adds	r2, r6, #5
 8007e84:	4620      	mov	r0, r4
 8007e86:	0092      	lsls	r2, r2, #2
 8007e88:	f000 fb5e 	bl	8008548 <_calloc_r>
 8007e8c:	b160      	cbz	r0, 8007ea8 <_Balloc+0x64>
 8007e8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e92:	e00e      	b.n	8007eb2 <_Balloc+0x6e>
 8007e94:	2221      	movs	r2, #33	; 0x21
 8007e96:	2104      	movs	r1, #4
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 fb55 	bl	8008548 <_calloc_r>
 8007e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea0:	60f0      	str	r0, [r6, #12]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e4      	bne.n	8007e72 <_Balloc+0x2e>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	6802      	ldr	r2, [r0, #0]
 8007eae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007eb8:	e7f7      	b.n	8007eaa <_Balloc+0x66>
 8007eba:	bf00      	nop
 8007ebc:	080095e5 	.word	0x080095e5
 8007ec0:	0800966c 	.word	0x0800966c

08007ec4 <_Bfree>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ec8:	4605      	mov	r5, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	b976      	cbnz	r6, 8007eec <_Bfree+0x28>
 8007ece:	2010      	movs	r0, #16
 8007ed0:	f7ff ff94 	bl	8007dfc <malloc>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ed8:	b920      	cbnz	r0, 8007ee4 <_Bfree+0x20>
 8007eda:	218a      	movs	r1, #138	; 0x8a
 8007edc:	4b08      	ldr	r3, [pc, #32]	; (8007f00 <_Bfree+0x3c>)
 8007ede:	4809      	ldr	r0, [pc, #36]	; (8007f04 <_Bfree+0x40>)
 8007ee0:	f000 fd52 	bl	8008988 <__assert_func>
 8007ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee8:	6006      	str	r6, [r0, #0]
 8007eea:	60c6      	str	r6, [r0, #12]
 8007eec:	b13c      	cbz	r4, 8007efe <_Bfree+0x3a>
 8007eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ef0:	6862      	ldr	r2, [r4, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ef8:	6021      	str	r1, [r4, #0]
 8007efa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	080095e5 	.word	0x080095e5
 8007f04:	0800966c 	.word	0x0800966c

08007f08 <__multadd>:
 8007f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	460c      	mov	r4, r1
 8007f10:	2300      	movs	r3, #0
 8007f12:	690e      	ldr	r6, [r1, #16]
 8007f14:	4607      	mov	r7, r0
 8007f16:	f101 0014 	add.w	r0, r1, #20
 8007f1a:	6805      	ldr	r5, [r0, #0]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	b2a9      	uxth	r1, r5
 8007f20:	fb02 8101 	mla	r1, r2, r1, r8
 8007f24:	0c2d      	lsrs	r5, r5, #16
 8007f26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f2a:	fb02 c505 	mla	r5, r2, r5, ip
 8007f2e:	b289      	uxth	r1, r1
 8007f30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f34:	429e      	cmp	r6, r3
 8007f36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007f3a:	f840 1b04 	str.w	r1, [r0], #4
 8007f3e:	dcec      	bgt.n	8007f1a <__multadd+0x12>
 8007f40:	f1b8 0f00 	cmp.w	r8, #0
 8007f44:	d022      	beq.n	8007f8c <__multadd+0x84>
 8007f46:	68a3      	ldr	r3, [r4, #8]
 8007f48:	42b3      	cmp	r3, r6
 8007f4a:	dc19      	bgt.n	8007f80 <__multadd+0x78>
 8007f4c:	6861      	ldr	r1, [r4, #4]
 8007f4e:	4638      	mov	r0, r7
 8007f50:	3101      	adds	r1, #1
 8007f52:	f7ff ff77 	bl	8007e44 <_Balloc>
 8007f56:	4605      	mov	r5, r0
 8007f58:	b928      	cbnz	r0, 8007f66 <__multadd+0x5e>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	21b5      	movs	r1, #181	; 0xb5
 8007f5e:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <__multadd+0x8c>)
 8007f60:	480d      	ldr	r0, [pc, #52]	; (8007f98 <__multadd+0x90>)
 8007f62:	f000 fd11 	bl	8008988 <__assert_func>
 8007f66:	6922      	ldr	r2, [r4, #16]
 8007f68:	f104 010c 	add.w	r1, r4, #12
 8007f6c:	3202      	adds	r2, #2
 8007f6e:	0092      	lsls	r2, r2, #2
 8007f70:	300c      	adds	r0, #12
 8007f72:	f7ff ff59 	bl	8007e28 <memcpy>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff ffa3 	bl	8007ec4 <_Bfree>
 8007f7e:	462c      	mov	r4, r5
 8007f80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007f84:	3601      	adds	r6, #1
 8007f86:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f8a:	6126      	str	r6, [r4, #16]
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f92:	bf00      	nop
 8007f94:	0800965b 	.word	0x0800965b
 8007f98:	0800966c 	.word	0x0800966c

08007f9c <__hi0bits>:
 8007f9c:	0c02      	lsrs	r2, r0, #16
 8007f9e:	0412      	lsls	r2, r2, #16
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	b9ca      	cbnz	r2, 8007fd8 <__hi0bits+0x3c>
 8007fa4:	0403      	lsls	r3, r0, #16
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fac:	bf04      	itt	eq
 8007fae:	021b      	lsleq	r3, r3, #8
 8007fb0:	3008      	addeq	r0, #8
 8007fb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fb6:	bf04      	itt	eq
 8007fb8:	011b      	lsleq	r3, r3, #4
 8007fba:	3004      	addeq	r0, #4
 8007fbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fc0:	bf04      	itt	eq
 8007fc2:	009b      	lsleq	r3, r3, #2
 8007fc4:	3002      	addeq	r0, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	db05      	blt.n	8007fd6 <__hi0bits+0x3a>
 8007fca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007fce:	f100 0001 	add.w	r0, r0, #1
 8007fd2:	bf08      	it	eq
 8007fd4:	2020      	moveq	r0, #32
 8007fd6:	4770      	bx	lr
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e7e5      	b.n	8007fa8 <__hi0bits+0xc>

08007fdc <__lo0bits>:
 8007fdc:	6803      	ldr	r3, [r0, #0]
 8007fde:	4602      	mov	r2, r0
 8007fe0:	f013 0007 	ands.w	r0, r3, #7
 8007fe4:	d00b      	beq.n	8007ffe <__lo0bits+0x22>
 8007fe6:	07d9      	lsls	r1, r3, #31
 8007fe8:	d422      	bmi.n	8008030 <__lo0bits+0x54>
 8007fea:	0798      	lsls	r0, r3, #30
 8007fec:	bf49      	itett	mi
 8007fee:	085b      	lsrmi	r3, r3, #1
 8007ff0:	089b      	lsrpl	r3, r3, #2
 8007ff2:	2001      	movmi	r0, #1
 8007ff4:	6013      	strmi	r3, [r2, #0]
 8007ff6:	bf5c      	itt	pl
 8007ff8:	2002      	movpl	r0, #2
 8007ffa:	6013      	strpl	r3, [r2, #0]
 8007ffc:	4770      	bx	lr
 8007ffe:	b299      	uxth	r1, r3
 8008000:	b909      	cbnz	r1, 8008006 <__lo0bits+0x2a>
 8008002:	2010      	movs	r0, #16
 8008004:	0c1b      	lsrs	r3, r3, #16
 8008006:	f013 0fff 	tst.w	r3, #255	; 0xff
 800800a:	bf04      	itt	eq
 800800c:	0a1b      	lsreq	r3, r3, #8
 800800e:	3008      	addeq	r0, #8
 8008010:	0719      	lsls	r1, r3, #28
 8008012:	bf04      	itt	eq
 8008014:	091b      	lsreq	r3, r3, #4
 8008016:	3004      	addeq	r0, #4
 8008018:	0799      	lsls	r1, r3, #30
 800801a:	bf04      	itt	eq
 800801c:	089b      	lsreq	r3, r3, #2
 800801e:	3002      	addeq	r0, #2
 8008020:	07d9      	lsls	r1, r3, #31
 8008022:	d403      	bmi.n	800802c <__lo0bits+0x50>
 8008024:	085b      	lsrs	r3, r3, #1
 8008026:	f100 0001 	add.w	r0, r0, #1
 800802a:	d003      	beq.n	8008034 <__lo0bits+0x58>
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	4770      	bx	lr
 8008030:	2000      	movs	r0, #0
 8008032:	4770      	bx	lr
 8008034:	2020      	movs	r0, #32
 8008036:	4770      	bx	lr

08008038 <__i2b>:
 8008038:	b510      	push	{r4, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	2101      	movs	r1, #1
 800803e:	f7ff ff01 	bl	8007e44 <_Balloc>
 8008042:	4602      	mov	r2, r0
 8008044:	b928      	cbnz	r0, 8008052 <__i2b+0x1a>
 8008046:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800804a:	4b04      	ldr	r3, [pc, #16]	; (800805c <__i2b+0x24>)
 800804c:	4804      	ldr	r0, [pc, #16]	; (8008060 <__i2b+0x28>)
 800804e:	f000 fc9b 	bl	8008988 <__assert_func>
 8008052:	2301      	movs	r3, #1
 8008054:	6144      	str	r4, [r0, #20]
 8008056:	6103      	str	r3, [r0, #16]
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	0800965b 	.word	0x0800965b
 8008060:	0800966c 	.word	0x0800966c

08008064 <__multiply>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	4614      	mov	r4, r2
 800806a:	690a      	ldr	r2, [r1, #16]
 800806c:	6923      	ldr	r3, [r4, #16]
 800806e:	460d      	mov	r5, r1
 8008070:	429a      	cmp	r2, r3
 8008072:	bfbe      	ittt	lt
 8008074:	460b      	movlt	r3, r1
 8008076:	4625      	movlt	r5, r4
 8008078:	461c      	movlt	r4, r3
 800807a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800807e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008082:	68ab      	ldr	r3, [r5, #8]
 8008084:	6869      	ldr	r1, [r5, #4]
 8008086:	eb0a 0709 	add.w	r7, sl, r9
 800808a:	42bb      	cmp	r3, r7
 800808c:	b085      	sub	sp, #20
 800808e:	bfb8      	it	lt
 8008090:	3101      	addlt	r1, #1
 8008092:	f7ff fed7 	bl	8007e44 <_Balloc>
 8008096:	b930      	cbnz	r0, 80080a6 <__multiply+0x42>
 8008098:	4602      	mov	r2, r0
 800809a:	f240 115d 	movw	r1, #349	; 0x15d
 800809e:	4b41      	ldr	r3, [pc, #260]	; (80081a4 <__multiply+0x140>)
 80080a0:	4841      	ldr	r0, [pc, #260]	; (80081a8 <__multiply+0x144>)
 80080a2:	f000 fc71 	bl	8008988 <__assert_func>
 80080a6:	f100 0614 	add.w	r6, r0, #20
 80080aa:	4633      	mov	r3, r6
 80080ac:	2200      	movs	r2, #0
 80080ae:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80080b2:	4543      	cmp	r3, r8
 80080b4:	d31e      	bcc.n	80080f4 <__multiply+0x90>
 80080b6:	f105 0c14 	add.w	ip, r5, #20
 80080ba:	f104 0314 	add.w	r3, r4, #20
 80080be:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80080c2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80080c6:	9202      	str	r2, [sp, #8]
 80080c8:	ebac 0205 	sub.w	r2, ip, r5
 80080cc:	3a15      	subs	r2, #21
 80080ce:	f022 0203 	bic.w	r2, r2, #3
 80080d2:	3204      	adds	r2, #4
 80080d4:	f105 0115 	add.w	r1, r5, #21
 80080d8:	458c      	cmp	ip, r1
 80080da:	bf38      	it	cc
 80080dc:	2204      	movcc	r2, #4
 80080de:	9201      	str	r2, [sp, #4]
 80080e0:	9a02      	ldr	r2, [sp, #8]
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d808      	bhi.n	80080fa <__multiply+0x96>
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	dc55      	bgt.n	8008198 <__multiply+0x134>
 80080ec:	6107      	str	r7, [r0, #16]
 80080ee:	b005      	add	sp, #20
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	f843 2b04 	str.w	r2, [r3], #4
 80080f8:	e7db      	b.n	80080b2 <__multiply+0x4e>
 80080fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80080fe:	f1ba 0f00 	cmp.w	sl, #0
 8008102:	d020      	beq.n	8008146 <__multiply+0xe2>
 8008104:	46b1      	mov	r9, r6
 8008106:	2200      	movs	r2, #0
 8008108:	f105 0e14 	add.w	lr, r5, #20
 800810c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008110:	f8d9 b000 	ldr.w	fp, [r9]
 8008114:	b2a1      	uxth	r1, r4
 8008116:	fa1f fb8b 	uxth.w	fp, fp
 800811a:	fb0a b101 	mla	r1, sl, r1, fp
 800811e:	4411      	add	r1, r2
 8008120:	f8d9 2000 	ldr.w	r2, [r9]
 8008124:	0c24      	lsrs	r4, r4, #16
 8008126:	0c12      	lsrs	r2, r2, #16
 8008128:	fb0a 2404 	mla	r4, sl, r4, r2
 800812c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008130:	b289      	uxth	r1, r1
 8008132:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008136:	45f4      	cmp	ip, lr
 8008138:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800813c:	f849 1b04 	str.w	r1, [r9], #4
 8008140:	d8e4      	bhi.n	800810c <__multiply+0xa8>
 8008142:	9901      	ldr	r1, [sp, #4]
 8008144:	5072      	str	r2, [r6, r1]
 8008146:	9a03      	ldr	r2, [sp, #12]
 8008148:	3304      	adds	r3, #4
 800814a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800814e:	f1b9 0f00 	cmp.w	r9, #0
 8008152:	d01f      	beq.n	8008194 <__multiply+0x130>
 8008154:	46b6      	mov	lr, r6
 8008156:	f04f 0a00 	mov.w	sl, #0
 800815a:	6834      	ldr	r4, [r6, #0]
 800815c:	f105 0114 	add.w	r1, r5, #20
 8008160:	880a      	ldrh	r2, [r1, #0]
 8008162:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008166:	b2a4      	uxth	r4, r4
 8008168:	fb09 b202 	mla	r2, r9, r2, fp
 800816c:	4492      	add	sl, r2
 800816e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008172:	f84e 4b04 	str.w	r4, [lr], #4
 8008176:	f851 4b04 	ldr.w	r4, [r1], #4
 800817a:	f8be 2000 	ldrh.w	r2, [lr]
 800817e:	0c24      	lsrs	r4, r4, #16
 8008180:	fb09 2404 	mla	r4, r9, r4, r2
 8008184:	458c      	cmp	ip, r1
 8008186:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800818a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800818e:	d8e7      	bhi.n	8008160 <__multiply+0xfc>
 8008190:	9a01      	ldr	r2, [sp, #4]
 8008192:	50b4      	str	r4, [r6, r2]
 8008194:	3604      	adds	r6, #4
 8008196:	e7a3      	b.n	80080e0 <__multiply+0x7c>
 8008198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1a5      	bne.n	80080ec <__multiply+0x88>
 80081a0:	3f01      	subs	r7, #1
 80081a2:	e7a1      	b.n	80080e8 <__multiply+0x84>
 80081a4:	0800965b 	.word	0x0800965b
 80081a8:	0800966c 	.word	0x0800966c

080081ac <__pow5mult>:
 80081ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b0:	4615      	mov	r5, r2
 80081b2:	f012 0203 	ands.w	r2, r2, #3
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	d007      	beq.n	80081cc <__pow5mult+0x20>
 80081bc:	4c25      	ldr	r4, [pc, #148]	; (8008254 <__pow5mult+0xa8>)
 80081be:	3a01      	subs	r2, #1
 80081c0:	2300      	movs	r3, #0
 80081c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081c6:	f7ff fe9f 	bl	8007f08 <__multadd>
 80081ca:	4607      	mov	r7, r0
 80081cc:	10ad      	asrs	r5, r5, #2
 80081ce:	d03d      	beq.n	800824c <__pow5mult+0xa0>
 80081d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081d2:	b97c      	cbnz	r4, 80081f4 <__pow5mult+0x48>
 80081d4:	2010      	movs	r0, #16
 80081d6:	f7ff fe11 	bl	8007dfc <malloc>
 80081da:	4602      	mov	r2, r0
 80081dc:	6270      	str	r0, [r6, #36]	; 0x24
 80081de:	b928      	cbnz	r0, 80081ec <__pow5mult+0x40>
 80081e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081e4:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <__pow5mult+0xac>)
 80081e6:	481d      	ldr	r0, [pc, #116]	; (800825c <__pow5mult+0xb0>)
 80081e8:	f000 fbce 	bl	8008988 <__assert_func>
 80081ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081f0:	6004      	str	r4, [r0, #0]
 80081f2:	60c4      	str	r4, [r0, #12]
 80081f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081fc:	b94c      	cbnz	r4, 8008212 <__pow5mult+0x66>
 80081fe:	f240 2171 	movw	r1, #625	; 0x271
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff ff18 	bl	8008038 <__i2b>
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	f04f 0900 	mov.w	r9, #0
 8008216:	07eb      	lsls	r3, r5, #31
 8008218:	d50a      	bpl.n	8008230 <__pow5mult+0x84>
 800821a:	4639      	mov	r1, r7
 800821c:	4622      	mov	r2, r4
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff ff20 	bl	8008064 <__multiply>
 8008224:	4680      	mov	r8, r0
 8008226:	4639      	mov	r1, r7
 8008228:	4630      	mov	r0, r6
 800822a:	f7ff fe4b 	bl	8007ec4 <_Bfree>
 800822e:	4647      	mov	r7, r8
 8008230:	106d      	asrs	r5, r5, #1
 8008232:	d00b      	beq.n	800824c <__pow5mult+0xa0>
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	b938      	cbnz	r0, 8008248 <__pow5mult+0x9c>
 8008238:	4622      	mov	r2, r4
 800823a:	4621      	mov	r1, r4
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff ff11 	bl	8008064 <__multiply>
 8008242:	6020      	str	r0, [r4, #0]
 8008244:	f8c0 9000 	str.w	r9, [r0]
 8008248:	4604      	mov	r4, r0
 800824a:	e7e4      	b.n	8008216 <__pow5mult+0x6a>
 800824c:	4638      	mov	r0, r7
 800824e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008252:	bf00      	nop
 8008254:	080097c0 	.word	0x080097c0
 8008258:	080095e5 	.word	0x080095e5
 800825c:	0800966c 	.word	0x0800966c

08008260 <__lshift>:
 8008260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	4607      	mov	r7, r0
 8008268:	4691      	mov	r9, r2
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	6849      	ldr	r1, [r1, #4]
 800826e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008278:	f108 0601 	add.w	r6, r8, #1
 800827c:	42b3      	cmp	r3, r6
 800827e:	db0b      	blt.n	8008298 <__lshift+0x38>
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff fddf 	bl	8007e44 <_Balloc>
 8008286:	4605      	mov	r5, r0
 8008288:	b948      	cbnz	r0, 800829e <__lshift+0x3e>
 800828a:	4602      	mov	r2, r0
 800828c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008290:	4b27      	ldr	r3, [pc, #156]	; (8008330 <__lshift+0xd0>)
 8008292:	4828      	ldr	r0, [pc, #160]	; (8008334 <__lshift+0xd4>)
 8008294:	f000 fb78 	bl	8008988 <__assert_func>
 8008298:	3101      	adds	r1, #1
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	e7ee      	b.n	800827c <__lshift+0x1c>
 800829e:	2300      	movs	r3, #0
 80082a0:	f100 0114 	add.w	r1, r0, #20
 80082a4:	f100 0210 	add.w	r2, r0, #16
 80082a8:	4618      	mov	r0, r3
 80082aa:	4553      	cmp	r3, sl
 80082ac:	db33      	blt.n	8008316 <__lshift+0xb6>
 80082ae:	6920      	ldr	r0, [r4, #16]
 80082b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082b4:	f104 0314 	add.w	r3, r4, #20
 80082b8:	f019 091f 	ands.w	r9, r9, #31
 80082bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082c4:	d02b      	beq.n	800831e <__lshift+0xbe>
 80082c6:	468a      	mov	sl, r1
 80082c8:	2200      	movs	r2, #0
 80082ca:	f1c9 0e20 	rsb	lr, r9, #32
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	fa00 f009 	lsl.w	r0, r0, r9
 80082d4:	4302      	orrs	r2, r0
 80082d6:	f84a 2b04 	str.w	r2, [sl], #4
 80082da:	f853 2b04 	ldr.w	r2, [r3], #4
 80082de:	459c      	cmp	ip, r3
 80082e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80082e4:	d8f3      	bhi.n	80082ce <__lshift+0x6e>
 80082e6:	ebac 0304 	sub.w	r3, ip, r4
 80082ea:	3b15      	subs	r3, #21
 80082ec:	f023 0303 	bic.w	r3, r3, #3
 80082f0:	3304      	adds	r3, #4
 80082f2:	f104 0015 	add.w	r0, r4, #21
 80082f6:	4584      	cmp	ip, r0
 80082f8:	bf38      	it	cc
 80082fa:	2304      	movcc	r3, #4
 80082fc:	50ca      	str	r2, [r1, r3]
 80082fe:	b10a      	cbz	r2, 8008304 <__lshift+0xa4>
 8008300:	f108 0602 	add.w	r6, r8, #2
 8008304:	3e01      	subs	r6, #1
 8008306:	4638      	mov	r0, r7
 8008308:	4621      	mov	r1, r4
 800830a:	612e      	str	r6, [r5, #16]
 800830c:	f7ff fdda 	bl	8007ec4 <_Bfree>
 8008310:	4628      	mov	r0, r5
 8008312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008316:	f842 0f04 	str.w	r0, [r2, #4]!
 800831a:	3301      	adds	r3, #1
 800831c:	e7c5      	b.n	80082aa <__lshift+0x4a>
 800831e:	3904      	subs	r1, #4
 8008320:	f853 2b04 	ldr.w	r2, [r3], #4
 8008324:	459c      	cmp	ip, r3
 8008326:	f841 2f04 	str.w	r2, [r1, #4]!
 800832a:	d8f9      	bhi.n	8008320 <__lshift+0xc0>
 800832c:	e7ea      	b.n	8008304 <__lshift+0xa4>
 800832e:	bf00      	nop
 8008330:	0800965b 	.word	0x0800965b
 8008334:	0800966c 	.word	0x0800966c

08008338 <__mcmp>:
 8008338:	4603      	mov	r3, r0
 800833a:	690a      	ldr	r2, [r1, #16]
 800833c:	6900      	ldr	r0, [r0, #16]
 800833e:	b530      	push	{r4, r5, lr}
 8008340:	1a80      	subs	r0, r0, r2
 8008342:	d10d      	bne.n	8008360 <__mcmp+0x28>
 8008344:	3314      	adds	r3, #20
 8008346:	3114      	adds	r1, #20
 8008348:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800834c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008350:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008354:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008358:	4295      	cmp	r5, r2
 800835a:	d002      	beq.n	8008362 <__mcmp+0x2a>
 800835c:	d304      	bcc.n	8008368 <__mcmp+0x30>
 800835e:	2001      	movs	r0, #1
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	42a3      	cmp	r3, r4
 8008364:	d3f4      	bcc.n	8008350 <__mcmp+0x18>
 8008366:	e7fb      	b.n	8008360 <__mcmp+0x28>
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	e7f8      	b.n	8008360 <__mcmp+0x28>
	...

08008370 <__mdiff>:
 8008370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	460c      	mov	r4, r1
 8008376:	4606      	mov	r6, r0
 8008378:	4611      	mov	r1, r2
 800837a:	4620      	mov	r0, r4
 800837c:	4692      	mov	sl, r2
 800837e:	f7ff ffdb 	bl	8008338 <__mcmp>
 8008382:	1e05      	subs	r5, r0, #0
 8008384:	d111      	bne.n	80083aa <__mdiff+0x3a>
 8008386:	4629      	mov	r1, r5
 8008388:	4630      	mov	r0, r6
 800838a:	f7ff fd5b 	bl	8007e44 <_Balloc>
 800838e:	4602      	mov	r2, r0
 8008390:	b928      	cbnz	r0, 800839e <__mdiff+0x2e>
 8008392:	f240 2132 	movw	r1, #562	; 0x232
 8008396:	4b3c      	ldr	r3, [pc, #240]	; (8008488 <__mdiff+0x118>)
 8008398:	483c      	ldr	r0, [pc, #240]	; (800848c <__mdiff+0x11c>)
 800839a:	f000 faf5 	bl	8008988 <__assert_func>
 800839e:	2301      	movs	r3, #1
 80083a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083a4:	4610      	mov	r0, r2
 80083a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	bfa4      	itt	ge
 80083ac:	4653      	movge	r3, sl
 80083ae:	46a2      	movge	sl, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80083b6:	bfa6      	itte	ge
 80083b8:	461c      	movge	r4, r3
 80083ba:	2500      	movge	r5, #0
 80083bc:	2501      	movlt	r5, #1
 80083be:	f7ff fd41 	bl	8007e44 <_Balloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	b918      	cbnz	r0, 80083ce <__mdiff+0x5e>
 80083c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083ca:	4b2f      	ldr	r3, [pc, #188]	; (8008488 <__mdiff+0x118>)
 80083cc:	e7e4      	b.n	8008398 <__mdiff+0x28>
 80083ce:	f100 0814 	add.w	r8, r0, #20
 80083d2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80083d6:	60c5      	str	r5, [r0, #12]
 80083d8:	f04f 0c00 	mov.w	ip, #0
 80083dc:	f10a 0514 	add.w	r5, sl, #20
 80083e0:	f10a 0010 	add.w	r0, sl, #16
 80083e4:	46c2      	mov	sl, r8
 80083e6:	6926      	ldr	r6, [r4, #16]
 80083e8:	f104 0914 	add.w	r9, r4, #20
 80083ec:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80083f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083f4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80083f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80083fc:	fa1f f18b 	uxth.w	r1, fp
 8008400:	4461      	add	r1, ip
 8008402:	fa1f fc83 	uxth.w	ip, r3
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	eba1 010c 	sub.w	r1, r1, ip
 800840c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008410:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008414:	b289      	uxth	r1, r1
 8008416:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800841a:	454e      	cmp	r6, r9
 800841c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008420:	f84a 3b04 	str.w	r3, [sl], #4
 8008424:	d8e6      	bhi.n	80083f4 <__mdiff+0x84>
 8008426:	1b33      	subs	r3, r6, r4
 8008428:	3b15      	subs	r3, #21
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	3415      	adds	r4, #21
 8008430:	3304      	adds	r3, #4
 8008432:	42a6      	cmp	r6, r4
 8008434:	bf38      	it	cc
 8008436:	2304      	movcc	r3, #4
 8008438:	441d      	add	r5, r3
 800843a:	4443      	add	r3, r8
 800843c:	461e      	mov	r6, r3
 800843e:	462c      	mov	r4, r5
 8008440:	4574      	cmp	r4, lr
 8008442:	d30e      	bcc.n	8008462 <__mdiff+0xf2>
 8008444:	f10e 0103 	add.w	r1, lr, #3
 8008448:	1b49      	subs	r1, r1, r5
 800844a:	f021 0103 	bic.w	r1, r1, #3
 800844e:	3d03      	subs	r5, #3
 8008450:	45ae      	cmp	lr, r5
 8008452:	bf38      	it	cc
 8008454:	2100      	movcc	r1, #0
 8008456:	4419      	add	r1, r3
 8008458:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800845c:	b18b      	cbz	r3, 8008482 <__mdiff+0x112>
 800845e:	6117      	str	r7, [r2, #16]
 8008460:	e7a0      	b.n	80083a4 <__mdiff+0x34>
 8008462:	f854 8b04 	ldr.w	r8, [r4], #4
 8008466:	fa1f f188 	uxth.w	r1, r8
 800846a:	4461      	add	r1, ip
 800846c:	1408      	asrs	r0, r1, #16
 800846e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008472:	b289      	uxth	r1, r1
 8008474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800847c:	f846 1b04 	str.w	r1, [r6], #4
 8008480:	e7de      	b.n	8008440 <__mdiff+0xd0>
 8008482:	3f01      	subs	r7, #1
 8008484:	e7e8      	b.n	8008458 <__mdiff+0xe8>
 8008486:	bf00      	nop
 8008488:	0800965b 	.word	0x0800965b
 800848c:	0800966c 	.word	0x0800966c

08008490 <__d2b>:
 8008490:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008494:	2101      	movs	r1, #1
 8008496:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800849a:	4690      	mov	r8, r2
 800849c:	461d      	mov	r5, r3
 800849e:	f7ff fcd1 	bl	8007e44 <_Balloc>
 80084a2:	4604      	mov	r4, r0
 80084a4:	b930      	cbnz	r0, 80084b4 <__d2b+0x24>
 80084a6:	4602      	mov	r2, r0
 80084a8:	f240 310a 	movw	r1, #778	; 0x30a
 80084ac:	4b24      	ldr	r3, [pc, #144]	; (8008540 <__d2b+0xb0>)
 80084ae:	4825      	ldr	r0, [pc, #148]	; (8008544 <__d2b+0xb4>)
 80084b0:	f000 fa6a 	bl	8008988 <__assert_func>
 80084b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80084b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80084bc:	bb2d      	cbnz	r5, 800850a <__d2b+0x7a>
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	f1b8 0300 	subs.w	r3, r8, #0
 80084c4:	d026      	beq.n	8008514 <__d2b+0x84>
 80084c6:	4668      	mov	r0, sp
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	f7ff fd87 	bl	8007fdc <__lo0bits>
 80084ce:	9900      	ldr	r1, [sp, #0]
 80084d0:	b1f0      	cbz	r0, 8008510 <__d2b+0x80>
 80084d2:	9a01      	ldr	r2, [sp, #4]
 80084d4:	f1c0 0320 	rsb	r3, r0, #32
 80084d8:	fa02 f303 	lsl.w	r3, r2, r3
 80084dc:	430b      	orrs	r3, r1
 80084de:	40c2      	lsrs	r2, r0
 80084e0:	6163      	str	r3, [r4, #20]
 80084e2:	9201      	str	r2, [sp, #4]
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2102      	movne	r1, #2
 80084ec:	2101      	moveq	r1, #1
 80084ee:	61a3      	str	r3, [r4, #24]
 80084f0:	6121      	str	r1, [r4, #16]
 80084f2:	b1c5      	cbz	r5, 8008526 <__d2b+0x96>
 80084f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084f8:	4405      	add	r5, r0
 80084fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084fe:	603d      	str	r5, [r7, #0]
 8008500:	6030      	str	r0, [r6, #0]
 8008502:	4620      	mov	r0, r4
 8008504:	b002      	add	sp, #8
 8008506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800850e:	e7d6      	b.n	80084be <__d2b+0x2e>
 8008510:	6161      	str	r1, [r4, #20]
 8008512:	e7e7      	b.n	80084e4 <__d2b+0x54>
 8008514:	a801      	add	r0, sp, #4
 8008516:	f7ff fd61 	bl	8007fdc <__lo0bits>
 800851a:	2101      	movs	r1, #1
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	6121      	str	r1, [r4, #16]
 8008520:	6163      	str	r3, [r4, #20]
 8008522:	3020      	adds	r0, #32
 8008524:	e7e5      	b.n	80084f2 <__d2b+0x62>
 8008526:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800852a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800852e:	6038      	str	r0, [r7, #0]
 8008530:	6918      	ldr	r0, [r3, #16]
 8008532:	f7ff fd33 	bl	8007f9c <__hi0bits>
 8008536:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800853a:	6031      	str	r1, [r6, #0]
 800853c:	e7e1      	b.n	8008502 <__d2b+0x72>
 800853e:	bf00      	nop
 8008540:	0800965b 	.word	0x0800965b
 8008544:	0800966c 	.word	0x0800966c

08008548 <_calloc_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	fb02 f501 	mul.w	r5, r2, r1
 800854e:	4629      	mov	r1, r5
 8008550:	f000 f854 	bl	80085fc <_malloc_r>
 8008554:	4604      	mov	r4, r0
 8008556:	b118      	cbz	r0, 8008560 <_calloc_r+0x18>
 8008558:	462a      	mov	r2, r5
 800855a:	2100      	movs	r1, #0
 800855c:	f7fe f930 	bl	80067c0 <memset>
 8008560:	4620      	mov	r0, r4
 8008562:	bd38      	pop	{r3, r4, r5, pc}

08008564 <_free_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4605      	mov	r5, r0
 8008568:	2900      	cmp	r1, #0
 800856a:	d043      	beq.n	80085f4 <_free_r+0x90>
 800856c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008570:	1f0c      	subs	r4, r1, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	bfb8      	it	lt
 8008576:	18e4      	addlt	r4, r4, r3
 8008578:	f000 fa62 	bl	8008a40 <__malloc_lock>
 800857c:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <_free_r+0x94>)
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	4610      	mov	r0, r2
 8008582:	b933      	cbnz	r3, 8008592 <_free_r+0x2e>
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	6014      	str	r4, [r2, #0]
 8008588:	4628      	mov	r0, r5
 800858a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800858e:	f000 ba5d 	b.w	8008a4c <__malloc_unlock>
 8008592:	42a3      	cmp	r3, r4
 8008594:	d90a      	bls.n	80085ac <_free_r+0x48>
 8008596:	6821      	ldr	r1, [r4, #0]
 8008598:	1862      	adds	r2, r4, r1
 800859a:	4293      	cmp	r3, r2
 800859c:	bf01      	itttt	eq
 800859e:	681a      	ldreq	r2, [r3, #0]
 80085a0:	685b      	ldreq	r3, [r3, #4]
 80085a2:	1852      	addeq	r2, r2, r1
 80085a4:	6022      	streq	r2, [r4, #0]
 80085a6:	6063      	str	r3, [r4, #4]
 80085a8:	6004      	str	r4, [r0, #0]
 80085aa:	e7ed      	b.n	8008588 <_free_r+0x24>
 80085ac:	461a      	mov	r2, r3
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	b10b      	cbz	r3, 80085b6 <_free_r+0x52>
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	d9fa      	bls.n	80085ac <_free_r+0x48>
 80085b6:	6811      	ldr	r1, [r2, #0]
 80085b8:	1850      	adds	r0, r2, r1
 80085ba:	42a0      	cmp	r0, r4
 80085bc:	d10b      	bne.n	80085d6 <_free_r+0x72>
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	4401      	add	r1, r0
 80085c2:	1850      	adds	r0, r2, r1
 80085c4:	4283      	cmp	r3, r0
 80085c6:	6011      	str	r1, [r2, #0]
 80085c8:	d1de      	bne.n	8008588 <_free_r+0x24>
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	4401      	add	r1, r0
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	6053      	str	r3, [r2, #4]
 80085d4:	e7d8      	b.n	8008588 <_free_r+0x24>
 80085d6:	d902      	bls.n	80085de <_free_r+0x7a>
 80085d8:	230c      	movs	r3, #12
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	e7d4      	b.n	8008588 <_free_r+0x24>
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	1821      	adds	r1, r4, r0
 80085e2:	428b      	cmp	r3, r1
 80085e4:	bf01      	itttt	eq
 80085e6:	6819      	ldreq	r1, [r3, #0]
 80085e8:	685b      	ldreq	r3, [r3, #4]
 80085ea:	1809      	addeq	r1, r1, r0
 80085ec:	6021      	streq	r1, [r4, #0]
 80085ee:	6063      	str	r3, [r4, #4]
 80085f0:	6054      	str	r4, [r2, #4]
 80085f2:	e7c9      	b.n	8008588 <_free_r+0x24>
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	20000238 	.word	0x20000238

080085fc <_malloc_r>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	1ccd      	adds	r5, r1, #3
 8008600:	f025 0503 	bic.w	r5, r5, #3
 8008604:	3508      	adds	r5, #8
 8008606:	2d0c      	cmp	r5, #12
 8008608:	bf38      	it	cc
 800860a:	250c      	movcc	r5, #12
 800860c:	2d00      	cmp	r5, #0
 800860e:	4606      	mov	r6, r0
 8008610:	db01      	blt.n	8008616 <_malloc_r+0x1a>
 8008612:	42a9      	cmp	r1, r5
 8008614:	d903      	bls.n	800861e <_malloc_r+0x22>
 8008616:	230c      	movs	r3, #12
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	2000      	movs	r0, #0
 800861c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800861e:	f000 fa0f 	bl	8008a40 <__malloc_lock>
 8008622:	4921      	ldr	r1, [pc, #132]	; (80086a8 <_malloc_r+0xac>)
 8008624:	680a      	ldr	r2, [r1, #0]
 8008626:	4614      	mov	r4, r2
 8008628:	b99c      	cbnz	r4, 8008652 <_malloc_r+0x56>
 800862a:	4f20      	ldr	r7, [pc, #128]	; (80086ac <_malloc_r+0xb0>)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	b923      	cbnz	r3, 800863a <_malloc_r+0x3e>
 8008630:	4621      	mov	r1, r4
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f998 	bl	8008968 <_sbrk_r>
 8008638:	6038      	str	r0, [r7, #0]
 800863a:	4629      	mov	r1, r5
 800863c:	4630      	mov	r0, r6
 800863e:	f000 f993 	bl	8008968 <_sbrk_r>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d123      	bne.n	800868e <_malloc_r+0x92>
 8008646:	230c      	movs	r3, #12
 8008648:	4630      	mov	r0, r6
 800864a:	6033      	str	r3, [r6, #0]
 800864c:	f000 f9fe 	bl	8008a4c <__malloc_unlock>
 8008650:	e7e3      	b.n	800861a <_malloc_r+0x1e>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	1b5b      	subs	r3, r3, r5
 8008656:	d417      	bmi.n	8008688 <_malloc_r+0x8c>
 8008658:	2b0b      	cmp	r3, #11
 800865a:	d903      	bls.n	8008664 <_malloc_r+0x68>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	441c      	add	r4, r3
 8008660:	6025      	str	r5, [r4, #0]
 8008662:	e004      	b.n	800866e <_malloc_r+0x72>
 8008664:	6863      	ldr	r3, [r4, #4]
 8008666:	42a2      	cmp	r2, r4
 8008668:	bf0c      	ite	eq
 800866a:	600b      	streq	r3, [r1, #0]
 800866c:	6053      	strne	r3, [r2, #4]
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f9ec 	bl	8008a4c <__malloc_unlock>
 8008674:	f104 000b 	add.w	r0, r4, #11
 8008678:	1d23      	adds	r3, r4, #4
 800867a:	f020 0007 	bic.w	r0, r0, #7
 800867e:	1ac2      	subs	r2, r0, r3
 8008680:	d0cc      	beq.n	800861c <_malloc_r+0x20>
 8008682:	1a1b      	subs	r3, r3, r0
 8008684:	50a3      	str	r3, [r4, r2]
 8008686:	e7c9      	b.n	800861c <_malloc_r+0x20>
 8008688:	4622      	mov	r2, r4
 800868a:	6864      	ldr	r4, [r4, #4]
 800868c:	e7cc      	b.n	8008628 <_malloc_r+0x2c>
 800868e:	1cc4      	adds	r4, r0, #3
 8008690:	f024 0403 	bic.w	r4, r4, #3
 8008694:	42a0      	cmp	r0, r4
 8008696:	d0e3      	beq.n	8008660 <_malloc_r+0x64>
 8008698:	1a21      	subs	r1, r4, r0
 800869a:	4630      	mov	r0, r6
 800869c:	f000 f964 	bl	8008968 <_sbrk_r>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1dd      	bne.n	8008660 <_malloc_r+0x64>
 80086a4:	e7cf      	b.n	8008646 <_malloc_r+0x4a>
 80086a6:	bf00      	nop
 80086a8:	20000238 	.word	0x20000238
 80086ac:	2000023c 	.word	0x2000023c

080086b0 <__ssputs_r>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	688e      	ldr	r6, [r1, #8]
 80086b6:	4682      	mov	sl, r0
 80086b8:	429e      	cmp	r6, r3
 80086ba:	460c      	mov	r4, r1
 80086bc:	4690      	mov	r8, r2
 80086be:	461f      	mov	r7, r3
 80086c0:	d838      	bhi.n	8008734 <__ssputs_r+0x84>
 80086c2:	898a      	ldrh	r2, [r1, #12]
 80086c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086c8:	d032      	beq.n	8008730 <__ssputs_r+0x80>
 80086ca:	6825      	ldr	r5, [r4, #0]
 80086cc:	6909      	ldr	r1, [r1, #16]
 80086ce:	3301      	adds	r3, #1
 80086d0:	eba5 0901 	sub.w	r9, r5, r1
 80086d4:	6965      	ldr	r5, [r4, #20]
 80086d6:	444b      	add	r3, r9
 80086d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086e0:	106d      	asrs	r5, r5, #1
 80086e2:	429d      	cmp	r5, r3
 80086e4:	bf38      	it	cc
 80086e6:	461d      	movcc	r5, r3
 80086e8:	0553      	lsls	r3, r2, #21
 80086ea:	d531      	bpl.n	8008750 <__ssputs_r+0xa0>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7ff ff85 	bl	80085fc <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b950      	cbnz	r0, 800870c <__ssputs_r+0x5c>
 80086f6:	230c      	movs	r3, #12
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	f8ca 3000 	str.w	r3, [sl]
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	464a      	mov	r2, r9
 800870e:	6921      	ldr	r1, [r4, #16]
 8008710:	f7ff fb8a 	bl	8007e28 <memcpy>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800871a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	6126      	str	r6, [r4, #16]
 8008722:	444e      	add	r6, r9
 8008724:	6026      	str	r6, [r4, #0]
 8008726:	463e      	mov	r6, r7
 8008728:	6165      	str	r5, [r4, #20]
 800872a:	eba5 0509 	sub.w	r5, r5, r9
 800872e:	60a5      	str	r5, [r4, #8]
 8008730:	42be      	cmp	r6, r7
 8008732:	d900      	bls.n	8008736 <__ssputs_r+0x86>
 8008734:	463e      	mov	r6, r7
 8008736:	4632      	mov	r2, r6
 8008738:	4641      	mov	r1, r8
 800873a:	6820      	ldr	r0, [r4, #0]
 800873c:	f000 f966 	bl	8008a0c <memmove>
 8008740:	68a3      	ldr	r3, [r4, #8]
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	1b9b      	subs	r3, r3, r6
 8008746:	4432      	add	r2, r6
 8008748:	2000      	movs	r0, #0
 800874a:	60a3      	str	r3, [r4, #8]
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	e7db      	b.n	8008708 <__ssputs_r+0x58>
 8008750:	462a      	mov	r2, r5
 8008752:	f000 f981 	bl	8008a58 <_realloc_r>
 8008756:	4606      	mov	r6, r0
 8008758:	2800      	cmp	r0, #0
 800875a:	d1e1      	bne.n	8008720 <__ssputs_r+0x70>
 800875c:	4650      	mov	r0, sl
 800875e:	6921      	ldr	r1, [r4, #16]
 8008760:	f7ff ff00 	bl	8008564 <_free_r>
 8008764:	e7c7      	b.n	80086f6 <__ssputs_r+0x46>
	...

08008768 <_svfiprintf_r>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4698      	mov	r8, r3
 800876e:	898b      	ldrh	r3, [r1, #12]
 8008770:	4607      	mov	r7, r0
 8008772:	061b      	lsls	r3, r3, #24
 8008774:	460d      	mov	r5, r1
 8008776:	4614      	mov	r4, r2
 8008778:	b09d      	sub	sp, #116	; 0x74
 800877a:	d50e      	bpl.n	800879a <_svfiprintf_r+0x32>
 800877c:	690b      	ldr	r3, [r1, #16]
 800877e:	b963      	cbnz	r3, 800879a <_svfiprintf_r+0x32>
 8008780:	2140      	movs	r1, #64	; 0x40
 8008782:	f7ff ff3b 	bl	80085fc <_malloc_r>
 8008786:	6028      	str	r0, [r5, #0]
 8008788:	6128      	str	r0, [r5, #16]
 800878a:	b920      	cbnz	r0, 8008796 <_svfiprintf_r+0x2e>
 800878c:	230c      	movs	r3, #12
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	e0d1      	b.n	800893a <_svfiprintf_r+0x1d2>
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	616b      	str	r3, [r5, #20]
 800879a:	2300      	movs	r3, #0
 800879c:	9309      	str	r3, [sp, #36]	; 0x24
 800879e:	2320      	movs	r3, #32
 80087a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087a4:	2330      	movs	r3, #48	; 0x30
 80087a6:	f04f 0901 	mov.w	r9, #1
 80087aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008954 <_svfiprintf_r+0x1ec>
 80087b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087b6:	4623      	mov	r3, r4
 80087b8:	469a      	mov	sl, r3
 80087ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087be:	b10a      	cbz	r2, 80087c4 <_svfiprintf_r+0x5c>
 80087c0:	2a25      	cmp	r2, #37	; 0x25
 80087c2:	d1f9      	bne.n	80087b8 <_svfiprintf_r+0x50>
 80087c4:	ebba 0b04 	subs.w	fp, sl, r4
 80087c8:	d00b      	beq.n	80087e2 <_svfiprintf_r+0x7a>
 80087ca:	465b      	mov	r3, fp
 80087cc:	4622      	mov	r2, r4
 80087ce:	4629      	mov	r1, r5
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff ff6d 	bl	80086b0 <__ssputs_r>
 80087d6:	3001      	adds	r0, #1
 80087d8:	f000 80aa 	beq.w	8008930 <_svfiprintf_r+0x1c8>
 80087dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087de:	445a      	add	r2, fp
 80087e0:	9209      	str	r2, [sp, #36]	; 0x24
 80087e2:	f89a 3000 	ldrb.w	r3, [sl]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 80a2 	beq.w	8008930 <_svfiprintf_r+0x1c8>
 80087ec:	2300      	movs	r3, #0
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f6:	f10a 0a01 	add.w	sl, sl, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	9307      	str	r3, [sp, #28]
 80087fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008802:	931a      	str	r3, [sp, #104]	; 0x68
 8008804:	4654      	mov	r4, sl
 8008806:	2205      	movs	r2, #5
 8008808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800880c:	4851      	ldr	r0, [pc, #324]	; (8008954 <_svfiprintf_r+0x1ec>)
 800880e:	f7ff fafd 	bl	8007e0c <memchr>
 8008812:	9a04      	ldr	r2, [sp, #16]
 8008814:	b9d8      	cbnz	r0, 800884e <_svfiprintf_r+0xe6>
 8008816:	06d0      	lsls	r0, r2, #27
 8008818:	bf44      	itt	mi
 800881a:	2320      	movmi	r3, #32
 800881c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008820:	0711      	lsls	r1, r2, #28
 8008822:	bf44      	itt	mi
 8008824:	232b      	movmi	r3, #43	; 0x2b
 8008826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800882a:	f89a 3000 	ldrb.w	r3, [sl]
 800882e:	2b2a      	cmp	r3, #42	; 0x2a
 8008830:	d015      	beq.n	800885e <_svfiprintf_r+0xf6>
 8008832:	4654      	mov	r4, sl
 8008834:	2000      	movs	r0, #0
 8008836:	f04f 0c0a 	mov.w	ip, #10
 800883a:	9a07      	ldr	r2, [sp, #28]
 800883c:	4621      	mov	r1, r4
 800883e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008842:	3b30      	subs	r3, #48	; 0x30
 8008844:	2b09      	cmp	r3, #9
 8008846:	d94e      	bls.n	80088e6 <_svfiprintf_r+0x17e>
 8008848:	b1b0      	cbz	r0, 8008878 <_svfiprintf_r+0x110>
 800884a:	9207      	str	r2, [sp, #28]
 800884c:	e014      	b.n	8008878 <_svfiprintf_r+0x110>
 800884e:	eba0 0308 	sub.w	r3, r0, r8
 8008852:	fa09 f303 	lsl.w	r3, r9, r3
 8008856:	4313      	orrs	r3, r2
 8008858:	46a2      	mov	sl, r4
 800885a:	9304      	str	r3, [sp, #16]
 800885c:	e7d2      	b.n	8008804 <_svfiprintf_r+0x9c>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	1d19      	adds	r1, r3, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	9103      	str	r1, [sp, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	bfbb      	ittet	lt
 800886a:	425b      	neglt	r3, r3
 800886c:	f042 0202 	orrlt.w	r2, r2, #2
 8008870:	9307      	strge	r3, [sp, #28]
 8008872:	9307      	strlt	r3, [sp, #28]
 8008874:	bfb8      	it	lt
 8008876:	9204      	strlt	r2, [sp, #16]
 8008878:	7823      	ldrb	r3, [r4, #0]
 800887a:	2b2e      	cmp	r3, #46	; 0x2e
 800887c:	d10c      	bne.n	8008898 <_svfiprintf_r+0x130>
 800887e:	7863      	ldrb	r3, [r4, #1]
 8008880:	2b2a      	cmp	r3, #42	; 0x2a
 8008882:	d135      	bne.n	80088f0 <_svfiprintf_r+0x188>
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	3402      	adds	r4, #2
 8008888:	1d1a      	adds	r2, r3, #4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	9203      	str	r2, [sp, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	bfb8      	it	lt
 8008892:	f04f 33ff 	movlt.w	r3, #4294967295
 8008896:	9305      	str	r3, [sp, #20]
 8008898:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008964 <_svfiprintf_r+0x1fc>
 800889c:	2203      	movs	r2, #3
 800889e:	4650      	mov	r0, sl
 80088a0:	7821      	ldrb	r1, [r4, #0]
 80088a2:	f7ff fab3 	bl	8007e0c <memchr>
 80088a6:	b140      	cbz	r0, 80088ba <_svfiprintf_r+0x152>
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	eba0 000a 	sub.w	r0, r0, sl
 80088ae:	fa03 f000 	lsl.w	r0, r3, r0
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	3401      	adds	r4, #1
 80088b6:	4303      	orrs	r3, r0
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088be:	2206      	movs	r2, #6
 80088c0:	4825      	ldr	r0, [pc, #148]	; (8008958 <_svfiprintf_r+0x1f0>)
 80088c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088c6:	f7ff faa1 	bl	8007e0c <memchr>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d038      	beq.n	8008940 <_svfiprintf_r+0x1d8>
 80088ce:	4b23      	ldr	r3, [pc, #140]	; (800895c <_svfiprintf_r+0x1f4>)
 80088d0:	bb1b      	cbnz	r3, 800891a <_svfiprintf_r+0x1b2>
 80088d2:	9b03      	ldr	r3, [sp, #12]
 80088d4:	3307      	adds	r3, #7
 80088d6:	f023 0307 	bic.w	r3, r3, #7
 80088da:	3308      	adds	r3, #8
 80088dc:	9303      	str	r3, [sp, #12]
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	4433      	add	r3, r6
 80088e2:	9309      	str	r3, [sp, #36]	; 0x24
 80088e4:	e767      	b.n	80087b6 <_svfiprintf_r+0x4e>
 80088e6:	460c      	mov	r4, r1
 80088e8:	2001      	movs	r0, #1
 80088ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ee:	e7a5      	b.n	800883c <_svfiprintf_r+0xd4>
 80088f0:	2300      	movs	r3, #0
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4619      	mov	r1, r3
 80088f8:	3401      	adds	r4, #1
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	4620      	mov	r0, r4
 80088fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008902:	3a30      	subs	r2, #48	; 0x30
 8008904:	2a09      	cmp	r2, #9
 8008906:	d903      	bls.n	8008910 <_svfiprintf_r+0x1a8>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0c5      	beq.n	8008898 <_svfiprintf_r+0x130>
 800890c:	9105      	str	r1, [sp, #20]
 800890e:	e7c3      	b.n	8008898 <_svfiprintf_r+0x130>
 8008910:	4604      	mov	r4, r0
 8008912:	2301      	movs	r3, #1
 8008914:	fb0c 2101 	mla	r1, ip, r1, r2
 8008918:	e7f0      	b.n	80088fc <_svfiprintf_r+0x194>
 800891a:	ab03      	add	r3, sp, #12
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	462a      	mov	r2, r5
 8008920:	4638      	mov	r0, r7
 8008922:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <_svfiprintf_r+0x1f8>)
 8008924:	a904      	add	r1, sp, #16
 8008926:	f7fd fff1 	bl	800690c <_printf_float>
 800892a:	1c42      	adds	r2, r0, #1
 800892c:	4606      	mov	r6, r0
 800892e:	d1d6      	bne.n	80088de <_svfiprintf_r+0x176>
 8008930:	89ab      	ldrh	r3, [r5, #12]
 8008932:	065b      	lsls	r3, r3, #25
 8008934:	f53f af2c 	bmi.w	8008790 <_svfiprintf_r+0x28>
 8008938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800893a:	b01d      	add	sp, #116	; 0x74
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	ab03      	add	r3, sp, #12
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	462a      	mov	r2, r5
 8008946:	4638      	mov	r0, r7
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <_svfiprintf_r+0x1f8>)
 800894a:	a904      	add	r1, sp, #16
 800894c:	f7fe fa7a 	bl	8006e44 <_printf_i>
 8008950:	e7eb      	b.n	800892a <_svfiprintf_r+0x1c2>
 8008952:	bf00      	nop
 8008954:	080097cc 	.word	0x080097cc
 8008958:	080097d6 	.word	0x080097d6
 800895c:	0800690d 	.word	0x0800690d
 8008960:	080086b1 	.word	0x080086b1
 8008964:	080097d2 	.word	0x080097d2

08008968 <_sbrk_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	2300      	movs	r3, #0
 800896c:	4d05      	ldr	r5, [pc, #20]	; (8008984 <_sbrk_r+0x1c>)
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7f9 f834 	bl	80019e0 <_sbrk>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_sbrk_r+0x1a>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_sbrk_r+0x1a>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000358 	.word	0x20000358

08008988 <__assert_func>:
 8008988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800898a:	4614      	mov	r4, r2
 800898c:	461a      	mov	r2, r3
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <__assert_func+0x2c>)
 8008990:	4605      	mov	r5, r0
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68d8      	ldr	r0, [r3, #12]
 8008996:	b14c      	cbz	r4, 80089ac <__assert_func+0x24>
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <__assert_func+0x30>)
 800899a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800899e:	9100      	str	r1, [sp, #0]
 80089a0:	462b      	mov	r3, r5
 80089a2:	4906      	ldr	r1, [pc, #24]	; (80089bc <__assert_func+0x34>)
 80089a4:	f000 f80e 	bl	80089c4 <fiprintf>
 80089a8:	f000 faa2 	bl	8008ef0 <abort>
 80089ac:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <__assert_func+0x38>)
 80089ae:	461c      	mov	r4, r3
 80089b0:	e7f3      	b.n	800899a <__assert_func+0x12>
 80089b2:	bf00      	nop
 80089b4:	20000010 	.word	0x20000010
 80089b8:	080097dd 	.word	0x080097dd
 80089bc:	080097ea 	.word	0x080097ea
 80089c0:	08009818 	.word	0x08009818

080089c4 <fiprintf>:
 80089c4:	b40e      	push	{r1, r2, r3}
 80089c6:	b503      	push	{r0, r1, lr}
 80089c8:	4601      	mov	r1, r0
 80089ca:	ab03      	add	r3, sp, #12
 80089cc:	4805      	ldr	r0, [pc, #20]	; (80089e4 <fiprintf+0x20>)
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	6800      	ldr	r0, [r0, #0]
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f000 f88d 	bl	8008af4 <_vfiprintf_r>
 80089da:	b002      	add	sp, #8
 80089dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e0:	b003      	add	sp, #12
 80089e2:	4770      	bx	lr
 80089e4:	20000010 	.word	0x20000010

080089e8 <__ascii_mbtowc>:
 80089e8:	b082      	sub	sp, #8
 80089ea:	b901      	cbnz	r1, 80089ee <__ascii_mbtowc+0x6>
 80089ec:	a901      	add	r1, sp, #4
 80089ee:	b142      	cbz	r2, 8008a02 <__ascii_mbtowc+0x1a>
 80089f0:	b14b      	cbz	r3, 8008a06 <__ascii_mbtowc+0x1e>
 80089f2:	7813      	ldrb	r3, [r2, #0]
 80089f4:	600b      	str	r3, [r1, #0]
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	1e10      	subs	r0, r2, #0
 80089fa:	bf18      	it	ne
 80089fc:	2001      	movne	r0, #1
 80089fe:	b002      	add	sp, #8
 8008a00:	4770      	bx	lr
 8008a02:	4610      	mov	r0, r2
 8008a04:	e7fb      	b.n	80089fe <__ascii_mbtowc+0x16>
 8008a06:	f06f 0001 	mvn.w	r0, #1
 8008a0a:	e7f8      	b.n	80089fe <__ascii_mbtowc+0x16>

08008a0c <memmove>:
 8008a0c:	4288      	cmp	r0, r1
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	eb01 0402 	add.w	r4, r1, r2
 8008a14:	d902      	bls.n	8008a1c <memmove+0x10>
 8008a16:	4284      	cmp	r4, r0
 8008a18:	4623      	mov	r3, r4
 8008a1a:	d807      	bhi.n	8008a2c <memmove+0x20>
 8008a1c:	1e43      	subs	r3, r0, #1
 8008a1e:	42a1      	cmp	r1, r4
 8008a20:	d008      	beq.n	8008a34 <memmove+0x28>
 8008a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a2a:	e7f8      	b.n	8008a1e <memmove+0x12>
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	4402      	add	r2, r0
 8008a30:	428a      	cmp	r2, r1
 8008a32:	d100      	bne.n	8008a36 <memmove+0x2a>
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a3e:	e7f7      	b.n	8008a30 <memmove+0x24>

08008a40 <__malloc_lock>:
 8008a40:	4801      	ldr	r0, [pc, #4]	; (8008a48 <__malloc_lock+0x8>)
 8008a42:	f000 bc15 	b.w	8009270 <__retarget_lock_acquire_recursive>
 8008a46:	bf00      	nop
 8008a48:	20000360 	.word	0x20000360

08008a4c <__malloc_unlock>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	; (8008a54 <__malloc_unlock+0x8>)
 8008a4e:	f000 bc10 	b.w	8009272 <__retarget_lock_release_recursive>
 8008a52:	bf00      	nop
 8008a54:	20000360 	.word	0x20000360

08008a58 <_realloc_r>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	4614      	mov	r4, r2
 8008a5e:	460e      	mov	r6, r1
 8008a60:	b921      	cbnz	r1, 8008a6c <_realloc_r+0x14>
 8008a62:	4611      	mov	r1, r2
 8008a64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a68:	f7ff bdc8 	b.w	80085fc <_malloc_r>
 8008a6c:	b922      	cbnz	r2, 8008a78 <_realloc_r+0x20>
 8008a6e:	f7ff fd79 	bl	8008564 <_free_r>
 8008a72:	4625      	mov	r5, r4
 8008a74:	4628      	mov	r0, r5
 8008a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a78:	f000 fc60 	bl	800933c <_malloc_usable_size_r>
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	d20f      	bcs.n	8008aa0 <_realloc_r+0x48>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4638      	mov	r0, r7
 8008a84:	f7ff fdba 	bl	80085fc <_malloc_r>
 8008a88:	4605      	mov	r5, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d0f2      	beq.n	8008a74 <_realloc_r+0x1c>
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4622      	mov	r2, r4
 8008a92:	f7ff f9c9 	bl	8007e28 <memcpy>
 8008a96:	4631      	mov	r1, r6
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f7ff fd63 	bl	8008564 <_free_r>
 8008a9e:	e7e9      	b.n	8008a74 <_realloc_r+0x1c>
 8008aa0:	4635      	mov	r5, r6
 8008aa2:	e7e7      	b.n	8008a74 <_realloc_r+0x1c>

08008aa4 <__sfputc_r>:
 8008aa4:	6893      	ldr	r3, [r2, #8]
 8008aa6:	b410      	push	{r4}
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	6093      	str	r3, [r2, #8]
 8008aae:	da07      	bge.n	8008ac0 <__sfputc_r+0x1c>
 8008ab0:	6994      	ldr	r4, [r2, #24]
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	db01      	blt.n	8008aba <__sfputc_r+0x16>
 8008ab6:	290a      	cmp	r1, #10
 8008ab8:	d102      	bne.n	8008ac0 <__sfputc_r+0x1c>
 8008aba:	bc10      	pop	{r4}
 8008abc:	f000 b94a 	b.w	8008d54 <__swbuf_r>
 8008ac0:	6813      	ldr	r3, [r2, #0]
 8008ac2:	1c58      	adds	r0, r3, #1
 8008ac4:	6010      	str	r0, [r2, #0]
 8008ac6:	7019      	strb	r1, [r3, #0]
 8008ac8:	4608      	mov	r0, r1
 8008aca:	bc10      	pop	{r4}
 8008acc:	4770      	bx	lr

08008ace <__sfputs_r>:
 8008ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	460f      	mov	r7, r1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	18d5      	adds	r5, r2, r3
 8008ad8:	42ac      	cmp	r4, r5
 8008ada:	d101      	bne.n	8008ae0 <__sfputs_r+0x12>
 8008adc:	2000      	movs	r0, #0
 8008ade:	e007      	b.n	8008af0 <__sfputs_r+0x22>
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae8:	f7ff ffdc 	bl	8008aa4 <__sfputc_r>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d1f3      	bne.n	8008ad8 <__sfputs_r+0xa>
 8008af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008af4 <_vfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	460d      	mov	r5, r1
 8008afa:	4614      	mov	r4, r2
 8008afc:	4698      	mov	r8, r3
 8008afe:	4606      	mov	r6, r0
 8008b00:	b09d      	sub	sp, #116	; 0x74
 8008b02:	b118      	cbz	r0, 8008b0c <_vfiprintf_r+0x18>
 8008b04:	6983      	ldr	r3, [r0, #24]
 8008b06:	b90b      	cbnz	r3, 8008b0c <_vfiprintf_r+0x18>
 8008b08:	f000 fb14 	bl	8009134 <__sinit>
 8008b0c:	4b89      	ldr	r3, [pc, #548]	; (8008d34 <_vfiprintf_r+0x240>)
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	d11b      	bne.n	8008b4a <_vfiprintf_r+0x56>
 8008b12:	6875      	ldr	r5, [r6, #4]
 8008b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b16:	07d9      	lsls	r1, r3, #31
 8008b18:	d405      	bmi.n	8008b26 <_vfiprintf_r+0x32>
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	059a      	lsls	r2, r3, #22
 8008b1e:	d402      	bmi.n	8008b26 <_vfiprintf_r+0x32>
 8008b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b22:	f000 fba5 	bl	8009270 <__retarget_lock_acquire_recursive>
 8008b26:	89ab      	ldrh	r3, [r5, #12]
 8008b28:	071b      	lsls	r3, r3, #28
 8008b2a:	d501      	bpl.n	8008b30 <_vfiprintf_r+0x3c>
 8008b2c:	692b      	ldr	r3, [r5, #16]
 8008b2e:	b9eb      	cbnz	r3, 8008b6c <_vfiprintf_r+0x78>
 8008b30:	4629      	mov	r1, r5
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 f96e 	bl	8008e14 <__swsetup_r>
 8008b38:	b1c0      	cbz	r0, 8008b6c <_vfiprintf_r+0x78>
 8008b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b3c:	07dc      	lsls	r4, r3, #31
 8008b3e:	d50e      	bpl.n	8008b5e <_vfiprintf_r+0x6a>
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	b01d      	add	sp, #116	; 0x74
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <_vfiprintf_r+0x244>)
 8008b4c:	429d      	cmp	r5, r3
 8008b4e:	d101      	bne.n	8008b54 <_vfiprintf_r+0x60>
 8008b50:	68b5      	ldr	r5, [r6, #8]
 8008b52:	e7df      	b.n	8008b14 <_vfiprintf_r+0x20>
 8008b54:	4b79      	ldr	r3, [pc, #484]	; (8008d3c <_vfiprintf_r+0x248>)
 8008b56:	429d      	cmp	r5, r3
 8008b58:	bf08      	it	eq
 8008b5a:	68f5      	ldreq	r5, [r6, #12]
 8008b5c:	e7da      	b.n	8008b14 <_vfiprintf_r+0x20>
 8008b5e:	89ab      	ldrh	r3, [r5, #12]
 8008b60:	0598      	lsls	r0, r3, #22
 8008b62:	d4ed      	bmi.n	8008b40 <_vfiprintf_r+0x4c>
 8008b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b66:	f000 fb84 	bl	8009272 <__retarget_lock_release_recursive>
 8008b6a:	e7e9      	b.n	8008b40 <_vfiprintf_r+0x4c>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b70:	2320      	movs	r3, #32
 8008b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b76:	2330      	movs	r3, #48	; 0x30
 8008b78:	f04f 0901 	mov.w	r9, #1
 8008b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d40 <_vfiprintf_r+0x24c>
 8008b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b88:	4623      	mov	r3, r4
 8008b8a:	469a      	mov	sl, r3
 8008b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b90:	b10a      	cbz	r2, 8008b96 <_vfiprintf_r+0xa2>
 8008b92:	2a25      	cmp	r2, #37	; 0x25
 8008b94:	d1f9      	bne.n	8008b8a <_vfiprintf_r+0x96>
 8008b96:	ebba 0b04 	subs.w	fp, sl, r4
 8008b9a:	d00b      	beq.n	8008bb4 <_vfiprintf_r+0xc0>
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff93 	bl	8008ace <__sfputs_r>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f000 80aa 	beq.w	8008d02 <_vfiprintf_r+0x20e>
 8008bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb0:	445a      	add	r2, fp
 8008bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80a2 	beq.w	8008d02 <_vfiprintf_r+0x20e>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc8:	f10a 0a01 	add.w	sl, sl, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	9307      	str	r3, [sp, #28]
 8008bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008bd6:	4654      	mov	r4, sl
 8008bd8:	2205      	movs	r2, #5
 8008bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bde:	4858      	ldr	r0, [pc, #352]	; (8008d40 <_vfiprintf_r+0x24c>)
 8008be0:	f7ff f914 	bl	8007e0c <memchr>
 8008be4:	9a04      	ldr	r2, [sp, #16]
 8008be6:	b9d8      	cbnz	r0, 8008c20 <_vfiprintf_r+0x12c>
 8008be8:	06d1      	lsls	r1, r2, #27
 8008bea:	bf44      	itt	mi
 8008bec:	2320      	movmi	r3, #32
 8008bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf2:	0713      	lsls	r3, r2, #28
 8008bf4:	bf44      	itt	mi
 8008bf6:	232b      	movmi	r3, #43	; 0x2b
 8008bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008c00:	2b2a      	cmp	r3, #42	; 0x2a
 8008c02:	d015      	beq.n	8008c30 <_vfiprintf_r+0x13c>
 8008c04:	4654      	mov	r4, sl
 8008c06:	2000      	movs	r0, #0
 8008c08:	f04f 0c0a 	mov.w	ip, #10
 8008c0c:	9a07      	ldr	r2, [sp, #28]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c14:	3b30      	subs	r3, #48	; 0x30
 8008c16:	2b09      	cmp	r3, #9
 8008c18:	d94e      	bls.n	8008cb8 <_vfiprintf_r+0x1c4>
 8008c1a:	b1b0      	cbz	r0, 8008c4a <_vfiprintf_r+0x156>
 8008c1c:	9207      	str	r2, [sp, #28]
 8008c1e:	e014      	b.n	8008c4a <_vfiprintf_r+0x156>
 8008c20:	eba0 0308 	sub.w	r3, r0, r8
 8008c24:	fa09 f303 	lsl.w	r3, r9, r3
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	46a2      	mov	sl, r4
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	e7d2      	b.n	8008bd6 <_vfiprintf_r+0xe2>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	1d19      	adds	r1, r3, #4
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	9103      	str	r1, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfbb      	ittet	lt
 8008c3c:	425b      	neglt	r3, r3
 8008c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c42:	9307      	strge	r3, [sp, #28]
 8008c44:	9307      	strlt	r3, [sp, #28]
 8008c46:	bfb8      	it	lt
 8008c48:	9204      	strlt	r2, [sp, #16]
 8008c4a:	7823      	ldrb	r3, [r4, #0]
 8008c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c4e:	d10c      	bne.n	8008c6a <_vfiprintf_r+0x176>
 8008c50:	7863      	ldrb	r3, [r4, #1]
 8008c52:	2b2a      	cmp	r3, #42	; 0x2a
 8008c54:	d135      	bne.n	8008cc2 <_vfiprintf_r+0x1ce>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3402      	adds	r4, #2
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	9203      	str	r2, [sp, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bfb8      	it	lt
 8008c64:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d50 <_vfiprintf_r+0x25c>
 8008c6e:	2203      	movs	r2, #3
 8008c70:	4650      	mov	r0, sl
 8008c72:	7821      	ldrb	r1, [r4, #0]
 8008c74:	f7ff f8ca 	bl	8007e0c <memchr>
 8008c78:	b140      	cbz	r0, 8008c8c <_vfiprintf_r+0x198>
 8008c7a:	2340      	movs	r3, #64	; 0x40
 8008c7c:	eba0 000a 	sub.w	r0, r0, sl
 8008c80:	fa03 f000 	lsl.w	r0, r3, r0
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	3401      	adds	r4, #1
 8008c88:	4303      	orrs	r3, r0
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	2206      	movs	r2, #6
 8008c92:	482c      	ldr	r0, [pc, #176]	; (8008d44 <_vfiprintf_r+0x250>)
 8008c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c98:	f7ff f8b8 	bl	8007e0c <memchr>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d03f      	beq.n	8008d20 <_vfiprintf_r+0x22c>
 8008ca0:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <_vfiprintf_r+0x254>)
 8008ca2:	bb1b      	cbnz	r3, 8008cec <_vfiprintf_r+0x1f8>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	3307      	adds	r3, #7
 8008ca8:	f023 0307 	bic.w	r3, r3, #7
 8008cac:	3308      	adds	r3, #8
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb2:	443b      	add	r3, r7
 8008cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb6:	e767      	b.n	8008b88 <_vfiprintf_r+0x94>
 8008cb8:	460c      	mov	r4, r1
 8008cba:	2001      	movs	r0, #1
 8008cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc0:	e7a5      	b.n	8008c0e <_vfiprintf_r+0x11a>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f04f 0c0a 	mov.w	ip, #10
 8008cc8:	4619      	mov	r1, r3
 8008cca:	3401      	adds	r4, #1
 8008ccc:	9305      	str	r3, [sp, #20]
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd4:	3a30      	subs	r2, #48	; 0x30
 8008cd6:	2a09      	cmp	r2, #9
 8008cd8:	d903      	bls.n	8008ce2 <_vfiprintf_r+0x1ee>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c5      	beq.n	8008c6a <_vfiprintf_r+0x176>
 8008cde:	9105      	str	r1, [sp, #20]
 8008ce0:	e7c3      	b.n	8008c6a <_vfiprintf_r+0x176>
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cea:	e7f0      	b.n	8008cce <_vfiprintf_r+0x1da>
 8008cec:	ab03      	add	r3, sp, #12
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <_vfiprintf_r+0x258>)
 8008cf6:	a904      	add	r1, sp, #16
 8008cf8:	f7fd fe08 	bl	800690c <_printf_float>
 8008cfc:	4607      	mov	r7, r0
 8008cfe:	1c78      	adds	r0, r7, #1
 8008d00:	d1d6      	bne.n	8008cb0 <_vfiprintf_r+0x1bc>
 8008d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d04:	07d9      	lsls	r1, r3, #31
 8008d06:	d405      	bmi.n	8008d14 <_vfiprintf_r+0x220>
 8008d08:	89ab      	ldrh	r3, [r5, #12]
 8008d0a:	059a      	lsls	r2, r3, #22
 8008d0c:	d402      	bmi.n	8008d14 <_vfiprintf_r+0x220>
 8008d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d10:	f000 faaf 	bl	8009272 <__retarget_lock_release_recursive>
 8008d14:	89ab      	ldrh	r3, [r5, #12]
 8008d16:	065b      	lsls	r3, r3, #25
 8008d18:	f53f af12 	bmi.w	8008b40 <_vfiprintf_r+0x4c>
 8008d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1e:	e711      	b.n	8008b44 <_vfiprintf_r+0x50>
 8008d20:	ab03      	add	r3, sp, #12
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <_vfiprintf_r+0x258>)
 8008d2a:	a904      	add	r1, sp, #16
 8008d2c:	f7fe f88a 	bl	8006e44 <_printf_i>
 8008d30:	e7e4      	b.n	8008cfc <_vfiprintf_r+0x208>
 8008d32:	bf00      	nop
 8008d34:	08009944 	.word	0x08009944
 8008d38:	08009964 	.word	0x08009964
 8008d3c:	08009924 	.word	0x08009924
 8008d40:	080097cc 	.word	0x080097cc
 8008d44:	080097d6 	.word	0x080097d6
 8008d48:	0800690d 	.word	0x0800690d
 8008d4c:	08008acf 	.word	0x08008acf
 8008d50:	080097d2 	.word	0x080097d2

08008d54 <__swbuf_r>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	460e      	mov	r6, r1
 8008d58:	4614      	mov	r4, r2
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	b118      	cbz	r0, 8008d66 <__swbuf_r+0x12>
 8008d5e:	6983      	ldr	r3, [r0, #24]
 8008d60:	b90b      	cbnz	r3, 8008d66 <__swbuf_r+0x12>
 8008d62:	f000 f9e7 	bl	8009134 <__sinit>
 8008d66:	4b21      	ldr	r3, [pc, #132]	; (8008dec <__swbuf_r+0x98>)
 8008d68:	429c      	cmp	r4, r3
 8008d6a:	d12b      	bne.n	8008dc4 <__swbuf_r+0x70>
 8008d6c:	686c      	ldr	r4, [r5, #4]
 8008d6e:	69a3      	ldr	r3, [r4, #24]
 8008d70:	60a3      	str	r3, [r4, #8]
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	071a      	lsls	r2, r3, #28
 8008d76:	d52f      	bpl.n	8008dd8 <__swbuf_r+0x84>
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	b36b      	cbz	r3, 8008dd8 <__swbuf_r+0x84>
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	b2f6      	uxtb	r6, r6
 8008d82:	1ac0      	subs	r0, r0, r3
 8008d84:	6963      	ldr	r3, [r4, #20]
 8008d86:	4637      	mov	r7, r6
 8008d88:	4283      	cmp	r3, r0
 8008d8a:	dc04      	bgt.n	8008d96 <__swbuf_r+0x42>
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f000 f93c 	bl	800900c <_fflush_r>
 8008d94:	bb30      	cbnz	r0, 8008de4 <__swbuf_r+0x90>
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	3001      	adds	r0, #1
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	60a3      	str	r3, [r4, #8]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	6022      	str	r2, [r4, #0]
 8008da4:	701e      	strb	r6, [r3, #0]
 8008da6:	6963      	ldr	r3, [r4, #20]
 8008da8:	4283      	cmp	r3, r0
 8008daa:	d004      	beq.n	8008db6 <__swbuf_r+0x62>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	07db      	lsls	r3, r3, #31
 8008db0:	d506      	bpl.n	8008dc0 <__swbuf_r+0x6c>
 8008db2:	2e0a      	cmp	r6, #10
 8008db4:	d104      	bne.n	8008dc0 <__swbuf_r+0x6c>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f927 	bl	800900c <_fflush_r>
 8008dbe:	b988      	cbnz	r0, 8008de4 <__swbuf_r+0x90>
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <__swbuf_r+0x9c>)
 8008dc6:	429c      	cmp	r4, r3
 8008dc8:	d101      	bne.n	8008dce <__swbuf_r+0x7a>
 8008dca:	68ac      	ldr	r4, [r5, #8]
 8008dcc:	e7cf      	b.n	8008d6e <__swbuf_r+0x1a>
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <__swbuf_r+0xa0>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	bf08      	it	eq
 8008dd4:	68ec      	ldreq	r4, [r5, #12]
 8008dd6:	e7ca      	b.n	8008d6e <__swbuf_r+0x1a>
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 f81a 	bl	8008e14 <__swsetup_r>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d0cb      	beq.n	8008d7c <__swbuf_r+0x28>
 8008de4:	f04f 37ff 	mov.w	r7, #4294967295
 8008de8:	e7ea      	b.n	8008dc0 <__swbuf_r+0x6c>
 8008dea:	bf00      	nop
 8008dec:	08009944 	.word	0x08009944
 8008df0:	08009964 	.word	0x08009964
 8008df4:	08009924 	.word	0x08009924

08008df8 <__ascii_wctomb>:
 8008df8:	4603      	mov	r3, r0
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	b141      	cbz	r1, 8008e10 <__ascii_wctomb+0x18>
 8008dfe:	2aff      	cmp	r2, #255	; 0xff
 8008e00:	d904      	bls.n	8008e0c <__ascii_wctomb+0x14>
 8008e02:	228a      	movs	r2, #138	; 0x8a
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	4770      	bx	lr
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	700a      	strb	r2, [r1, #0]
 8008e10:	4770      	bx	lr
	...

08008e14 <__swsetup_r>:
 8008e14:	4b32      	ldr	r3, [pc, #200]	; (8008ee0 <__swsetup_r+0xcc>)
 8008e16:	b570      	push	{r4, r5, r6, lr}
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	b125      	cbz	r5, 8008e2a <__swsetup_r+0x16>
 8008e20:	69ab      	ldr	r3, [r5, #24]
 8008e22:	b913      	cbnz	r3, 8008e2a <__swsetup_r+0x16>
 8008e24:	4628      	mov	r0, r5
 8008e26:	f000 f985 	bl	8009134 <__sinit>
 8008e2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ee4 <__swsetup_r+0xd0>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	d10f      	bne.n	8008e50 <__swsetup_r+0x3c>
 8008e30:	686c      	ldr	r4, [r5, #4]
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e38:	0719      	lsls	r1, r3, #28
 8008e3a:	d42c      	bmi.n	8008e96 <__swsetup_r+0x82>
 8008e3c:	06dd      	lsls	r5, r3, #27
 8008e3e:	d411      	bmi.n	8008e64 <__swsetup_r+0x50>
 8008e40:	2309      	movs	r3, #9
 8008e42:	6033      	str	r3, [r6, #0]
 8008e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	e03e      	b.n	8008ece <__swsetup_r+0xba>
 8008e50:	4b25      	ldr	r3, [pc, #148]	; (8008ee8 <__swsetup_r+0xd4>)
 8008e52:	429c      	cmp	r4, r3
 8008e54:	d101      	bne.n	8008e5a <__swsetup_r+0x46>
 8008e56:	68ac      	ldr	r4, [r5, #8]
 8008e58:	e7eb      	b.n	8008e32 <__swsetup_r+0x1e>
 8008e5a:	4b24      	ldr	r3, [pc, #144]	; (8008eec <__swsetup_r+0xd8>)
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	bf08      	it	eq
 8008e60:	68ec      	ldreq	r4, [r5, #12]
 8008e62:	e7e6      	b.n	8008e32 <__swsetup_r+0x1e>
 8008e64:	0758      	lsls	r0, r3, #29
 8008e66:	d512      	bpl.n	8008e8e <__swsetup_r+0x7a>
 8008e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e6a:	b141      	cbz	r1, 8008e7e <__swsetup_r+0x6a>
 8008e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e70:	4299      	cmp	r1, r3
 8008e72:	d002      	beq.n	8008e7a <__swsetup_r+0x66>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff fb75 	bl	8008564 <_free_r>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	6923      	ldr	r3, [r4, #16]
 8008e98:	b94b      	cbnz	r3, 8008eae <__swsetup_r+0x9a>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea4:	d003      	beq.n	8008eae <__swsetup_r+0x9a>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 fa07 	bl	80092bc <__smakebuf_r>
 8008eae:	89a0      	ldrh	r0, [r4, #12]
 8008eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eb4:	f010 0301 	ands.w	r3, r0, #1
 8008eb8:	d00a      	beq.n	8008ed0 <__swsetup_r+0xbc>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	6963      	ldr	r3, [r4, #20]
 8008ec0:	425b      	negs	r3, r3
 8008ec2:	61a3      	str	r3, [r4, #24]
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	b943      	cbnz	r3, 8008eda <__swsetup_r+0xc6>
 8008ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ecc:	d1ba      	bne.n	8008e44 <__swsetup_r+0x30>
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	0781      	lsls	r1, r0, #30
 8008ed2:	bf58      	it	pl
 8008ed4:	6963      	ldrpl	r3, [r4, #20]
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	e7f4      	b.n	8008ec4 <__swsetup_r+0xb0>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e7f7      	b.n	8008ece <__swsetup_r+0xba>
 8008ede:	bf00      	nop
 8008ee0:	20000010 	.word	0x20000010
 8008ee4:	08009944 	.word	0x08009944
 8008ee8:	08009964 	.word	0x08009964
 8008eec:	08009924 	.word	0x08009924

08008ef0 <abort>:
 8008ef0:	2006      	movs	r0, #6
 8008ef2:	b508      	push	{r3, lr}
 8008ef4:	f000 fa52 	bl	800939c <raise>
 8008ef8:	2001      	movs	r0, #1
 8008efa:	f7f8 fcfe 	bl	80018fa <_exit>
	...

08008f00 <__sflush_r>:
 8008f00:	898a      	ldrh	r2, [r1, #12]
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	4605      	mov	r5, r0
 8008f08:	0710      	lsls	r0, r2, #28
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	d458      	bmi.n	8008fc0 <__sflush_r+0xc0>
 8008f0e:	684b      	ldr	r3, [r1, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc05      	bgt.n	8008f20 <__sflush_r+0x20>
 8008f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dc02      	bgt.n	8008f20 <__sflush_r+0x20>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	d0f9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f2c:	682f      	ldr	r7, [r5, #0]
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	d032      	beq.n	8008f98 <__sflush_r+0x98>
 8008f32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	075a      	lsls	r2, r3, #29
 8008f38:	d505      	bpl.n	8008f46 <__sflush_r+0x46>
 8008f3a:	6863      	ldr	r3, [r4, #4]
 8008f3c:	1ac0      	subs	r0, r0, r3
 8008f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f40:	b10b      	cbz	r3, 8008f46 <__sflush_r+0x46>
 8008f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f44:	1ac0      	subs	r0, r0, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	4602      	mov	r2, r0
 8008f4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	6a21      	ldr	r1, [r4, #32]
 8008f50:	47b0      	blx	r6
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	d106      	bne.n	8008f66 <__sflush_r+0x66>
 8008f58:	6829      	ldr	r1, [r5, #0]
 8008f5a:	291d      	cmp	r1, #29
 8008f5c:	d82c      	bhi.n	8008fb8 <__sflush_r+0xb8>
 8008f5e:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <__sflush_r+0x108>)
 8008f60:	40ca      	lsrs	r2, r1
 8008f62:	07d6      	lsls	r6, r2, #31
 8008f64:	d528      	bpl.n	8008fb8 <__sflush_r+0xb8>
 8008f66:	2200      	movs	r2, #0
 8008f68:	6062      	str	r2, [r4, #4]
 8008f6a:	6922      	ldr	r2, [r4, #16]
 8008f6c:	04d9      	lsls	r1, r3, #19
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	d504      	bpl.n	8008f7c <__sflush_r+0x7c>
 8008f72:	1c42      	adds	r2, r0, #1
 8008f74:	d101      	bne.n	8008f7a <__sflush_r+0x7a>
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	b903      	cbnz	r3, 8008f7c <__sflush_r+0x7c>
 8008f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7e:	602f      	str	r7, [r5, #0]
 8008f80:	2900      	cmp	r1, #0
 8008f82:	d0ca      	beq.n	8008f1a <__sflush_r+0x1a>
 8008f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	d002      	beq.n	8008f92 <__sflush_r+0x92>
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f7ff fae9 	bl	8008564 <_free_r>
 8008f92:	2000      	movs	r0, #0
 8008f94:	6360      	str	r0, [r4, #52]	; 0x34
 8008f96:	e7c1      	b.n	8008f1c <__sflush_r+0x1c>
 8008f98:	6a21      	ldr	r1, [r4, #32]
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b0      	blx	r6
 8008fa0:	1c41      	adds	r1, r0, #1
 8008fa2:	d1c7      	bne.n	8008f34 <__sflush_r+0x34>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0c4      	beq.n	8008f34 <__sflush_r+0x34>
 8008faa:	2b1d      	cmp	r3, #29
 8008fac:	d001      	beq.n	8008fb2 <__sflush_r+0xb2>
 8008fae:	2b16      	cmp	r3, #22
 8008fb0:	d101      	bne.n	8008fb6 <__sflush_r+0xb6>
 8008fb2:	602f      	str	r7, [r5, #0]
 8008fb4:	e7b1      	b.n	8008f1a <__sflush_r+0x1a>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	e7ad      	b.n	8008f1c <__sflush_r+0x1c>
 8008fc0:	690f      	ldr	r7, [r1, #16]
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	d0a9      	beq.n	8008f1a <__sflush_r+0x1a>
 8008fc6:	0793      	lsls	r3, r2, #30
 8008fc8:	bf18      	it	ne
 8008fca:	2300      	movne	r3, #0
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	bf08      	it	eq
 8008fd0:	694b      	ldreq	r3, [r1, #20]
 8008fd2:	eba6 0807 	sub.w	r8, r6, r7
 8008fd6:	600f      	str	r7, [r1, #0]
 8008fd8:	608b      	str	r3, [r1, #8]
 8008fda:	f1b8 0f00 	cmp.w	r8, #0
 8008fde:	dd9c      	ble.n	8008f1a <__sflush_r+0x1a>
 8008fe0:	4643      	mov	r3, r8
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fea:	47b0      	blx	r6
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dc06      	bgt.n	8008ffe <__sflush_r+0xfe>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	e78e      	b.n	8008f1c <__sflush_r+0x1c>
 8008ffe:	4407      	add	r7, r0
 8009000:	eba8 0800 	sub.w	r8, r8, r0
 8009004:	e7e9      	b.n	8008fda <__sflush_r+0xda>
 8009006:	bf00      	nop
 8009008:	20400001 	.word	0x20400001

0800900c <_fflush_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	4605      	mov	r5, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b913      	cbnz	r3, 800901c <_fflush_r+0x10>
 8009016:	2500      	movs	r5, #0
 8009018:	4628      	mov	r0, r5
 800901a:	bd38      	pop	{r3, r4, r5, pc}
 800901c:	b118      	cbz	r0, 8009026 <_fflush_r+0x1a>
 800901e:	6983      	ldr	r3, [r0, #24]
 8009020:	b90b      	cbnz	r3, 8009026 <_fflush_r+0x1a>
 8009022:	f000 f887 	bl	8009134 <__sinit>
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <_fflush_r+0x6c>)
 8009028:	429c      	cmp	r4, r3
 800902a:	d11b      	bne.n	8009064 <_fflush_r+0x58>
 800902c:	686c      	ldr	r4, [r5, #4]
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0ef      	beq.n	8009016 <_fflush_r+0xa>
 8009036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009038:	07d0      	lsls	r0, r2, #31
 800903a:	d404      	bmi.n	8009046 <_fflush_r+0x3a>
 800903c:	0599      	lsls	r1, r3, #22
 800903e:	d402      	bmi.n	8009046 <_fflush_r+0x3a>
 8009040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009042:	f000 f915 	bl	8009270 <__retarget_lock_acquire_recursive>
 8009046:	4628      	mov	r0, r5
 8009048:	4621      	mov	r1, r4
 800904a:	f7ff ff59 	bl	8008f00 <__sflush_r>
 800904e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009050:	4605      	mov	r5, r0
 8009052:	07da      	lsls	r2, r3, #31
 8009054:	d4e0      	bmi.n	8009018 <_fflush_r+0xc>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	d4dd      	bmi.n	8009018 <_fflush_r+0xc>
 800905c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905e:	f000 f908 	bl	8009272 <__retarget_lock_release_recursive>
 8009062:	e7d9      	b.n	8009018 <_fflush_r+0xc>
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <_fflush_r+0x70>)
 8009066:	429c      	cmp	r4, r3
 8009068:	d101      	bne.n	800906e <_fflush_r+0x62>
 800906a:	68ac      	ldr	r4, [r5, #8]
 800906c:	e7df      	b.n	800902e <_fflush_r+0x22>
 800906e:	4b04      	ldr	r3, [pc, #16]	; (8009080 <_fflush_r+0x74>)
 8009070:	429c      	cmp	r4, r3
 8009072:	bf08      	it	eq
 8009074:	68ec      	ldreq	r4, [r5, #12]
 8009076:	e7da      	b.n	800902e <_fflush_r+0x22>
 8009078:	08009944 	.word	0x08009944
 800907c:	08009964 	.word	0x08009964
 8009080:	08009924 	.word	0x08009924

08009084 <std>:
 8009084:	2300      	movs	r3, #0
 8009086:	b510      	push	{r4, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	e9c0 3300 	strd	r3, r3, [r0]
 800908e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009092:	6083      	str	r3, [r0, #8]
 8009094:	8181      	strh	r1, [r0, #12]
 8009096:	6643      	str	r3, [r0, #100]	; 0x64
 8009098:	81c2      	strh	r2, [r0, #14]
 800909a:	6183      	str	r3, [r0, #24]
 800909c:	4619      	mov	r1, r3
 800909e:	2208      	movs	r2, #8
 80090a0:	305c      	adds	r0, #92	; 0x5c
 80090a2:	f7fd fb8d 	bl	80067c0 <memset>
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <std+0x38>)
 80090a8:	6224      	str	r4, [r4, #32]
 80090aa:	6263      	str	r3, [r4, #36]	; 0x24
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <std+0x3c>)
 80090ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <std+0x40>)
 80090b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <std+0x44>)
 80090b6:	6323      	str	r3, [r4, #48]	; 0x30
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	080093d5 	.word	0x080093d5
 80090c0:	080093f7 	.word	0x080093f7
 80090c4:	0800942f 	.word	0x0800942f
 80090c8:	08009453 	.word	0x08009453

080090cc <_cleanup_r>:
 80090cc:	4901      	ldr	r1, [pc, #4]	; (80090d4 <_cleanup_r+0x8>)
 80090ce:	f000 b8af 	b.w	8009230 <_fwalk_reent>
 80090d2:	bf00      	nop
 80090d4:	0800900d 	.word	0x0800900d

080090d8 <__sfmoreglue>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	2568      	movs	r5, #104	; 0x68
 80090dc:	1e4a      	subs	r2, r1, #1
 80090de:	4355      	muls	r5, r2
 80090e0:	460e      	mov	r6, r1
 80090e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090e6:	f7ff fa89 	bl	80085fc <_malloc_r>
 80090ea:	4604      	mov	r4, r0
 80090ec:	b140      	cbz	r0, 8009100 <__sfmoreglue+0x28>
 80090ee:	2100      	movs	r1, #0
 80090f0:	e9c0 1600 	strd	r1, r6, [r0]
 80090f4:	300c      	adds	r0, #12
 80090f6:	60a0      	str	r0, [r4, #8]
 80090f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090fc:	f7fd fb60 	bl	80067c0 <memset>
 8009100:	4620      	mov	r0, r4
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <__sfp_lock_acquire>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__sfp_lock_acquire+0x8>)
 8009106:	f000 b8b3 	b.w	8009270 <__retarget_lock_acquire_recursive>
 800910a:	bf00      	nop
 800910c:	20000364 	.word	0x20000364

08009110 <__sfp_lock_release>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__sfp_lock_release+0x8>)
 8009112:	f000 b8ae 	b.w	8009272 <__retarget_lock_release_recursive>
 8009116:	bf00      	nop
 8009118:	20000364 	.word	0x20000364

0800911c <__sinit_lock_acquire>:
 800911c:	4801      	ldr	r0, [pc, #4]	; (8009124 <__sinit_lock_acquire+0x8>)
 800911e:	f000 b8a7 	b.w	8009270 <__retarget_lock_acquire_recursive>
 8009122:	bf00      	nop
 8009124:	2000035f 	.word	0x2000035f

08009128 <__sinit_lock_release>:
 8009128:	4801      	ldr	r0, [pc, #4]	; (8009130 <__sinit_lock_release+0x8>)
 800912a:	f000 b8a2 	b.w	8009272 <__retarget_lock_release_recursive>
 800912e:	bf00      	nop
 8009130:	2000035f 	.word	0x2000035f

08009134 <__sinit>:
 8009134:	b510      	push	{r4, lr}
 8009136:	4604      	mov	r4, r0
 8009138:	f7ff fff0 	bl	800911c <__sinit_lock_acquire>
 800913c:	69a3      	ldr	r3, [r4, #24]
 800913e:	b11b      	cbz	r3, 8009148 <__sinit+0x14>
 8009140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009144:	f7ff bff0 	b.w	8009128 <__sinit_lock_release>
 8009148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800914c:	6523      	str	r3, [r4, #80]	; 0x50
 800914e:	4b13      	ldr	r3, [pc, #76]	; (800919c <__sinit+0x68>)
 8009150:	4a13      	ldr	r2, [pc, #76]	; (80091a0 <__sinit+0x6c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	62a2      	str	r2, [r4, #40]	; 0x28
 8009156:	42a3      	cmp	r3, r4
 8009158:	bf08      	it	eq
 800915a:	2301      	moveq	r3, #1
 800915c:	4620      	mov	r0, r4
 800915e:	bf08      	it	eq
 8009160:	61a3      	streq	r3, [r4, #24]
 8009162:	f000 f81f 	bl	80091a4 <__sfp>
 8009166:	6060      	str	r0, [r4, #4]
 8009168:	4620      	mov	r0, r4
 800916a:	f000 f81b 	bl	80091a4 <__sfp>
 800916e:	60a0      	str	r0, [r4, #8]
 8009170:	4620      	mov	r0, r4
 8009172:	f000 f817 	bl	80091a4 <__sfp>
 8009176:	2200      	movs	r2, #0
 8009178:	2104      	movs	r1, #4
 800917a:	60e0      	str	r0, [r4, #12]
 800917c:	6860      	ldr	r0, [r4, #4]
 800917e:	f7ff ff81 	bl	8009084 <std>
 8009182:	2201      	movs	r2, #1
 8009184:	2109      	movs	r1, #9
 8009186:	68a0      	ldr	r0, [r4, #8]
 8009188:	f7ff ff7c 	bl	8009084 <std>
 800918c:	2202      	movs	r2, #2
 800918e:	2112      	movs	r1, #18
 8009190:	68e0      	ldr	r0, [r4, #12]
 8009192:	f7ff ff77 	bl	8009084 <std>
 8009196:	2301      	movs	r3, #1
 8009198:	61a3      	str	r3, [r4, #24]
 800919a:	e7d1      	b.n	8009140 <__sinit+0xc>
 800919c:	080095a0 	.word	0x080095a0
 80091a0:	080090cd 	.word	0x080090cd

080091a4 <__sfp>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	4607      	mov	r7, r0
 80091a8:	f7ff ffac 	bl	8009104 <__sfp_lock_acquire>
 80091ac:	4b1e      	ldr	r3, [pc, #120]	; (8009228 <__sfp+0x84>)
 80091ae:	681e      	ldr	r6, [r3, #0]
 80091b0:	69b3      	ldr	r3, [r6, #24]
 80091b2:	b913      	cbnz	r3, 80091ba <__sfp+0x16>
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff ffbd 	bl	8009134 <__sinit>
 80091ba:	3648      	adds	r6, #72	; 0x48
 80091bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	d503      	bpl.n	80091cc <__sfp+0x28>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	b30b      	cbz	r3, 800920c <__sfp+0x68>
 80091c8:	6836      	ldr	r6, [r6, #0]
 80091ca:	e7f7      	b.n	80091bc <__sfp+0x18>
 80091cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d0:	b9d5      	cbnz	r5, 8009208 <__sfp+0x64>
 80091d2:	4b16      	ldr	r3, [pc, #88]	; (800922c <__sfp+0x88>)
 80091d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	6665      	str	r5, [r4, #100]	; 0x64
 80091dc:	f000 f847 	bl	800926e <__retarget_lock_init_recursive>
 80091e0:	f7ff ff96 	bl	8009110 <__sfp_lock_release>
 80091e4:	2208      	movs	r2, #8
 80091e6:	4629      	mov	r1, r5
 80091e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	61a5      	str	r5, [r4, #24]
 80091f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091f8:	f7fd fae2 	bl	80067c0 <memset>
 80091fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009204:	4620      	mov	r0, r4
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	3468      	adds	r4, #104	; 0x68
 800920a:	e7d9      	b.n	80091c0 <__sfp+0x1c>
 800920c:	2104      	movs	r1, #4
 800920e:	4638      	mov	r0, r7
 8009210:	f7ff ff62 	bl	80090d8 <__sfmoreglue>
 8009214:	4604      	mov	r4, r0
 8009216:	6030      	str	r0, [r6, #0]
 8009218:	2800      	cmp	r0, #0
 800921a:	d1d5      	bne.n	80091c8 <__sfp+0x24>
 800921c:	f7ff ff78 	bl	8009110 <__sfp_lock_release>
 8009220:	230c      	movs	r3, #12
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	e7ee      	b.n	8009204 <__sfp+0x60>
 8009226:	bf00      	nop
 8009228:	080095a0 	.word	0x080095a0
 800922c:	ffff0001 	.word	0xffff0001

08009230 <_fwalk_reent>:
 8009230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009234:	4606      	mov	r6, r0
 8009236:	4688      	mov	r8, r1
 8009238:	2700      	movs	r7, #0
 800923a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800923e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009242:	f1b9 0901 	subs.w	r9, r9, #1
 8009246:	d505      	bpl.n	8009254 <_fwalk_reent+0x24>
 8009248:	6824      	ldr	r4, [r4, #0]
 800924a:	2c00      	cmp	r4, #0
 800924c:	d1f7      	bne.n	800923e <_fwalk_reent+0xe>
 800924e:	4638      	mov	r0, r7
 8009250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009254:	89ab      	ldrh	r3, [r5, #12]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d907      	bls.n	800926a <_fwalk_reent+0x3a>
 800925a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800925e:	3301      	adds	r3, #1
 8009260:	d003      	beq.n	800926a <_fwalk_reent+0x3a>
 8009262:	4629      	mov	r1, r5
 8009264:	4630      	mov	r0, r6
 8009266:	47c0      	blx	r8
 8009268:	4307      	orrs	r7, r0
 800926a:	3568      	adds	r5, #104	; 0x68
 800926c:	e7e9      	b.n	8009242 <_fwalk_reent+0x12>

0800926e <__retarget_lock_init_recursive>:
 800926e:	4770      	bx	lr

08009270 <__retarget_lock_acquire_recursive>:
 8009270:	4770      	bx	lr

08009272 <__retarget_lock_release_recursive>:
 8009272:	4770      	bx	lr

08009274 <__swhatbuf_r>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	460e      	mov	r6, r1
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	4614      	mov	r4, r2
 800927e:	2900      	cmp	r1, #0
 8009280:	461d      	mov	r5, r3
 8009282:	b096      	sub	sp, #88	; 0x58
 8009284:	da07      	bge.n	8009296 <__swhatbuf_r+0x22>
 8009286:	2300      	movs	r3, #0
 8009288:	602b      	str	r3, [r5, #0]
 800928a:	89b3      	ldrh	r3, [r6, #12]
 800928c:	061a      	lsls	r2, r3, #24
 800928e:	d410      	bmi.n	80092b2 <__swhatbuf_r+0x3e>
 8009290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009294:	e00e      	b.n	80092b4 <__swhatbuf_r+0x40>
 8009296:	466a      	mov	r2, sp
 8009298:	f000 f902 	bl	80094a0 <_fstat_r>
 800929c:	2800      	cmp	r0, #0
 800929e:	dbf2      	blt.n	8009286 <__swhatbuf_r+0x12>
 80092a0:	9a01      	ldr	r2, [sp, #4]
 80092a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092aa:	425a      	negs	r2, r3
 80092ac:	415a      	adcs	r2, r3
 80092ae:	602a      	str	r2, [r5, #0]
 80092b0:	e7ee      	b.n	8009290 <__swhatbuf_r+0x1c>
 80092b2:	2340      	movs	r3, #64	; 0x40
 80092b4:	2000      	movs	r0, #0
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	b016      	add	sp, #88	; 0x58
 80092ba:	bd70      	pop	{r4, r5, r6, pc}

080092bc <__smakebuf_r>:
 80092bc:	898b      	ldrh	r3, [r1, #12]
 80092be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c0:	079d      	lsls	r5, r3, #30
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	d507      	bpl.n	80092d8 <__smakebuf_r+0x1c>
 80092c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	2301      	movs	r3, #1
 80092d2:	6163      	str	r3, [r4, #20]
 80092d4:	b002      	add	sp, #8
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	466a      	mov	r2, sp
 80092da:	ab01      	add	r3, sp, #4
 80092dc:	f7ff ffca 	bl	8009274 <__swhatbuf_r>
 80092e0:	9900      	ldr	r1, [sp, #0]
 80092e2:	4605      	mov	r5, r0
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff f989 	bl	80085fc <_malloc_r>
 80092ea:	b948      	cbnz	r0, 8009300 <__smakebuf_r+0x44>
 80092ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f0:	059a      	lsls	r2, r3, #22
 80092f2:	d4ef      	bmi.n	80092d4 <__smakebuf_r+0x18>
 80092f4:	f023 0303 	bic.w	r3, r3, #3
 80092f8:	f043 0302 	orr.w	r3, r3, #2
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	e7e3      	b.n	80092c8 <__smakebuf_r+0xc>
 8009300:	4b0d      	ldr	r3, [pc, #52]	; (8009338 <__smakebuf_r+0x7c>)
 8009302:	62b3      	str	r3, [r6, #40]	; 0x28
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	6020      	str	r0, [r4, #0]
 8009308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	6120      	str	r0, [r4, #16]
 8009312:	6163      	str	r3, [r4, #20]
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	b15b      	cbz	r3, 8009330 <__smakebuf_r+0x74>
 8009318:	4630      	mov	r0, r6
 800931a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800931e:	f000 f8d1 	bl	80094c4 <_isatty_r>
 8009322:	b128      	cbz	r0, 8009330 <__smakebuf_r+0x74>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	f023 0303 	bic.w	r3, r3, #3
 800932a:	f043 0301 	orr.w	r3, r3, #1
 800932e:	81a3      	strh	r3, [r4, #12]
 8009330:	89a0      	ldrh	r0, [r4, #12]
 8009332:	4305      	orrs	r5, r0
 8009334:	81a5      	strh	r5, [r4, #12]
 8009336:	e7cd      	b.n	80092d4 <__smakebuf_r+0x18>
 8009338:	080090cd 	.word	0x080090cd

0800933c <_malloc_usable_size_r>:
 800933c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009340:	1f18      	subs	r0, r3, #4
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfbc      	itt	lt
 8009346:	580b      	ldrlt	r3, [r1, r0]
 8009348:	18c0      	addlt	r0, r0, r3
 800934a:	4770      	bx	lr

0800934c <_raise_r>:
 800934c:	291f      	cmp	r1, #31
 800934e:	b538      	push	{r3, r4, r5, lr}
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	d904      	bls.n	8009360 <_raise_r+0x14>
 8009356:	2316      	movs	r3, #22
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	f04f 30ff 	mov.w	r0, #4294967295
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009362:	b112      	cbz	r2, 800936a <_raise_r+0x1e>
 8009364:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009368:	b94b      	cbnz	r3, 800937e <_raise_r+0x32>
 800936a:	4620      	mov	r0, r4
 800936c:	f000 f830 	bl	80093d0 <_getpid_r>
 8009370:	462a      	mov	r2, r5
 8009372:	4601      	mov	r1, r0
 8009374:	4620      	mov	r0, r4
 8009376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800937a:	f000 b817 	b.w	80093ac <_kill_r>
 800937e:	2b01      	cmp	r3, #1
 8009380:	d00a      	beq.n	8009398 <_raise_r+0x4c>
 8009382:	1c59      	adds	r1, r3, #1
 8009384:	d103      	bne.n	800938e <_raise_r+0x42>
 8009386:	2316      	movs	r3, #22
 8009388:	6003      	str	r3, [r0, #0]
 800938a:	2001      	movs	r0, #1
 800938c:	e7e7      	b.n	800935e <_raise_r+0x12>
 800938e:	2400      	movs	r4, #0
 8009390:	4628      	mov	r0, r5
 8009392:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009396:	4798      	blx	r3
 8009398:	2000      	movs	r0, #0
 800939a:	e7e0      	b.n	800935e <_raise_r+0x12>

0800939c <raise>:
 800939c:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <raise+0xc>)
 800939e:	4601      	mov	r1, r0
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	f7ff bfd3 	b.w	800934c <_raise_r>
 80093a6:	bf00      	nop
 80093a8:	20000010 	.word	0x20000010

080093ac <_kill_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	2300      	movs	r3, #0
 80093b0:	4d06      	ldr	r5, [pc, #24]	; (80093cc <_kill_r+0x20>)
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f7f8 fa8e 	bl	80018da <_kill>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	d102      	bne.n	80093c8 <_kill_r+0x1c>
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	b103      	cbz	r3, 80093c8 <_kill_r+0x1c>
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	20000358 	.word	0x20000358

080093d0 <_getpid_r>:
 80093d0:	f7f8 ba7c 	b.w	80018cc <_getpid>

080093d4 <__sread>:
 80093d4:	b510      	push	{r4, lr}
 80093d6:	460c      	mov	r4, r1
 80093d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093dc:	f000 f894 	bl	8009508 <_read_r>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	bfab      	itete	ge
 80093e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093e6:	89a3      	ldrhlt	r3, [r4, #12]
 80093e8:	181b      	addge	r3, r3, r0
 80093ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093ee:	bfac      	ite	ge
 80093f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80093f2:	81a3      	strhlt	r3, [r4, #12]
 80093f4:	bd10      	pop	{r4, pc}

080093f6 <__swrite>:
 80093f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fa:	461f      	mov	r7, r3
 80093fc:	898b      	ldrh	r3, [r1, #12]
 80093fe:	4605      	mov	r5, r0
 8009400:	05db      	lsls	r3, r3, #23
 8009402:	460c      	mov	r4, r1
 8009404:	4616      	mov	r6, r2
 8009406:	d505      	bpl.n	8009414 <__swrite+0x1e>
 8009408:	2302      	movs	r3, #2
 800940a:	2200      	movs	r2, #0
 800940c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009410:	f000 f868 	bl	80094e4 <_lseek_r>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	4632      	mov	r2, r6
 8009418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	4628      	mov	r0, r5
 8009420:	463b      	mov	r3, r7
 8009422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800942a:	f000 b817 	b.w	800945c <_write_r>

0800942e <__sseek>:
 800942e:	b510      	push	{r4, lr}
 8009430:	460c      	mov	r4, r1
 8009432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009436:	f000 f855 	bl	80094e4 <_lseek_r>
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	bf15      	itete	ne
 8009440:	6560      	strne	r0, [r4, #84]	; 0x54
 8009442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800944a:	81a3      	strheq	r3, [r4, #12]
 800944c:	bf18      	it	ne
 800944e:	81a3      	strhne	r3, [r4, #12]
 8009450:	bd10      	pop	{r4, pc}

08009452 <__sclose>:
 8009452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009456:	f000 b813 	b.w	8009480 <_close_r>
	...

0800945c <_write_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4604      	mov	r4, r0
 8009460:	4608      	mov	r0, r1
 8009462:	4611      	mov	r1, r2
 8009464:	2200      	movs	r2, #0
 8009466:	4d05      	ldr	r5, [pc, #20]	; (800947c <_write_r+0x20>)
 8009468:	602a      	str	r2, [r5, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	f7f8 fa6c 	bl	8001948 <_write>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_write_r+0x1e>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_write_r+0x1e>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	20000358 	.word	0x20000358

08009480 <_close_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	2300      	movs	r3, #0
 8009484:	4d05      	ldr	r5, [pc, #20]	; (800949c <_close_r+0x1c>)
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7f8 fa78 	bl	8001980 <_close>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_close_r+0x1a>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_close_r+0x1a>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20000358 	.word	0x20000358

080094a0 <_fstat_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	2300      	movs	r3, #0
 80094a4:	4d06      	ldr	r5, [pc, #24]	; (80094c0 <_fstat_r+0x20>)
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	4611      	mov	r1, r2
 80094ac:	602b      	str	r3, [r5, #0]
 80094ae:	f7f8 fa72 	bl	8001996 <_fstat>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d102      	bne.n	80094bc <_fstat_r+0x1c>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	b103      	cbz	r3, 80094bc <_fstat_r+0x1c>
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	bf00      	nop
 80094c0:	20000358 	.word	0x20000358

080094c4 <_isatty_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	2300      	movs	r3, #0
 80094c8:	4d05      	ldr	r5, [pc, #20]	; (80094e0 <_isatty_r+0x1c>)
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	602b      	str	r3, [r5, #0]
 80094d0:	f7f8 fa70 	bl	80019b4 <_isatty>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_isatty_r+0x1a>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_isatty_r+0x1a>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	20000358 	.word	0x20000358

080094e4 <_lseek_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4604      	mov	r4, r0
 80094e8:	4608      	mov	r0, r1
 80094ea:	4611      	mov	r1, r2
 80094ec:	2200      	movs	r2, #0
 80094ee:	4d05      	ldr	r5, [pc, #20]	; (8009504 <_lseek_r+0x20>)
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	f7f8 fa68 	bl	80019c8 <_lseek>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_lseek_r+0x1e>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_lseek_r+0x1e>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20000358 	.word	0x20000358

08009508 <_read_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	2200      	movs	r2, #0
 8009512:	4d05      	ldr	r5, [pc, #20]	; (8009528 <_read_r+0x20>)
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7f8 f9f9 	bl	800190e <_read>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_read_r+0x1e>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_read_r+0x1e>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20000358 	.word	0x20000358

0800952c <_init>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr

08009538 <_fini>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr
