
logic-design-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800ac28  0800ac28  0001ac28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0b4  0800b0b4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0b4  0800b0b4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0b4  0800b0b4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0b4  0800b0b4  0001b0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0b8  0800b0b8  0001b0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001e8  0800b2a4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800b2a4  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015315  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b54  00000000  00000000  00035526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00038080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00039190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019abc  00000000  00000000  0003a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146b8  00000000  00000000  00053c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4f1  00000000  00000000  00068314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005908  00000000  00000000  000f7858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac0c 	.word	0x0800ac0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ac0c 	.word	0x0800ac0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_f2iz>:
 8000b28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b30:	d30f      	bcc.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_f2iz+0x30>
 8000b3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b44:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b48:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4c:	bf18      	it	ne
 8000b4e:	4240      	negne	r0, r0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr
 8000b58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b5c:	d101      	bne.n	8000b62 <__aeabi_f2iz+0x3a>
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	d105      	bne.n	8000b6e <__aeabi_f2iz+0x46>
 8000b62:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b66:	bf08      	it	eq
 8000b68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <DHT20_Init>:
#include <dht20.h>

#include "i2c_master.h"
#define Slave_address_dht20 0x38

void DHT20_Init(DHT20_t *dht20, I2C_HandleTypeDef *hi2c) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    dht20->hi2c = hi2c;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	601a      	str	r2, [r3, #0]
    dht20->humidity = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
    dht20->temperature = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    dht20->humOffset = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
    dht20->tempOffset = 0;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
    dht20->status = DHT20_OK;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	751a      	strb	r2, [r3, #20]
    dht20->lastRequest = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
    dht20->lastRead = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <DHT20_IsConnected>:



uint8_t DHT20_IsConnected(DHT20_t *dht20) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
    uint8_t dummy = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &dummy, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	f107 020f 	add.w	r2, r7, #15
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	2170      	movs	r1, #112	; 0x70
 8000bde:	f002 fa13 	bl	8003008 <HAL_I2C_Master_Transmit>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <DHT20_IsConnected+0x2c>
        return 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <DHT20_IsConnected+0x2e>
    }
    return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <DHT20_RequestData>:

uint8_t DHT20_RequestData(DHT20_t *dht20) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
    uint8_t data[3] = {0xAC, 0x33, 0x00};
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <DHT20_RequestData+0x50>)
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	8019      	strh	r1, [r3, #0]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	0c12      	lsrs	r2, r2, #16
 8000c10:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, data, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2303      	movs	r3, #3
 8000c22:	2170      	movs	r1, #112	; 0x70
 8000c24:	f002 f9f0 	bl	8003008 <HAL_I2C_Master_Transmit>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <DHT20_RequestData+0x3a>
        return DHT20_ERROR_CONNECT;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e005      	b.n	8000c3e <DHT20_RequestData+0x46>
    }
    dht20->lastRequest = HAL_GetTick();
 8000c32:	f001 fb0b 	bl	800224c <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
    return DHT20_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	0800ac28 	.word	0x0800ac28

08000c4c <DHT20_ReadData>:


uint8_t DHT20_ReadData(DHT20_t *dht20) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	6078      	str	r0, [r7, #4]
    uint8_t length = 7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, dht20->bytes, length, HAL_MAX_DELAY) != HAL_OK) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0220 	add.w	r2, r3, #32
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6a:	9100      	str	r1, [sp, #0]
 8000c6c:	2170      	movs	r1, #112	; 0x70
 8000c6e:	f002 fac9 	bl	8003204 <HAL_I2C_Master_Receive>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <DHT20_ReadData+0x30>
        return DHT20_ERROR_CONNECT;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e020      	b.n	8000cbe <DHT20_ReadData+0x72>
    }

    // Kiểm tra nếu tất cả các byte đều bằng 0
    uint8_t allZero = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < length; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	e00c      	b.n	8000ca0 <DHT20_ReadData+0x54>
        if (dht20->bytes[i] != 0) {
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3320      	adds	r3, #32
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <DHT20_ReadData+0x4e>
            allZero = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	75fb      	strb	r3, [r7, #23]
            break;
 8000c98:	e006      	b.n	8000ca8 <DHT20_ReadData+0x5c>
    for (int i = 0; i < length; i++) {
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbee      	blt.n	8000c86 <DHT20_ReadData+0x3a>
        }
    }
    if (allZero) return DHT20_ERROR_BYTES_ALL_ZERO;
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <DHT20_ReadData+0x66>
 8000cae:	2304      	movs	r3, #4
 8000cb0:	e005      	b.n	8000cbe <DHT20_ReadData+0x72>

    dht20->lastRead = HAL_GetTick();
 8000cb2:	f001 facb 	bl	800224c <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	61da      	str	r2, [r3, #28]
    return DHT20_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <DHT20_Convert>:


uint8_t DHT20_Convert(DHT20_t *dht20) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    dht20->status = dht20->bytes[0];
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	751a      	strb	r2, [r3, #20]

    // Chuyển đổi độ ẩm
    uint32_t rawHumidity = (dht20->bytes[1] << 12) | (dht20->bytes[2] << 4) | (dht20->bytes[3] >> 4);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce0:	031a      	lsls	r2, r3, #12
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	4313      	orrs	r3, r2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000cf2:	0912      	lsrs	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
    dht20->humidity = rawHumidity * 9.5367431640625e-5; // Chuyển đổi theo công thức datasheet
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff fb72 	bl	80003e4 <__aeabi_ui2d>
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <DHT20_Convert+0xd4>)
 8000d06:	f7ff fbe7 	bl	80004d8 <__aeabi_dmul>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff feb9 	bl	8000a88 <__aeabi_d2f>
 8000d16:	4602      	mov	r2, r0
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	605a      	str	r2, [r3, #4]

    // Chuyển đổi nhiệt độ
    uint32_t rawTemperature = ((dht20->bytes[3] & 0x0F) << 16) | (dht20->bytes[4] << 8) | dht20->bytes[5];
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	4313      	orrs	r3, r2
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
    dht20->temperature = rawTemperature * 1.9073486328125e-4 - 50; // Chuyển đổi theo công thức datasheet
 8000d3c:	6938      	ldr	r0, [r7, #16]
 8000d3e:	f7ff fb51 	bl	80003e4 <__aeabi_ui2d>
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <DHT20_Convert+0xd8>)
 8000d48:	f7ff fbc6 	bl	80004d8 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <DHT20_Convert+0xdc>)
 8000d5a:	f7ff fa05 	bl	8000168 <__aeabi_dsub>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fe8f 	bl	8000a88 <__aeabi_d2f>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	609a      	str	r2, [r3, #8]

    // Kiểm tra CRC
    uint8_t crc = DHT20_CRC8(dht20->bytes, 6);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3320      	adds	r3, #32
 8000d74:	2106      	movs	r1, #6
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f82f 	bl	8000dda <DHT20_CRC8>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
    if (crc != dht20->bytes[6]) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d001      	beq.n	8000d90 <DHT20_Convert+0xc8>
        return DHT20_ERROR_CHECKSUM;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <DHT20_Convert+0xca>
    }

    return DHT20_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	3f190000 	.word	0x3f190000
 8000da0:	3f290000 	.word	0x3f290000
 8000da4:	40490000 	.word	0x40490000

08000da8 <DHT20_ReadStatus>:
    if (status < 0) return status;

    return DHT20_Convert(dht20);
}

uint8_t DHT20_ReadStatus(DHT20_t *dht20) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, &status, 1, HAL_MAX_DELAY);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f107 020f 	add.w	r2, r7, #15
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	2170      	movs	r1, #112	; 0x70
 8000dc6:	f002 fa1d 	bl	8003204 <HAL_I2C_Master_Receive>
    HAL_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f001 fa48 	bl	8002260 <HAL_Delay>
    return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <DHT20_CRC8>:

uint8_t DHT20_IsMeasuring(DHT20_t *dht20) {
    return (DHT20_ReadStatus(dht20) & 0x80) == 0x80;
}

uint8_t DHT20_CRC8(uint8_t *ptr, uint8_t len) {
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8000de6:	23ff      	movs	r3, #255	; 0xff
 8000de8:	73fb      	strb	r3, [r7, #15]
    while (len--) {
 8000dea:	e01e      	b.n	8000e2a <DHT20_CRC8+0x50>
        crc ^= *ptr++;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	4053      	eors	r3, r2
 8000df8:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73bb      	strb	r3, [r7, #14]
 8000dfe:	e011      	b.n	8000e24 <DHT20_CRC8+0x4a>
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da07      	bge.n	8000e18 <DHT20_CRC8+0x3e>
            crc = (crc << 1) ^ 0x31;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e002      	b.n	8000e1e <DHT20_CRC8+0x44>
        } else {
            crc <<= 1;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) {    if (crc & 0x80) {
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	3301      	adds	r3, #1
 8000e22:	73bb      	strb	r3, [r7, #14]
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	2b07      	cmp	r3, #7
 8000e28:	d9ea      	bls.n	8000e00 <DHT20_CRC8+0x26>
    while (len--) {
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	70fa      	strb	r2, [r7, #3]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1db      	bne.n	8000dec <DHT20_CRC8+0x12>
        }
    }
}
return crc;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <DHT20_ResetSensor>:

uint8_t DHT20_ResetSensor(DHT20_t *dht20) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
uint8_t count = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

// Đọc trạng thái và reset nếu không phải là 0x18
if ((DHT20_ReadStatus(dht20) & 0x18) != 0x18) {
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ffab 	bl	8000da8 <DHT20_ReadStatus>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f003 0318 	and.w	r3, r3, #24
 8000e58:	2b18      	cmp	r3, #24
 8000e5a:	d023      	beq.n	8000ea4 <DHT20_ResetSensor+0x64>
    count++;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1B)) count++;
 8000e62:	211b      	movs	r1, #27
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f823 	bl	8000eb0 <DHT20_ResetRegister>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <DHT20_ResetSensor+0x36>
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	3301      	adds	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1C)) count++;
 8000e76:	211c      	movs	r1, #28
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f819 	bl	8000eb0 <DHT20_ResetRegister>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <DHT20_ResetSensor+0x4a>
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	3301      	adds	r3, #1
 8000e88:	73fb      	strb	r3, [r7, #15]
    if (DHT20_ResetRegister(dht20, 0x1E)) count++;
 8000e8a:	211e      	movs	r1, #30
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f80f 	bl	8000eb0 <DHT20_ResetRegister>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <DHT20_ResetSensor+0x5e>
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f001 f9de 	bl	8002260 <HAL_Delay>
}
return count;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <DHT20_ResetRegister>:

uint8_t DHT20_ResetRegister(DHT20_t *dht20, uint8_t reg) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
uint8_t value[3] = {0};
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <DHT20_ResetRegister+0xa4>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	81bb      	strh	r3, [r7, #12]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73bb      	strb	r3, [r7, #14]

// Bắt đầu giao tiếp với cảm biến để reset
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	1cfa      	adds	r2, r7, #3
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2170      	movs	r1, #112	; 0x70
 8000ed6:	f002 f897 	bl	8003008 <HAL_I2C_Master_Transmit>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <DHT20_ResetRegister+0x34>
    return 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e032      	b.n	8000f4a <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f001 f9bb 	bl	8002260 <HAL_Delay>

// Đọc giá trị từ cảm biến
if (HAL_I2C_Master_Receive(dht20->hi2c, Slave_address_dht20 << 1, value, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f107 020c 	add.w	r2, r7, #12
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2303      	movs	r3, #3
 8000efa:	2170      	movs	r1, #112	; 0x70
 8000efc:	f002 f982 	bl	8003204 <HAL_I2C_Master_Receive>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <DHT20_ResetRegister+0x5a>
    return 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e01f      	b.n	8000f4a <DHT20_ResetRegister+0x9a>
}
HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f001 f9a8 	bl	8002260 <HAL_Delay>

// Ghi lại giá trị điều chỉnh vào thanh ghi
uint8_t buffer[3] = {0xB0 | reg, value[1], value[2]};
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	723b      	strb	r3, [r7, #8]
 8000f1a:	7b7b      	ldrb	r3, [r7, #13]
 8000f1c:	727b      	strb	r3, [r7, #9]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	72bb      	strb	r3, [r7, #10]
if (HAL_I2C_Master_Transmit(dht20->hi2c, Slave_address_dht20 << 1, buffer, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 0208 	add.w	r2, r7, #8
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2303      	movs	r3, #3
 8000f32:	2170      	movs	r1, #112	; 0x70
 8000f34:	f002 f868 	bl	8003008 <HAL_I2C_Master_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <DHT20_ResetRegister+0x92>
    return 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e003      	b.n	8000f4a <DHT20_ResetRegister+0x9a>
}
HAL_Delay(5);
 8000f42:	2005      	movs	r0, #5
 8000f44:	f001 f98c 	bl	8002260 <HAL_Delay>

return 1;
 8000f48:	2301      	movs	r3, #1
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0800ac2c 	.word	0x0800ac2c

08000f58 <lcd_send_buffer>:
DHT20_t dht20;   // Định nghĩa cấu trúc DHT20
status_active active;      // Định nghĩa biến trạng thái hoạt động
static uint8_t lcd_status;
char lcd_buffer_1[17];
char lcd_buffer_2[17];
static void lcd_send_buffer(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	lcd_set_cursor(1, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 fa95 	bl	800148e <lcd_set_cursor>
	lcd_send_string(lcd_buffer_1);
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <lcd_send_buffer+0x24>)
 8000f66:	f000 fa7d 	bl	8001464 <lcd_send_string>
	lcd_set_cursor(2, 0);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f000 fa8e 	bl	800148e <lcd_set_cursor>
	lcd_send_string(lcd_buffer_2);
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <lcd_send_buffer+0x28>)
 8000f74:	f000 fa76 	bl	8001464 <lcd_send_string>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000374 	.word	0x20000374
 8000f80:	20000278 	.word	0x20000278

08000f84 <global_init>:

void global_init(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
//	lcd_initialize();
	DHT20_Init(&dht20, &hi2c1);
 8000f88:	4909      	ldr	r1, [pc, #36]	; (8000fb0 <global_init+0x2c>)
 8000f8a:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <global_init+0x30>)
 8000f8c:	f7ff fdf2 	bl	8000b74 <DHT20_Init>
	active=DHT20_OK;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <global_init+0x34>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	setTimer(GLOBAL_TIMER, 1000); // Cho khoi dong cac thiet bi
 8000f96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 fdd8 	bl	8001b50 <setTimer>
	status = INIT;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <global_init+0x38>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	next = INIT;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <global_init+0x3c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000224 	.word	0x20000224
 8000fb4:	2000028c 	.word	0x2000028c
 8000fb8:	20000289 	.word	0x20000289
 8000fbc:	20000385 	.word	0x20000385
 8000fc0:	20000204 	.word	0x20000204

08000fc4 <watchdog>:

void watchdog(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	if(active == DHT20_ERROR_CONNECT){
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <watchdog+0x40>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d117      	bne.n	8001000 <watchdog+0x3c>
		status = ERROR_STATE;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <watchdog+0x44>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	701a      	strb	r2, [r3, #0]
		setTimer(GLOBAL_TIMER, 10000);
 8000fd6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 fdb8 	bl	8001b50 <setTimer>
		if(active == DHT20_ERROR_CONNECT){
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <watchdog+0x40>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d10b      	bne.n	8001000 <watchdog+0x3c>
			snprintf(lcd_buffer_1,17,"DHT20 E_CONNECT");
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <watchdog+0x48>)
 8000fea:	2111      	movs	r1, #17
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <watchdog+0x4c>)
 8000fee:	f007 fbc1 	bl	8008774 <sniprintf>
			snprintf(lcd_buffer_2,17,"RECONNECTING ");
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <watchdog+0x50>)
 8000ff4:	2111      	movs	r1, #17
 8000ff6:	4808      	ldr	r0, [pc, #32]	; (8001018 <watchdog+0x54>)
 8000ff8:	f007 fbbc 	bl	8008774 <sniprintf>
			lcd_send_buffer();
 8000ffc:	f7ff ffac 	bl	8000f58 <lcd_send_buffer>
		}
	}
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000289 	.word	0x20000289
 8001008:	20000385 	.word	0x20000385
 800100c:	0800ac30 	.word	0x0800ac30
 8001010:	20000374 	.word	0x20000374
 8001014:	0800ac40 	.word	0x0800ac40
 8001018:	20000278 	.word	0x20000278

0800101c <global_fsm>:
void global_fsm(){
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af04      	add	r7, sp, #16
	switch(status){
 8001022:	4bac      	ldr	r3, [pc, #688]	; (80012d4 <global_fsm+0x2b8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b0a      	cmp	r3, #10
 8001028:	f200 8142 	bhi.w	80012b0 <global_fsm+0x294>
 800102c:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <global_fsm+0x18>)
 800102e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001032:	bf00      	nop
 8001034:	08001061 	.word	0x08001061
 8001038:	08001085 	.word	0x08001085
 800103c:	0800109d 	.word	0x0800109d
 8001040:	080010c5 	.word	0x080010c5
 8001044:	08001109 	.word	0x08001109
 8001048:	08001151 	.word	0x08001151
 800104c:	08001191 	.word	0x08001191
 8001050:	080011b1 	.word	0x080011b1
 8001054:	08001211 	.word	0x08001211
 8001058:	08001219 	.word	0x08001219
 800105c:	08001289 	.word	0x08001289
	case INIT:
		lcd_init_fsm();
 8001060:	f000 f94c 	bl	80012fc <lcd_init_fsm>
		if(isFlagTimer(GLOBAL_TIMER)){
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fd63 	bl	8001b30 <isFlagTimer>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8121 	beq.w	80012b4 <global_fsm+0x298>
			setTimer(UPDATE_TIMER, UPDATE_CYCLE);
 8001072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001076:	2001      	movs	r0, #1
 8001078:	f000 fd6a 	bl	8001b50 <setTimer>
			status = CHECK_CONNECTION;
 800107c:	4b95      	ldr	r3, [pc, #596]	; (80012d4 <global_fsm+0x2b8>)
 800107e:	2202      	movs	r2, #2
 8001080:	701a      	strb	r2, [r3, #0]
		}
	 	 break;
 8001082:	e117      	b.n	80012b4 <global_fsm+0x298>
	case IDLE:
		if(isFlagTimer(GLOBAL_TIMER)){
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fd53 	bl	8001b30 <isFlagTimer>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8113 	beq.w	80012b8 <global_fsm+0x29c>
			status = next;
 8001092:	4b91      	ldr	r3, [pc, #580]	; (80012d8 <global_fsm+0x2bc>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b8f      	ldr	r3, [pc, #572]	; (80012d4 <global_fsm+0x2b8>)
 8001098:	701a      	strb	r2, [r3, #0]
		}
		break;
 800109a:	e10d      	b.n	80012b8 <global_fsm+0x29c>
	case CHECK_CONNECTION:
		if(DHT20_IsConnected(&dht20) ){
 800109c:	488f      	ldr	r0, [pc, #572]	; (80012dc <global_fsm+0x2c0>)
 800109e:	f7ff fd8f 	bl	8000bc0 <DHT20_IsConnected>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <global_fsm+0x9a>
			active = DHT20_OK;
 80010a8:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <global_fsm+0x2c4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
			status = CHECK_READY;
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <global_fsm+0x2b8>)
 80010b0:	2203      	movs	r2, #3
 80010b2:	701a      	strb	r2, [r3, #0]
		}
		else{
			active = DHT20_ERROR_CONNECT;
			status = ERROR_STATE;
		}
		break;
 80010b4:	e109      	b.n	80012ca <global_fsm+0x2ae>
			active = DHT20_ERROR_CONNECT;
 80010b6:	4b8a      	ldr	r3, [pc, #552]	; (80012e0 <global_fsm+0x2c4>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	701a      	strb	r2, [r3, #0]
			status = ERROR_STATE;
 80010bc:	4b85      	ldr	r3, [pc, #532]	; (80012d4 <global_fsm+0x2b8>)
 80010be:	2209      	movs	r2, #9
 80010c0:	701a      	strb	r2, [r3, #0]
		break;
 80010c2:	e102      	b.n	80012ca <global_fsm+0x2ae>
	case CHECK_READY:
		if((DHT20_ReadStatus(&dht20) & 0x18) != 0x18){
 80010c4:	4885      	ldr	r0, [pc, #532]	; (80012dc <global_fsm+0x2c0>)
 80010c6:	f7ff fe6f 	bl	8000da8 <DHT20_ReadStatus>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f003 0318 	and.w	r3, r3, #24
 80010d0:	2b18      	cmp	r3, #24
 80010d2:	d00e      	beq.n	80010f2 <global_fsm+0xd6>
			DHT20_ResetSensor(&dht20);
 80010d4:	4881      	ldr	r0, [pc, #516]	; (80012dc <global_fsm+0x2c0>)
 80010d6:	f7ff feb3 	bl	8000e40 <DHT20_ResetSensor>
		 	setTimer(GLOBAL_TIMER, 1000);
 80010da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fd36 	bl	8001b50 <setTimer>
			next = CHECK_CONNECTION;
 80010e4:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <global_fsm+0x2bc>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	701a      	strb	r2, [r3, #0]
			status = IDLE;
 80010ea:	4b7a      	ldr	r3, [pc, #488]	; (80012d4 <global_fsm+0x2b8>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
		else {
			setTimer(GLOBAL_TIMER, 20);
			next = REQUEST_DATA;
			status = IDLE;
		}
		break;
 80010f0:	e0eb      	b.n	80012ca <global_fsm+0x2ae>
			setTimer(GLOBAL_TIMER, 20);
 80010f2:	2114      	movs	r1, #20
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 fd2b 	bl	8001b50 <setTimer>
			next = REQUEST_DATA;
 80010fa:	4b77      	ldr	r3, [pc, #476]	; (80012d8 <global_fsm+0x2bc>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	701a      	strb	r2, [r3, #0]
			status = IDLE;
 8001100:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <global_fsm+0x2b8>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
		break;
 8001106:	e0e0      	b.n	80012ca <global_fsm+0x2ae>
	case REQUEST_DATA:
		if(HAL_GetTick() - dht20.lastRead >= 1000){
 8001108:	f001 f8a0 	bl	800224c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <global_fsm+0x2c0>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001118:	d316      	bcc.n	8001148 <global_fsm+0x12c>
			active = DHT20_RequestData(&dht20);
 800111a:	4870      	ldr	r0, [pc, #448]	; (80012dc <global_fsm+0x2c0>)
 800111c:	f7ff fd6c 	bl	8000bf8 <DHT20_RequestData>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b6e      	ldr	r3, [pc, #440]	; (80012e0 <global_fsm+0x2c4>)
 8001126:	701a      	strb	r2, [r3, #0]
			if (active == DHT20_OK){
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <global_fsm+0x2c4>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f040 80c5 	bne.w	80012bc <global_fsm+0x2a0>
				setTimer(GLOBAL_TIMER, 80);
 8001132:	2150      	movs	r1, #80	; 0x50
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fd0b 	bl	8001b50 <setTimer>
				next = READ_DATA;
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <global_fsm+0x2bc>)
 800113c:	2205      	movs	r2, #5
 800113e:	701a      	strb	r2, [r3, #0]
				status = IDLE;
 8001140:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <global_fsm+0x2b8>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_LASTREAD;
		}
		break;
 8001146:	e0b9      	b.n	80012bc <global_fsm+0x2a0>
			active = DHT20_ERROR_LASTREAD;
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <global_fsm+0x2c4>)
 800114a:	2206      	movs	r2, #6
 800114c:	701a      	strb	r2, [r3, #0]
		break;
 800114e:	e0b5      	b.n	80012bc <global_fsm+0x2a0>
	case READ_DATA:
		if(HAL_GetTick() - dht20.lastRequest < 1000){
 8001150:	f001 f87c 	bl	800224c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	4b61      	ldr	r3, [pc, #388]	; (80012dc <global_fsm+0x2c0>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001160:	d212      	bcs.n	8001188 <global_fsm+0x16c>
			active = DHT20_ReadData(&dht20);
 8001162:	485e      	ldr	r0, [pc, #376]	; (80012dc <global_fsm+0x2c0>)
 8001164:	f7ff fd72 	bl	8000c4c <DHT20_ReadData>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <global_fsm+0x2c4>)
 800116e:	701a      	strb	r2, [r3, #0]
			if(active == DHT20_OK){
 8001170:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <global_fsm+0x2c4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <global_fsm+0x164>
				status = CONVERT_DATA;
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <global_fsm+0x2b8>)
 800117a:	2206      	movs	r2, #6
 800117c:	701a      	strb	r2, [r3, #0]
			}
		}
		else{
			active = DHT20_ERROR_READ_TIMEOUT;
		}
		break;
 800117e:	e0a4      	b.n	80012ca <global_fsm+0x2ae>
				status = REQUEST_DATA;
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <global_fsm+0x2b8>)
 8001182:	2204      	movs	r2, #4
 8001184:	701a      	strb	r2, [r3, #0]
		break;
 8001186:	e0a0      	b.n	80012ca <global_fsm+0x2ae>
			active = DHT20_ERROR_READ_TIMEOUT;
 8001188:	4b55      	ldr	r3, [pc, #340]	; (80012e0 <global_fsm+0x2c4>)
 800118a:	2205      	movs	r2, #5
 800118c:	701a      	strb	r2, [r3, #0]
		break;
 800118e:	e09c      	b.n	80012ca <global_fsm+0x2ae>
	case CONVERT_DATA:
		active = DHT20_Convert(&dht20);
 8001190:	4852      	ldr	r0, [pc, #328]	; (80012dc <global_fsm+0x2c0>)
 8001192:	f7ff fd99 	bl	8000cc8 <DHT20_Convert>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <global_fsm+0x2c4>)
 800119c:	701a      	strb	r2, [r3, #0]
		if(active == DHT20_OK){
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <global_fsm+0x2c4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 808c 	bne.w	80012c0 <global_fsm+0x2a4>
			status = SEND_DATA;
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <global_fsm+0x2b8>)
 80011aa:	2207      	movs	r2, #7
 80011ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011ae:	e087      	b.n	80012c0 <global_fsm+0x2a4>
	case SEND_DATA:
	    if (isFlagTimer(UPDATE_TIMER)) {
 80011b0:	2001      	movs	r0, #1
 80011b2:	f000 fcbd 	bl	8001b30 <isFlagTimer>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8083 	beq.w	80012c4 <global_fsm+0x2a8>
	        setTimer(UPDATE_TIMER, UPDATE_CYCLE);
 80011be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 fcc4 	bl	8001b50 <setTimer>
	        snprintf(lcd_buffer_1, 17, "Temp: %.2f %cC  ", dht20.temperature, 0xDF);
 80011c8:	4b44      	ldr	r3, [pc, #272]	; (80012dc <global_fsm+0x2c0>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f92b 	bl	8000428 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	21df      	movs	r1, #223	; 0xdf
 80011d8:	9102      	str	r1, [sp, #8]
 80011da:	e9cd 2300 	strd	r2, r3, [sp]
 80011de:	4a41      	ldr	r2, [pc, #260]	; (80012e4 <global_fsm+0x2c8>)
 80011e0:	2111      	movs	r1, #17
 80011e2:	4841      	ldr	r0, [pc, #260]	; (80012e8 <global_fsm+0x2cc>)
 80011e4:	f007 fac6 	bl	8008774 <sniprintf>
	        snprintf(lcd_buffer_2, 17, "Humi: %.2f %%   ", dht20.humidity);
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <global_fsm+0x2c0>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f91b 	bl	8000428 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	e9cd 2300 	strd	r2, r3, [sp]
 80011fa:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <global_fsm+0x2d0>)
 80011fc:	2111      	movs	r1, #17
 80011fe:	483c      	ldr	r0, [pc, #240]	; (80012f0 <global_fsm+0x2d4>)
 8001200:	f007 fab8 	bl	8008774 <sniprintf>
	        lcd_send_buffer();
 8001204:	f7ff fea8 	bl	8000f58 <lcd_send_buffer>

	        // Chuyển sang trạng thái điều khiển LED
	        status = UPDATE_LED;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <global_fsm+0x2b8>)
 800120a:	220a      	movs	r2, #10
 800120c:	701a      	strb	r2, [r3, #0]
	    }
	    break;
 800120e:	e059      	b.n	80012c4 <global_fsm+0x2a8>
	case DONE:
	{
		status = CHECK_READY;
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <global_fsm+0x2b8>)
 8001212:	2203      	movs	r2, #3
 8001214:	701a      	strb	r2, [r3, #0]
		break;
 8001216:	e058      	b.n	80012ca <global_fsm+0x2ae>
	}
	case ERROR_STATE:
		if(active == DHT20_ERROR_CONNECT){
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <global_fsm+0x2c4>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d124      	bne.n	800126a <global_fsm+0x24e>
			while(!DHT20_IsConnected(&dht20)){
 8001220:	e013      	b.n	800124a <global_fsm+0x22e>
				if(isFlagTimer(GLOBAL_TIMER)){
 8001222:	2000      	movs	r0, #0
 8001224:	f000 fc84 	bl	8001b30 <isFlagTimer>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00d      	beq.n	800124a <global_fsm+0x22e>
					snprintf(lcd_buffer_1,17,"Time out! DHT20");
 800122e:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <global_fsm+0x2d8>)
 8001230:	2111      	movs	r1, #17
 8001232:	482d      	ldr	r0, [pc, #180]	; (80012e8 <global_fsm+0x2cc>)
 8001234:	f007 fa9e 	bl	8008774 <sniprintf>
					snprintf(lcd_buffer_2,17,"Can't connect");
 8001238:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <global_fsm+0x2dc>)
 800123a:	2111      	movs	r1, #17
 800123c:	482c      	ldr	r0, [pc, #176]	; (80012f0 <global_fsm+0x2d4>)
 800123e:	f007 fa99 	bl	8008774 <sniprintf>
					lcd_send_buffer();
 8001242:	f7ff fe89 	bl	8000f58 <lcd_send_buffer>
					Error_Handler();
 8001246:	f000 fc6d 	bl	8001b24 <Error_Handler>
			while(!DHT20_IsConnected(&dht20)){
 800124a:	4824      	ldr	r0, [pc, #144]	; (80012dc <global_fsm+0x2c0>)
 800124c:	f7ff fcb8 	bl	8000bc0 <DHT20_IsConnected>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0e5      	beq.n	8001222 <global_fsm+0x206>
				}
			}
			setTimer(GLOBAL_TIMER, 100);
 8001256:	2164      	movs	r1, #100	; 0x64
 8001258:	2000      	movs	r0, #0
 800125a:	f000 fc79 	bl	8001b50 <setTimer>
			status = INIT;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <global_fsm+0x2b8>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
			active = DHT20_OK;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <global_fsm+0x2c4>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		  }
		if(isFlagTimer(LCD_TIMER)){
 800126a:	2002      	movs	r0, #2
 800126c:	f000 fc60 	bl	8001b30 <isFlagTimer>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d028      	beq.n	80012c8 <global_fsm+0x2ac>
			setTimer(GLOBAL_TIMER, 1000);
 8001276:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800127a:	2000      	movs	r0, #0
 800127c:	f000 fc68 	bl	8001b50 <setTimer>
			status = INIT;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <global_fsm+0x2b8>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		}
	    break;
 8001286:	e01f      	b.n	80012c8 <global_fsm+0x2ac>

	case UPDATE_LED:
	    // Điều chỉnh LED 1 (nhiệt độ) và LED 2 (độ ẩm)
	    setting_led_RGB((int)dht20.temperature, (int)dht20.humidity);
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <global_fsm+0x2c0>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fc4b 	bl	8000b28 <__aeabi_f2iz>
 8001292:	4604      	mov	r4, r0
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <global_fsm+0x2c0>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fc45 	bl	8000b28 <__aeabi_f2iz>
 800129e:	4603      	mov	r3, r0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4620      	mov	r0, r4
 80012a4:	f000 f9aa 	bl	80015fc <setting_led_RGB>

	    // Sau khi cập nhật LED, quay lại trạng thái chờ
	    status = CHECK_READY;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <global_fsm+0x2b8>)
 80012aa:	2203      	movs	r2, #3
 80012ac:	701a      	strb	r2, [r3, #0]
	    break;
 80012ae:	e00c      	b.n	80012ca <global_fsm+0x2ae>

	default :
		break;
 80012b0:	bf00      	nop
 80012b2:	e00a      	b.n	80012ca <global_fsm+0x2ae>
	 	 break;
 80012b4:	bf00      	nop
 80012b6:	e008      	b.n	80012ca <global_fsm+0x2ae>
		break;
 80012b8:	bf00      	nop
 80012ba:	e006      	b.n	80012ca <global_fsm+0x2ae>
		break;
 80012bc:	bf00      	nop
 80012be:	e004      	b.n	80012ca <global_fsm+0x2ae>
		break;
 80012c0:	bf00      	nop
 80012c2:	e002      	b.n	80012ca <global_fsm+0x2ae>
	    break;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <global_fsm+0x2ae>
	    break;
 80012c8:	bf00      	nop
	}
}
 80012ca:	bf00      	nop
 80012cc:	3704      	adds	r7, #4
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000385 	.word	0x20000385
 80012d8:	20000204 	.word	0x20000204
 80012dc:	2000028c 	.word	0x2000028c
 80012e0:	20000289 	.word	0x20000289
 80012e4:	0800ac50 	.word	0x0800ac50
 80012e8:	20000374 	.word	0x20000374
 80012ec:	0800ac64 	.word	0x0800ac64
 80012f0:	20000278 	.word	0x20000278
 80012f4:	0800ac78 	.word	0x0800ac78
 80012f8:	0800ac88 	.word	0x0800ac88

080012fc <lcd_init_fsm>:
	LCD_WAIT,
	LCD_DONE
};
static uint8_t init_status = LCD_SEND, cmd_index = 0;
static uint8_t init_cmds[]={0x33, 0x32, 0x28, 0x01, 0x06, 0x0C, 0x02, 0x80 };
void lcd_init_fsm(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	switch (init_status) {
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <lcd_init_fsm+0x74>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <lcd_init_fsm+0x12>
 8001308:	2b01      	cmp	r3, #1
 800130a:	d016      	beq.n	800133a <lcd_init_fsm+0x3e>
				else init_status = LCD_SEND;
			}
			break;

		default:
			break;
 800130c:	e02d      	b.n	800136a <lcd_init_fsm+0x6e>
			lcd_send_command(init_cmds[cmd_index]);
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <lcd_init_fsm+0x78>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <lcd_init_fsm+0x7c>)
 8001316:	5c9b      	ldrb	r3, [r3, r2]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f833 	bl	8001384 <lcd_send_command>
			cmd_index++;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <lcd_init_fsm+0x78>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <lcd_init_fsm+0x78>)
 8001328:	701a      	strb	r2, [r3, #0]
			setTimer(LCD_TIMER, 50);
 800132a:	2132      	movs	r1, #50	; 0x32
 800132c:	2002      	movs	r0, #2
 800132e:	f000 fc0f 	bl	8001b50 <setTimer>
			init_status=LCD_WAIT;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <lcd_init_fsm+0x74>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
			break;
 8001338:	e017      	b.n	800136a <lcd_init_fsm+0x6e>
			if(isFlagTimer(LCD_TIMER)){
 800133a:	2002      	movs	r0, #2
 800133c:	f000 fbf8 	bl	8001b30 <isFlagTimer>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d010      	beq.n	8001368 <lcd_init_fsm+0x6c>
				if(cmd_index > 7 ){
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <lcd_init_fsm+0x78>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d909      	bls.n	8001362 <lcd_init_fsm+0x66>
					lcd_send_string("Please wait...");
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <lcd_init_fsm+0x80>)
 8001350:	f000 f888 	bl	8001464 <lcd_send_string>
					lcd_status = 0;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <lcd_init_fsm+0x84>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
					init_status = LCD_DONE;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <lcd_init_fsm+0x74>)
 800135c:	2202      	movs	r2, #2
 800135e:	701a      	strb	r2, [r3, #0]
			break;
 8001360:	e002      	b.n	8001368 <lcd_init_fsm+0x6c>
				else init_status = LCD_SEND;
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <lcd_init_fsm+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
			break;
 8001368:	bf00      	nop
	}
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000206 	.word	0x20000206
 8001374:	20000207 	.word	0x20000207
 8001378:	20000000 	.word	0x20000000
 800137c:	0800ac98 	.word	0x0800ac98
 8001380:	20000205 	.word	0x20000205

08001384 <lcd_send_command>:
// Gui du lieu dieu khien
/*
 * @brief
 * @param
 */
void lcd_send_command(uint8_t command) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af02      	add	r7, sp, #8
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4];
    // Doc 4-bit dau
    buffer[0] = (command & 0b11110000) | START_READ_CMD;
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	f023 030f 	bic.w	r3, r3, #15
 8001396:	b25b      	sxtb	r3, r3
 8001398:	f043 030c 	orr.w	r3, r3, #12
 800139c:	b25b      	sxtb	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	733b      	strb	r3, [r7, #12]
    buffer[1] = (command & 0b11110000) | STOP_READ_CMD;
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	f023 030f 	bic.w	r3, r3, #15
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	737b      	strb	r3, [r7, #13]
    // Doc 4-bit sau
    buffer[2] = (command << 4) | START_READ_CMD;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	f043 030c 	orr.w	r3, r3, #12
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73bb      	strb	r3, [r7, #14]
    buffer[3] = (command << 4) | STOP_READ_CMD;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]
    // Gui qua i2c
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, buffer, 4, 100);
 80013d6:	f107 020c 	add.w	r2, r7, #12
 80013da:	2364      	movs	r3, #100	; 0x64
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2304      	movs	r3, #4
 80013e0:	2142      	movs	r1, #66	; 0x42
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <lcd_send_command+0x6c>)
 80013e4:	f001 fe10 	bl	8003008 <HAL_I2C_Master_Transmit>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000224 	.word	0x20000224

080013f4 <lcd_send_data>:
// Gui du lieu hien thi
void lcd_send_data(uint8_t data) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4];
    // Doc 4-bit dau
    buffer[0] = (data & 0b11110000) | START_READ_DATA;
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	f023 030f 	bic.w	r3, r3, #15
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f043 030d 	orr.w	r3, r3, #13
 800140c:	b25b      	sxtb	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	733b      	strb	r3, [r7, #12]
    buffer[1] = (data & 0b11110000) | STOP_READ_DATA;
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	f023 030f 	bic.w	r3, r3, #15
 800141a:	b25b      	sxtb	r3, r3
 800141c:	f043 0309 	orr.w	r3, r3, #9
 8001420:	b25b      	sxtb	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	737b      	strb	r3, [r7, #13]
    // Doc 4-bit sau
    buffer[2] = (data << 4) | START_READ_DATA;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	b25b      	sxtb	r3, r3
 800142c:	f043 030d 	orr.w	r3, r3, #13
 8001430:	b25b      	sxtb	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	73bb      	strb	r3, [r7, #14]
    buffer[3] = (data << 4) | STOP_READ_DATA;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	b25b      	sxtb	r3, r3
 800143c:	f043 0309 	orr.w	r3, r3, #9
 8001440:	b25b      	sxtb	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]
    // Gui qua i2c
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, buffer, 4, 100);
 8001446:	f107 020c 	add.w	r2, r7, #12
 800144a:	2364      	movs	r3, #100	; 0x64
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2304      	movs	r3, #4
 8001450:	2142      	movs	r1, #66	; 0x42
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <lcd_send_data+0x6c>)
 8001454:	f001 fdd8 	bl	8003008 <HAL_I2C_Master_Transmit>
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000224 	.word	0x20000224

08001464 <lcd_send_string>:
    HAL_Delay(50);

    lcd_send_command(0x80); // Vi tri DRAM = 0
}
// Gui chuoi den lcd
void lcd_send_string(const char *str) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    while (*str)
 800146c:	e006      	b.n	800147c <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ffbc 	bl	80013f4 <lcd_send_data>
    while (*str)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f4      	bne.n	800146e <lcd_send_string+0xa>
    }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <lcd_set_cursor>:
    lcd_send_command(0x01); // Lệnh xóa màn hình
}

// Di chuyen con tro
void lcd_set_cursor(uint8_t row, uint8_t col)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	460a      	mov	r2, r1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	4613      	mov	r3, r2
 800149c:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 1) {
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d103      	bne.n	80014ac <lcd_set_cursor+0x1e>
        address = 0x80 + col; // Hang 1
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	3b80      	subs	r3, #128	; 0x80
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e002      	b.n	80014b2 <lcd_set_cursor+0x24>
    }else {
        address = 0xC0 + col; // Hang 2
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	3b40      	subs	r3, #64	; 0x40
 80014b0:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_command(address);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff65 	bl	8001384 <lcd_send_command>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <resetAllLED>:
 *  Created on: Nov 20, 2024
 *      Author: ASUS
 */
#include "led_RGB.h"

void resetAllLED(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * NUM_OF_LED; i++) pwmData[i] = 1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	e007      	b.n	80014e0 <resetAllLED+0x1c>
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <resetAllLED+0x30>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2101      	movs	r1, #1
 80014d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3301      	adds	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b5f      	cmp	r3, #95	; 0x5f
 80014e4:	ddf4      	ble.n	80014d0 <resetAllLED+0xc>
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200002b4 	.word	0x200002b4

080014f8 <setLED>:
void setAllLED (void) {
	for (int i = 0; i < 24 * NUM_OF_LED; i++) pwmData[i] = 2;
}
void setLED (int LEDposition, int Red, int Green, int Blue) {
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
	for (int i = 7; i >= 0; i--) { // Set the first 8 out of 24 to green
 8001506:	2307      	movs	r3, #7
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e017      	b.n	800153c <setLED+0x44>
	        pwmData[24*LEDposition + 7 - i] = ((Green >> i) & 1) + 1;
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa42 f303 	asr.w	r3, r2, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	b299      	uxth	r1, r3
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1dda      	adds	r2, r3, #7
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	1c4a      	adds	r2, r1, #1
 800152e:	b291      	uxth	r1, r2
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <setLED+0xd4>)
 8001532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 7; i >= 0; i--) { // Set the first 8 out of 24 to green
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b01      	subs	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	dae4      	bge.n	800150c <setLED+0x14>
	    }
	for (int i = 7; i >= 0; i--) { // Set the second 8 out of 24 to red
 8001542:	2307      	movs	r3, #7
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	e018      	b.n	800157a <setLED+0x82>
	        pwmData[24*LEDposition + 15 - i] = ((Red >> i) & 1) + 1;
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	fa42 f303 	asr.w	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	b299      	uxth	r1, r3
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	f103 020f 	add.w	r2, r3, #15
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	1c4a      	adds	r2, r1, #1
 800156c:	b291      	uxth	r1, r2
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <setLED+0xd4>)
 8001570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 7; i >= 0; i--) { // Set the second 8 out of 24 to red
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3b01      	subs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dae3      	bge.n	8001548 <setLED+0x50>
	}
	for (int i = 7; i >= 0; i--) { // Set the third 8 out of 24 to blue
 8001580:	2307      	movs	r3, #7
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e018      	b.n	80015b8 <setLED+0xc0>
	        pwmData[24*LEDposition + 23 - i] = ((Blue >> i) & 1) + 1;
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa42 f303 	asr.w	r3, r2, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	b299      	uxth	r1, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	f103 0217 	add.w	r2, r3, #23
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	1c4a      	adds	r2, r1, #1
 80015aa:	b291      	uxth	r1, r2
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <setLED+0xd4>)
 80015ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 7; i >= 0; i--) { // Set the third 8 out of 24 to blue
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dae3      	bge.n	8001586 <setLED+0x8e>
	}
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3724      	adds	r7, #36	; 0x24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200002b4 	.word	0x200002b4

080015d0 <ws2812Send>:

void ws2812Send()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    if (HAL_DMA_GetState(htim3.hdma[TIM_DMA_ID_CC1]) == HAL_DMA_STATE_READY)
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <ws2812Send+0x24>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 f9e7 	bl	80029ac <HAL_DMA_GetState>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <ws2812Send+0x20>
    {
        HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, 24 * NUM_OF_LED);
 80015e4:	2360      	movs	r3, #96	; 0x60
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <ws2812Send+0x28>)
 80015e8:	2100      	movs	r1, #0
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <ws2812Send+0x24>)
 80015ec:	f004 fdfe 	bl	80061ec <HAL_TIM_PWM_Start_DMA>
    }
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000388 	.word	0x20000388
 80015f8:	200002b4 	.word	0x200002b4

080015fc <setting_led_RGB>:

void setting_led_RGB(int temperature, int humidity) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	resetAllLED();
 8001606:	f7ff ff5d 	bl	80014c4 <resetAllLED>

    int red1 = 0, green1 = 0, blue1 = 0; // LED 1 - Nhiệt độ
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
    int red3 = 0, green3 = 0, blue3 = 0; // LED 3 - Độ ẩm
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]

    // Điều chỉnh LED 1 (Nhiệt độ: 30 - 40 độ)
    if (temperature >= 30 && temperature < 35) {
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b1d      	cmp	r3, #29
 8001626:	dd0f      	ble.n	8001648 <setting_led_RGB+0x4c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b22      	cmp	r3, #34	; 0x22
 800162c:	dc0c      	bgt.n	8001648 <setting_led_RGB+0x4c>
        red1 = 255;                              // Cam đậm dần
 800162e:	23ff      	movs	r3, #255	; 0xff
 8001630:	61fb      	str	r3, [r7, #28]
        green1 = 255 - (temperature - 30) * 51;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3b1e      	subs	r3, #30
 8001636:	f06f 0232 	mvn.w	r2, #50	; 0x32
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	33ff      	adds	r3, #255	; 0xff
 8001640:	61bb      	str	r3, [r7, #24]
        blue1 = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e01c      	b.n	8001682 <setting_led_RGB+0x86>
    } else if (temperature >= 35 && temperature <= 40) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b22      	cmp	r3, #34	; 0x22
 800164c:	dd10      	ble.n	8001670 <setting_led_RGB+0x74>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b28      	cmp	r3, #40	; 0x28
 8001652:	dc0d      	bgt.n	8001670 <setting_led_RGB+0x74>
        red1 = 255;                              // Đỏ chuyển sang tím
 8001654:	23ff      	movs	r3, #255	; 0xff
 8001656:	61fb      	str	r3, [r7, #28]
        green1 = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
        blue1 = (temperature - 35) * 51;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	011a      	lsls	r2, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e008      	b.n	8001682 <setting_led_RGB+0x86>
    } else if (temperature > 40) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b28      	cmp	r3, #40	; 0x28
 8001674:	dd05      	ble.n	8001682 <setting_led_RGB+0x86>
        red1 = 255;                              // Tím giữ nguyên
 8001676:	23ff      	movs	r3, #255	; 0xff
 8001678:	61fb      	str	r3, [r7, #28]
        green1 = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
        blue1 = 255;
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	617b      	str	r3, [r7, #20]
    }

    // Điều chỉnh LED 3 (Độ ẩm)
    if (humidity >= 40 && humidity < 70) {
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b27      	cmp	r3, #39	; 0x27
 8001686:	dd0f      	ble.n	80016a8 <setting_led_RGB+0xac>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b45      	cmp	r3, #69	; 0x45
 800168c:	dc0c      	bgt.n	80016a8 <setting_led_RGB+0xac>
        green3 = 255 - (humidity - 40) * 8;      // Xanh lá giảm
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	3b28      	subs	r3, #40	; 0x28
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001698:	60fb      	str	r3, [r7, #12]
        blue3 = (humidity - 40) * 8;             // Xanh dương tăng
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	3b28      	subs	r3, #40	; 0x28
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	60bb      	str	r3, [r7, #8]
        red3 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e038      	b.n	800171a <setting_led_RGB+0x11e>
    } else if (humidity >= 70 && humidity < 80) {
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b45      	cmp	r3, #69	; 0x45
 80016ac:	dd16      	ble.n	80016dc <setting_led_RGB+0xe0>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b4f      	cmp	r3, #79	; 0x4f
 80016b2:	dc13      	bgt.n	80016dc <setting_led_RGB+0xe0>
        green3 = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
        blue3 = 255 - (humidity - 70) * 25;      // Xanh dương giảm
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3b46      	subs	r3, #70	; 0x46
 80016bc:	f06f 0218 	mvn.w	r2, #24
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	33ff      	adds	r3, #255	; 0xff
 80016c6:	60bb      	str	r3, [r7, #8]
        red3 = (humidity - 70) * 25;             // Đỏ tăng
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f1a3 0246 	sub.w	r2, r3, #70	; 0x46
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009a      	lsls	r2, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	e01e      	b.n	800171a <setting_led_RGB+0x11e>
    } else if (humidity >= 80 && humidity < 90) {
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b4f      	cmp	r3, #79	; 0x4f
 80016e0:	dd0f      	ble.n	8001702 <setting_led_RGB+0x106>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b59      	cmp	r3, #89	; 0x59
 80016e6:	dc0c      	bgt.n	8001702 <setting_led_RGB+0x106>
        green3 = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
        blue3 = 255 - (humidity - 80) * 26;      // Tím chuyển đỏ
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3b50      	subs	r3, #80	; 0x50
 80016f0:	f06f 0219 	mvn.w	r2, #25
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	33ff      	adds	r3, #255	; 0xff
 80016fa:	60bb      	str	r3, [r7, #8]
        red3 = 255;
 80016fc:	23ff      	movs	r3, #255	; 0xff
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	e00b      	b.n	800171a <setting_led_RGB+0x11e>
    } else if (humidity >= 90 && humidity <= 100) {
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b59      	cmp	r3, #89	; 0x59
 8001706:	dd08      	ble.n	800171a <setting_led_RGB+0x11e>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	dc05      	bgt.n	800171a <setting_led_RGB+0x11e>
        green3 = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
        blue3 = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
        red3 = 255;                              // Đỏ rực
 8001716:	23ff      	movs	r3, #255	; 0xff
 8001718:	613b      	str	r3, [r7, #16]
    }

    // Cập nhật LED 1
    setLED(0, red1, green1, blue1); // LED 1: 0 là vị trí đầu tiên
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	69f9      	ldr	r1, [r7, #28]
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fee9 	bl	80014f8 <setLED>
    // Cập nhật LED 3
    setLED(2, red3, green3, blue3); // LED 3: 2 là vị trí thứ ba
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	6939      	ldr	r1, [r7, #16]
 800172c:	2002      	movs	r0, #2
 800172e:	f7ff fee3 	bl	80014f8 <setLED>

    // Gửi dữ liệu PWM đến LED
    ws2812Send();
 8001732:	f7ff ff4d 	bl	80015d0 <ws2812Send>
}
 8001736:	bf00      	nop
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001744:	f000 fd2a 	bl	800219c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001748:	f000 f818 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174c:	f000 f990 	bl	8001a70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001750:	f000 f856 	bl	8001800 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001754:	f000 f944 	bl	80019e0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001758:	f000 f96c 	bl	8001a34 <MX_DMA_Init>
  MX_TIM3_Init();
 800175c:	f000 f8ca 	bl	80018f4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001760:	f000 f87c 	bl	800185c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <main+0x38>)
 8001766:	f004 fc97 	bl	8006098 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  global_init();
 800176a:	f7ff fc0b 	bl	8000f84 <global_init>

  while (1)
  {
	  watchdog();
 800176e:	f7ff fc29 	bl	8000fc4 <watchdog>
	  global_fsm();
 8001772:	f7ff fc53 	bl	800101c <global_fsm>
	  watchdog();
 8001776:	e7fa      	b.n	800176e <main+0x2e>
 8001778:	20000414 	.word	0x20000414

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b090      	sub	sp, #64	; 0x40
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	2228      	movs	r2, #40	; 0x28
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f006 fb8a 	bl	8007ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a2:	2301      	movs	r3, #1
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a6:	2310      	movs	r3, #16
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017aa:	2302      	movs	r3, #2
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017ae:	2300      	movs	r3, #0
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80017b2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 f80d 	bl	80057dc <HAL_RCC_OscConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80017c8:	f000 f9ac 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017cc:	230f      	movs	r3, #15
 80017ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d0:	2302      	movs	r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fa78 	bl	8005cdc <HAL_RCC_ClockConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80017f2:	f000 f997 	bl	8001b24 <Error_Handler>
  }
}
 80017f6:	bf00      	nop
 80017f8:	3740      	adds	r7, #64	; 0x40
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C1_Init+0x50>)
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <MX_I2C1_Init+0x54>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_I2C1_Init+0x50>)
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_I2C1_Init+0x58>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_I2C1_Init+0x50>)
 800181e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C1_Init+0x50>)
 800183e:	f001 fa8b 	bl	8002d58 <HAL_I2C_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001848:	f000 f96c 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000224 	.word	0x20000224
 8001854:	40005400 	.word	0x40005400
 8001858:	000186a0 	.word	0x000186a0

0800185c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_TIM2_Init+0x94>)
 800187a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001882:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM2_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001890:	2263      	movs	r2, #99	; 0x63
 8001892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_TIM2_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018a2:	f004 fba9 	bl	8005ff8 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018ac:	f000 f93a 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018be:	f005 f8af 	bl	8006a20 <HAL_TIM_ConfigClockSource>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018c8:	f000 f92c 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018da:	f005 fd17 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018e4:	f000 f91e 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000414 	.word	0x20000414

080018f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001926:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <MX_TIM3_Init+0xe8>)
 8001928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <MX_TIM3_Init+0xe4>)
 800192c:	2213      	movs	r2, #19
 800192e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3-1;
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001938:	2202      	movs	r2, #2
 800193a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <MX_TIM3_Init+0xe4>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001948:	4823      	ldr	r0, [pc, #140]	; (80019d8 <MX_TIM3_Init+0xe4>)
 800194a:	f004 fb55 	bl	8005ff8 <HAL_TIM_Base_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001954:	f000 f8e6 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800195e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001962:	4619      	mov	r1, r3
 8001964:	481c      	ldr	r0, [pc, #112]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001966:	f005 f85b 	bl	8006a20 <HAL_TIM_ConfigClockSource>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001970:	f000 f8d8 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001976:	f004 fbe1 	bl	800613c <HAL_TIM_PWM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001980:	f000 f8d0 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4619      	mov	r1, r3
 8001992:	4811      	ldr	r0, [pc, #68]	; (80019d8 <MX_TIM3_Init+0xe4>)
 8001994:	f005 fcba 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800199e:	f000 f8c1 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a2:	2360      	movs	r3, #96	; 0x60
 80019a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM3_Init+0xe4>)
 80019ba:	f004 ff6f 	bl	800689c <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80019c4:	f000 f8ae 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM3_Init+0xe4>)
 80019ca:	f000 fa09 	bl	8001de0 <HAL_TIM_MspPostInit>

}
 80019ce:	bf00      	nop
 80019d0:	3738      	adds	r7, #56	; 0x38
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000388 	.word	0x20000388
 80019dc:	40000400 	.word	0x40000400

080019e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <MX_USART2_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a18:	f005 fce8 	bl	80073ec <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f000 f87f 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000045c 	.word	0x2000045c
 8001a30:	40004400 	.word	0x40004400

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_DMA_Init+0x38>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <MX_DMA_Init+0x38>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_DMA_Init+0x38>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2010      	movs	r0, #16
 8001a58:	f000 fcfd 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a5c:	2010      	movs	r0, #16
 8001a5e:	f000 fd16 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_GPIO_Init+0x74>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <MX_GPIO_Init+0x74>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_GPIO_Init+0x74>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_GPIO_Init+0x74>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <MX_GPIO_Init+0x74>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_GPIO_Init+0x74>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001aba:	f001 f935 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2302      	movs	r3, #2
 8001acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_GPIO_Init+0x78>)
 8001ad6:	f000 ffa3 	bl	8002a20 <HAL_GPIO_Init>

}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800

08001aec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	timerRun();
 8001af4:	f000 f84a 	bl	8001b8c <timerRun>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001b0c:	f004 fd10 	bl	8006530 <HAL_TIM_PWM_Stop_DMA>
    htim3.Instance->CCR1 = 0;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000388 	.word	0x20000388

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <isFlagTimer+0x1c>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000214 	.word	0x20000214

08001b50 <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <setTimer+0x30>)
 8001b60:	2100      	movs	r1, #0
 8001b62:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration / TIMER_CYCLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <setTimer+0x34>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001b70:	4905      	ldr	r1, [pc, #20]	; (8001b88 <setTimer+0x38>)
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000214 	.word	0x20000214
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000208 	.word	0x20000208

08001b8c <timerRun>:
void timerInit(uint32_t prescaler, uint32_t period){
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
	TIMER_CYCLE  = (prescaler+1)*(period+1)*1000/frequency;
}
void timerRun(){
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	e01a      	b.n	8001bce <timerRun+0x42>
		if(timer_counters[i] > 0){
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <timerRun+0x54>)
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d011      	beq.n	8001bc8 <timerRun+0x3c>
			timer_counters[i] --;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <timerRun+0x54>)
 8001ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bac:	3a01      	subs	r2, #1
 8001bae:	490c      	ldr	r1, [pc, #48]	; (8001be0 <timerRun+0x54>)
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <timerRun+0x54>)
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d103      	bne.n	8001bc8 <timerRun+0x3c>
				timer_flags[i] = 1;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <timerRun+0x58>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d9e1      	bls.n	8001b98 <timerRun+0xc>
			}
		}
	}

}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000208 	.word	0x20000208
 8001be4:	20000214 	.word	0x20000214

08001be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_MspInit+0x5c>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_MspInit+0x5c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6193      	str	r3, [r2, #24]
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_MspInit+0x5c>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_MspInit+0x5c>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_MspInit+0x5c>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_MspInit+0x5c>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_MspInit+0x60>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_MspInit+0x60>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000

08001c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <HAL_I2C_MspInit+0xb0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d142      	bne.n	8001cf2 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8a:	2312      	movs	r3, #18
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	481a      	ldr	r0, [pc, #104]	; (8001d04 <HAL_I2C_MspInit+0xb8>)
 8001c9a:	f000 fec1 	bl	8002a20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_I2C_MspInit+0xbc>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_I2C_MspInit+0xbc>)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	201f      	movs	r0, #31
 8001cd8:	f000 fbbd 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cdc:	201f      	movs	r0, #31
 8001cde:	f000 fbd6 	bl	800248e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2020      	movs	r0, #32
 8001ce8:	f000 fbb5 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cec:	2020      	movs	r0, #32
 8001cee:	f000 fbce 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40010000 	.word	0x40010000

08001d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d114      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	201c      	movs	r0, #28
 8001d3c:	f000 fb8b 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d40:	201c      	movs	r0, #28
 8001d42:	f000 fba4 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d46:	e03e      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d139      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_TIM_Base_MspInit+0xd0>)
 8001d6e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d72:	2210      	movs	r2, #16
 8001d74:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d88:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d90:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001d9e:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001da0:	f000 fb90 	bl	80024c4 <HAL_DMA_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 8001daa:	f7ff febb 	bl	8001b24 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_TIM_Base_MspInit+0xcc>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	200003d0 	.word	0x200003d0
 8001ddc:	4002006c 	.word	0x4002006c

08001de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_TIM_MspPostInit+0x7c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d129      	bne.n	8001e54 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_TIM_MspPostInit+0x80>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <HAL_TIM_MspPostInit+0x80>)
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_TIM_MspPostInit+0x80>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e18:	2310      	movs	r3, #16
 8001e1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <HAL_TIM_MspPostInit+0x84>)
 8001e2c:	f000 fdf8 	bl	8002a20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_MspPostInit+0x88>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <HAL_TIM_MspPostInit+0x88>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40010000 	.word	0x40010000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d137      	bne.n	8001efc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8c:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e96:	61d3      	str	r3, [r2, #28]
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_UART_MspInit+0x9c>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480f      	ldr	r0, [pc, #60]	; (8001f0c <HAL_UART_MspInit+0xa0>)
 8001ed0:	f000 fda6 	bl	8002a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4809      	ldr	r0, [pc, #36]	; (8001f0c <HAL_UART_MspInit+0xa0>)
 8001ee8:	f000 fd9a 	bl	8002a20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2026      	movs	r0, #38	; 0x26
 8001ef2:	f000 fab0 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ef6:	2026      	movs	r0, #38	; 0x26
 8001ef8:	f000 fac9 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010800 	.word	0x40010800

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f56:	f000 f967 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <DMA1_Channel6_IRQHandler+0x10>)
 8001f66:	f000 fc1b 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200003d0 	.word	0x200003d0

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <TIM2_IRQHandler+0x10>)
 8001f7a:	f004 fb9f 	bl	80066bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000414 	.word	0x20000414

08001f88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <I2C1_EV_IRQHandler+0x10>)
 8001f8e:	f001 fba5 	bl	80036dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000224 	.word	0x20000224

08001f9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <I2C1_ER_IRQHandler+0x10>)
 8001fa2:	f001 fd0c 	bl	80039be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000224 	.word	0x20000224

08001fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <USART2_IRQHandler+0x10>)
 8001fb6:	f005 fa69 	bl	800748c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000045c 	.word	0x2000045c

08001fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
	return 1;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <_kill>:

int _kill(int pid, int sig)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fdc:	f005 ff38 	bl	8007e50 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2216      	movs	r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
	return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_exit>:

void _exit (int status)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffe7 	bl	8001fd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002004:	e7fe      	b.n	8002004 <_exit+0x12>

08002006 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e00a      	b.n	800202e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002018:	f3af 8000 	nop.w
 800201c:	4601      	mov	r1, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbf0      	blt.n	8002018 <_read+0x12>
	}

return len;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e009      	b.n	8002066 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	60ba      	str	r2, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbf1      	blt.n	8002052 <_write+0x12>
	}
	return len;
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_close>:

int _close(int file)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	return -1;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209e:	605a      	str	r2, [r3, #4]
	return 0;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <_isatty>:

int _isatty(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	return 0;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002108:	f005 fea2 	bl	8007e50 <__errno>
 800210c:	4603      	mov	r3, r0
 800210e:	220c      	movs	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20005000 	.word	0x20005000
 8002138:	00000400 	.word	0x00000400
 800213c:	20000218 	.word	0x20000218
 8002140:	200004b8 	.word	0x200004b8

08002144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002150:	f7ff fff8 	bl	8002144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002154:	480b      	ldr	r0, [pc, #44]	; (8002184 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002156:	490c      	ldr	r1, [pc, #48]	; (8002188 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <LoopFillZerobss+0x16>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800216c:	4c09      	ldr	r4, [pc, #36]	; (8002194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800217a:	f005 fe6f 	bl	8007e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800217e:	f7ff fadf 	bl	8001740 <main>
  bx lr
 8002182:	4770      	bx	lr
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800218c:	0800b0bc 	.word	0x0800b0bc
  ldr r2, =_sbss
 8002190:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002194:	200004b8 	.word	0x200004b8

08002198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC1_2_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_Init+0x28>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <HAL_Init+0x28>)
 80021a6:	f043 0310 	orr.w	r3, r3, #16
 80021aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f947 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b2:	200f      	movs	r0, #15
 80021b4:	f000 f808 	bl	80021c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b8:	f7ff fd16 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0x54>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_InitTick+0x58>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f95f 	bl	80024aa <HAL_SYSTICK_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00e      	b.n	8002214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d80a      	bhi.n	8002212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f000 f927 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002208:	4a06      	ldr	r2, [pc, #24]	; (8002224 <HAL_InitTick+0x5c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000000c 	.word	0x2000000c
 8002220:	20000014 	.word	0x20000014
 8002224:	20000010 	.word	0x20000010

08002228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_IncTick+0x1c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_IncTick+0x20>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a03      	ldr	r2, [pc, #12]	; (8002248 <HAL_IncTick+0x20>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000014 	.word	0x20000014
 8002248:	200004a4 	.word	0x200004a4

0800224c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_GetTick+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	200004a4 	.word	0x200004a4

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff fff0 	bl	800224c <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffe0 	bl	800224c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000014 	.word	0x20000014

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <__NVIC_EnableIRQ+0x34>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff90 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff2d 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff42 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff35 	bl	800230c <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e043      	b.n	8002562 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_DMA_Init+0xa8>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_DMA_Init+0xac>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_DMA_Init+0xb0>)
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800250e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	bffdfff8 	.word	0xbffdfff8
 8002570:	cccccccd 	.word	0xcccccccd
 8002574:	40020000 	.word	0x40020000

08002578 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Start_IT+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e04b      	b.n	8002630 <HAL_DMA_Start_IT+0xb8>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d13a      	bne.n	8002622 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f9f8 	bl	80029c6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 020e 	orr.w	r2, r2, #14
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e00f      	b.n	8002610 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0204 	bic.w	r2, r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 020a 	orr.w	r2, r2, #10
 800260e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e005      	b.n	800262e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800262e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d008      	beq.n	8002662 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2204      	movs	r2, #4
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e020      	b.n	80026a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 020e 	bic.w	r2, r2, #14
 8002670:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d005      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2204      	movs	r2, #4
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e051      	b.n	8002778 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 020e 	bic.w	r2, r2, #14
 80026e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a22      	ldr	r2, [pc, #136]	; (8002784 <HAL_DMA_Abort_IT+0xd4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d029      	beq.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <HAL_DMA_Abort_IT+0xd8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d022      	beq.n	800274e <HAL_DMA_Abort_IT+0x9e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_DMA_Abort_IT+0xdc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01a      	beq.n	8002748 <HAL_DMA_Abort_IT+0x98>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_DMA_Abort_IT+0xe0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d012      	beq.n	8002742 <HAL_DMA_Abort_IT+0x92>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <HAL_DMA_Abort_IT+0xe4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00a      	beq.n	800273c <HAL_DMA_Abort_IT+0x8c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_DMA_Abort_IT+0xe8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d102      	bne.n	8002736 <HAL_DMA_Abort_IT+0x86>
 8002730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002734:	e00e      	b.n	8002754 <HAL_DMA_Abort_IT+0xa4>
 8002736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273a:	e00b      	b.n	8002754 <HAL_DMA_Abort_IT+0xa4>
 800273c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002740:	e008      	b.n	8002754 <HAL_DMA_Abort_IT+0xa4>
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	e005      	b.n	8002754 <HAL_DMA_Abort_IT+0xa4>
 8002748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274c:	e002      	b.n	8002754 <HAL_DMA_Abort_IT+0xa4>
 800274e:	2310      	movs	r3, #16
 8002750:	e000      	b.n	8002754 <HAL_DMA_Abort_IT+0xa4>
 8002752:	2301      	movs	r3, #1
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_DMA_Abort_IT+0xec>)
 8002756:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
    } 
  }
  return status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40020008 	.word	0x40020008
 8002788:	4002001c 	.word	0x4002001c
 800278c:	40020030 	.word	0x40020030
 8002790:	40020044 	.word	0x40020044
 8002794:	40020058 	.word	0x40020058
 8002798:	4002006c 	.word	0x4002006c
 800279c:	40020000 	.word	0x40020000

080027a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2204      	movs	r2, #4
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d04f      	beq.n	8002868 <HAL_DMA_IRQHandler+0xc8>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d04a      	beq.n	8002868 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0204 	bic.w	r2, r2, #4
 80027ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a66      	ldr	r2, [pc, #408]	; (8002990 <HAL_DMA_IRQHandler+0x1f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d029      	beq.n	800284e <HAL_DMA_IRQHandler+0xae>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a65      	ldr	r2, [pc, #404]	; (8002994 <HAL_DMA_IRQHandler+0x1f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0xaa>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a63      	ldr	r2, [pc, #396]	; (8002998 <HAL_DMA_IRQHandler+0x1f8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_IRQHandler+0xa4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a62      	ldr	r2, [pc, #392]	; (800299c <HAL_DMA_IRQHandler+0x1fc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d012      	beq.n	800283e <HAL_DMA_IRQHandler+0x9e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a60      	ldr	r2, [pc, #384]	; (80029a0 <HAL_DMA_IRQHandler+0x200>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00a      	beq.n	8002838 <HAL_DMA_IRQHandler+0x98>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a5f      	ldr	r2, [pc, #380]	; (80029a4 <HAL_DMA_IRQHandler+0x204>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d102      	bne.n	8002832 <HAL_DMA_IRQHandler+0x92>
 800282c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002830:	e00e      	b.n	8002850 <HAL_DMA_IRQHandler+0xb0>
 8002832:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002836:	e00b      	b.n	8002850 <HAL_DMA_IRQHandler+0xb0>
 8002838:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800283c:	e008      	b.n	8002850 <HAL_DMA_IRQHandler+0xb0>
 800283e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002842:	e005      	b.n	8002850 <HAL_DMA_IRQHandler+0xb0>
 8002844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002848:	e002      	b.n	8002850 <HAL_DMA_IRQHandler+0xb0>
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	e000      	b.n	8002850 <HAL_DMA_IRQHandler+0xb0>
 800284e:	2304      	movs	r3, #4
 8002850:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <HAL_DMA_IRQHandler+0x208>)
 8002852:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8094 	beq.w	8002986 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002866:	e08e      	b.n	8002986 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2202      	movs	r2, #2
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d056      	beq.n	8002926 <HAL_DMA_IRQHandler+0x186>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d051      	beq.n	8002926 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 020a 	bic.w	r2, r2, #10
 800289e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a38      	ldr	r2, [pc, #224]	; (8002990 <HAL_DMA_IRQHandler+0x1f0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d029      	beq.n	8002906 <HAL_DMA_IRQHandler+0x166>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a37      	ldr	r2, [pc, #220]	; (8002994 <HAL_DMA_IRQHandler+0x1f4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d022      	beq.n	8002902 <HAL_DMA_IRQHandler+0x162>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a35      	ldr	r2, [pc, #212]	; (8002998 <HAL_DMA_IRQHandler+0x1f8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01a      	beq.n	80028fc <HAL_DMA_IRQHandler+0x15c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a34      	ldr	r2, [pc, #208]	; (800299c <HAL_DMA_IRQHandler+0x1fc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d012      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x156>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a32      	ldr	r2, [pc, #200]	; (80029a0 <HAL_DMA_IRQHandler+0x200>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00a      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x150>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_DMA_IRQHandler+0x204>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d102      	bne.n	80028ea <HAL_DMA_IRQHandler+0x14a>
 80028e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e8:	e00e      	b.n	8002908 <HAL_DMA_IRQHandler+0x168>
 80028ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ee:	e00b      	b.n	8002908 <HAL_DMA_IRQHandler+0x168>
 80028f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f4:	e008      	b.n	8002908 <HAL_DMA_IRQHandler+0x168>
 80028f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028fa:	e005      	b.n	8002908 <HAL_DMA_IRQHandler+0x168>
 80028fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002900:	e002      	b.n	8002908 <HAL_DMA_IRQHandler+0x168>
 8002902:	2320      	movs	r3, #32
 8002904:	e000      	b.n	8002908 <HAL_DMA_IRQHandler+0x168>
 8002906:	2302      	movs	r3, #2
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_DMA_IRQHandler+0x208>)
 800290a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d034      	beq.n	8002986 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002924:	e02f      	b.n	8002986 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2208      	movs	r2, #8
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d028      	beq.n	8002988 <HAL_DMA_IRQHandler+0x1e8>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d023      	beq.n	8002988 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020e 	bic.w	r2, r2, #14
 800294e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
    }
  }
  return;
 8002986:	bf00      	nop
 8002988:	bf00      	nop
}
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40020008 	.word	0x40020008
 8002994:	4002001c 	.word	0x4002001c
 8002998:	40020030 	.word	0x40020030
 800299c:	40020044 	.word	0x40020044
 80029a0:	40020058 	.word	0x40020058
 80029a4:	4002006c 	.word	0x4002006c
 80029a8:	40020000 	.word	0x40020000

080029ac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029ba:	b2db      	uxtb	r3, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d108      	bne.n	8002a06 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a04:	e007      	b.n	8002a16 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	60da      	str	r2, [r3, #12]
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b08b      	sub	sp, #44	; 0x2c
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a32:	e169      	b.n	8002d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a34:	2201      	movs	r2, #1
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 8158 	bne.w	8002d02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a9a      	ldr	r2, [pc, #616]	; (8002cc0 <HAL_GPIO_Init+0x2a0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d05e      	beq.n	8002b1a <HAL_GPIO_Init+0xfa>
 8002a5c:	4a98      	ldr	r2, [pc, #608]	; (8002cc0 <HAL_GPIO_Init+0x2a0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d875      	bhi.n	8002b4e <HAL_GPIO_Init+0x12e>
 8002a62:	4a98      	ldr	r2, [pc, #608]	; (8002cc4 <HAL_GPIO_Init+0x2a4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d058      	beq.n	8002b1a <HAL_GPIO_Init+0xfa>
 8002a68:	4a96      	ldr	r2, [pc, #600]	; (8002cc4 <HAL_GPIO_Init+0x2a4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d86f      	bhi.n	8002b4e <HAL_GPIO_Init+0x12e>
 8002a6e:	4a96      	ldr	r2, [pc, #600]	; (8002cc8 <HAL_GPIO_Init+0x2a8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d052      	beq.n	8002b1a <HAL_GPIO_Init+0xfa>
 8002a74:	4a94      	ldr	r2, [pc, #592]	; (8002cc8 <HAL_GPIO_Init+0x2a8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d869      	bhi.n	8002b4e <HAL_GPIO_Init+0x12e>
 8002a7a:	4a94      	ldr	r2, [pc, #592]	; (8002ccc <HAL_GPIO_Init+0x2ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d04c      	beq.n	8002b1a <HAL_GPIO_Init+0xfa>
 8002a80:	4a92      	ldr	r2, [pc, #584]	; (8002ccc <HAL_GPIO_Init+0x2ac>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d863      	bhi.n	8002b4e <HAL_GPIO_Init+0x12e>
 8002a86:	4a92      	ldr	r2, [pc, #584]	; (8002cd0 <HAL_GPIO_Init+0x2b0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d046      	beq.n	8002b1a <HAL_GPIO_Init+0xfa>
 8002a8c:	4a90      	ldr	r2, [pc, #576]	; (8002cd0 <HAL_GPIO_Init+0x2b0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d85d      	bhi.n	8002b4e <HAL_GPIO_Init+0x12e>
 8002a92:	2b12      	cmp	r3, #18
 8002a94:	d82a      	bhi.n	8002aec <HAL_GPIO_Init+0xcc>
 8002a96:	2b12      	cmp	r3, #18
 8002a98:	d859      	bhi.n	8002b4e <HAL_GPIO_Init+0x12e>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <HAL_GPIO_Init+0x80>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002b1b 	.word	0x08002b1b
 8002aa4:	08002af5 	.word	0x08002af5
 8002aa8:	08002b07 	.word	0x08002b07
 8002aac:	08002b49 	.word	0x08002b49
 8002ab0:	08002b4f 	.word	0x08002b4f
 8002ab4:	08002b4f 	.word	0x08002b4f
 8002ab8:	08002b4f 	.word	0x08002b4f
 8002abc:	08002b4f 	.word	0x08002b4f
 8002ac0:	08002b4f 	.word	0x08002b4f
 8002ac4:	08002b4f 	.word	0x08002b4f
 8002ac8:	08002b4f 	.word	0x08002b4f
 8002acc:	08002b4f 	.word	0x08002b4f
 8002ad0:	08002b4f 	.word	0x08002b4f
 8002ad4:	08002b4f 	.word	0x08002b4f
 8002ad8:	08002b4f 	.word	0x08002b4f
 8002adc:	08002b4f 	.word	0x08002b4f
 8002ae0:	08002b4f 	.word	0x08002b4f
 8002ae4:	08002afd 	.word	0x08002afd
 8002ae8:	08002b11 	.word	0x08002b11
 8002aec:	4a79      	ldr	r2, [pc, #484]	; (8002cd4 <HAL_GPIO_Init+0x2b4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002af2:	e02c      	b.n	8002b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	623b      	str	r3, [r7, #32]
          break;
 8002afa:	e029      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	3304      	adds	r3, #4
 8002b02:	623b      	str	r3, [r7, #32]
          break;
 8002b04:	e024      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	623b      	str	r3, [r7, #32]
          break;
 8002b0e:	e01f      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	330c      	adds	r3, #12
 8002b16:	623b      	str	r3, [r7, #32]
          break;
 8002b18:	e01a      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b22:	2304      	movs	r3, #4
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e013      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b30:	2308      	movs	r3, #8
 8002b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	611a      	str	r2, [r3, #16]
          break;
 8002b3a:	e009      	b.n	8002b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	615a      	str	r2, [r3, #20]
          break;
 8002b46:	e003      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	623b      	str	r3, [r7, #32]
          break;
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_Init+0x130>
          break;
 8002b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2bff      	cmp	r3, #255	; 0xff
 8002b54:	d801      	bhi.n	8002b5a <HAL_GPIO_Init+0x13a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	e001      	b.n	8002b5e <HAL_GPIO_Init+0x13e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d802      	bhi.n	8002b6c <HAL_GPIO_Init+0x14c>
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	e002      	b.n	8002b72 <HAL_GPIO_Init+0x152>
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	3b08      	subs	r3, #8
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	210f      	movs	r1, #15
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80b1 	beq.w	8002d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_GPIO_Init+0x2b8>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a4c      	ldr	r2, [pc, #304]	; (8002cd8 <HAL_GPIO_Init+0x2b8>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_GPIO_Init+0x2b8>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb8:	4a48      	ldr	r2, [pc, #288]	; (8002cdc <HAL_GPIO_Init+0x2bc>)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a40      	ldr	r2, [pc, #256]	; (8002ce0 <HAL_GPIO_Init+0x2c0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_GPIO_Init+0x1ec>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3f      	ldr	r2, [pc, #252]	; (8002ce4 <HAL_GPIO_Init+0x2c4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00d      	beq.n	8002c08 <HAL_GPIO_Init+0x1e8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a3e      	ldr	r2, [pc, #248]	; (8002ce8 <HAL_GPIO_Init+0x2c8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d007      	beq.n	8002c04 <HAL_GPIO_Init+0x1e4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3d      	ldr	r2, [pc, #244]	; (8002cec <HAL_GPIO_Init+0x2cc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_GPIO_Init+0x1e0>
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_Init+0x1ee>
 8002c00:	2304      	movs	r3, #4
 8002c02:	e004      	b.n	8002c0e <HAL_GPIO_Init+0x1ee>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e002      	b.n	8002c0e <HAL_GPIO_Init+0x1ee>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_GPIO_Init+0x1ee>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4093      	lsls	r3, r2
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c1e:	492f      	ldr	r1, [pc, #188]	; (8002cdc <HAL_GPIO_Init+0x2bc>)
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	492c      	ldr	r1, [pc, #176]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	4928      	ldr	r1, [pc, #160]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4922      	ldr	r1, [pc, #136]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	491e      	ldr	r1, [pc, #120]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4918      	ldr	r1, [pc, #96]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4914      	ldr	r1, [pc, #80]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d021      	beq.n	8002cf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e021      	b.n	8002d02 <HAL_GPIO_Init+0x2e2>
 8002cbe:	bf00      	nop
 8002cc0:	10320000 	.word	0x10320000
 8002cc4:	10310000 	.word	0x10310000
 8002cc8:	10220000 	.word	0x10220000
 8002ccc:	10210000 	.word	0x10210000
 8002cd0:	10120000 	.word	0x10120000
 8002cd4:	10110000 	.word	0x10110000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40010800 	.word	0x40010800
 8002ce4:	40010c00 	.word	0x40010c00
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	4909      	ldr	r1, [pc, #36]	; (8002d24 <HAL_GPIO_Init+0x304>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	3301      	adds	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f47f ae8e 	bne.w	8002a34 <HAL_GPIO_Init+0x14>
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	372c      	adds	r7, #44	; 0x2c
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e12b      	b.n	8002fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe ff64 	bl	8001c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f003 f8d6 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8002dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a81      	ldr	r2, [pc, #516]	; (8002fcc <HAL_I2C_Init+0x274>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d807      	bhi.n	8002ddc <HAL_I2C_Init+0x84>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a80      	ldr	r2, [pc, #512]	; (8002fd0 <HAL_I2C_Init+0x278>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	bf94      	ite	ls
 8002dd4:	2301      	movls	r3, #1
 8002dd6:	2300      	movhi	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e006      	b.n	8002dea <HAL_I2C_Init+0x92>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a7d      	ldr	r2, [pc, #500]	; (8002fd4 <HAL_I2C_Init+0x27c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf94      	ite	ls
 8002de4:	2301      	movls	r3, #1
 8002de6:	2300      	movhi	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0e7      	b.n	8002fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a78      	ldr	r2, [pc, #480]	; (8002fd8 <HAL_I2C_Init+0x280>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0c9b      	lsrs	r3, r3, #18
 8002dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_I2C_Init+0x274>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d802      	bhi.n	8002e2c <HAL_I2C_Init+0xd4>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e009      	b.n	8002e40 <HAL_I2C_Init+0xe8>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_I2C_Init+0x284>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	3301      	adds	r3, #1
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	495c      	ldr	r1, [pc, #368]	; (8002fcc <HAL_I2C_Init+0x274>)
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	d819      	bhi.n	8002e94 <HAL_I2C_Init+0x13c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e59      	subs	r1, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6e:	1c59      	adds	r1, r3, #1
 8002e70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e74:	400b      	ands	r3, r1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_I2C_Init+0x138>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e59      	subs	r1, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	e051      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002e90:	2304      	movs	r3, #4
 8002e92:	e04f      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <HAL_I2C_Init+0x168>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e012      	b.n	8002ee6 <HAL_I2C_Init+0x18e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	0099      	lsls	r1, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Init+0x196>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e022      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10e      	bne.n	8002f14 <HAL_I2C_Init+0x1bc>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1e58      	subs	r0, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	440b      	add	r3, r1
 8002f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Init+0x1dc>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	6809      	ldr	r1, [r1, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6911      	ldr	r1, [r2, #16]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	000186a0 	.word	0x000186a0
 8002fd0:	001e847f 	.word	0x001e847f
 8002fd4:	003d08ff 	.word	0x003d08ff
 8002fd8:	431bde83 	.word	0x431bde83
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b80      	cmp	r3, #128	; 0x80
 8002ff4:	d103      	bne.n	8002ffe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	460b      	mov	r3, r1
 8003016:	817b      	strh	r3, [r7, #10]
 8003018:	4613      	mov	r3, r2
 800301a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff f916 	bl	800224c <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	f040 80e0 	bne.w	80031f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	4970      	ldr	r1, [pc, #448]	; (80031fc <HAL_I2C_Master_Transmit+0x1f4>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f002 f94c 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	e0d3      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_I2C_Master_Transmit+0x50>
 8003054:	2302      	movs	r3, #2
 8003056:	e0cc      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d007      	beq.n	800307e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2210      	movs	r2, #16
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	893a      	ldrh	r2, [r7, #8]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_I2C_Master_Transmit+0x1f8>)
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f001 ff0e 	bl	8004ee8 <I2C_MasterRequestWrite>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e08d      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030ec:	e066      	b.n	80031bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	6a39      	ldr	r1, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f002 fa0a 	bl	800550c <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d11b      	bne.n	8003190 <HAL_I2C_Master_Transmit+0x188>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	6a39      	ldr	r1, [r7, #32]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f002 fa01 	bl	800559c <I2C_WaitOnBTFFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d107      	bne.n	80031b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e01a      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d194      	bne.n	80030ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	00100002 	.word	0x00100002
 8003200:	ffff0000 	.word	0xffff0000

08003204 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	; 0x30
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	461a      	mov	r2, r3
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
 8003214:	4613      	mov	r3, r2
 8003216:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321c:	f7ff f816 	bl	800224c <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	f040 824b 	bne.w	80036c6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	497f      	ldr	r1, [pc, #508]	; (8003438 <HAL_I2C_Master_Receive+0x234>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f002 f84c 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e23e      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2C_Master_Receive+0x54>
 8003254:	2302      	movs	r3, #2
 8003256:	e237      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d007      	beq.n	800327e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2222      	movs	r2, #34	; 0x22
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2210      	movs	r2, #16
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a5f      	ldr	r2, [pc, #380]	; (800343c <HAL_I2C_Master_Receive+0x238>)
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f001 fe90 	bl	8004fec <I2C_MasterRequestRead>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1f8      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e1cc      	b.n	80036a0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b01      	cmp	r3, #1
 800330c:	d11e      	bne.n	800334c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800331e:	b672      	cpsid	i
}
 8003320:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003348:	b662      	cpsie	i
}
 800334a:	e035      	b.n	80033b8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11e      	bne.n	8003392 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003364:	b672      	cpsid	i
}
 8003366:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800338e:	b662      	cpsie	i
}
 8003390:	e012      	b.n	80033b8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033b8:	e172      	b.n	80036a0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	2b03      	cmp	r3, #3
 80033c0:	f200 811f 	bhi.w	8003602 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d123      	bne.n	8003414 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f002 f95d 	bl	8005690 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e173      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003412:	e145      	b.n	80036a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b02      	cmp	r3, #2
 800341a:	d152      	bne.n	80034c2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	2200      	movs	r2, #0
 8003424:	4906      	ldr	r1, [pc, #24]	; (8003440 <HAL_I2C_Master_Receive+0x23c>)
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f001 ff56 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e148      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
 8003436:	bf00      	nop
 8003438:	00100002 	.word	0x00100002
 800343c:	ffff0000 	.word	0xffff0000
 8003440:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003444:	b672      	cpsid	i
}
 8003446:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800348a:	b662      	cpsie	i
}
 800348c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c0:	e0ee      	b.n	80036a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2200      	movs	r2, #0
 80034ca:	4981      	ldr	r1, [pc, #516]	; (80036d0 <HAL_I2C_Master_Receive+0x4cc>)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f001 ff03 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0f5      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_I2C_Master_Receive+0x4d0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	08db      	lsrs	r3, r3, #3
 8003528:	4a6b      	ldr	r2, [pc, #428]	; (80036d8 <HAL_I2C_Master_Receive+0x4d4>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0a1a      	lsrs	r2, r3, #8
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00da      	lsls	r2, r3, #3
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	3b01      	subs	r3, #1
 8003540:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d118      	bne.n	800357a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800356a:	b662      	cpsie	i
}
 800356c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0a6      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d1d9      	bne.n	800353c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035ca:	b662      	cpsie	i
}
 80035cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003600:	e04e      	b.n	80036a0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f002 f842 	bl	8005690 <I2C_WaitOnRXNEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e058      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b04      	cmp	r3, #4
 8003654:	d124      	bne.n	80036a0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f ae88 	bne.w	80033ba <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3728      	adds	r7, #40	; 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	00010004 	.word	0x00010004
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	14f8b589 	.word	0x14f8b589

080036dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d003      	beq.n	8003714 <HAL_I2C_EV_IRQHandler+0x38>
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	f040 80c1 	bne.w	8003896 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_I2C_EV_IRQHandler+0x6e>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003734:	d003      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0x62>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800373c:	d101      	bne.n	8003742 <HAL_I2C_EV_IRQHandler+0x66>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x68>
 8003742:	2300      	movs	r3, #0
 8003744:	2b01      	cmp	r3, #1
 8003746:	f000 8132 	beq.w	80039ae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00c      	beq.n	800376e <HAL_I2C_EV_IRQHandler+0x92>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	0a5b      	lsrs	r3, r3, #9
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f002 f820 	bl	80057a6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fd99 	bl	800429e <I2C_Master_SB>
 800376c:	e092      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0xb2>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	0a5b      	lsrs	r3, r3, #9
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fe0e 	bl	80043a8 <I2C_Master_ADD10>
 800378c:	e082      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0xd2>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0a5b      	lsrs	r3, r3, #9
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fe27 	bl	80043fa <I2C_Master_ADDR>
 80037ac:	e072      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03b      	beq.n	8003832 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c8:	f000 80f3 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	09db      	lsrs	r3, r3, #7
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00f      	beq.n	80037f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	089b      	lsrs	r3, r3, #2
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d103      	bne.n	80037f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f9f1 	bl	8003bd8 <I2C_MasterTransmit_TXE>
 80037f6:	e04d      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80d6 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	0a5b      	lsrs	r3, r3, #9
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80cf 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003814:	7bbb      	ldrb	r3, [r7, #14]
 8003816:	2b21      	cmp	r3, #33	; 0x21
 8003818:	d103      	bne.n	8003822 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa78 	bl	8003d10 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003820:	e0c7      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	f040 80c4 	bne.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fae6 	bl	8003dfc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003830:	e0bf      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003840:	f000 80b7 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <HAL_I2C_EV_IRQHandler+0x194>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <HAL_I2C_EV_IRQHandler+0x194>
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fb5f 	bl	8003f2c <I2C_MasterReceive_RXNE>
 800386e:	e011      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 809a 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	0a5b      	lsrs	r3, r3, #9
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8093 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fc15 	bl	80040bc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003892:	e08e      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003894:	e08d      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e007      	b.n	80038b8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x20e>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	0a5b      	lsrs	r3, r3, #9
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ffe0 	bl	80048a8 <I2C_Slave_ADDR>
 80038e8:	e066      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_I2C_EV_IRQHandler+0x22e>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	0a5b      	lsrs	r3, r3, #9
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f001 f81a 	bl	800493c <I2C_Slave_STOPF>
 8003908:	e056      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	2b21      	cmp	r3, #33	; 0x21
 800390e:	d002      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x23a>
 8003910:	7bbb      	ldrb	r3, [r7, #14]
 8003912:	2b29      	cmp	r3, #41	; 0x29
 8003914:	d125      	bne.n	8003962 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	09db      	lsrs	r3, r3, #7
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00f      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x266>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	0a9b      	lsrs	r3, r3, #10
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x266>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fef8 	bl	8004730 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003940:	e039      	b.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d033      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2da>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	0a5b      	lsrs	r3, r3, #9
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02d      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 ff25 	bl	80047aa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003960:	e029      	b.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0x2b2>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	0a9b      	lsrs	r3, r3, #10
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0x2b2>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff2f 	bl	80047ea <I2C_SlaveReceive_RXNE>
 800398c:	e014      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00e      	beq.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ff5d 	bl	8004866 <I2C_SlaveReceive_BTF>
 80039ac:	e004      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	; 0x28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_I2C_ER_IRQHandler+0x5e>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a0a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	0a5b      	lsrs	r3, r3, #9
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <HAL_I2C_ER_IRQHandler+0x88>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003a44:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	0a9b      	lsrs	r3, r3, #10
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03f      	beq.n	8003ad2 <HAL_I2C_ER_IRQHandler+0x114>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d039      	beq.n	8003ad2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003a5e:	7efb      	ldrb	r3, [r7, #27]
 8003a60:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a78:	7ebb      	ldrb	r3, [r7, #26]
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d112      	bne.n	8003aa4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10f      	bne.n	8003aa4 <HAL_I2C_ER_IRQHandler+0xe6>
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b21      	cmp	r3, #33	; 0x21
 8003a88:	d008      	beq.n	8003a9c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b29      	cmp	r3, #41	; 0x29
 8003a8e:	d005      	beq.n	8003a9c <HAL_I2C_ER_IRQHandler+0xde>
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	2b28      	cmp	r3, #40	; 0x28
 8003a94:	d106      	bne.n	8003aa4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b21      	cmp	r3, #33	; 0x21
 8003a9a:	d103      	bne.n	8003aa4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f001 f87d 	bl	8004b9c <I2C_Slave_AF>
 8003aa2:	e016      	b.n	8003ad2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ab6:	7efb      	ldrb	r3, [r7, #27]
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d002      	beq.n	8003ac2 <HAL_I2C_ER_IRQHandler+0x104>
 8003abc:	7efb      	ldrb	r3, [r7, #27]
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	0adb      	lsrs	r3, r3, #11
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <HAL_I2C_ER_IRQHandler+0x13e>
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f043 0308 	orr.w	r3, r3, #8
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003afa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f001 f8b8 	bl	8004c84 <I2C_ITError>
  }
}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
 8003b70:	4613      	mov	r3, r2
 8003b72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d150      	bne.n	8003ca0 <I2C_MasterTransmit_TXE+0xc8>
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b21      	cmp	r3, #33	; 0x21
 8003c02:	d14d      	bne.n	8003ca0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d01d      	beq.n	8003c46 <I2C_MasterTransmit_TXE+0x6e>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d01a      	beq.n	8003c46 <I2C_MasterTransmit_TXE+0x6e>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c16:	d016      	beq.n	8003c46 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c26:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2211      	movs	r2, #17
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff6c 	bl	8003b1c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c44:	e060      	b.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c54:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d107      	bne.n	8003c90 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff81 	bl	8003b90 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c8e:	e03b      	b.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff3f 	bl	8003b1c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c9e:	e033      	b.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b21      	cmp	r3, #33	; 0x21
 8003ca4:	d005      	beq.n	8003cb2 <I2C_MasterTransmit_TXE+0xda>
 8003ca6:	7bbb      	ldrb	r3, [r7, #14]
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d12d      	bne.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b22      	cmp	r3, #34	; 0x22
 8003cb0:	d12a      	bne.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ccc:	e01c      	b.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d103      	bne.n	8003ce2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f88e 	bl	8003dfc <I2C_MemoryTransmit_TXE_BTF>
}
 8003ce0:	e012      	b.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d06:	e7ff      	b.n	8003d08 <I2C_MasterTransmit_TXE+0x130>
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b21      	cmp	r3, #33	; 0x21
 8003d28:	d164      	bne.n	8003df4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d58:	e04c      	b.n	8003df4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d01d      	beq.n	8003d9c <I2C_MasterTransmit_BTF+0x8c>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d01a      	beq.n	8003d9c <I2C_MasterTransmit_BTF+0x8c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d6c:	d016      	beq.n	8003d9c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d7c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2211      	movs	r2, #17
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fec1 	bl	8003b1c <HAL_I2C_MasterTxCpltCallback>
}
 8003d9a:	e02b      	b.n	8003df4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003daa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d107      	bne.n	8003de6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fed6 	bl	8003b90 <HAL_I2C_MemTxCpltCallback>
}
 8003de4:	e006      	b.n	8003df4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fe94 	bl	8003b1c <HAL_I2C_MasterTxCpltCallback>
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11d      	bne.n	8003e50 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d10b      	bne.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003e32:	e077      	b.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	121b      	asrs	r3, r3, #8
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e4e:	e069      	b.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10b      	bne.n	8003e70 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e6e:	e059      	b.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d152      	bne.n	8003f1e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b22      	cmp	r3, #34	; 0x22
 8003e7c:	d10d      	bne.n	8003e9a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e98:	e044      	b.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b21      	cmp	r3, #33	; 0x21
 8003ea8:	d112      	bne.n	8003ed0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ece:	e029      	b.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d124      	bne.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b21      	cmp	r3, #33	; 0x21
 8003ede:	d121      	bne.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe3a 	bl	8003b90 <HAL_I2C_MemTxCpltCallback>
}
 8003f1c:	e002      	b.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff f85e 	bl	8002fe0 <I2C_Flush_DR>
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b22      	cmp	r3, #34	; 0x22
 8003f3e:	f040 80b9 	bne.w	80040b4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d921      	bls.n	8003f9a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	f040 8096 	bne.w	80040b4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f96:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f98:	e08c      	b.n	80040b4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d07f      	beq.n	80040a2 <I2C_MasterReceive_RXNE+0x176>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d002      	beq.n	8003fae <I2C_MasterReceive_RXNE+0x82>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d179      	bne.n	80040a2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f001 fb3c 	bl	800562c <I2C_WaitOnSTOPRequestThroughIT>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d14c      	bne.n	8004054 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fd8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d10a      	bne.n	800402a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fdbd 	bl	8003ba2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004028:	e044      	b.n	80040b4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d002      	beq.n	800403e <I2C_MasterReceive_RXNE+0x112>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b20      	cmp	r3, #32
 800403c:	d103      	bne.n	8004046 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
 8004044:	e002      	b.n	800404c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2212      	movs	r2, #18
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fd6e 	bl	8003b2e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004052:	e02f      	b.n	80040b4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004062:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fd8a 	bl	8003bb4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040a0:	e008      	b.n	80040b4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	605a      	str	r2, [r3, #4]
}
 80040b2:	e7ff      	b.n	80040b4 <I2C_MasterReceive_RXNE+0x188>
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11b      	bne.n	800410c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800410a:	e0c4      	b.n	8004296 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d129      	bne.n	800416a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d00a      	beq.n	8004142 <I2C_MasterReceive_BTF+0x86>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d007      	beq.n	8004142 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004140:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004168:	e095      	b.n	8004296 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d17d      	bne.n	8004270 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d002      	beq.n	8004180 <I2C_MasterReceive_BTF+0xc4>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b10      	cmp	r3, #16
 800417e:	d108      	bne.n	8004192 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e016      	b.n	80041c0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d002      	beq.n	800419e <I2C_MasterReceive_BTF+0xe2>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d108      	bne.n	80041b0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e007      	b.n	80041c0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800421a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d10a      	bne.n	8004246 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fcaf 	bl	8003ba2 <HAL_I2C_MemRxCpltCallback>
}
 8004244:	e027      	b.n	8004296 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d002      	beq.n	800425a <I2C_MasterReceive_BTF+0x19e>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b20      	cmp	r3, #32
 8004258:	d103      	bne.n	8004262 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
 8004260:	e002      	b.n	8004268 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2212      	movs	r2, #18
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fc60 	bl	8003b2e <HAL_I2C_MasterRxCpltCallback>
}
 800426e:	e012      	b.n	8004296 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d117      	bne.n	80042e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80042cc:	e067      	b.n	800439e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]
}
 80042e0:	e05d      	b.n	800439e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ea:	d133      	bne.n	8004354 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b21      	cmp	r3, #33	; 0x21
 80042f6:	d109      	bne.n	800430c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004308:	611a      	str	r2, [r3, #16]
 800430a:	e008      	b.n	800431e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <I2C_Master_SB+0x92>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d032      	beq.n	800439e <I2C_Master_SB+0x100>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02d      	beq.n	800439e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004350:	605a      	str	r2, [r3, #4]
}
 8004352:	e024      	b.n	800439e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10e      	bne.n	800437a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	b29b      	uxth	r3, r3
 8004362:	11db      	asrs	r3, r3, #7
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f063 030f 	orn	r3, r3, #15
 8004370:	b2da      	uxtb	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
}
 8004378:	e011      	b.n	800439e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	2b01      	cmp	r3, #1
 8004380:	d10d      	bne.n	800439e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	b29b      	uxth	r3, r3
 8004388:	11db      	asrs	r3, r3, #7
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0306 	and.w	r3, r3, #6
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f063 030e 	orn	r3, r3, #14
 8004396:	b2da      	uxtb	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <I2C_Master_ADD10+0x26>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d108      	bne.n	80043e0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <I2C_Master_ADD10+0x48>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ee:	605a      	str	r2, [r3, #4]
  }
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b091      	sub	sp, #68	; 0x44
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b22      	cmp	r3, #34	; 0x22
 8004422:	f040 8174 	bne.w	800470e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <I2C_Master_ADDR+0x54>
 800442e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d10b      	bne.n	800444e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004436:	2300      	movs	r3, #0
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	633b      	str	r3, [r7, #48]	; 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	633b      	str	r3, [r7, #48]	; 0x30
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	e16b      	b.n	8004726 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11d      	bne.n	8004492 <I2C_Master_ADDR+0x98>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800445e:	d118      	bne.n	8004492 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004484:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	651a      	str	r2, [r3, #80]	; 0x50
 8004490:	e149      	b.n	8004726 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d113      	bne.n	80044c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449c:	2300      	movs	r3, #0
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e120      	b.n	8004706 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	f040 808a 	bne.w	80045e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d6:	d137      	bne.n	8004548 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d113      	bne.n	8004520 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	e0f2      	b.n	8004706 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	623b      	str	r3, [r7, #32]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e0de      	b.n	8004706 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	2b08      	cmp	r3, #8
 800454c:	d02e      	beq.n	80045ac <I2C_Master_ADDR+0x1b2>
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	2b20      	cmp	r3, #32
 8004552:	d02b      	beq.n	80045ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004556:	2b12      	cmp	r3, #18
 8004558:	d102      	bne.n	8004560 <I2C_Master_ADDR+0x166>
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	2b01      	cmp	r3, #1
 800455e:	d125      	bne.n	80045ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	2b04      	cmp	r3, #4
 8004564:	d00e      	beq.n	8004584 <I2C_Master_ADDR+0x18a>
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b02      	cmp	r3, #2
 800456a:	d00b      	beq.n	8004584 <I2C_Master_ADDR+0x18a>
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	2b10      	cmp	r3, #16
 8004570:	d008      	beq.n	8004584 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e007      	b.n	8004594 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004592:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	e0ac      	b.n	8004706 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e090      	b.n	8004706 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d158      	bne.n	80046a0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d021      	beq.n	8004638 <I2C_Master_ADDR+0x23e>
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d01e      	beq.n	8004638 <I2C_Master_ADDR+0x23e>
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d01b      	beq.n	8004638 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e012      	b.n	800465e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004646:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466c:	d14b      	bne.n	8004706 <I2C_Master_ADDR+0x30c>
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004674:	d00b      	beq.n	800468e <I2C_Master_ADDR+0x294>
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	2b01      	cmp	r3, #1
 800467a:	d008      	beq.n	800468e <I2C_Master_ADDR+0x294>
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	2b08      	cmp	r3, #8
 8004680:	d005      	beq.n	800468e <I2C_Master_ADDR+0x294>
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	2b10      	cmp	r3, #16
 8004686:	d002      	beq.n	800468e <I2C_Master_ADDR+0x294>
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	2b20      	cmp	r3, #32
 800468c:	d13b      	bne.n	8004706 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	e032      	b.n	8004706 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ae:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046be:	d117      	bne.n	80046f0 <I2C_Master_ADDR+0x2f6>
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046c6:	d00b      	beq.n	80046e0 <I2C_Master_ADDR+0x2e6>
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d008      	beq.n	80046e0 <I2C_Master_ADDR+0x2e6>
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d005      	beq.n	80046e0 <I2C_Master_ADDR+0x2e6>
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d002      	beq.n	80046e0 <I2C_Master_ADDR+0x2e6>
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d107      	bne.n	80046f0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ee:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800470c:	e00b      	b.n	8004726 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
}
 8004724:	e7ff      	b.n	8004726 <I2C_Master_ADDR+0x32c>
 8004726:	bf00      	nop
 8004728:	3744      	adds	r7, #68	; 0x44
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02b      	beq.n	80047a2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d114      	bne.n	80047a2 <I2C_SlaveTransmit_TXE+0x72>
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b29      	cmp	r3, #41	; 0x29
 800477c:	d111      	bne.n	80047a2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2221      	movs	r2, #33	; 0x21
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2228      	movs	r2, #40	; 0x28
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff f9cf 	bl	8003b40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d011      	beq.n	80047e0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02c      	beq.n	800485e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d114      	bne.n	800485e <I2C_SlaveReceive_RXNE+0x74>
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b2a      	cmp	r3, #42	; 0x2a
 8004838:	d111      	bne.n	800485e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004848:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2222      	movs	r2, #34	; 0x22
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2228      	movs	r2, #40	; 0x28
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff f97a 	bl	8003b52 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048c2:	2b28      	cmp	r3, #40	; 0x28
 80048c4:	d127      	bne.n	8004916 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	09db      	lsrs	r3, r3, #7
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	81bb      	strh	r3, [r7, #12]
 80048f8:	e002      	b.n	8004900 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004908:	89ba      	ldrh	r2, [r7, #12]
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff f928 	bl	8003b64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004914:	e00e      	b.n	8004934 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800495a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800495c:	2300      	movs	r3, #0
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004988:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d172      	bne.n	8004a80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b22      	cmp	r3, #34	; 0x22
 800499e:	d002      	beq.n	80049a6 <I2C_Slave_STOPF+0x6a>
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b2a      	cmp	r3, #42	; 0x2a
 80049a4:	d135      	bne.n	8004a12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0204 	orr.w	r2, r3, #4
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd ffe4 	bl	80029ac <HAL_DMA_GetState>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d049      	beq.n	8004a7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	4a69      	ldr	r2, [pc, #420]	; (8004b94 <I2C_Slave_STOPF+0x258>)
 80049f0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fe5a 	bl	80026b0 <HAL_DMA_Abort_IT>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d03d      	beq.n	8004a7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a10:	e035      	b.n	8004a7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f043 0204 	orr.w	r2, r3, #4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fd ffae 	bl	80029ac <HAL_DMA_GetState>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d014      	beq.n	8004a80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	4a4e      	ldr	r2, [pc, #312]	; (8004b94 <I2C_Slave_STOPF+0x258>)
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd fe24 	bl	80026b0 <HAL_DMA_Abort_IT>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4798      	blx	r3
 8004a7c:	e000      	b.n	8004a80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d03e      	beq.n	8004b08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d112      	bne.n	8004abe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d112      	bne.n	8004af2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f043 0204 	orr.w	r2, r3, #4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f8b7 	bl	8004c84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b16:	e039      	b.n	8004b8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1c:	d109      	bne.n	8004b32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2228      	movs	r2, #40	; 0x28
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff f810 	bl	8003b52 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b28      	cmp	r3, #40	; 0x28
 8004b3c:	d111      	bne.n	8004b62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <I2C_Slave_STOPF+0x25c>)
 8004b42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff f80f 	bl	8003b7e <HAL_I2C_ListenCpltCallback>
}
 8004b60:	e014      	b.n	8004b8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	2b22      	cmp	r3, #34	; 0x22
 8004b68:	d002      	beq.n	8004b70 <I2C_Slave_STOPF+0x234>
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b22      	cmp	r3, #34	; 0x22
 8004b6e:	d10d      	bne.n	8004b8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fe ffe3 	bl	8003b52 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	08005189 	.word	0x08005189
 8004b98:	ffff0000 	.word	0xffff0000

08004b9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d002      	beq.n	8004bbe <I2C_Slave_AF+0x22>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d129      	bne.n	8004c12 <I2C_Slave_AF+0x76>
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b28      	cmp	r3, #40	; 0x28
 8004bc2:	d126      	bne.n	8004c12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2e      	ldr	r2, [pc, #184]	; (8004c80 <I2C_Slave_AF+0xe4>)
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fe ffb7 	bl	8003b7e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c10:	e031      	b.n	8004c76 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b21      	cmp	r3, #33	; 0x21
 8004c16:	d129      	bne.n	8004c6c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <I2C_Slave_AF+0xe4>)
 8004c1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2221      	movs	r2, #33	; 0x21
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fe f9be 	bl	8002fe0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fe ff6b 	bl	8003b40 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c6a:	e004      	b.n	8004c76 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c74:	615a      	str	r2, [r3, #20]
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	ffff0000 	.word	0xffff0000

08004c84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c9c:	7bbb      	ldrb	r3, [r7, #14]
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d002      	beq.n	8004ca8 <I2C_ITError+0x24>
 8004ca2:	7bbb      	ldrb	r3, [r7, #14]
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d10a      	bne.n	8004cbe <I2C_ITError+0x3a>
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b22      	cmp	r3, #34	; 0x22
 8004cac:	d107      	bne.n	8004cbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cc4:	2b28      	cmp	r3, #40	; 0x28
 8004cc6:	d107      	bne.n	8004cd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2228      	movs	r2, #40	; 0x28
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cd6:	e015      	b.n	8004d04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce6:	d00a      	beq.n	8004cfe <I2C_ITError+0x7a>
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b60      	cmp	r3, #96	; 0x60
 8004cec:	d007      	beq.n	8004cfe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d12:	d162      	bne.n	8004dda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d020      	beq.n	8004d74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	4a6a      	ldr	r2, [pc, #424]	; (8004ee0 <I2C_ITError+0x25c>)
 8004d38:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fcb6 	bl	80026b0 <HAL_DMA_Abort_IT>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8089 	beq.w	8004e5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4798      	blx	r3
 8004d72:	e074      	b.n	8004e5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	4a59      	ldr	r2, [pc, #356]	; (8004ee0 <I2C_ITError+0x25c>)
 8004d7a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fd fc95 	bl	80026b0 <HAL_DMA_Abort_IT>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d068      	beq.n	8004e5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d10b      	bne.n	8004db2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
 8004dd8:	e041      	b.n	8004e5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b60      	cmp	r3, #96	; 0x60
 8004de4:	d125      	bne.n	8004e32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d10b      	bne.n	8004e1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe fecb 	bl	8003bc6 <HAL_I2C_AbortCpltCallback>
 8004e30:	e015      	b.n	8004e5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d10b      	bne.n	8004e58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fe feab 	bl	8003bb4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10e      	bne.n	8004e8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d104      	bne.n	8004e8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d113      	bne.n	8004ed8 <I2C_ITError+0x254>
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b28      	cmp	r3, #40	; 0x28
 8004eb4:	d110      	bne.n	8004ed8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <I2C_ITError+0x260>)
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fe fe53 	bl	8003b7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	08005189 	.word	0x08005189
 8004ee4:	ffff0000 	.word	0xffff0000

08004ee8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d006      	beq.n	8004f12 <I2C_MasterRequestWrite+0x2a>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d003      	beq.n	8004f12 <I2C_MasterRequestWrite+0x2a>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f10:	d108      	bne.n	8004f24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e00b      	b.n	8004f3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	2b12      	cmp	r3, #18
 8004f2a:	d107      	bne.n	8004f3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f9c5 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f62:	d103      	bne.n	8004f6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e035      	b.n	8004fdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f78:	d108      	bne.n	8004f8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f7a:	897b      	ldrh	r3, [r7, #10]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f88:	611a      	str	r2, [r3, #16]
 8004f8a:	e01b      	b.n	8004fc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f8c:	897b      	ldrh	r3, [r7, #10]
 8004f8e:	11db      	asrs	r3, r3, #7
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0306 	and.w	r3, r3, #6
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f063 030f 	orn	r3, r3, #15
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	490e      	ldr	r1, [pc, #56]	; (8004fe4 <I2C_MasterRequestWrite+0xfc>)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa0e 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e010      	b.n	8004fdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4907      	ldr	r1, [pc, #28]	; (8004fe8 <I2C_MasterRequestWrite+0x100>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f9fe 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	00010008 	.word	0x00010008
 8004fe8:	00010002 	.word	0x00010002

08004fec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005010:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d006      	beq.n	8005026 <I2C_MasterRequestRead+0x3a>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d003      	beq.n	8005026 <I2C_MasterRequestRead+0x3a>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005024:	d108      	bne.n	8005038 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e00b      	b.n	8005050 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	2b11      	cmp	r3, #17
 800503e:	d107      	bne.n	8005050 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f93b 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005076:	d103      	bne.n	8005080 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e079      	b.n	8005178 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508c:	d108      	bne.n	80050a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800508e:	897b      	ldrh	r3, [r7, #10]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	611a      	str	r2, [r3, #16]
 800509e:	e05f      	b.n	8005160 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a0:	897b      	ldrh	r3, [r7, #10]
 80050a2:	11db      	asrs	r3, r3, #7
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0306 	and.w	r3, r3, #6
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f063 030f 	orn	r3, r3, #15
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4930      	ldr	r1, [pc, #192]	; (8005180 <I2C_MasterRequestRead+0x194>)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f984 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e054      	b.n	8005178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050ce:	897b      	ldrh	r3, [r7, #10]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4929      	ldr	r1, [pc, #164]	; (8005184 <I2C_MasterRequestRead+0x198>)
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f974 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e044      	b.n	8005178 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005112:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f8d9 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	d103      	bne.n	8005144 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e017      	b.n	8005178 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005148:	897b      	ldrh	r3, [r7, #10]
 800514a:	11db      	asrs	r3, r3, #7
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f003 0306 	and.w	r3, r3, #6
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f063 030e 	orn	r3, r3, #14
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	4907      	ldr	r1, [pc, #28]	; (8005184 <I2C_MasterRequestRead+0x198>)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f930 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010008 	.word	0x00010008
 8005184:	00010002 	.word	0x00010002

08005188 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051a2:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <I2C_DMAAbort+0x148>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	08db      	lsrs	r3, r3, #3
 80051a8:	4a4a      	ldr	r2, [pc, #296]	; (80052d4 <I2C_DMAAbort+0x14c>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	0a1a      	lsrs	r2, r3, #8
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	00da      	lsls	r2, r3, #3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80051ce:	e00a      	b.n	80051e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e4:	d0ea      	beq.n	80051bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	2200      	movs	r2, #0
 80051f4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	2200      	movs	r2, #0
 8005204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005214:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	2200      	movs	r2, #0
 800522a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	2200      	movs	r2, #0
 800523a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b60      	cmp	r3, #96	; 0x60
 8005256:	d10e      	bne.n	8005276 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800526e:	6978      	ldr	r0, [r7, #20]
 8005270:	f7fe fca9 	bl	8003bc6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005274:	e027      	b.n	80052c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800527c:	2b28      	cmp	r3, #40	; 0x28
 800527e:	d117      	bne.n	80052b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2228      	movs	r2, #40	; 0x28
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052ae:	e007      	b.n	80052c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80052c0:	6978      	ldr	r0, [r7, #20]
 80052c2:	f7fe fc77 	bl	8003bb4 <HAL_I2C_ErrorCallback>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	2000000c 	.word	0x2000000c
 80052d4:	14f8b589 	.word	0x14f8b589

080052d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e8:	e048      	b.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d044      	beq.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fc ffab 	bl	800224c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d139      	bne.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10d      	bne.n	800532e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	e00c      	b.n	8005348 <I2C_WaitOnFlagUntilTimeout+0x70>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	43da      	mvns	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d116      	bne.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e023      	b.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10d      	bne.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	43da      	mvns	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	e00c      	b.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d093      	beq.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053da:	e071      	b.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ea:	d123      	bne.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f043 0204 	orr.w	r2, r3, #4
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e067      	b.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d041      	beq.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fc ff06 	bl	800224c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d136      	bne.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10c      	bne.n	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e00b      	b.n	800548e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	43da      	mvns	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e021      	b.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	0c1b      	lsrs	r3, r3, #16
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10c      	bne.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	43da      	mvns	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4013      	ands	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	e00b      	b.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af6d 	bne.w	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005518:	e034      	b.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f915 	bl	800574a <I2C_IsAcknowledgeFailed>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e034      	b.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d028      	beq.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fc fe8b 	bl	800224c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11d      	bne.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d016      	beq.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d1c3      	bne.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a8:	e034      	b.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8cd 	bl	800574a <I2C_IsAcknowledgeFailed>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e034      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d028      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fc fe43 	bl	800224c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11d      	bne.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d016      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e007      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d1c3      	bne.n	80055aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005638:	4b13      	ldr	r3, [pc, #76]	; (8005688 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	08db      	lsrs	r3, r3, #3
 800563e:	4a13      	ldr	r2, [pc, #76]	; (800568c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	0a1a      	lsrs	r2, r3, #8
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3b01      	subs	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e008      	b.n	800567c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005678:	d0e9      	beq.n	800564e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c
 800568c:	14f8b589 	.word	0x14f8b589

08005690 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800569c:	e049      	b.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d119      	bne.n	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0210 	mvn.w	r2, #16
 80056b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e030      	b.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e0:	f7fc fdb4 	bl	800224c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11d      	bne.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d016      	beq.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0220 	orr.w	r2, r3, #32
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e007      	b.n	8005742 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d1ae      	bne.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	d11b      	bne.n	800579a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800576a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f043 0204 	orr.w	r2, r3, #4
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr

080057a6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057b6:	d103      	bne.n	80057c0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057be:	e007      	b.n	80057d0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057c8:	d102      	bne.n	80057d0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2208      	movs	r2, #8
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e26c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8087 	beq.w	800590a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057fc:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b04      	cmp	r3, #4
 8005806:	d00c      	beq.n	8005822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005808:	4b8f      	ldr	r3, [pc, #572]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b08      	cmp	r3, #8
 8005812:	d112      	bne.n	800583a <HAL_RCC_OscConfig+0x5e>
 8005814:	4b8c      	ldr	r3, [pc, #560]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d10b      	bne.n	800583a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005822:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d06c      	beq.n	8005908 <HAL_RCC_OscConfig+0x12c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d168      	bne.n	8005908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e246      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x76>
 8005844:	4b80      	ldr	r3, [pc, #512]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a7f      	ldr	r2, [pc, #508]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800584a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e02e      	b.n	80058b0 <HAL_RCC_OscConfig+0xd4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_RCC_OscConfig+0x98>
 800585a:	4b7b      	ldr	r3, [pc, #492]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7a      	ldr	r2, [pc, #488]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	4b78      	ldr	r3, [pc, #480]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a77      	ldr	r2, [pc, #476]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800586c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e01d      	b.n	80058b0 <HAL_RCC_OscConfig+0xd4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0xbc>
 800587e:	4b72      	ldr	r3, [pc, #456]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a71      	ldr	r2, [pc, #452]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b6f      	ldr	r3, [pc, #444]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6e      	ldr	r2, [pc, #440]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0xd4>
 8005898:	4b6b      	ldr	r3, [pc, #428]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6a      	ldr	r2, [pc, #424]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fc fcc8 	bl	800224c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fc fcc4 	bl	800224c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1fa      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b5d      	ldr	r3, [pc, #372]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0xe4>
 80058de:	e014      	b.n	800590a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fc fcb4 	bl	800224c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e8:	f7fc fcb0 	bl	800224c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1e6      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	4b53      	ldr	r3, [pc, #332]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x10c>
 8005906:	e000      	b.n	800590a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d063      	beq.n	80059de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005916:	4b4c      	ldr	r3, [pc, #304]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005922:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b08      	cmp	r3, #8
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x18c>
 800592e:	4b46      	ldr	r3, [pc, #280]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	4b43      	ldr	r3, [pc, #268]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x176>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1ba      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b3d      	ldr	r3, [pc, #244]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4939      	ldr	r1, [pc, #228]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	e03a      	b.n	80059de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b36      	ldr	r3, [pc, #216]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fc fc69 	bl	800224c <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800597e:	f7fc fc65 	bl	800224c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e19b      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599c:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4927      	ldr	r1, [pc, #156]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	e015      	b.n	80059de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b2:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <HAL_RCC_OscConfig+0x270>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b8:	f7fc fc48 	bl	800224c <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059c0:	f7fc fc44 	bl	800224c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e17a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059d2:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d03a      	beq.n	8005a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d019      	beq.n	8005a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f2:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <HAL_RCC_OscConfig+0x274>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f8:	f7fc fc28 	bl	800224c <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a00:	f7fc fc24 	bl	800224c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e15a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <HAL_RCC_OscConfig+0x26c>)
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f000 facc 	bl	8005fbc <RCC_Delay>
 8005a24:	e01c      	b.n	8005a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <HAL_RCC_OscConfig+0x274>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2c:	f7fc fc0e 	bl	800224c <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a32:	e00f      	b.n	8005a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a34:	f7fc fc0a 	bl	800224c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d908      	bls.n	8005a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e140      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	42420000 	.word	0x42420000
 8005a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a54:	4b9e      	ldr	r3, [pc, #632]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e9      	bne.n	8005a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a6 	beq.w	8005bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a72:	4b97      	ldr	r3, [pc, #604]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10d      	bne.n	8005a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7e:	4b94      	ldr	r3, [pc, #592]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4a93      	ldr	r2, [pc, #588]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a88:	61d3      	str	r3, [r2, #28]
 8005a8a:	4b91      	ldr	r3, [pc, #580]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a92:	60bb      	str	r3, [r7, #8]
 8005a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9a:	4b8e      	ldr	r3, [pc, #568]	; (8005cd4 <HAL_RCC_OscConfig+0x4f8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d118      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa6:	4b8b      	ldr	r3, [pc, #556]	; (8005cd4 <HAL_RCC_OscConfig+0x4f8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a8a      	ldr	r2, [pc, #552]	; (8005cd4 <HAL_RCC_OscConfig+0x4f8>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab2:	f7fc fbcb 	bl	800224c <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aba:	f7fc fbc7 	bl	800224c <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b64      	cmp	r3, #100	; 0x64
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e0fd      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005acc:	4b81      	ldr	r3, [pc, #516]	; (8005cd4 <HAL_RCC_OscConfig+0x4f8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d106      	bne.n	8005aee <HAL_RCC_OscConfig+0x312>
 8005ae0:	4b7b      	ldr	r3, [pc, #492]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	4a7a      	ldr	r2, [pc, #488]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	6213      	str	r3, [r2, #32]
 8005aec:	e02d      	b.n	8005b4a <HAL_RCC_OscConfig+0x36e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10c      	bne.n	8005b10 <HAL_RCC_OscConfig+0x334>
 8005af6:	4b76      	ldr	r3, [pc, #472]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	4a75      	ldr	r2, [pc, #468]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	6213      	str	r3, [r2, #32]
 8005b02:	4b73      	ldr	r3, [pc, #460]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	4a72      	ldr	r2, [pc, #456]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b08:	f023 0304 	bic.w	r3, r3, #4
 8005b0c:	6213      	str	r3, [r2, #32]
 8005b0e:	e01c      	b.n	8005b4a <HAL_RCC_OscConfig+0x36e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b05      	cmp	r3, #5
 8005b16:	d10c      	bne.n	8005b32 <HAL_RCC_OscConfig+0x356>
 8005b18:	4b6d      	ldr	r3, [pc, #436]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	4a6c      	ldr	r2, [pc, #432]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	6213      	str	r3, [r2, #32]
 8005b24:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	4a69      	ldr	r2, [pc, #420]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6213      	str	r3, [r2, #32]
 8005b30:	e00b      	b.n	8005b4a <HAL_RCC_OscConfig+0x36e>
 8005b32:	4b67      	ldr	r3, [pc, #412]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	4a66      	ldr	r2, [pc, #408]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6213      	str	r3, [r2, #32]
 8005b3e:	4b64      	ldr	r3, [pc, #400]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	4a63      	ldr	r2, [pc, #396]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d015      	beq.n	8005b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b52:	f7fc fb7b 	bl	800224c <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	e00a      	b.n	8005b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fc fb77 	bl	800224c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e0ab      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b70:	4b57      	ldr	r3, [pc, #348]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0ee      	beq.n	8005b5a <HAL_RCC_OscConfig+0x37e>
 8005b7c:	e014      	b.n	8005ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fc fb65 	bl	800224c <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b86:	f7fc fb61 	bl	800224c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e095      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b9c:	4b4c      	ldr	r3, [pc, #304]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ee      	bne.n	8005b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bae:	4b48      	ldr	r3, [pc, #288]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	4a47      	ldr	r2, [pc, #284]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8081 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d061      	beq.n	8005c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d146      	bne.n	8005c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd8:	4b3f      	ldr	r3, [pc, #252]	; (8005cd8 <HAL_RCC_OscConfig+0x4fc>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bde:	f7fc fb35 	bl	800224c <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be6:	f7fc fb31 	bl	800224c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e067      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf8:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f0      	bne.n	8005be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c0c:	d108      	bne.n	8005c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c0e:	4b30      	ldr	r3, [pc, #192]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	492d      	ldr	r1, [pc, #180]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c20:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a19      	ldr	r1, [r3, #32]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	430b      	orrs	r3, r1
 8005c32:	4927      	ldr	r1, [pc, #156]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c38:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <HAL_RCC_OscConfig+0x4fc>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3e:	f7fc fb05 	bl	800224c <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fc fb01 	bl	800224c <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e037      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x46a>
 8005c64:	e02f      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <HAL_RCC_OscConfig+0x4fc>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6c:	f7fc faee 	bl	800224c <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fc faea 	bl	800224c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e020      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x498>
 8005c92:	e018      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e013      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	40007000 	.word	0x40007000
 8005cd8:	42420060 	.word	0x42420060

08005cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0d0      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b6a      	ldr	r3, [pc, #424]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d910      	bls.n	8005d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b67      	ldr	r3, [pc, #412]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 0207 	bic.w	r2, r3, #7
 8005d06:	4965      	ldr	r1, [pc, #404]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0b8      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d38:	4b59      	ldr	r3, [pc, #356]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d50:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a52      	ldr	r2, [pc, #328]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d5c:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	494d      	ldr	r1, [pc, #308]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d040      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d115      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07f      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b41      	ldr	r3, [pc, #260]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e073      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e06b      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4936      	ldr	r1, [pc, #216]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fc fa3e 	bl	800224c <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fc fa3a 	bl	800224c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e053      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d210      	bcs.n	8005e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 0207 	bic.w	r2, r3, #7
 8005e12:	4922      	ldr	r1, [pc, #136]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e032      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4916      	ldr	r1, [pc, #88]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	490e      	ldr	r1, [pc, #56]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e6a:	f000 f821 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	490a      	ldr	r1, [pc, #40]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e7c:	5ccb      	ldrb	r3, [r1, r3]
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8005e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_ClockConfig+0x1d0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc f99c 	bl	80021c8 <HAL_InitTick>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40022000 	.word	0x40022000
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800aca8 	.word	0x0800aca8
 8005ea8:	2000000c 	.word	0x2000000c
 8005eac:	20000010 	.word	0x20000010

08005eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005eca:	4b1e      	ldr	r3, [pc, #120]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d002      	beq.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x30>
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d003      	beq.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x36>
 8005ede:	e027      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ee0:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ee2:	613b      	str	r3, [r7, #16]
      break;
 8005ee4:	e027      	b.n	8005f36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	0c9b      	lsrs	r3, r3, #18
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d010      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	0c5b      	lsrs	r3, r3, #17
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f0a:	5cd3      	ldrb	r3, [r2, r3]
 8005f0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f12:	fb02 f203 	mul.w	r2, r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e004      	b.n	8005f2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	613b      	str	r3, [r7, #16]
      break;
 8005f2e:	e002      	b.n	8005f36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f32:	613b      	str	r3, [r7, #16]
      break;
 8005f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f36:	693b      	ldr	r3, [r7, #16]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000
 8005f48:	007a1200 	.word	0x007a1200
 8005f4c:	0800acc0 	.word	0x0800acc0
 8005f50:	0800acd0 	.word	0x0800acd0
 8005f54:	003d0900 	.word	0x003d0900

08005f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f5c:	4b02      	ldr	r3, [pc, #8]	; (8005f68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr
 8005f68:	2000000c 	.word	0x2000000c

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f70:	f7ff fff2 	bl	8005f58 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4903      	ldr	r1, [pc, #12]	; (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800acb8 	.word	0x0800acb8

08005f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f98:	f7ff ffde 	bl	8005f58 <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	0adb      	lsrs	r3, r3, #11
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4903      	ldr	r1, [pc, #12]	; (8005fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	0800acb8 	.word	0x0800acb8

08005fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <RCC_Delay+0x34>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a0a      	ldr	r2, [pc, #40]	; (8005ff4 <RCC_Delay+0x38>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	0a5b      	lsrs	r3, r3, #9
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005fd8:	bf00      	nop
  }
  while (Delay --);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	60fa      	str	r2, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f9      	bne.n	8005fd8 <RCC_Delay+0x1c>
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bc80      	pop	{r7}
 8005fee:	4770      	bx	lr
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	10624dd3 	.word	0x10624dd3

08005ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e041      	b.n	800608e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fb fe74 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 feb8 	bl	8006dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e03a      	b.n	8006126 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a18      	ldr	r2, [pc, #96]	; (8006130 <HAL_TIM_Base_Start_IT+0x98>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00e      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x58>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d009      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x58>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a14      	ldr	r2, [pc, #80]	; (8006134 <HAL_TIM_Base_Start_IT+0x9c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x58>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <HAL_TIM_Base_Start_IT+0xa0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d111      	bne.n	8006114 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b06      	cmp	r3, #6
 8006100:	d010      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006112:	e007      	b.n	8006124 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0201 	orr.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	40012c00 	.word	0x40012c00
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800

0800613c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e041      	b.n	80061d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f839 	bl	80061da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f000 fe16 	bl	8006dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e022      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0x72>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d109      	bne.n	8006232 <HAL_TIM_PWM_Start_DMA+0x46>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e015      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0x72>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start_DMA+0x60>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e008      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0x72>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
 8006264:	e153      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <HAL_TIM_PWM_Start_DMA+0x94>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf0c      	ite	eq
 8006278:	2301      	moveq	r3, #1
 800627a:	2300      	movne	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e022      	b.n	80062c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b04      	cmp	r3, #4
 8006284:	d109      	bne.n	800629a <HAL_TIM_PWM_Start_DMA+0xae>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	bf0c      	ite	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	2300      	movne	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	e015      	b.n	80062c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d109      	bne.n	80062b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e008      	b.n	80062c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d024      	beq.n	8006314 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_TIM_PWM_Start_DMA+0xea>
 80062d0:	887b      	ldrh	r3, [r7, #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e119      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e8:	e016      	b.n	8006318 <HAL_TIM_PWM_Start_DMA+0x12c>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f8:	e00e      	b.n	8006318 <HAL_TIM_PWM_Start_DMA+0x12c>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006308:	e006      	b.n	8006318 <HAL_TIM_PWM_Start_DMA+0x12c>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006312:	e001      	b.n	8006318 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e0fa      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b0c      	cmp	r3, #12
 800631c:	f200 80ae 	bhi.w	800647c <HAL_TIM_PWM_Start_DMA+0x290>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800635d 	.word	0x0800635d
 800632c:	0800647d 	.word	0x0800647d
 8006330:	0800647d 	.word	0x0800647d
 8006334:	0800647d 	.word	0x0800647d
 8006338:	080063a5 	.word	0x080063a5
 800633c:	0800647d 	.word	0x0800647d
 8006340:	0800647d 	.word	0x0800647d
 8006344:	0800647d 	.word	0x0800647d
 8006348:	080063ed 	.word	0x080063ed
 800634c:	0800647d 	.word	0x0800647d
 8006350:	0800647d 	.word	0x0800647d
 8006354:	0800647d 	.word	0x0800647d
 8006358:	08006435 	.word	0x08006435
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	4a6d      	ldr	r2, [pc, #436]	; (8006518 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	4a6c      	ldr	r2, [pc, #432]	; (800651c <HAL_TIM_PWM_Start_DMA+0x330>)
 800636a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	4a6b      	ldr	r2, [pc, #428]	; (8006520 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006372:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3334      	adds	r3, #52	; 0x34
 8006380:	461a      	mov	r2, r3
 8006382:	887b      	ldrh	r3, [r7, #2]
 8006384:	f7fc f8f8 	bl	8002578 <HAL_DMA_Start_IT>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0bd      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a0:	60da      	str	r2, [r3, #12]
      break;
 80063a2:	e06e      	b.n	8006482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	4a5b      	ldr	r2, [pc, #364]	; (8006518 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	4a5a      	ldr	r2, [pc, #360]	; (800651c <HAL_TIM_PWM_Start_DMA+0x330>)
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	4a59      	ldr	r2, [pc, #356]	; (8006520 <HAL_TIM_PWM_Start_DMA+0x334>)
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3338      	adds	r3, #56	; 0x38
 80063c8:	461a      	mov	r2, r3
 80063ca:	887b      	ldrh	r3, [r7, #2]
 80063cc:	f7fc f8d4 	bl	8002578 <HAL_DMA_Start_IT>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e099      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063e8:	60da      	str	r2, [r3, #12]
      break;
 80063ea:	e04a      	b.n	8006482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a49      	ldr	r2, [pc, #292]	; (8006518 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a48      	ldr	r2, [pc, #288]	; (800651c <HAL_TIM_PWM_Start_DMA+0x330>)
 80063fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	4a47      	ldr	r2, [pc, #284]	; (8006520 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	333c      	adds	r3, #60	; 0x3c
 8006410:	461a      	mov	r2, r3
 8006412:	887b      	ldrh	r3, [r7, #2]
 8006414:	f7fc f8b0 	bl	8002578 <HAL_DMA_Start_IT>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e075      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006430:	60da      	str	r2, [r3, #12]
      break;
 8006432:	e026      	b.n	8006482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	4a37      	ldr	r2, [pc, #220]	; (8006518 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	4a36      	ldr	r2, [pc, #216]	; (800651c <HAL_TIM_PWM_Start_DMA+0x330>)
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	4a35      	ldr	r2, [pc, #212]	; (8006520 <HAL_TIM_PWM_Start_DMA+0x334>)
 800644a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3340      	adds	r3, #64	; 0x40
 8006458:	461a      	mov	r2, r3
 800645a:	887b      	ldrh	r3, [r7, #2]
 800645c:	f7fc f88c 	bl	8002578 <HAL_DMA_Start_IT>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e051      	b.n	800650e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006478:	60da      	str	r2, [r3, #12]
      break;
 800647a:	e002      	b.n	8006482 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
      break;
 8006480:	bf00      	nop
  }

  if (status == HAL_OK)
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d141      	bne.n	800650c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 ff17 	bl	80072c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a22      	ldr	r2, [pc, #136]	; (8006524 <HAL_TIM_PWM_Start_DMA+0x338>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_TIM_PWM_Start_DMA+0x338>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d009      	beq.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a17      	ldr	r2, [pc, #92]	; (8006528 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_TIM_PWM_Start_DMA+0x340>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d111      	bne.n	80064fc <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d010      	beq.n	800650c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fa:	e007      	b.n	800650c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	08006c9b 	.word	0x08006c9b
 800651c:	08006d43 	.word	0x08006d43
 8006520:	08006c09 	.word	0x08006c09
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800

08006530 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b0c      	cmp	r3, #12
 8006542:	d855      	bhi.n	80065f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	08006581 	.word	0x08006581
 8006550:	080065f1 	.word	0x080065f1
 8006554:	080065f1 	.word	0x080065f1
 8006558:	080065f1 	.word	0x080065f1
 800655c:	0800659d 	.word	0x0800659d
 8006560:	080065f1 	.word	0x080065f1
 8006564:	080065f1 	.word	0x080065f1
 8006568:	080065f1 	.word	0x080065f1
 800656c:	080065b9 	.word	0x080065b9
 8006570:	080065f1 	.word	0x080065f1
 8006574:	080065f1 	.word	0x080065f1
 8006578:	080065f1 	.word	0x080065f1
 800657c:	080065d5 	.word	0x080065d5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800658e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	4618      	mov	r0, r3
 8006596:	f7fc f88b 	bl	80026b0 <HAL_DMA_Abort_IT>
      break;
 800659a:	e02c      	b.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fc f87d 	bl	80026b0 <HAL_DMA_Abort_IT>
      break;
 80065b6:	e01e      	b.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fc f86f 	bl	80026b0 <HAL_DMA_Abort_IT>
      break;
 80065d2:	e010      	b.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fc f861 	bl	80026b0 <HAL_DMA_Abort_IT>
      break;
 80065ee:	e002      	b.n	80065f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
      break;
 80065f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d157      	bne.n	80066ac <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fe5d 	bl	80072c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d117      	bne.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6a1a      	ldr	r2, [r3, #32]
 800661a:	f241 1311 	movw	r3, #4369	; 0x1111
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10f      	bne.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6a1a      	ldr	r2, [r3, #32]
 800662a:	f240 4344 	movw	r3, #1092	; 0x444
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d107      	bne.n	8006644 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006642:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	f241 1311 	movw	r3, #4369	; 0x1111
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	f240 4344 	movw	r3, #1092	; 0x444
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d107      	bne.n	8006674 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <HAL_TIM_PWM_Stop_DMA+0x154>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006682:	e013      	b.n	80066ac <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b04      	cmp	r3, #4
 8006688:	d104      	bne.n	8006694 <HAL_TIM_PWM_Stop_DMA+0x164>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006692:	e00b      	b.n	80066ac <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b08      	cmp	r3, #8
 8006698:	d104      	bne.n	80066a4 <HAL_TIM_PWM_Stop_DMA+0x174>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a2:	e003      	b.n	80066ac <HAL_TIM_PWM_Stop_DMA+0x17c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00

080066bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d020      	beq.n	8006720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01b      	beq.n	8006720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0202 	mvn.w	r2, #2
 80066f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa5a 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 800670c:	e005      	b.n	800671a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa4d 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fb f9f3 	bl	8001b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d020      	beq.n	800676c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0204 	mvn.w	r2, #4
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa34 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa27 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fb f9cd 	bl	8001b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d020      	beq.n	80067b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01b      	beq.n	80067b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f06f 0208 	mvn.w	r2, #8
 8006788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2204      	movs	r2, #4
 800678e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa0e 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 80067a4:	e005      	b.n	80067b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa01 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fb f9a7 	bl	8001b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d020      	beq.n	8006804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01b      	beq.n	8006804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0210 	mvn.w	r2, #16
 80067d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2208      	movs	r2, #8
 80067da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9e8 	bl	8006bc0 <HAL_TIM_IC_CaptureCallback>
 80067f0:	e005      	b.n	80067fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9db 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fb f981 	bl	8001b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0201 	mvn.w	r2, #1
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fb f962 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fdc7 	bl	80073da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9ba 	bl	8006be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00c      	beq.n	8006894 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0220 	mvn.w	r2, #32
 800688c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fd9a 	bl	80073c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e0ae      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	f200 809f 	bhi.w	8006a08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006905 	.word	0x08006905
 80068d4:	08006a09 	.word	0x08006a09
 80068d8:	08006a09 	.word	0x08006a09
 80068dc:	08006a09 	.word	0x08006a09
 80068e0:	08006945 	.word	0x08006945
 80068e4:	08006a09 	.word	0x08006a09
 80068e8:	08006a09 	.word	0x08006a09
 80068ec:	08006a09 	.word	0x08006a09
 80068f0:	08006987 	.word	0x08006987
 80068f4:	08006a09 	.word	0x08006a09
 80068f8:	08006a09 	.word	0x08006a09
 80068fc:	08006a09 	.word	0x08006a09
 8006900:	080069c7 	.word	0x080069c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fabc 	bl	8006e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0208 	orr.w	r2, r2, #8
 800691e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0204 	bic.w	r2, r2, #4
 800692e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6999      	ldr	r1, [r3, #24]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	619a      	str	r2, [r3, #24]
      break;
 8006942:	e064      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fb02 	bl	8006f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800695e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6999      	ldr	r1, [r3, #24]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	021a      	lsls	r2, r3, #8
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	619a      	str	r2, [r3, #24]
      break;
 8006984:	e043      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fb4b 	bl	8007028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0208 	orr.w	r2, r2, #8
 80069a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0204 	bic.w	r2, r2, #4
 80069b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69d9      	ldr	r1, [r3, #28]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	61da      	str	r2, [r3, #28]
      break;
 80069c4:	e023      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fb95 	bl	80070fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69da      	ldr	r2, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69d9      	ldr	r1, [r3, #28]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	021a      	lsls	r2, r3, #8
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	61da      	str	r2, [r3, #28]
      break;
 8006a06:	e002      	b.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIM_ConfigClockSource+0x1c>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e0b4      	b.n	8006ba6 <HAL_TIM_ConfigClockSource+0x186>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a74:	d03e      	beq.n	8006af4 <HAL_TIM_ConfigClockSource+0xd4>
 8006a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7a:	f200 8087 	bhi.w	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	f000 8086 	beq.w	8006b92 <HAL_TIM_ConfigClockSource+0x172>
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8a:	d87f      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a8c:	2b70      	cmp	r3, #112	; 0x70
 8006a8e:	d01a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8006a90:	2b70      	cmp	r3, #112	; 0x70
 8006a92:	d87b      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a94:	2b60      	cmp	r3, #96	; 0x60
 8006a96:	d050      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x11a>
 8006a98:	2b60      	cmp	r3, #96	; 0x60
 8006a9a:	d877      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006a9c:	2b50      	cmp	r3, #80	; 0x50
 8006a9e:	d03c      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0xfa>
 8006aa0:	2b50      	cmp	r3, #80	; 0x50
 8006aa2:	d873      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006aa4:	2b40      	cmp	r3, #64	; 0x40
 8006aa6:	d058      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x13a>
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d86f      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d064      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ab0:	2b30      	cmp	r3, #48	; 0x30
 8006ab2:	d86b      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d060      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d867      	bhi.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d05c      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d05a      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x15a>
 8006ac4:	e062      	b.n	8006b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6899      	ldr	r1, [r3, #8]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f000 fbd6 	bl	8007286 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	609a      	str	r2, [r3, #8]
      break;
 8006af2:	e04f      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6899      	ldr	r1, [r3, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f000 fbbf 	bl	8007286 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b16:	609a      	str	r2, [r3, #8]
      break;
 8006b18:	e03c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f000 fb36 	bl	8007198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2150      	movs	r1, #80	; 0x50
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fb8d 	bl	8007252 <TIM_ITRx_SetConfig>
      break;
 8006b38:	e02c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 fb54 	bl	80071f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2160      	movs	r1, #96	; 0x60
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fb7d 	bl	8007252 <TIM_ITRx_SetConfig>
      break;
 8006b58:	e01c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6859      	ldr	r1, [r3, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f000 fb16 	bl	8007198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fb6d 	bl	8007252 <TIM_ITRx_SetConfig>
      break;
 8006b78:	e00c      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f000 fb64 	bl	8007252 <TIM_ITRx_SetConfig>
      break;
 8006b8a:	e003      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b90:	e000      	b.n	8006b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d107      	bne.n	8006c30 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c2e:	e02a      	b.n	8006c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d107      	bne.n	8006c4a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c48:	e01d      	b.n	8006c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d107      	bne.n	8006c64 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2204      	movs	r2, #4
 8006c58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c62:	e010      	b.n	8006c86 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d107      	bne.n	8006c7e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2208      	movs	r2, #8
 8006c72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c7c:	e003      	b.n	8006c86 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff ffb5 	bl	8006bf6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	771a      	strb	r2, [r3, #28]
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d10b      	bne.n	8006cca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d136      	bne.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cc8:	e031      	b.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d10b      	bne.n	8006cec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d125      	bne.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cea:	e020      	b.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d10b      	bne.n	8006d0e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d114      	bne.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0c:	e00f      	b.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d10a      	bne.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7fa fee6 	bl	8001b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	771a      	strb	r2, [r3, #28]
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d103      	bne.n	8006d62 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	771a      	strb	r2, [r3, #28]
 8006d60:	e019      	b.n	8006d96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d103      	bne.n	8006d74 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	771a      	strb	r2, [r3, #28]
 8006d72:	e010      	b.n	8006d96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d103      	bne.n	8006d86 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2204      	movs	r2, #4
 8006d82:	771a      	strb	r2, [r3, #28]
 8006d84:	e007      	b.n	8006d96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d102      	bne.n	8006d96 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2208      	movs	r2, #8
 8006d94:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff ff1b 	bl	8006bd2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	771a      	strb	r2, [r3, #28]
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <TIM_Base_SetConfig+0xd0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00b      	beq.n	8006ddc <TIM_Base_SetConfig+0x30>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dca:	d007      	beq.n	8006ddc <TIM_Base_SetConfig+0x30>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_Base_SetConfig+0x30>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a2b      	ldr	r2, [pc, #172]	; (8006e84 <TIM_Base_SetConfig+0xd8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d108      	bne.n	8006dee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <TIM_Base_SetConfig+0xd0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfc:	d007      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d003      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a1e      	ldr	r2, [pc, #120]	; (8006e84 <TIM_Base_SetConfig+0xd8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d108      	bne.n	8006e20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0d      	ldr	r2, [pc, #52]	; (8006e7c <TIM_Base_SetConfig+0xd0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f023 0201 	bic.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]
  }
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800

08006e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f023 0201 	bic.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0303 	bic.w	r3, r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 0302 	bic.w	r3, r3, #2
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <TIM_OC1_SetConfig+0xc8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d10c      	bne.n	8006efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 0308 	bic.w	r3, r3, #8
 8006eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 0304 	bic.w	r3, r3, #4
 8006efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <TIM_OC1_SetConfig+0xc8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d111      	bne.n	8006f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40012c00 	.word	0x40012c00

08006f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f023 0210 	bic.w	r2, r3, #16
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <TIM_OC2_SetConfig+0xd0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10d      	bne.n	8006fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a14      	ldr	r2, [pc, #80]	; (8007024 <TIM_OC2_SetConfig+0xd0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d113      	bne.n	8007000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	40012c00 	.word	0x40012c00

08007028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <TIM_OC3_SetConfig+0xd0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d10d      	bne.n	80070a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800708c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a14      	ldr	r2, [pc, #80]	; (80070f8 <TIM_OC3_SetConfig+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d113      	bne.n	80070d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc80      	pop	{r7}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40012c00 	.word	0x40012c00

080070fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a0f      	ldr	r2, [pc, #60]	; (8007194 <TIM_OC4_SetConfig+0x98>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d109      	bne.n	8007170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	019b      	lsls	r3, r3, #6
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	40012c00 	.word	0x40012c00

08007198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 030a 	bic.w	r3, r3, #10
 80071d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr

080071f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0210 	bic.w	r2, r3, #16
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	031b      	lsls	r3, r3, #12
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	f043 0307 	orr.w	r3, r3, #7
 8007274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	609a      	str	r2, [r3, #8]
}
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007286:	b480      	push	{r7}
 8007288:	b087      	sub	sp, #28
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	021a      	lsls	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	609a      	str	r2, [r3, #8]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr

080072c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	2201      	movs	r2, #1
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	43db      	mvns	r3, r3
 80072e6:	401a      	ands	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1a      	ldr	r2, [r3, #32]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	431a      	orrs	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e046      	b.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a16      	ldr	r2, [pc, #88]	; (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00e      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d009      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a10      	ldr	r2, [pc, #64]	; (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d10c      	bne.n	80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800738c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800

080073c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e042      	b.n	8007484 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fa fd2a 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2224      	movs	r2, #36	; 0x24
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800742e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fc7f 	bl	8007d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b0ba      	sub	sp, #232	; 0xe8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10f      	bne.n	80074f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <HAL_UART_IRQHandler+0x66>
 80074de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fb63 	bl	8007bb6 <UART_Receive_IT>
      return;
 80074f0:	e25b      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80de 	beq.w	80076b8 <HAL_UART_IRQHandler+0x22c>
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d106      	bne.n	8007516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80d1 	beq.w	80076b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <HAL_UART_IRQHandler+0xae>
 8007522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	f043 0201 	orr.w	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_UART_IRQHandler+0xd2>
 8007546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007556:	f043 0202 	orr.w	r2, r3, #2
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <HAL_UART_IRQHandler+0xf6>
 800756a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	f043 0204 	orr.w	r2, r3, #4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <HAL_UART_IRQHandler+0x126>
 800758e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800759a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	f043 0208 	orr.w	r2, r3, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 81f2 	beq.w	80079a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_UART_IRQHandler+0x14e>
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 faee 	bl	8007bb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <HAL_UART_IRQHandler+0x17a>
 80075fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d04f      	beq.n	80076a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9f8 	bl	80079fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d041      	beq.n	800769e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3314      	adds	r3, #20
 8007620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3314      	adds	r3, #20
 8007642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800764a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800765e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d9      	bne.n	800761a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d013      	beq.n	8007696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	4a7e      	ldr	r2, [pc, #504]	; (800786c <HAL_UART_IRQHandler+0x3e0>)
 8007674:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	4618      	mov	r0, r3
 800767c:	f7fb f818 	bl	80026b0 <HAL_DMA_Abort_IT>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e00e      	b.n	80076b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f99c 	bl	80079d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	e00a      	b.n	80076b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f998 	bl	80079d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	e006      	b.n	80076b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f994 	bl	80079d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80076b2:	e175      	b.n	80079a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	bf00      	nop
    return;
 80076b6:	e173      	b.n	80079a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	2b01      	cmp	r3, #1
 80076be:	f040 814f 	bne.w	8007960 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c6:	f003 0310 	and.w	r3, r3, #16
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8148 	beq.w	8007960 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8141 	beq.w	8007960 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80b6 	beq.w	8007870 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8145 	beq.w	80079a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800771e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007722:	429a      	cmp	r2, r3
 8007724:	f080 813e 	bcs.w	80079a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800772e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	2b20      	cmp	r3, #32
 8007738:	f000 8088 	beq.w	800784c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007768:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800776c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007774:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1d9      	bne.n	800773c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3314      	adds	r3, #20
 80077a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e1      	bne.n	8007788 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3314      	adds	r3, #20
 80077e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e3      	bne.n	80077c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	330c      	adds	r3, #12
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800781a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800782e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007830:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800783c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e3      	bne.n	800780a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	4618      	mov	r0, r3
 8007848:	f7fa fef6 	bl	8002638 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800785a:	b29b      	uxth	r3, r3
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	b29b      	uxth	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8bf 	bl	80079e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007868:	e09c      	b.n	80079a4 <HAL_UART_IRQHandler+0x518>
 800786a:	bf00      	nop
 800786c:	08007ac1 	.word	0x08007ac1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007878:	b29b      	uxth	r3, r3
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 808e 	beq.w	80079a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800788c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8089 	beq.w	80079a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078ba:	647a      	str	r2, [r7, #68]	; 0x44
 80078bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e3      	bne.n	8007896 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	623b      	str	r3, [r7, #32]
   return(result);
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3314      	adds	r3, #20
 80078ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078f2:	633a      	str	r2, [r7, #48]	; 0x30
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e3      	bne.n	80078ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	60fb      	str	r3, [r7, #12]
   return(result);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0310 	bic.w	r3, r3, #16
 800792a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	330c      	adds	r3, #12
 8007934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007938:	61fa      	str	r2, [r7, #28]
 800793a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	69b9      	ldr	r1, [r7, #24]
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	617b      	str	r3, [r7, #20]
   return(result);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e3      	bne.n	8007914 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007952:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f844 	bl	80079e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800795e:	e023      	b.n	80079a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <HAL_UART_IRQHandler+0x4f4>
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8b5 	bl	8007ae8 <UART_Transmit_IT>
    return;
 800797e:	e014      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00e      	beq.n	80079aa <HAL_UART_IRQHandler+0x51e>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8f4 	bl	8007b86 <UART_EndTransmit_IT>
    return;
 800799e:	e004      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
    return;
 80079a0:	bf00      	nop
 80079a2:	e002      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
      return;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <HAL_UART_IRQHandler+0x51e>
      return;
 80079a8:	bf00      	nop
  }
}
 80079aa:	37e8      	adds	r7, #232	; 0xe8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr

080079e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b095      	sub	sp, #84	; 0x54
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a24:	643a      	str	r2, [r7, #64]	; 0x40
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e5      	bne.n	8007a04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3314      	adds	r3, #20
 8007a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3314      	adds	r3, #20
 8007a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e5      	bne.n	8007a38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d119      	bne.n	8007aa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f023 0310 	bic.w	r3, r3, #16
 8007a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a94:	61ba      	str	r2, [r7, #24]
 8007a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6979      	ldr	r1, [r7, #20]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e5      	bne.n	8007a74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ab6:	bf00      	nop
 8007ab8:	3754      	adds	r7, #84	; 0x54
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff ff7a 	bl	80079d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b21      	cmp	r3, #33	; 0x21
 8007afa:	d13e      	bne.n	8007b7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	d114      	bne.n	8007b30 <UART_Transmit_IT+0x48>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d110      	bne.n	8007b30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	1c9a      	adds	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]
 8007b2e:	e008      	b.n	8007b42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	1c59      	adds	r1, r3, #1
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6211      	str	r1, [r2, #32]
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68da      	ldr	r2, [r3, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
  }
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bc80      	pop	{r7}
 8007b84:	4770      	bx	lr

08007b86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ff02 	bl	80079b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b08c      	sub	sp, #48	; 0x30
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b22      	cmp	r3, #34	; 0x22
 8007bc8:	f040 80ae 	bne.w	8007d28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd4:	d117      	bne.n	8007c06 <UART_Receive_IT+0x50>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d113      	bne.n	8007c06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	1c9a      	adds	r2, r3, #2
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	629a      	str	r2, [r3, #40]	; 0x28
 8007c04:	e026      	b.n	8007c54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c18:	d007      	beq.n	8007c2a <UART_Receive_IT+0x74>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <UART_Receive_IT+0x82>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e008      	b.n	8007c4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	4619      	mov	r1, r3
 8007c62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d15d      	bne.n	8007d24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0220 	bic.w	r2, r2, #32
 8007c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d135      	bne.n	8007d1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f023 0310 	bic.w	r3, r3, #16
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd4:	623a      	str	r2, [r7, #32]
 8007cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	69f9      	ldr	r1, [r7, #28]
 8007cda:	6a3a      	ldr	r2, [r7, #32]
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e5      	bne.n	8007cb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d10a      	bne.n	8007d0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff fe67 	bl	80079e6 <HAL_UARTEx_RxEventCallback>
 8007d18:	e002      	b.n	8007d20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fe51 	bl	80079c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e002      	b.n	8007d2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3730      	adds	r7, #48	; 0x30
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d6e:	f023 030c 	bic.w	r3, r3, #12
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2c      	ldr	r2, [pc, #176]	; (8007e48 <UART_SetConfig+0x114>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d103      	bne.n	8007da4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d9c:	f7fe f8fa 	bl	8005f94 <HAL_RCC_GetPCLK2Freq>
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	e002      	b.n	8007daa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fe f8e2 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8007da8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009a      	lsls	r2, r3, #2
 8007db4:	441a      	add	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	4a22      	ldr	r2, [pc, #136]	; (8007e4c <UART_SetConfig+0x118>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	0119      	lsls	r1, r3, #4
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009a      	lsls	r2, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007de0:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <UART_SetConfig+0x118>)
 8007de2:	fba3 0302 	umull	r0, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	2064      	movs	r0, #100	; 0x64
 8007dea:	fb00 f303 	mul.w	r3, r0, r3
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	3332      	adds	r3, #50	; 0x32
 8007df4:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <UART_SetConfig+0x118>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e00:	4419      	add	r1, r3
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009a      	lsls	r2, r3, #2
 8007e0c:	441a      	add	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <UART_SetConfig+0x118>)
 8007e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	2064      	movs	r0, #100	; 0x64
 8007e22:	fb00 f303 	mul.w	r3, r0, r3
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	3332      	adds	r3, #50	; 0x32
 8007e2c:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <UART_SetConfig+0x118>)
 8007e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40013800 	.word	0x40013800
 8007e4c:	51eb851f 	.word	0x51eb851f

08007e50 <__errno>:
 8007e50:	4b01      	ldr	r3, [pc, #4]	; (8007e58 <__errno+0x8>)
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	20000018 	.word	0x20000018

08007e5c <__libc_init_array>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	2600      	movs	r6, #0
 8007e60:	4d0c      	ldr	r5, [pc, #48]	; (8007e94 <__libc_init_array+0x38>)
 8007e62:	4c0d      	ldr	r4, [pc, #52]	; (8007e98 <__libc_init_array+0x3c>)
 8007e64:	1b64      	subs	r4, r4, r5
 8007e66:	10a4      	asrs	r4, r4, #2
 8007e68:	42a6      	cmp	r6, r4
 8007e6a:	d109      	bne.n	8007e80 <__libc_init_array+0x24>
 8007e6c:	f002 fece 	bl	800ac0c <_init>
 8007e70:	2600      	movs	r6, #0
 8007e72:	4d0a      	ldr	r5, [pc, #40]	; (8007e9c <__libc_init_array+0x40>)
 8007e74:	4c0a      	ldr	r4, [pc, #40]	; (8007ea0 <__libc_init_array+0x44>)
 8007e76:	1b64      	subs	r4, r4, r5
 8007e78:	10a4      	asrs	r4, r4, #2
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	d105      	bne.n	8007e8a <__libc_init_array+0x2e>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e84:	4798      	blx	r3
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7ee      	b.n	8007e68 <__libc_init_array+0xc>
 8007e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8e:	4798      	blx	r3
 8007e90:	3601      	adds	r6, #1
 8007e92:	e7f2      	b.n	8007e7a <__libc_init_array+0x1e>
 8007e94:	0800b0b4 	.word	0x0800b0b4
 8007e98:	0800b0b4 	.word	0x0800b0b4
 8007e9c:	0800b0b4 	.word	0x0800b0b4
 8007ea0:	0800b0b8 	.word	0x0800b0b8

08007ea4 <memset>:
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	4402      	add	r2, r0
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d100      	bne.n	8007eae <memset+0xa>
 8007eac:	4770      	bx	lr
 8007eae:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb2:	e7f9      	b.n	8007ea8 <memset+0x4>

08007eb4 <__cvt>:
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eba:	461f      	mov	r7, r3
 8007ebc:	bfbb      	ittet	lt
 8007ebe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007ec2:	461f      	movlt	r7, r3
 8007ec4:	2300      	movge	r3, #0
 8007ec6:	232d      	movlt	r3, #45	; 0x2d
 8007ec8:	b088      	sub	sp, #32
 8007eca:	4614      	mov	r4, r2
 8007ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ece:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007ed0:	7013      	strb	r3, [r2, #0]
 8007ed2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ed4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007ed8:	f023 0820 	bic.w	r8, r3, #32
 8007edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ee0:	d005      	beq.n	8007eee <__cvt+0x3a>
 8007ee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ee6:	d100      	bne.n	8007eea <__cvt+0x36>
 8007ee8:	3501      	adds	r5, #1
 8007eea:	2302      	movs	r3, #2
 8007eec:	e000      	b.n	8007ef0 <__cvt+0x3c>
 8007eee:	2303      	movs	r3, #3
 8007ef0:	aa07      	add	r2, sp, #28
 8007ef2:	9204      	str	r2, [sp, #16]
 8007ef4:	aa06      	add	r2, sp, #24
 8007ef6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007efa:	e9cd 3500 	strd	r3, r5, [sp]
 8007efe:	4622      	mov	r2, r4
 8007f00:	463b      	mov	r3, r7
 8007f02:	f000 fcf9 	bl	80088f8 <_dtoa_r>
 8007f06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	d102      	bne.n	8007f14 <__cvt+0x60>
 8007f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f10:	07db      	lsls	r3, r3, #31
 8007f12:	d522      	bpl.n	8007f5a <__cvt+0xa6>
 8007f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f18:	eb06 0905 	add.w	r9, r6, r5
 8007f1c:	d110      	bne.n	8007f40 <__cvt+0x8c>
 8007f1e:	7833      	ldrb	r3, [r6, #0]
 8007f20:	2b30      	cmp	r3, #48	; 0x30
 8007f22:	d10a      	bne.n	8007f3a <__cvt+0x86>
 8007f24:	2200      	movs	r2, #0
 8007f26:	2300      	movs	r3, #0
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f7f8 fd3c 	bl	80009a8 <__aeabi_dcmpeq>
 8007f30:	b918      	cbnz	r0, 8007f3a <__cvt+0x86>
 8007f32:	f1c5 0501 	rsb	r5, r5, #1
 8007f36:	f8ca 5000 	str.w	r5, [sl]
 8007f3a:	f8da 3000 	ldr.w	r3, [sl]
 8007f3e:	4499      	add	r9, r3
 8007f40:	2200      	movs	r2, #0
 8007f42:	2300      	movs	r3, #0
 8007f44:	4620      	mov	r0, r4
 8007f46:	4639      	mov	r1, r7
 8007f48:	f7f8 fd2e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f4c:	b108      	cbz	r0, 8007f52 <__cvt+0x9e>
 8007f4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f52:	2230      	movs	r2, #48	; 0x30
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	454b      	cmp	r3, r9
 8007f58:	d307      	bcc.n	8007f6a <__cvt+0xb6>
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f60:	1b9b      	subs	r3, r3, r6
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	b008      	add	sp, #32
 8007f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6a:	1c59      	adds	r1, r3, #1
 8007f6c:	9107      	str	r1, [sp, #28]
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e7f0      	b.n	8007f54 <__cvt+0xa0>

08007f72 <__exponent>:
 8007f72:	4603      	mov	r3, r0
 8007f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f76:	2900      	cmp	r1, #0
 8007f78:	f803 2b02 	strb.w	r2, [r3], #2
 8007f7c:	bfb6      	itet	lt
 8007f7e:	222d      	movlt	r2, #45	; 0x2d
 8007f80:	222b      	movge	r2, #43	; 0x2b
 8007f82:	4249      	neglt	r1, r1
 8007f84:	2909      	cmp	r1, #9
 8007f86:	7042      	strb	r2, [r0, #1]
 8007f88:	dd2b      	ble.n	8007fe2 <__exponent+0x70>
 8007f8a:	f10d 0407 	add.w	r4, sp, #7
 8007f8e:	46a4      	mov	ip, r4
 8007f90:	270a      	movs	r7, #10
 8007f92:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f96:	460a      	mov	r2, r1
 8007f98:	46a6      	mov	lr, r4
 8007f9a:	fb07 1516 	mls	r5, r7, r6, r1
 8007f9e:	2a63      	cmp	r2, #99	; 0x63
 8007fa0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007faa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fae:	dcf0      	bgt.n	8007f92 <__exponent+0x20>
 8007fb0:	3130      	adds	r1, #48	; 0x30
 8007fb2:	f1ae 0502 	sub.w	r5, lr, #2
 8007fb6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fba:	4629      	mov	r1, r5
 8007fbc:	1c44      	adds	r4, r0, #1
 8007fbe:	4561      	cmp	r1, ip
 8007fc0:	d30a      	bcc.n	8007fd8 <__exponent+0x66>
 8007fc2:	f10d 0209 	add.w	r2, sp, #9
 8007fc6:	eba2 020e 	sub.w	r2, r2, lr
 8007fca:	4565      	cmp	r5, ip
 8007fcc:	bf88      	it	hi
 8007fce:	2200      	movhi	r2, #0
 8007fd0:	4413      	add	r3, r2
 8007fd2:	1a18      	subs	r0, r3, r0
 8007fd4:	b003      	add	sp, #12
 8007fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fdc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007fe0:	e7ed      	b.n	8007fbe <__exponent+0x4c>
 8007fe2:	2330      	movs	r3, #48	; 0x30
 8007fe4:	3130      	adds	r1, #48	; 0x30
 8007fe6:	7083      	strb	r3, [r0, #2]
 8007fe8:	70c1      	strb	r1, [r0, #3]
 8007fea:	1d03      	adds	r3, r0, #4
 8007fec:	e7f1      	b.n	8007fd2 <__exponent+0x60>
	...

08007ff0 <_printf_float>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	b091      	sub	sp, #68	; 0x44
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	4605      	mov	r5, r0
 8008002:	f001 fa67 	bl	80094d4 <_localeconv_r>
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	f7f8 f8a0 	bl	8000150 <strlen>
 8008010:	2300      	movs	r3, #0
 8008012:	930e      	str	r3, [sp, #56]	; 0x38
 8008014:	f8d8 3000 	ldr.w	r3, [r8]
 8008018:	900a      	str	r0, [sp, #40]	; 0x28
 800801a:	3307      	adds	r3, #7
 800801c:	f023 0307 	bic.w	r3, r3, #7
 8008020:	f103 0208 	add.w	r2, r3, #8
 8008024:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008028:	f8d4 b000 	ldr.w	fp, [r4]
 800802c:	f8c8 2000 	str.w	r2, [r8]
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008038:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800803c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008040:	930b      	str	r3, [sp, #44]	; 0x2c
 8008042:	f04f 32ff 	mov.w	r2, #4294967295
 8008046:	4640      	mov	r0, r8
 8008048:	4b9c      	ldr	r3, [pc, #624]	; (80082bc <_printf_float+0x2cc>)
 800804a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804c:	f7f8 fcde 	bl	8000a0c <__aeabi_dcmpun>
 8008050:	bb70      	cbnz	r0, 80080b0 <_printf_float+0xc0>
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	4640      	mov	r0, r8
 8008058:	4b98      	ldr	r3, [pc, #608]	; (80082bc <_printf_float+0x2cc>)
 800805a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800805c:	f7f8 fcb8 	bl	80009d0 <__aeabi_dcmple>
 8008060:	bb30      	cbnz	r0, 80080b0 <_printf_float+0xc0>
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	4640      	mov	r0, r8
 8008068:	4651      	mov	r1, sl
 800806a:	f7f8 fca7 	bl	80009bc <__aeabi_dcmplt>
 800806e:	b110      	cbz	r0, 8008076 <_printf_float+0x86>
 8008070:	232d      	movs	r3, #45	; 0x2d
 8008072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008076:	4b92      	ldr	r3, [pc, #584]	; (80082c0 <_printf_float+0x2d0>)
 8008078:	4892      	ldr	r0, [pc, #584]	; (80082c4 <_printf_float+0x2d4>)
 800807a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800807e:	bf94      	ite	ls
 8008080:	4698      	movls	r8, r3
 8008082:	4680      	movhi	r8, r0
 8008084:	2303      	movs	r3, #3
 8008086:	f04f 0a00 	mov.w	sl, #0
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	f02b 0304 	bic.w	r3, fp, #4
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	4633      	mov	r3, r6
 8008094:	4621      	mov	r1, r4
 8008096:	4628      	mov	r0, r5
 8008098:	9700      	str	r7, [sp, #0]
 800809a:	aa0f      	add	r2, sp, #60	; 0x3c
 800809c:	f000 f9d4 	bl	8008448 <_printf_common>
 80080a0:	3001      	adds	r0, #1
 80080a2:	f040 8090 	bne.w	80081c6 <_printf_float+0x1d6>
 80080a6:	f04f 30ff 	mov.w	r0, #4294967295
 80080aa:	b011      	add	sp, #68	; 0x44
 80080ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b0:	4642      	mov	r2, r8
 80080b2:	4653      	mov	r3, sl
 80080b4:	4640      	mov	r0, r8
 80080b6:	4651      	mov	r1, sl
 80080b8:	f7f8 fca8 	bl	8000a0c <__aeabi_dcmpun>
 80080bc:	b148      	cbz	r0, 80080d2 <_printf_float+0xe2>
 80080be:	f1ba 0f00 	cmp.w	sl, #0
 80080c2:	bfb8      	it	lt
 80080c4:	232d      	movlt	r3, #45	; 0x2d
 80080c6:	4880      	ldr	r0, [pc, #512]	; (80082c8 <_printf_float+0x2d8>)
 80080c8:	bfb8      	it	lt
 80080ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080ce:	4b7f      	ldr	r3, [pc, #508]	; (80082cc <_printf_float+0x2dc>)
 80080d0:	e7d3      	b.n	800807a <_printf_float+0x8a>
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	d142      	bne.n	8008162 <_printf_float+0x172>
 80080dc:	2306      	movs	r3, #6
 80080de:	6063      	str	r3, [r4, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	9206      	str	r2, [sp, #24]
 80080e4:	aa0e      	add	r2, sp, #56	; 0x38
 80080e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80080ea:	aa0d      	add	r2, sp, #52	; 0x34
 80080ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80080f0:	9203      	str	r2, [sp, #12]
 80080f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80080f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	4642      	mov	r2, r8
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4628      	mov	r0, r5
 8008104:	4653      	mov	r3, sl
 8008106:	910b      	str	r1, [sp, #44]	; 0x2c
 8008108:	f7ff fed4 	bl	8007eb4 <__cvt>
 800810c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800810e:	4680      	mov	r8, r0
 8008110:	2947      	cmp	r1, #71	; 0x47
 8008112:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008114:	d108      	bne.n	8008128 <_printf_float+0x138>
 8008116:	1cc8      	adds	r0, r1, #3
 8008118:	db02      	blt.n	8008120 <_printf_float+0x130>
 800811a:	6863      	ldr	r3, [r4, #4]
 800811c:	4299      	cmp	r1, r3
 800811e:	dd40      	ble.n	80081a2 <_printf_float+0x1b2>
 8008120:	f1a9 0902 	sub.w	r9, r9, #2
 8008124:	fa5f f989 	uxtb.w	r9, r9
 8008128:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800812c:	d81f      	bhi.n	800816e <_printf_float+0x17e>
 800812e:	464a      	mov	r2, r9
 8008130:	3901      	subs	r1, #1
 8008132:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008136:	910d      	str	r1, [sp, #52]	; 0x34
 8008138:	f7ff ff1b 	bl	8007f72 <__exponent>
 800813c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800813e:	4682      	mov	sl, r0
 8008140:	1813      	adds	r3, r2, r0
 8008142:	2a01      	cmp	r2, #1
 8008144:	6123      	str	r3, [r4, #16]
 8008146:	dc02      	bgt.n	800814e <_printf_float+0x15e>
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	07d2      	lsls	r2, r2, #31
 800814c:	d501      	bpl.n	8008152 <_printf_float+0x162>
 800814e:	3301      	adds	r3, #1
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008156:	2b00      	cmp	r3, #0
 8008158:	d09b      	beq.n	8008092 <_printf_float+0xa2>
 800815a:	232d      	movs	r3, #45	; 0x2d
 800815c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008160:	e797      	b.n	8008092 <_printf_float+0xa2>
 8008162:	2947      	cmp	r1, #71	; 0x47
 8008164:	d1bc      	bne.n	80080e0 <_printf_float+0xf0>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1ba      	bne.n	80080e0 <_printf_float+0xf0>
 800816a:	2301      	movs	r3, #1
 800816c:	e7b7      	b.n	80080de <_printf_float+0xee>
 800816e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008172:	d118      	bne.n	80081a6 <_printf_float+0x1b6>
 8008174:	2900      	cmp	r1, #0
 8008176:	6863      	ldr	r3, [r4, #4]
 8008178:	dd0b      	ble.n	8008192 <_printf_float+0x1a2>
 800817a:	6121      	str	r1, [r4, #16]
 800817c:	b913      	cbnz	r3, 8008184 <_printf_float+0x194>
 800817e:	6822      	ldr	r2, [r4, #0]
 8008180:	07d0      	lsls	r0, r2, #31
 8008182:	d502      	bpl.n	800818a <_printf_float+0x19a>
 8008184:	3301      	adds	r3, #1
 8008186:	440b      	add	r3, r1
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	f04f 0a00 	mov.w	sl, #0
 800818e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008190:	e7df      	b.n	8008152 <_printf_float+0x162>
 8008192:	b913      	cbnz	r3, 800819a <_printf_float+0x1aa>
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	07d2      	lsls	r2, r2, #31
 8008198:	d501      	bpl.n	800819e <_printf_float+0x1ae>
 800819a:	3302      	adds	r3, #2
 800819c:	e7f4      	b.n	8008188 <_printf_float+0x198>
 800819e:	2301      	movs	r3, #1
 80081a0:	e7f2      	b.n	8008188 <_printf_float+0x198>
 80081a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80081a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a8:	4299      	cmp	r1, r3
 80081aa:	db05      	blt.n	80081b8 <_printf_float+0x1c8>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	6121      	str	r1, [r4, #16]
 80081b0:	07d8      	lsls	r0, r3, #31
 80081b2:	d5ea      	bpl.n	800818a <_printf_float+0x19a>
 80081b4:	1c4b      	adds	r3, r1, #1
 80081b6:	e7e7      	b.n	8008188 <_printf_float+0x198>
 80081b8:	2900      	cmp	r1, #0
 80081ba:	bfcc      	ite	gt
 80081bc:	2201      	movgt	r2, #1
 80081be:	f1c1 0202 	rsble	r2, r1, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	e7e0      	b.n	8008188 <_printf_float+0x198>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	055a      	lsls	r2, r3, #21
 80081ca:	d407      	bmi.n	80081dc <_printf_float+0x1ec>
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	4642      	mov	r2, r8
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	d12b      	bne.n	8008232 <_printf_float+0x242>
 80081da:	e764      	b.n	80080a6 <_printf_float+0xb6>
 80081dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081e0:	f240 80dd 	bls.w	800839e <_printf_float+0x3ae>
 80081e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081e8:	2200      	movs	r2, #0
 80081ea:	2300      	movs	r3, #0
 80081ec:	f7f8 fbdc 	bl	80009a8 <__aeabi_dcmpeq>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d033      	beq.n	800825c <_printf_float+0x26c>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	4a35      	ldr	r2, [pc, #212]	; (80082d0 <_printf_float+0x2e0>)
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af51 	beq.w	80080a6 <_printf_float+0xb6>
 8008204:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008208:	429a      	cmp	r2, r3
 800820a:	db02      	blt.n	8008212 <_printf_float+0x222>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	07d8      	lsls	r0, r3, #31
 8008210:	d50f      	bpl.n	8008232 <_printf_float+0x242>
 8008212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	f43f af42 	beq.w	80080a6 <_printf_float+0xb6>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	f104 091a 	add.w	r9, r4, #26
 800822a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822c:	3b01      	subs	r3, #1
 800822e:	4543      	cmp	r3, r8
 8008230:	dc09      	bgt.n	8008246 <_printf_float+0x256>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	079b      	lsls	r3, r3, #30
 8008236:	f100 8102 	bmi.w	800843e <_printf_float+0x44e>
 800823a:	68e0      	ldr	r0, [r4, #12]
 800823c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800823e:	4298      	cmp	r0, r3
 8008240:	bfb8      	it	lt
 8008242:	4618      	movlt	r0, r3
 8008244:	e731      	b.n	80080aa <_printf_float+0xba>
 8008246:	2301      	movs	r3, #1
 8008248:	464a      	mov	r2, r9
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	f43f af28 	beq.w	80080a6 <_printf_float+0xb6>
 8008256:	f108 0801 	add.w	r8, r8, #1
 800825a:	e7e6      	b.n	800822a <_printf_float+0x23a>
 800825c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc38      	bgt.n	80082d4 <_printf_float+0x2e4>
 8008262:	2301      	movs	r3, #1
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	4a19      	ldr	r2, [pc, #100]	; (80082d0 <_printf_float+0x2e0>)
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	f43f af1a 	beq.w	80080a6 <_printf_float+0xb6>
 8008272:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008276:	4313      	orrs	r3, r2
 8008278:	d102      	bne.n	8008280 <_printf_float+0x290>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	07d9      	lsls	r1, r3, #31
 800827e:	d5d8      	bpl.n	8008232 <_printf_float+0x242>
 8008280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f af0b 	beq.w	80080a6 <_printf_float+0xb6>
 8008290:	f04f 0900 	mov.w	r9, #0
 8008294:	f104 0a1a 	add.w	sl, r4, #26
 8008298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800829a:	425b      	negs	r3, r3
 800829c:	454b      	cmp	r3, r9
 800829e:	dc01      	bgt.n	80082a4 <_printf_float+0x2b4>
 80082a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a2:	e794      	b.n	80081ce <_printf_float+0x1de>
 80082a4:	2301      	movs	r3, #1
 80082a6:	4652      	mov	r2, sl
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b8      	blx	r7
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f aef9 	beq.w	80080a6 <_printf_float+0xb6>
 80082b4:	f109 0901 	add.w	r9, r9, #1
 80082b8:	e7ee      	b.n	8008298 <_printf_float+0x2a8>
 80082ba:	bf00      	nop
 80082bc:	7fefffff 	.word	0x7fefffff
 80082c0:	0800acd8 	.word	0x0800acd8
 80082c4:	0800acdc 	.word	0x0800acdc
 80082c8:	0800ace4 	.word	0x0800ace4
 80082cc:	0800ace0 	.word	0x0800ace0
 80082d0:	0800ace8 	.word	0x0800ace8
 80082d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082d8:	429a      	cmp	r2, r3
 80082da:	bfa8      	it	ge
 80082dc:	461a      	movge	r2, r3
 80082de:	2a00      	cmp	r2, #0
 80082e0:	4691      	mov	r9, r2
 80082e2:	dc37      	bgt.n	8008354 <_printf_float+0x364>
 80082e4:	f04f 0b00 	mov.w	fp, #0
 80082e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ec:	f104 021a 	add.w	r2, r4, #26
 80082f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80082f4:	ebaa 0309 	sub.w	r3, sl, r9
 80082f8:	455b      	cmp	r3, fp
 80082fa:	dc33      	bgt.n	8008364 <_printf_float+0x374>
 80082fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008300:	429a      	cmp	r2, r3
 8008302:	db3b      	blt.n	800837c <_printf_float+0x38c>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	07da      	lsls	r2, r3, #31
 8008308:	d438      	bmi.n	800837c <_printf_float+0x38c>
 800830a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800830c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800830e:	eba2 030a 	sub.w	r3, r2, sl
 8008312:	eba2 0901 	sub.w	r9, r2, r1
 8008316:	4599      	cmp	r9, r3
 8008318:	bfa8      	it	ge
 800831a:	4699      	movge	r9, r3
 800831c:	f1b9 0f00 	cmp.w	r9, #0
 8008320:	dc34      	bgt.n	800838c <_printf_float+0x39c>
 8008322:	f04f 0800 	mov.w	r8, #0
 8008326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800832a:	f104 0a1a 	add.w	sl, r4, #26
 800832e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	eba3 0309 	sub.w	r3, r3, r9
 8008338:	4543      	cmp	r3, r8
 800833a:	f77f af7a 	ble.w	8008232 <_printf_float+0x242>
 800833e:	2301      	movs	r3, #1
 8008340:	4652      	mov	r2, sl
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f aeac 	beq.w	80080a6 <_printf_float+0xb6>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	e7ec      	b.n	800832e <_printf_float+0x33e>
 8008354:	4613      	mov	r3, r2
 8008356:	4631      	mov	r1, r6
 8008358:	4642      	mov	r2, r8
 800835a:	4628      	mov	r0, r5
 800835c:	47b8      	blx	r7
 800835e:	3001      	adds	r0, #1
 8008360:	d1c0      	bne.n	80082e4 <_printf_float+0x2f4>
 8008362:	e6a0      	b.n	80080a6 <_printf_float+0xb6>
 8008364:	2301      	movs	r3, #1
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	920b      	str	r2, [sp, #44]	; 0x2c
 800836c:	47b8      	blx	r7
 800836e:	3001      	adds	r0, #1
 8008370:	f43f ae99 	beq.w	80080a6 <_printf_float+0xb6>
 8008374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008376:	f10b 0b01 	add.w	fp, fp, #1
 800837a:	e7b9      	b.n	80082f0 <_printf_float+0x300>
 800837c:	4631      	mov	r1, r6
 800837e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	d1bf      	bne.n	800830a <_printf_float+0x31a>
 800838a:	e68c      	b.n	80080a6 <_printf_float+0xb6>
 800838c:	464b      	mov	r3, r9
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	eb08 020a 	add.w	r2, r8, sl
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	d1c2      	bne.n	8008322 <_printf_float+0x332>
 800839c:	e683      	b.n	80080a6 <_printf_float+0xb6>
 800839e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083a0:	2a01      	cmp	r2, #1
 80083a2:	dc01      	bgt.n	80083a8 <_printf_float+0x3b8>
 80083a4:	07db      	lsls	r3, r3, #31
 80083a6:	d537      	bpl.n	8008418 <_printf_float+0x428>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4642      	mov	r2, r8
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f ae77 	beq.w	80080a6 <_printf_float+0xb6>
 80083b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f ae6f 	beq.w	80080a6 <_printf_float+0xb6>
 80083c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083cc:	2200      	movs	r2, #0
 80083ce:	2300      	movs	r3, #0
 80083d0:	f7f8 faea 	bl	80009a8 <__aeabi_dcmpeq>
 80083d4:	b9d8      	cbnz	r0, 800840e <_printf_float+0x41e>
 80083d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d8:	f108 0201 	add.w	r2, r8, #1
 80083dc:	3b01      	subs	r3, #1
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	d10e      	bne.n	8008406 <_printf_float+0x416>
 80083e8:	e65d      	b.n	80080a6 <_printf_float+0xb6>
 80083ea:	2301      	movs	r3, #1
 80083ec:	464a      	mov	r2, r9
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f ae56 	beq.w	80080a6 <_printf_float+0xb6>
 80083fa:	f108 0801 	add.w	r8, r8, #1
 80083fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008400:	3b01      	subs	r3, #1
 8008402:	4543      	cmp	r3, r8
 8008404:	dcf1      	bgt.n	80083ea <_printf_float+0x3fa>
 8008406:	4653      	mov	r3, sl
 8008408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800840c:	e6e0      	b.n	80081d0 <_printf_float+0x1e0>
 800840e:	f04f 0800 	mov.w	r8, #0
 8008412:	f104 091a 	add.w	r9, r4, #26
 8008416:	e7f2      	b.n	80083fe <_printf_float+0x40e>
 8008418:	2301      	movs	r3, #1
 800841a:	4642      	mov	r2, r8
 800841c:	e7df      	b.n	80083de <_printf_float+0x3ee>
 800841e:	2301      	movs	r3, #1
 8008420:	464a      	mov	r2, r9
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	f43f ae3c 	beq.w	80080a6 <_printf_float+0xb6>
 800842e:	f108 0801 	add.w	r8, r8, #1
 8008432:	68e3      	ldr	r3, [r4, #12]
 8008434:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008436:	1a5b      	subs	r3, r3, r1
 8008438:	4543      	cmp	r3, r8
 800843a:	dcf0      	bgt.n	800841e <_printf_float+0x42e>
 800843c:	e6fd      	b.n	800823a <_printf_float+0x24a>
 800843e:	f04f 0800 	mov.w	r8, #0
 8008442:	f104 0919 	add.w	r9, r4, #25
 8008446:	e7f4      	b.n	8008432 <_printf_float+0x442>

08008448 <_printf_common>:
 8008448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800844c:	4616      	mov	r6, r2
 800844e:	4699      	mov	r9, r3
 8008450:	688a      	ldr	r2, [r1, #8]
 8008452:	690b      	ldr	r3, [r1, #16]
 8008454:	4607      	mov	r7, r0
 8008456:	4293      	cmp	r3, r2
 8008458:	bfb8      	it	lt
 800845a:	4613      	movlt	r3, r2
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008462:	460c      	mov	r4, r1
 8008464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008468:	b10a      	cbz	r2, 800846e <_printf_common+0x26>
 800846a:	3301      	adds	r3, #1
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	0699      	lsls	r1, r3, #26
 8008472:	bf42      	ittt	mi
 8008474:	6833      	ldrmi	r3, [r6, #0]
 8008476:	3302      	addmi	r3, #2
 8008478:	6033      	strmi	r3, [r6, #0]
 800847a:	6825      	ldr	r5, [r4, #0]
 800847c:	f015 0506 	ands.w	r5, r5, #6
 8008480:	d106      	bne.n	8008490 <_printf_common+0x48>
 8008482:	f104 0a19 	add.w	sl, r4, #25
 8008486:	68e3      	ldr	r3, [r4, #12]
 8008488:	6832      	ldr	r2, [r6, #0]
 800848a:	1a9b      	subs	r3, r3, r2
 800848c:	42ab      	cmp	r3, r5
 800848e:	dc28      	bgt.n	80084e2 <_printf_common+0x9a>
 8008490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008494:	1e13      	subs	r3, r2, #0
 8008496:	6822      	ldr	r2, [r4, #0]
 8008498:	bf18      	it	ne
 800849a:	2301      	movne	r3, #1
 800849c:	0692      	lsls	r2, r2, #26
 800849e:	d42d      	bmi.n	80084fc <_printf_common+0xb4>
 80084a0:	4649      	mov	r1, r9
 80084a2:	4638      	mov	r0, r7
 80084a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d020      	beq.n	80084f0 <_printf_common+0xa8>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	68e5      	ldr	r5, [r4, #12]
 80084b2:	f003 0306 	and.w	r3, r3, #6
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	bf18      	it	ne
 80084ba:	2500      	movne	r5, #0
 80084bc:	6832      	ldr	r2, [r6, #0]
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	bf08      	it	eq
 80084c6:	1aad      	subeq	r5, r5, r2
 80084c8:	6922      	ldr	r2, [r4, #16]
 80084ca:	bf08      	it	eq
 80084cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d0:	4293      	cmp	r3, r2
 80084d2:	bfc4      	itt	gt
 80084d4:	1a9b      	subgt	r3, r3, r2
 80084d6:	18ed      	addgt	r5, r5, r3
 80084d8:	341a      	adds	r4, #26
 80084da:	42b5      	cmp	r5, r6
 80084dc:	d11a      	bne.n	8008514 <_printf_common+0xcc>
 80084de:	2000      	movs	r0, #0
 80084e0:	e008      	b.n	80084f4 <_printf_common+0xac>
 80084e2:	2301      	movs	r3, #1
 80084e4:	4652      	mov	r2, sl
 80084e6:	4649      	mov	r1, r9
 80084e8:	4638      	mov	r0, r7
 80084ea:	47c0      	blx	r8
 80084ec:	3001      	adds	r0, #1
 80084ee:	d103      	bne.n	80084f8 <_printf_common+0xb0>
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f8:	3501      	adds	r5, #1
 80084fa:	e7c4      	b.n	8008486 <_printf_common+0x3e>
 80084fc:	2030      	movs	r0, #48	; 0x30
 80084fe:	18e1      	adds	r1, r4, r3
 8008500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800850a:	4422      	add	r2, r4
 800850c:	3302      	adds	r3, #2
 800850e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008512:	e7c5      	b.n	80084a0 <_printf_common+0x58>
 8008514:	2301      	movs	r3, #1
 8008516:	4622      	mov	r2, r4
 8008518:	4649      	mov	r1, r9
 800851a:	4638      	mov	r0, r7
 800851c:	47c0      	blx	r8
 800851e:	3001      	adds	r0, #1
 8008520:	d0e6      	beq.n	80084f0 <_printf_common+0xa8>
 8008522:	3601      	adds	r6, #1
 8008524:	e7d9      	b.n	80084da <_printf_common+0x92>
	...

08008528 <_printf_i>:
 8008528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	460c      	mov	r4, r1
 800852e:	7e27      	ldrb	r7, [r4, #24]
 8008530:	4691      	mov	r9, r2
 8008532:	2f78      	cmp	r7, #120	; 0x78
 8008534:	4680      	mov	r8, r0
 8008536:	469a      	mov	sl, r3
 8008538:	990c      	ldr	r1, [sp, #48]	; 0x30
 800853a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800853e:	d807      	bhi.n	8008550 <_printf_i+0x28>
 8008540:	2f62      	cmp	r7, #98	; 0x62
 8008542:	d80a      	bhi.n	800855a <_printf_i+0x32>
 8008544:	2f00      	cmp	r7, #0
 8008546:	f000 80d9 	beq.w	80086fc <_printf_i+0x1d4>
 800854a:	2f58      	cmp	r7, #88	; 0x58
 800854c:	f000 80a4 	beq.w	8008698 <_printf_i+0x170>
 8008550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008558:	e03a      	b.n	80085d0 <_printf_i+0xa8>
 800855a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800855e:	2b15      	cmp	r3, #21
 8008560:	d8f6      	bhi.n	8008550 <_printf_i+0x28>
 8008562:	a001      	add	r0, pc, #4	; (adr r0, 8008568 <_printf_i+0x40>)
 8008564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008568:	080085c1 	.word	0x080085c1
 800856c:	080085d5 	.word	0x080085d5
 8008570:	08008551 	.word	0x08008551
 8008574:	08008551 	.word	0x08008551
 8008578:	08008551 	.word	0x08008551
 800857c:	08008551 	.word	0x08008551
 8008580:	080085d5 	.word	0x080085d5
 8008584:	08008551 	.word	0x08008551
 8008588:	08008551 	.word	0x08008551
 800858c:	08008551 	.word	0x08008551
 8008590:	08008551 	.word	0x08008551
 8008594:	080086e3 	.word	0x080086e3
 8008598:	08008605 	.word	0x08008605
 800859c:	080086c5 	.word	0x080086c5
 80085a0:	08008551 	.word	0x08008551
 80085a4:	08008551 	.word	0x08008551
 80085a8:	08008705 	.word	0x08008705
 80085ac:	08008551 	.word	0x08008551
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008551 	.word	0x08008551
 80085b8:	08008551 	.word	0x08008551
 80085bc:	080086cd 	.word	0x080086cd
 80085c0:	680b      	ldr	r3, [r1, #0]
 80085c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085c6:	1d1a      	adds	r2, r3, #4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	600a      	str	r2, [r1, #0]
 80085cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085d0:	2301      	movs	r3, #1
 80085d2:	e0a4      	b.n	800871e <_printf_i+0x1f6>
 80085d4:	6825      	ldr	r5, [r4, #0]
 80085d6:	6808      	ldr	r0, [r1, #0]
 80085d8:	062e      	lsls	r6, r5, #24
 80085da:	f100 0304 	add.w	r3, r0, #4
 80085de:	d50a      	bpl.n	80085f6 <_printf_i+0xce>
 80085e0:	6805      	ldr	r5, [r0, #0]
 80085e2:	600b      	str	r3, [r1, #0]
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	da03      	bge.n	80085f0 <_printf_i+0xc8>
 80085e8:	232d      	movs	r3, #45	; 0x2d
 80085ea:	426d      	negs	r5, r5
 80085ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f0:	230a      	movs	r3, #10
 80085f2:	485e      	ldr	r0, [pc, #376]	; (800876c <_printf_i+0x244>)
 80085f4:	e019      	b.n	800862a <_printf_i+0x102>
 80085f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085fa:	6805      	ldr	r5, [r0, #0]
 80085fc:	600b      	str	r3, [r1, #0]
 80085fe:	bf18      	it	ne
 8008600:	b22d      	sxthne	r5, r5
 8008602:	e7ef      	b.n	80085e4 <_printf_i+0xbc>
 8008604:	680b      	ldr	r3, [r1, #0]
 8008606:	6825      	ldr	r5, [r4, #0]
 8008608:	1d18      	adds	r0, r3, #4
 800860a:	6008      	str	r0, [r1, #0]
 800860c:	0628      	lsls	r0, r5, #24
 800860e:	d501      	bpl.n	8008614 <_printf_i+0xec>
 8008610:	681d      	ldr	r5, [r3, #0]
 8008612:	e002      	b.n	800861a <_printf_i+0xf2>
 8008614:	0669      	lsls	r1, r5, #25
 8008616:	d5fb      	bpl.n	8008610 <_printf_i+0xe8>
 8008618:	881d      	ldrh	r5, [r3, #0]
 800861a:	2f6f      	cmp	r7, #111	; 0x6f
 800861c:	bf0c      	ite	eq
 800861e:	2308      	moveq	r3, #8
 8008620:	230a      	movne	r3, #10
 8008622:	4852      	ldr	r0, [pc, #328]	; (800876c <_printf_i+0x244>)
 8008624:	2100      	movs	r1, #0
 8008626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800862a:	6866      	ldr	r6, [r4, #4]
 800862c:	2e00      	cmp	r6, #0
 800862e:	bfa8      	it	ge
 8008630:	6821      	ldrge	r1, [r4, #0]
 8008632:	60a6      	str	r6, [r4, #8]
 8008634:	bfa4      	itt	ge
 8008636:	f021 0104 	bicge.w	r1, r1, #4
 800863a:	6021      	strge	r1, [r4, #0]
 800863c:	b90d      	cbnz	r5, 8008642 <_printf_i+0x11a>
 800863e:	2e00      	cmp	r6, #0
 8008640:	d04d      	beq.n	80086de <_printf_i+0x1b6>
 8008642:	4616      	mov	r6, r2
 8008644:	fbb5 f1f3 	udiv	r1, r5, r3
 8008648:	fb03 5711 	mls	r7, r3, r1, r5
 800864c:	5dc7      	ldrb	r7, [r0, r7]
 800864e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008652:	462f      	mov	r7, r5
 8008654:	42bb      	cmp	r3, r7
 8008656:	460d      	mov	r5, r1
 8008658:	d9f4      	bls.n	8008644 <_printf_i+0x11c>
 800865a:	2b08      	cmp	r3, #8
 800865c:	d10b      	bne.n	8008676 <_printf_i+0x14e>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	07df      	lsls	r7, r3, #31
 8008662:	d508      	bpl.n	8008676 <_printf_i+0x14e>
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	6861      	ldr	r1, [r4, #4]
 8008668:	4299      	cmp	r1, r3
 800866a:	bfde      	ittt	le
 800866c:	2330      	movle	r3, #48	; 0x30
 800866e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008672:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008676:	1b92      	subs	r2, r2, r6
 8008678:	6122      	str	r2, [r4, #16]
 800867a:	464b      	mov	r3, r9
 800867c:	4621      	mov	r1, r4
 800867e:	4640      	mov	r0, r8
 8008680:	f8cd a000 	str.w	sl, [sp]
 8008684:	aa03      	add	r2, sp, #12
 8008686:	f7ff fedf 	bl	8008448 <_printf_common>
 800868a:	3001      	adds	r0, #1
 800868c:	d14c      	bne.n	8008728 <_printf_i+0x200>
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	b004      	add	sp, #16
 8008694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008698:	4834      	ldr	r0, [pc, #208]	; (800876c <_printf_i+0x244>)
 800869a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800869e:	680e      	ldr	r6, [r1, #0]
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80086a6:	061f      	lsls	r7, r3, #24
 80086a8:	600e      	str	r6, [r1, #0]
 80086aa:	d514      	bpl.n	80086d6 <_printf_i+0x1ae>
 80086ac:	07d9      	lsls	r1, r3, #31
 80086ae:	bf44      	itt	mi
 80086b0:	f043 0320 	orrmi.w	r3, r3, #32
 80086b4:	6023      	strmi	r3, [r4, #0]
 80086b6:	b91d      	cbnz	r5, 80086c0 <_printf_i+0x198>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	f023 0320 	bic.w	r3, r3, #32
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	2310      	movs	r3, #16
 80086c2:	e7af      	b.n	8008624 <_printf_i+0xfc>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	f043 0320 	orr.w	r3, r3, #32
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	2378      	movs	r3, #120	; 0x78
 80086ce:	4828      	ldr	r0, [pc, #160]	; (8008770 <_printf_i+0x248>)
 80086d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086d4:	e7e3      	b.n	800869e <_printf_i+0x176>
 80086d6:	065e      	lsls	r6, r3, #25
 80086d8:	bf48      	it	mi
 80086da:	b2ad      	uxthmi	r5, r5
 80086dc:	e7e6      	b.n	80086ac <_printf_i+0x184>
 80086de:	4616      	mov	r6, r2
 80086e0:	e7bb      	b.n	800865a <_printf_i+0x132>
 80086e2:	680b      	ldr	r3, [r1, #0]
 80086e4:	6826      	ldr	r6, [r4, #0]
 80086e6:	1d1d      	adds	r5, r3, #4
 80086e8:	6960      	ldr	r0, [r4, #20]
 80086ea:	600d      	str	r5, [r1, #0]
 80086ec:	0635      	lsls	r5, r6, #24
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	d501      	bpl.n	80086f6 <_printf_i+0x1ce>
 80086f2:	6018      	str	r0, [r3, #0]
 80086f4:	e002      	b.n	80086fc <_printf_i+0x1d4>
 80086f6:	0671      	lsls	r1, r6, #25
 80086f8:	d5fb      	bpl.n	80086f2 <_printf_i+0x1ca>
 80086fa:	8018      	strh	r0, [r3, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	4616      	mov	r6, r2
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	e7ba      	b.n	800867a <_printf_i+0x152>
 8008704:	680b      	ldr	r3, [r1, #0]
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	600a      	str	r2, [r1, #0]
 800870a:	681e      	ldr	r6, [r3, #0]
 800870c:	2100      	movs	r1, #0
 800870e:	4630      	mov	r0, r6
 8008710:	6862      	ldr	r2, [r4, #4]
 8008712:	f000 feeb 	bl	80094ec <memchr>
 8008716:	b108      	cbz	r0, 800871c <_printf_i+0x1f4>
 8008718:	1b80      	subs	r0, r0, r6
 800871a:	6060      	str	r0, [r4, #4]
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2300      	movs	r3, #0
 8008722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008726:	e7a8      	b.n	800867a <_printf_i+0x152>
 8008728:	4632      	mov	r2, r6
 800872a:	4649      	mov	r1, r9
 800872c:	4640      	mov	r0, r8
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	47d0      	blx	sl
 8008732:	3001      	adds	r0, #1
 8008734:	d0ab      	beq.n	800868e <_printf_i+0x166>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	079b      	lsls	r3, r3, #30
 800873a:	d413      	bmi.n	8008764 <_printf_i+0x23c>
 800873c:	68e0      	ldr	r0, [r4, #12]
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	4298      	cmp	r0, r3
 8008742:	bfb8      	it	lt
 8008744:	4618      	movlt	r0, r3
 8008746:	e7a4      	b.n	8008692 <_printf_i+0x16a>
 8008748:	2301      	movs	r3, #1
 800874a:	4632      	mov	r2, r6
 800874c:	4649      	mov	r1, r9
 800874e:	4640      	mov	r0, r8
 8008750:	47d0      	blx	sl
 8008752:	3001      	adds	r0, #1
 8008754:	d09b      	beq.n	800868e <_printf_i+0x166>
 8008756:	3501      	adds	r5, #1
 8008758:	68e3      	ldr	r3, [r4, #12]
 800875a:	9903      	ldr	r1, [sp, #12]
 800875c:	1a5b      	subs	r3, r3, r1
 800875e:	42ab      	cmp	r3, r5
 8008760:	dcf2      	bgt.n	8008748 <_printf_i+0x220>
 8008762:	e7eb      	b.n	800873c <_printf_i+0x214>
 8008764:	2500      	movs	r5, #0
 8008766:	f104 0619 	add.w	r6, r4, #25
 800876a:	e7f5      	b.n	8008758 <_printf_i+0x230>
 800876c:	0800acea 	.word	0x0800acea
 8008770:	0800acfb 	.word	0x0800acfb

08008774 <sniprintf>:
 8008774:	b40c      	push	{r2, r3}
 8008776:	b530      	push	{r4, r5, lr}
 8008778:	4b17      	ldr	r3, [pc, #92]	; (80087d8 <sniprintf+0x64>)
 800877a:	1e0c      	subs	r4, r1, #0
 800877c:	681d      	ldr	r5, [r3, #0]
 800877e:	b09d      	sub	sp, #116	; 0x74
 8008780:	da08      	bge.n	8008794 <sniprintf+0x20>
 8008782:	238b      	movs	r3, #139	; 0x8b
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	602b      	str	r3, [r5, #0]
 800878a:	b01d      	add	sp, #116	; 0x74
 800878c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008790:	b002      	add	sp, #8
 8008792:	4770      	bx	lr
 8008794:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008798:	f8ad 3014 	strh.w	r3, [sp, #20]
 800879c:	bf0c      	ite	eq
 800879e:	4623      	moveq	r3, r4
 80087a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	9307      	str	r3, [sp, #28]
 80087a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087ac:	9002      	str	r0, [sp, #8]
 80087ae:	9006      	str	r0, [sp, #24]
 80087b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087b4:	4628      	mov	r0, r5
 80087b6:	ab21      	add	r3, sp, #132	; 0x84
 80087b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087ba:	a902      	add	r1, sp, #8
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	f001 fb43 	bl	8009e48 <_svfiprintf_r>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	bfbc      	itt	lt
 80087c6:	238b      	movlt	r3, #139	; 0x8b
 80087c8:	602b      	strlt	r3, [r5, #0]
 80087ca:	2c00      	cmp	r4, #0
 80087cc:	d0dd      	beq.n	800878a <sniprintf+0x16>
 80087ce:	2200      	movs	r2, #0
 80087d0:	9b02      	ldr	r3, [sp, #8]
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	e7d9      	b.n	800878a <sniprintf+0x16>
 80087d6:	bf00      	nop
 80087d8:	20000018 	.word	0x20000018

080087dc <quorem>:
 80087dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e0:	6903      	ldr	r3, [r0, #16]
 80087e2:	690c      	ldr	r4, [r1, #16]
 80087e4:	4607      	mov	r7, r0
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	f2c0 8083 	blt.w	80088f2 <quorem+0x116>
 80087ec:	3c01      	subs	r4, #1
 80087ee:	f100 0514 	add.w	r5, r0, #20
 80087f2:	f101 0814 	add.w	r8, r1, #20
 80087f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008804:	3301      	adds	r3, #1
 8008806:	429a      	cmp	r2, r3
 8008808:	fbb2 f6f3 	udiv	r6, r2, r3
 800880c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008810:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008814:	d332      	bcc.n	800887c <quorem+0xa0>
 8008816:	f04f 0e00 	mov.w	lr, #0
 800881a:	4640      	mov	r0, r8
 800881c:	46ac      	mov	ip, r5
 800881e:	46f2      	mov	sl, lr
 8008820:	f850 2b04 	ldr.w	r2, [r0], #4
 8008824:	b293      	uxth	r3, r2
 8008826:	fb06 e303 	mla	r3, r6, r3, lr
 800882a:	0c12      	lsrs	r2, r2, #16
 800882c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008830:	fb06 e202 	mla	r2, r6, r2, lr
 8008834:	b29b      	uxth	r3, r3
 8008836:	ebaa 0303 	sub.w	r3, sl, r3
 800883a:	f8dc a000 	ldr.w	sl, [ip]
 800883e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008842:	fa1f fa8a 	uxth.w	sl, sl
 8008846:	4453      	add	r3, sl
 8008848:	fa1f fa82 	uxth.w	sl, r2
 800884c:	f8dc 2000 	ldr.w	r2, [ip]
 8008850:	4581      	cmp	r9, r0
 8008852:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800885a:	b29b      	uxth	r3, r3
 800885c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008860:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008864:	f84c 3b04 	str.w	r3, [ip], #4
 8008868:	d2da      	bcs.n	8008820 <quorem+0x44>
 800886a:	f855 300b 	ldr.w	r3, [r5, fp]
 800886e:	b92b      	cbnz	r3, 800887c <quorem+0xa0>
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	3b04      	subs	r3, #4
 8008874:	429d      	cmp	r5, r3
 8008876:	461a      	mov	r2, r3
 8008878:	d32f      	bcc.n	80088da <quorem+0xfe>
 800887a:	613c      	str	r4, [r7, #16]
 800887c:	4638      	mov	r0, r7
 800887e:	f001 f8cb 	bl	8009a18 <__mcmp>
 8008882:	2800      	cmp	r0, #0
 8008884:	db25      	blt.n	80088d2 <quorem+0xf6>
 8008886:	4628      	mov	r0, r5
 8008888:	f04f 0c00 	mov.w	ip, #0
 800888c:	3601      	adds	r6, #1
 800888e:	f858 1b04 	ldr.w	r1, [r8], #4
 8008892:	f8d0 e000 	ldr.w	lr, [r0]
 8008896:	b28b      	uxth	r3, r1
 8008898:	ebac 0303 	sub.w	r3, ip, r3
 800889c:	fa1f f28e 	uxth.w	r2, lr
 80088a0:	4413      	add	r3, r2
 80088a2:	0c0a      	lsrs	r2, r1, #16
 80088a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b2:	45c1      	cmp	r9, r8
 80088b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088b8:	f840 3b04 	str.w	r3, [r0], #4
 80088bc:	d2e7      	bcs.n	800888e <quorem+0xb2>
 80088be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c6:	b922      	cbnz	r2, 80088d2 <quorem+0xf6>
 80088c8:	3b04      	subs	r3, #4
 80088ca:	429d      	cmp	r5, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	d30a      	bcc.n	80088e6 <quorem+0x10a>
 80088d0:	613c      	str	r4, [r7, #16]
 80088d2:	4630      	mov	r0, r6
 80088d4:	b003      	add	sp, #12
 80088d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	3b04      	subs	r3, #4
 80088de:	2a00      	cmp	r2, #0
 80088e0:	d1cb      	bne.n	800887a <quorem+0x9e>
 80088e2:	3c01      	subs	r4, #1
 80088e4:	e7c6      	b.n	8008874 <quorem+0x98>
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	3b04      	subs	r3, #4
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d1f0      	bne.n	80088d0 <quorem+0xf4>
 80088ee:	3c01      	subs	r4, #1
 80088f0:	e7eb      	b.n	80088ca <quorem+0xee>
 80088f2:	2000      	movs	r0, #0
 80088f4:	e7ee      	b.n	80088d4 <quorem+0xf8>
	...

080088f8 <_dtoa_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4616      	mov	r6, r2
 80088fe:	461f      	mov	r7, r3
 8008900:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008902:	b099      	sub	sp, #100	; 0x64
 8008904:	4605      	mov	r5, r0
 8008906:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800890a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800890e:	b974      	cbnz	r4, 800892e <_dtoa_r+0x36>
 8008910:	2010      	movs	r0, #16
 8008912:	f000 fde3 	bl	80094dc <malloc>
 8008916:	4602      	mov	r2, r0
 8008918:	6268      	str	r0, [r5, #36]	; 0x24
 800891a:	b920      	cbnz	r0, 8008926 <_dtoa_r+0x2e>
 800891c:	21ea      	movs	r1, #234	; 0xea
 800891e:	4bae      	ldr	r3, [pc, #696]	; (8008bd8 <_dtoa_r+0x2e0>)
 8008920:	48ae      	ldr	r0, [pc, #696]	; (8008bdc <_dtoa_r+0x2e4>)
 8008922:	f001 fba1 	bl	800a068 <__assert_func>
 8008926:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800892a:	6004      	str	r4, [r0, #0]
 800892c:	60c4      	str	r4, [r0, #12]
 800892e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	b151      	cbz	r1, 800894a <_dtoa_r+0x52>
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	2301      	movs	r3, #1
 8008938:	4093      	lsls	r3, r2
 800893a:	604a      	str	r2, [r1, #4]
 800893c:	608b      	str	r3, [r1, #8]
 800893e:	4628      	mov	r0, r5
 8008940:	f000 fe30 	bl	80095a4 <_Bfree>
 8008944:	2200      	movs	r2, #0
 8008946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	1e3b      	subs	r3, r7, #0
 800894c:	bfaf      	iteee	ge
 800894e:	2300      	movge	r3, #0
 8008950:	2201      	movlt	r2, #1
 8008952:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008956:	9305      	strlt	r3, [sp, #20]
 8008958:	bfa8      	it	ge
 800895a:	f8c8 3000 	strge.w	r3, [r8]
 800895e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008962:	4b9f      	ldr	r3, [pc, #636]	; (8008be0 <_dtoa_r+0x2e8>)
 8008964:	bfb8      	it	lt
 8008966:	f8c8 2000 	strlt.w	r2, [r8]
 800896a:	ea33 0309 	bics.w	r3, r3, r9
 800896e:	d119      	bne.n	80089a4 <_dtoa_r+0xac>
 8008970:	f242 730f 	movw	r3, #9999	; 0x270f
 8008974:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800897c:	4333      	orrs	r3, r6
 800897e:	f000 8580 	beq.w	8009482 <_dtoa_r+0xb8a>
 8008982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008984:	b953      	cbnz	r3, 800899c <_dtoa_r+0xa4>
 8008986:	4b97      	ldr	r3, [pc, #604]	; (8008be4 <_dtoa_r+0x2ec>)
 8008988:	e022      	b.n	80089d0 <_dtoa_r+0xd8>
 800898a:	4b97      	ldr	r3, [pc, #604]	; (8008be8 <_dtoa_r+0x2f0>)
 800898c:	9308      	str	r3, [sp, #32]
 800898e:	3308      	adds	r3, #8
 8008990:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	9808      	ldr	r0, [sp, #32]
 8008996:	b019      	add	sp, #100	; 0x64
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	4b91      	ldr	r3, [pc, #580]	; (8008be4 <_dtoa_r+0x2ec>)
 800899e:	9308      	str	r3, [sp, #32]
 80089a0:	3303      	adds	r3, #3
 80089a2:	e7f5      	b.n	8008990 <_dtoa_r+0x98>
 80089a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80089a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80089ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089b0:	2200      	movs	r2, #0
 80089b2:	2300      	movs	r3, #0
 80089b4:	f7f7 fff8 	bl	80009a8 <__aeabi_dcmpeq>
 80089b8:	4680      	mov	r8, r0
 80089ba:	b158      	cbz	r0, 80089d4 <_dtoa_r+0xdc>
 80089bc:	2301      	movs	r3, #1
 80089be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8559 	beq.w	800947c <_dtoa_r+0xb84>
 80089ca:	4888      	ldr	r0, [pc, #544]	; (8008bec <_dtoa_r+0x2f4>)
 80089cc:	6018      	str	r0, [r3, #0]
 80089ce:	1e43      	subs	r3, r0, #1
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	e7df      	b.n	8008994 <_dtoa_r+0x9c>
 80089d4:	ab16      	add	r3, sp, #88	; 0x58
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	ab17      	add	r3, sp, #92	; 0x5c
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4628      	mov	r0, r5
 80089de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80089e2:	f001 f8c5 	bl	8009b70 <__d2b>
 80089e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80089ea:	4682      	mov	sl, r0
 80089ec:	2c00      	cmp	r4, #0
 80089ee:	d07e      	beq.n	8008aee <_dtoa_r+0x1f6>
 80089f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80089fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008a02:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a06:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	4b78      	ldr	r3, [pc, #480]	; (8008bf0 <_dtoa_r+0x2f8>)
 8008a0e:	f7f7 fbab 	bl	8000168 <__aeabi_dsub>
 8008a12:	a36b      	add	r3, pc, #428	; (adr r3, 8008bc0 <_dtoa_r+0x2c8>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fd5e 	bl	80004d8 <__aeabi_dmul>
 8008a1c:	a36a      	add	r3, pc, #424	; (adr r3, 8008bc8 <_dtoa_r+0x2d0>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f7f7 fba3 	bl	800016c <__adddf3>
 8008a26:	4606      	mov	r6, r0
 8008a28:	4620      	mov	r0, r4
 8008a2a:	460f      	mov	r7, r1
 8008a2c:	f7f7 fcea 	bl	8000404 <__aeabi_i2d>
 8008a30:	a367      	add	r3, pc, #412	; (adr r3, 8008bd0 <_dtoa_r+0x2d8>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fd4f 	bl	80004d8 <__aeabi_dmul>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4639      	mov	r1, r7
 8008a42:	f7f7 fb93 	bl	800016c <__adddf3>
 8008a46:	4606      	mov	r6, r0
 8008a48:	460f      	mov	r7, r1
 8008a4a:	f7f7 fff5 	bl	8000a38 <__aeabi_d2iz>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4681      	mov	r9, r0
 8008a52:	2300      	movs	r3, #0
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f7 ffb0 	bl	80009bc <__aeabi_dcmplt>
 8008a5c:	b148      	cbz	r0, 8008a72 <_dtoa_r+0x17a>
 8008a5e:	4648      	mov	r0, r9
 8008a60:	f7f7 fcd0 	bl	8000404 <__aeabi_i2d>
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	f7f7 ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8008a6c:	b908      	cbnz	r0, 8008a72 <_dtoa_r+0x17a>
 8008a6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a72:	f1b9 0f16 	cmp.w	r9, #22
 8008a76:	d857      	bhi.n	8008b28 <_dtoa_r+0x230>
 8008a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a7c:	4b5d      	ldr	r3, [pc, #372]	; (8008bf4 <_dtoa_r+0x2fc>)
 8008a7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 ff99 	bl	80009bc <__aeabi_dcmplt>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d04e      	beq.n	8008b2c <_dtoa_r+0x234>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a98:	1b1c      	subs	r4, r3, r4
 8008a9a:	1e63      	subs	r3, r4, #1
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	bf49      	itett	mi
 8008aa0:	f1c4 0301 	rsbmi	r3, r4, #1
 8008aa4:	2300      	movpl	r3, #0
 8008aa6:	9306      	strmi	r3, [sp, #24]
 8008aa8:	2300      	movmi	r3, #0
 8008aaa:	bf54      	ite	pl
 8008aac:	9306      	strpl	r3, [sp, #24]
 8008aae:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008ab0:	f1b9 0f00 	cmp.w	r9, #0
 8008ab4:	db3c      	blt.n	8008b30 <_dtoa_r+0x238>
 8008ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008abc:	444b      	add	r3, r9
 8008abe:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d86c      	bhi.n	8008ba4 <_dtoa_r+0x2ac>
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	bfc4      	itt	gt
 8008ace:	3b04      	subgt	r3, #4
 8008ad0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ad4:	bfc8      	it	gt
 8008ad6:	2400      	movgt	r4, #0
 8008ad8:	f1a3 0302 	sub.w	r3, r3, #2
 8008adc:	bfd8      	it	le
 8008ade:	2401      	movle	r4, #1
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	f200 808b 	bhi.w	8008bfc <_dtoa_r+0x304>
 8008ae6:	e8df f003 	tbb	[pc, r3]
 8008aea:	4f2d      	.short	0x4f2d
 8008aec:	5b4d      	.short	0x5b4d
 8008aee:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008af2:	441c      	add	r4, r3
 8008af4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	bfc3      	ittte	gt
 8008afc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b00:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008b04:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b08:	f1c3 0320 	rsble	r3, r3, #32
 8008b0c:	bfc6      	itte	gt
 8008b0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b12:	4318      	orrgt	r0, r3
 8008b14:	fa06 f003 	lslle.w	r0, r6, r3
 8008b18:	f7f7 fc64 	bl	80003e4 <__aeabi_ui2d>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008b22:	3c01      	subs	r4, #1
 8008b24:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b26:	e770      	b.n	8008a0a <_dtoa_r+0x112>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e7b3      	b.n	8008a94 <_dtoa_r+0x19c>
 8008b2c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b2e:	e7b2      	b.n	8008a96 <_dtoa_r+0x19e>
 8008b30:	9b06      	ldr	r3, [sp, #24]
 8008b32:	eba3 0309 	sub.w	r3, r3, r9
 8008b36:	9306      	str	r3, [sp, #24]
 8008b38:	f1c9 0300 	rsb	r3, r9, #0
 8008b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3e:	2300      	movs	r3, #0
 8008b40:	930e      	str	r3, [sp, #56]	; 0x38
 8008b42:	e7bf      	b.n	8008ac4 <_dtoa_r+0x1cc>
 8008b44:	2300      	movs	r3, #0
 8008b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dc59      	bgt.n	8008c02 <_dtoa_r+0x30a>
 8008b4e:	f04f 0b01 	mov.w	fp, #1
 8008b52:	465b      	mov	r3, fp
 8008b54:	f8cd b008 	str.w	fp, [sp, #8]
 8008b58:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008b60:	6042      	str	r2, [r0, #4]
 8008b62:	2204      	movs	r2, #4
 8008b64:	f102 0614 	add.w	r6, r2, #20
 8008b68:	429e      	cmp	r6, r3
 8008b6a:	6841      	ldr	r1, [r0, #4]
 8008b6c:	d94f      	bls.n	8008c0e <_dtoa_r+0x316>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f000 fcd8 	bl	8009524 <_Balloc>
 8008b74:	9008      	str	r0, [sp, #32]
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d14d      	bne.n	8008c16 <_dtoa_r+0x31e>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b80:	4b1d      	ldr	r3, [pc, #116]	; (8008bf8 <_dtoa_r+0x300>)
 8008b82:	e6cd      	b.n	8008920 <_dtoa_r+0x28>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e7de      	b.n	8008b46 <_dtoa_r+0x24e>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b8e:	eb09 0b03 	add.w	fp, r9, r3
 8008b92:	f10b 0301 	add.w	r3, fp, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	bfb8      	it	lt
 8008b9c:	2301      	movlt	r3, #1
 8008b9e:	e7dd      	b.n	8008b5c <_dtoa_r+0x264>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e7f2      	b.n	8008b8a <_dtoa_r+0x292>
 8008ba4:	2401      	movs	r4, #1
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008baa:	9322      	str	r3, [sp, #136]	; 0x88
 8008bac:	f04f 3bff 	mov.w	fp, #4294967295
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2312      	movs	r3, #18
 8008bb4:	f8cd b008 	str.w	fp, [sp, #8]
 8008bb8:	9223      	str	r2, [sp, #140]	; 0x8c
 8008bba:	e7cf      	b.n	8008b5c <_dtoa_r+0x264>
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	636f4361 	.word	0x636f4361
 8008bc4:	3fd287a7 	.word	0x3fd287a7
 8008bc8:	8b60c8b3 	.word	0x8b60c8b3
 8008bcc:	3fc68a28 	.word	0x3fc68a28
 8008bd0:	509f79fb 	.word	0x509f79fb
 8008bd4:	3fd34413 	.word	0x3fd34413
 8008bd8:	0800ad19 	.word	0x0800ad19
 8008bdc:	0800ad30 	.word	0x0800ad30
 8008be0:	7ff00000 	.word	0x7ff00000
 8008be4:	0800ad15 	.word	0x0800ad15
 8008be8:	0800ad0c 	.word	0x0800ad0c
 8008bec:	0800ace9 	.word	0x0800ace9
 8008bf0:	3ff80000 	.word	0x3ff80000
 8008bf4:	0800ae28 	.word	0x0800ae28
 8008bf8:	0800ad8f 	.word	0x0800ad8f
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c00:	e7d4      	b.n	8008bac <_dtoa_r+0x2b4>
 8008c02:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008c06:	465b      	mov	r3, fp
 8008c08:	f8cd b008 	str.w	fp, [sp, #8]
 8008c0c:	e7a6      	b.n	8008b5c <_dtoa_r+0x264>
 8008c0e:	3101      	adds	r1, #1
 8008c10:	6041      	str	r1, [r0, #4]
 8008c12:	0052      	lsls	r2, r2, #1
 8008c14:	e7a6      	b.n	8008b64 <_dtoa_r+0x26c>
 8008c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c18:	9a08      	ldr	r2, [sp, #32]
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	2b0e      	cmp	r3, #14
 8008c20:	f200 80a8 	bhi.w	8008d74 <_dtoa_r+0x47c>
 8008c24:	2c00      	cmp	r4, #0
 8008c26:	f000 80a5 	beq.w	8008d74 <_dtoa_r+0x47c>
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	dd34      	ble.n	8008c9a <_dtoa_r+0x3a2>
 8008c30:	4a9a      	ldr	r2, [pc, #616]	; (8008e9c <_dtoa_r+0x5a4>)
 8008c32:	f009 030f 	and.w	r3, r9, #15
 8008c36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c3a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008c46:	ea4f 1429 	mov.w	r4, r9, asr #4
 8008c4a:	d016      	beq.n	8008c7a <_dtoa_r+0x382>
 8008c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c50:	4b93      	ldr	r3, [pc, #588]	; (8008ea0 <_dtoa_r+0x5a8>)
 8008c52:	2703      	movs	r7, #3
 8008c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c58:	f7f7 fd68 	bl	800072c <__aeabi_ddiv>
 8008c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c60:	f004 040f 	and.w	r4, r4, #15
 8008c64:	4e8e      	ldr	r6, [pc, #568]	; (8008ea0 <_dtoa_r+0x5a8>)
 8008c66:	b954      	cbnz	r4, 8008c7e <_dtoa_r+0x386>
 8008c68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c70:	f7f7 fd5c 	bl	800072c <__aeabi_ddiv>
 8008c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c78:	e029      	b.n	8008cce <_dtoa_r+0x3d6>
 8008c7a:	2702      	movs	r7, #2
 8008c7c:	e7f2      	b.n	8008c64 <_dtoa_r+0x36c>
 8008c7e:	07e1      	lsls	r1, r4, #31
 8008c80:	d508      	bpl.n	8008c94 <_dtoa_r+0x39c>
 8008c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c8a:	f7f7 fc25 	bl	80004d8 <__aeabi_dmul>
 8008c8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c92:	3701      	adds	r7, #1
 8008c94:	1064      	asrs	r4, r4, #1
 8008c96:	3608      	adds	r6, #8
 8008c98:	e7e5      	b.n	8008c66 <_dtoa_r+0x36e>
 8008c9a:	f000 80a5 	beq.w	8008de8 <_dtoa_r+0x4f0>
 8008c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ca2:	f1c9 0400 	rsb	r4, r9, #0
 8008ca6:	4b7d      	ldr	r3, [pc, #500]	; (8008e9c <_dtoa_r+0x5a4>)
 8008ca8:	f004 020f 	and.w	r2, r4, #15
 8008cac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 fc10 	bl	80004d8 <__aeabi_dmul>
 8008cb8:	2702      	movs	r7, #2
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc0:	4e77      	ldr	r6, [pc, #476]	; (8008ea0 <_dtoa_r+0x5a8>)
 8008cc2:	1124      	asrs	r4, r4, #4
 8008cc4:	2c00      	cmp	r4, #0
 8008cc6:	f040 8084 	bne.w	8008dd2 <_dtoa_r+0x4da>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1d2      	bne.n	8008c74 <_dtoa_r+0x37c>
 8008cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 808b 	beq.w	8008dec <_dtoa_r+0x4f4>
 8008cd6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008cda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008cde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4b6f      	ldr	r3, [pc, #444]	; (8008ea4 <_dtoa_r+0x5ac>)
 8008ce6:	f7f7 fe69 	bl	80009bc <__aeabi_dcmplt>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d07e      	beq.n	8008dec <_dtoa_r+0x4f4>
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d07b      	beq.n	8008dec <_dtoa_r+0x4f4>
 8008cf4:	f1bb 0f00 	cmp.w	fp, #0
 8008cf8:	dd38      	ble.n	8008d6c <_dtoa_r+0x474>
 8008cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4b69      	ldr	r3, [pc, #420]	; (8008ea8 <_dtoa_r+0x5b0>)
 8008d02:	f7f7 fbe9 	bl	80004d8 <__aeabi_dmul>
 8008d06:	465c      	mov	r4, fp
 8008d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d0c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008d10:	3701      	adds	r7, #1
 8008d12:	4638      	mov	r0, r7
 8008d14:	f7f7 fb76 	bl	8000404 <__aeabi_i2d>
 8008d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d1c:	f7f7 fbdc 	bl	80004d8 <__aeabi_dmul>
 8008d20:	2200      	movs	r2, #0
 8008d22:	4b62      	ldr	r3, [pc, #392]	; (8008eac <_dtoa_r+0x5b4>)
 8008d24:	f7f7 fa22 	bl	800016c <__adddf3>
 8008d28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008d2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d30:	9611      	str	r6, [sp, #68]	; 0x44
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	d15d      	bne.n	8008df2 <_dtoa_r+0x4fa>
 8008d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4b5c      	ldr	r3, [pc, #368]	; (8008eb0 <_dtoa_r+0x5b8>)
 8008d3e:	f7f7 fa13 	bl	8000168 <__aeabi_dsub>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d4a:	4633      	mov	r3, r6
 8008d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d4e:	f7f7 fe53 	bl	80009f8 <__aeabi_dcmpgt>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	f040 829e 	bne.w	8009294 <_dtoa_r+0x99c>
 8008d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008d62:	f7f7 fe2b 	bl	80009bc <__aeabi_dcmplt>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f040 8292 	bne.w	8009290 <_dtoa_r+0x998>
 8008d6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008d70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008d74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f2c0 8153 	blt.w	8009022 <_dtoa_r+0x72a>
 8008d7c:	f1b9 0f0e 	cmp.w	r9, #14
 8008d80:	f300 814f 	bgt.w	8009022 <_dtoa_r+0x72a>
 8008d84:	4b45      	ldr	r3, [pc, #276]	; (8008e9c <_dtoa_r+0x5a4>)
 8008d86:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008d8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f280 80db 	bge.w	8008f50 <_dtoa_r+0x658>
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f300 80d7 	bgt.w	8008f50 <_dtoa_r+0x658>
 8008da2:	f040 8274 	bne.w	800928e <_dtoa_r+0x996>
 8008da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b40      	ldr	r3, [pc, #256]	; (8008eb0 <_dtoa_r+0x5b8>)
 8008dae:	f7f7 fb93 	bl	80004d8 <__aeabi_dmul>
 8008db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008db6:	f7f7 fe15 	bl	80009e4 <__aeabi_dcmpge>
 8008dba:	9c02      	ldr	r4, [sp, #8]
 8008dbc:	4626      	mov	r6, r4
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 824a 	bne.w	8009258 <_dtoa_r+0x960>
 8008dc4:	2331      	movs	r3, #49	; 0x31
 8008dc6:	9f08      	ldr	r7, [sp, #32]
 8008dc8:	f109 0901 	add.w	r9, r9, #1
 8008dcc:	f807 3b01 	strb.w	r3, [r7], #1
 8008dd0:	e246      	b.n	8009260 <_dtoa_r+0x968>
 8008dd2:	07e2      	lsls	r2, r4, #31
 8008dd4:	d505      	bpl.n	8008de2 <_dtoa_r+0x4ea>
 8008dd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dda:	f7f7 fb7d 	bl	80004d8 <__aeabi_dmul>
 8008dde:	2301      	movs	r3, #1
 8008de0:	3701      	adds	r7, #1
 8008de2:	1064      	asrs	r4, r4, #1
 8008de4:	3608      	adds	r6, #8
 8008de6:	e76d      	b.n	8008cc4 <_dtoa_r+0x3cc>
 8008de8:	2702      	movs	r7, #2
 8008dea:	e770      	b.n	8008cce <_dtoa_r+0x3d6>
 8008dec:	46c8      	mov	r8, r9
 8008dee:	9c02      	ldr	r4, [sp, #8]
 8008df0:	e78f      	b.n	8008d12 <_dtoa_r+0x41a>
 8008df2:	9908      	ldr	r1, [sp, #32]
 8008df4:	4b29      	ldr	r3, [pc, #164]	; (8008e9c <_dtoa_r+0x5a4>)
 8008df6:	4421      	add	r1, r4
 8008df8:	9112      	str	r1, [sp, #72]	; 0x48
 8008dfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	d055      	beq.n	8008eb8 <_dtoa_r+0x5c0>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	4929      	ldr	r1, [pc, #164]	; (8008eb4 <_dtoa_r+0x5bc>)
 8008e10:	f7f7 fc8c 	bl	800072c <__aeabi_ddiv>
 8008e14:	463b      	mov	r3, r7
 8008e16:	4632      	mov	r2, r6
 8008e18:	f7f7 f9a6 	bl	8000168 <__aeabi_dsub>
 8008e1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e20:	9f08      	ldr	r7, [sp, #32]
 8008e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e26:	f7f7 fe07 	bl	8000a38 <__aeabi_d2iz>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	f7f7 faea 	bl	8000404 <__aeabi_i2d>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e38:	f7f7 f996 	bl	8000168 <__aeabi_dsub>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	3430      	adds	r4, #48	; 0x30
 8008e42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e4a:	f807 4b01 	strb.w	r4, [r7], #1
 8008e4e:	f7f7 fdb5 	bl	80009bc <__aeabi_dcmplt>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d174      	bne.n	8008f40 <_dtoa_r+0x648>
 8008e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	4911      	ldr	r1, [pc, #68]	; (8008ea4 <_dtoa_r+0x5ac>)
 8008e5e:	f7f7 f983 	bl	8000168 <__aeabi_dsub>
 8008e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e66:	f7f7 fda9 	bl	80009bc <__aeabi_dcmplt>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f040 80b6 	bne.w	8008fdc <_dtoa_r+0x6e4>
 8008e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e72:	429f      	cmp	r7, r3
 8008e74:	f43f af7a 	beq.w	8008d6c <_dtoa_r+0x474>
 8008e78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <_dtoa_r+0x5b0>)
 8008e80:	f7f7 fb2a 	bl	80004d8 <__aeabi_dmul>
 8008e84:	2200      	movs	r2, #0
 8008e86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e8e:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <_dtoa_r+0x5b0>)
 8008e90:	f7f7 fb22 	bl	80004d8 <__aeabi_dmul>
 8008e94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e98:	e7c3      	b.n	8008e22 <_dtoa_r+0x52a>
 8008e9a:	bf00      	nop
 8008e9c:	0800ae28 	.word	0x0800ae28
 8008ea0:	0800ae00 	.word	0x0800ae00
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	40240000 	.word	0x40240000
 8008eac:	401c0000 	.word	0x401c0000
 8008eb0:	40140000 	.word	0x40140000
 8008eb4:	3fe00000 	.word	0x3fe00000
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f7f7 fb0c 	bl	80004d8 <__aeabi_dmul>
 8008ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ec2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ec6:	9c08      	ldr	r4, [sp, #32]
 8008ec8:	9314      	str	r3, [sp, #80]	; 0x50
 8008eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ece:	f7f7 fdb3 	bl	8000a38 <__aeabi_d2iz>
 8008ed2:	9015      	str	r0, [sp, #84]	; 0x54
 8008ed4:	f7f7 fa96 	bl	8000404 <__aeabi_i2d>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee0:	f7f7 f942 	bl	8000168 <__aeabi_dsub>
 8008ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	3330      	adds	r3, #48	; 0x30
 8008eea:	f804 3b01 	strb.w	r3, [r4], #1
 8008eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ef0:	460f      	mov	r7, r1
 8008ef2:	429c      	cmp	r4, r3
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	d124      	bne.n	8008f44 <_dtoa_r+0x64c>
 8008efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008efe:	4bb3      	ldr	r3, [pc, #716]	; (80091cc <_dtoa_r+0x8d4>)
 8008f00:	f7f7 f934 	bl	800016c <__adddf3>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d162      	bne.n	8008fda <_dtoa_r+0x6e2>
 8008f14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f18:	2000      	movs	r0, #0
 8008f1a:	49ac      	ldr	r1, [pc, #688]	; (80091cc <_dtoa_r+0x8d4>)
 8008f1c:	f7f7 f924 	bl	8000168 <__aeabi_dsub>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fd48 	bl	80009bc <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f af1d 	beq.w	8008d6c <_dtoa_r+0x474>
 8008f32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008f34:	1e7b      	subs	r3, r7, #1
 8008f36:	9314      	str	r3, [sp, #80]	; 0x50
 8008f38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008f3c:	2b30      	cmp	r3, #48	; 0x30
 8008f3e:	d0f8      	beq.n	8008f32 <_dtoa_r+0x63a>
 8008f40:	46c1      	mov	r9, r8
 8008f42:	e03a      	b.n	8008fba <_dtoa_r+0x6c2>
 8008f44:	4ba2      	ldr	r3, [pc, #648]	; (80091d0 <_dtoa_r+0x8d8>)
 8008f46:	f7f7 fac7 	bl	80004d8 <__aeabi_dmul>
 8008f4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f4e:	e7bc      	b.n	8008eca <_dtoa_r+0x5d2>
 8008f50:	9f08      	ldr	r7, [sp, #32]
 8008f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f5a:	f7f7 fbe7 	bl	800072c <__aeabi_ddiv>
 8008f5e:	f7f7 fd6b 	bl	8000a38 <__aeabi_d2iz>
 8008f62:	4604      	mov	r4, r0
 8008f64:	f7f7 fa4e 	bl	8000404 <__aeabi_i2d>
 8008f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f6c:	f7f7 fab4 	bl	80004d8 <__aeabi_dmul>
 8008f70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008f74:	460b      	mov	r3, r1
 8008f76:	4602      	mov	r2, r0
 8008f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f7c:	f7f7 f8f4 	bl	8000168 <__aeabi_dsub>
 8008f80:	f807 6b01 	strb.w	r6, [r7], #1
 8008f84:	9e08      	ldr	r6, [sp, #32]
 8008f86:	9b02      	ldr	r3, [sp, #8]
 8008f88:	1bbe      	subs	r6, r7, r6
 8008f8a:	42b3      	cmp	r3, r6
 8008f8c:	d13a      	bne.n	8009004 <_dtoa_r+0x70c>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	f7f7 f8eb 	bl	800016c <__adddf3>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fa2:	f7f7 fd29 	bl	80009f8 <__aeabi_dcmpgt>
 8008fa6:	bb58      	cbnz	r0, 8009000 <_dtoa_r+0x708>
 8008fa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb0:	f7f7 fcfa 	bl	80009a8 <__aeabi_dcmpeq>
 8008fb4:	b108      	cbz	r0, 8008fba <_dtoa_r+0x6c2>
 8008fb6:	07e1      	lsls	r1, r4, #31
 8008fb8:	d422      	bmi.n	8009000 <_dtoa_r+0x708>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	4651      	mov	r1, sl
 8008fbe:	f000 faf1 	bl	80095a4 <_Bfree>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	703b      	strb	r3, [r7, #0]
 8008fc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008fc8:	f109 0001 	add.w	r0, r9, #1
 8008fcc:	6018      	str	r0, [r3, #0]
 8008fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f43f acdf 	beq.w	8008994 <_dtoa_r+0x9c>
 8008fd6:	601f      	str	r7, [r3, #0]
 8008fd8:	e4dc      	b.n	8008994 <_dtoa_r+0x9c>
 8008fda:	4627      	mov	r7, r4
 8008fdc:	463b      	mov	r3, r7
 8008fde:	461f      	mov	r7, r3
 8008fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fe4:	2a39      	cmp	r2, #57	; 0x39
 8008fe6:	d107      	bne.n	8008ff8 <_dtoa_r+0x700>
 8008fe8:	9a08      	ldr	r2, [sp, #32]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d1f7      	bne.n	8008fde <_dtoa_r+0x6e6>
 8008fee:	2230      	movs	r2, #48	; 0x30
 8008ff0:	9908      	ldr	r1, [sp, #32]
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	700a      	strb	r2, [r1, #0]
 8008ff8:	781a      	ldrb	r2, [r3, #0]
 8008ffa:	3201      	adds	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	e79f      	b.n	8008f40 <_dtoa_r+0x648>
 8009000:	46c8      	mov	r8, r9
 8009002:	e7eb      	b.n	8008fdc <_dtoa_r+0x6e4>
 8009004:	2200      	movs	r2, #0
 8009006:	4b72      	ldr	r3, [pc, #456]	; (80091d0 <_dtoa_r+0x8d8>)
 8009008:	f7f7 fa66 	bl	80004d8 <__aeabi_dmul>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009014:	2200      	movs	r2, #0
 8009016:	2300      	movs	r3, #0
 8009018:	f7f7 fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800901c:	2800      	cmp	r0, #0
 800901e:	d098      	beq.n	8008f52 <_dtoa_r+0x65a>
 8009020:	e7cb      	b.n	8008fba <_dtoa_r+0x6c2>
 8009022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009024:	2a00      	cmp	r2, #0
 8009026:	f000 80cd 	beq.w	80091c4 <_dtoa_r+0x8cc>
 800902a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800902c:	2a01      	cmp	r2, #1
 800902e:	f300 80af 	bgt.w	8009190 <_dtoa_r+0x898>
 8009032:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009034:	2a00      	cmp	r2, #0
 8009036:	f000 80a7 	beq.w	8009188 <_dtoa_r+0x890>
 800903a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800903e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009040:	9f06      	ldr	r7, [sp, #24]
 8009042:	9a06      	ldr	r2, [sp, #24]
 8009044:	2101      	movs	r1, #1
 8009046:	441a      	add	r2, r3
 8009048:	9206      	str	r2, [sp, #24]
 800904a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800904c:	4628      	mov	r0, r5
 800904e:	441a      	add	r2, r3
 8009050:	9209      	str	r2, [sp, #36]	; 0x24
 8009052:	f000 fb61 	bl	8009718 <__i2b>
 8009056:	4606      	mov	r6, r0
 8009058:	2f00      	cmp	r7, #0
 800905a:	dd0c      	ble.n	8009076 <_dtoa_r+0x77e>
 800905c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	dd09      	ble.n	8009076 <_dtoa_r+0x77e>
 8009062:	42bb      	cmp	r3, r7
 8009064:	bfa8      	it	ge
 8009066:	463b      	movge	r3, r7
 8009068:	9a06      	ldr	r2, [sp, #24]
 800906a:	1aff      	subs	r7, r7, r3
 800906c:	1ad2      	subs	r2, r2, r3
 800906e:	9206      	str	r2, [sp, #24]
 8009070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009078:	b1f3      	cbz	r3, 80090b8 <_dtoa_r+0x7c0>
 800907a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80a9 	beq.w	80091d4 <_dtoa_r+0x8dc>
 8009082:	2c00      	cmp	r4, #0
 8009084:	dd10      	ble.n	80090a8 <_dtoa_r+0x7b0>
 8009086:	4631      	mov	r1, r6
 8009088:	4622      	mov	r2, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 fbfe 	bl	800988c <__pow5mult>
 8009090:	4652      	mov	r2, sl
 8009092:	4601      	mov	r1, r0
 8009094:	4606      	mov	r6, r0
 8009096:	4628      	mov	r0, r5
 8009098:	f000 fb54 	bl	8009744 <__multiply>
 800909c:	4680      	mov	r8, r0
 800909e:	4651      	mov	r1, sl
 80090a0:	4628      	mov	r0, r5
 80090a2:	f000 fa7f 	bl	80095a4 <_Bfree>
 80090a6:	46c2      	mov	sl, r8
 80090a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090aa:	1b1a      	subs	r2, r3, r4
 80090ac:	d004      	beq.n	80090b8 <_dtoa_r+0x7c0>
 80090ae:	4651      	mov	r1, sl
 80090b0:	4628      	mov	r0, r5
 80090b2:	f000 fbeb 	bl	800988c <__pow5mult>
 80090b6:	4682      	mov	sl, r0
 80090b8:	2101      	movs	r1, #1
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 fb2c 	bl	8009718 <__i2b>
 80090c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090c2:	4604      	mov	r4, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f340 8087 	ble.w	80091d8 <_dtoa_r+0x8e0>
 80090ca:	461a      	mov	r2, r3
 80090cc:	4601      	mov	r1, r0
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 fbdc 	bl	800988c <__pow5mult>
 80090d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090d6:	4604      	mov	r4, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f340 8080 	ble.w	80091de <_dtoa_r+0x8e6>
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090e8:	6918      	ldr	r0, [r3, #16]
 80090ea:	f000 fac7 	bl	800967c <__hi0bits>
 80090ee:	f1c0 0020 	rsb	r0, r0, #32
 80090f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f4:	4418      	add	r0, r3
 80090f6:	f010 001f 	ands.w	r0, r0, #31
 80090fa:	f000 8092 	beq.w	8009222 <_dtoa_r+0x92a>
 80090fe:	f1c0 0320 	rsb	r3, r0, #32
 8009102:	2b04      	cmp	r3, #4
 8009104:	f340 808a 	ble.w	800921c <_dtoa_r+0x924>
 8009108:	f1c0 001c 	rsb	r0, r0, #28
 800910c:	9b06      	ldr	r3, [sp, #24]
 800910e:	4407      	add	r7, r0
 8009110:	4403      	add	r3, r0
 8009112:	9306      	str	r3, [sp, #24]
 8009114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009116:	4403      	add	r3, r0
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	9b06      	ldr	r3, [sp, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	dd05      	ble.n	800912c <_dtoa_r+0x834>
 8009120:	4651      	mov	r1, sl
 8009122:	461a      	mov	r2, r3
 8009124:	4628      	mov	r0, r5
 8009126:	f000 fc0b 	bl	8009940 <__lshift>
 800912a:	4682      	mov	sl, r0
 800912c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	dd05      	ble.n	800913e <_dtoa_r+0x846>
 8009132:	4621      	mov	r1, r4
 8009134:	461a      	mov	r2, r3
 8009136:	4628      	mov	r0, r5
 8009138:	f000 fc02 	bl	8009940 <__lshift>
 800913c:	4604      	mov	r4, r0
 800913e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d070      	beq.n	8009226 <_dtoa_r+0x92e>
 8009144:	4621      	mov	r1, r4
 8009146:	4650      	mov	r0, sl
 8009148:	f000 fc66 	bl	8009a18 <__mcmp>
 800914c:	2800      	cmp	r0, #0
 800914e:	da6a      	bge.n	8009226 <_dtoa_r+0x92e>
 8009150:	2300      	movs	r3, #0
 8009152:	4651      	mov	r1, sl
 8009154:	220a      	movs	r2, #10
 8009156:	4628      	mov	r0, r5
 8009158:	f000 fa46 	bl	80095e8 <__multadd>
 800915c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800915e:	4682      	mov	sl, r0
 8009160:	f109 39ff 	add.w	r9, r9, #4294967295
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8193 	beq.w	8009490 <_dtoa_r+0xb98>
 800916a:	4631      	mov	r1, r6
 800916c:	2300      	movs	r3, #0
 800916e:	220a      	movs	r2, #10
 8009170:	4628      	mov	r0, r5
 8009172:	f000 fa39 	bl	80095e8 <__multadd>
 8009176:	f1bb 0f00 	cmp.w	fp, #0
 800917a:	4606      	mov	r6, r0
 800917c:	f300 8093 	bgt.w	80092a6 <_dtoa_r+0x9ae>
 8009180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009182:	2b02      	cmp	r3, #2
 8009184:	dc57      	bgt.n	8009236 <_dtoa_r+0x93e>
 8009186:	e08e      	b.n	80092a6 <_dtoa_r+0x9ae>
 8009188:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800918a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800918e:	e756      	b.n	800903e <_dtoa_r+0x746>
 8009190:	9b02      	ldr	r3, [sp, #8]
 8009192:	1e5c      	subs	r4, r3, #1
 8009194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009196:	42a3      	cmp	r3, r4
 8009198:	bfb7      	itett	lt
 800919a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800919c:	1b1c      	subge	r4, r3, r4
 800919e:	1ae2      	sublt	r2, r4, r3
 80091a0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091a2:	bfbe      	ittt	lt
 80091a4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80091a6:	189b      	addlt	r3, r3, r2
 80091a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091aa:	9b02      	ldr	r3, [sp, #8]
 80091ac:	bfb8      	it	lt
 80091ae:	2400      	movlt	r4, #0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bfbb      	ittet	lt
 80091b4:	9b06      	ldrlt	r3, [sp, #24]
 80091b6:	9a02      	ldrlt	r2, [sp, #8]
 80091b8:	9f06      	ldrge	r7, [sp, #24]
 80091ba:	1a9f      	sublt	r7, r3, r2
 80091bc:	bfac      	ite	ge
 80091be:	9b02      	ldrge	r3, [sp, #8]
 80091c0:	2300      	movlt	r3, #0
 80091c2:	e73e      	b.n	8009042 <_dtoa_r+0x74a>
 80091c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80091c6:	9f06      	ldr	r7, [sp, #24]
 80091c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80091ca:	e745      	b.n	8009058 <_dtoa_r+0x760>
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	40240000 	.word	0x40240000
 80091d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091d6:	e76a      	b.n	80090ae <_dtoa_r+0x7b6>
 80091d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091da:	2b01      	cmp	r3, #1
 80091dc:	dc19      	bgt.n	8009212 <_dtoa_r+0x91a>
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	b9bb      	cbnz	r3, 8009212 <_dtoa_r+0x91a>
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e8:	b99b      	cbnz	r3, 8009212 <_dtoa_r+0x91a>
 80091ea:	9b05      	ldr	r3, [sp, #20]
 80091ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091f0:	0d1b      	lsrs	r3, r3, #20
 80091f2:	051b      	lsls	r3, r3, #20
 80091f4:	b183      	cbz	r3, 8009218 <_dtoa_r+0x920>
 80091f6:	f04f 0801 	mov.w	r8, #1
 80091fa:	9b06      	ldr	r3, [sp, #24]
 80091fc:	3301      	adds	r3, #1
 80091fe:	9306      	str	r3, [sp, #24]
 8009200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009202:	3301      	adds	r3, #1
 8009204:	9309      	str	r3, [sp, #36]	; 0x24
 8009206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009208:	2b00      	cmp	r3, #0
 800920a:	f47f af6a 	bne.w	80090e2 <_dtoa_r+0x7ea>
 800920e:	2001      	movs	r0, #1
 8009210:	e76f      	b.n	80090f2 <_dtoa_r+0x7fa>
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	e7f6      	b.n	8009206 <_dtoa_r+0x90e>
 8009218:	4698      	mov	r8, r3
 800921a:	e7f4      	b.n	8009206 <_dtoa_r+0x90e>
 800921c:	f43f af7d 	beq.w	800911a <_dtoa_r+0x822>
 8009220:	4618      	mov	r0, r3
 8009222:	301c      	adds	r0, #28
 8009224:	e772      	b.n	800910c <_dtoa_r+0x814>
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	dc36      	bgt.n	800929a <_dtoa_r+0x9a2>
 800922c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800922e:	2b02      	cmp	r3, #2
 8009230:	dd33      	ble.n	800929a <_dtoa_r+0x9a2>
 8009232:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009236:	f1bb 0f00 	cmp.w	fp, #0
 800923a:	d10d      	bne.n	8009258 <_dtoa_r+0x960>
 800923c:	4621      	mov	r1, r4
 800923e:	465b      	mov	r3, fp
 8009240:	2205      	movs	r2, #5
 8009242:	4628      	mov	r0, r5
 8009244:	f000 f9d0 	bl	80095e8 <__multadd>
 8009248:	4601      	mov	r1, r0
 800924a:	4604      	mov	r4, r0
 800924c:	4650      	mov	r0, sl
 800924e:	f000 fbe3 	bl	8009a18 <__mcmp>
 8009252:	2800      	cmp	r0, #0
 8009254:	f73f adb6 	bgt.w	8008dc4 <_dtoa_r+0x4cc>
 8009258:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800925a:	9f08      	ldr	r7, [sp, #32]
 800925c:	ea6f 0903 	mvn.w	r9, r3
 8009260:	f04f 0800 	mov.w	r8, #0
 8009264:	4621      	mov	r1, r4
 8009266:	4628      	mov	r0, r5
 8009268:	f000 f99c 	bl	80095a4 <_Bfree>
 800926c:	2e00      	cmp	r6, #0
 800926e:	f43f aea4 	beq.w	8008fba <_dtoa_r+0x6c2>
 8009272:	f1b8 0f00 	cmp.w	r8, #0
 8009276:	d005      	beq.n	8009284 <_dtoa_r+0x98c>
 8009278:	45b0      	cmp	r8, r6
 800927a:	d003      	beq.n	8009284 <_dtoa_r+0x98c>
 800927c:	4641      	mov	r1, r8
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f990 	bl	80095a4 <_Bfree>
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	f000 f98c 	bl	80095a4 <_Bfree>
 800928c:	e695      	b.n	8008fba <_dtoa_r+0x6c2>
 800928e:	2400      	movs	r4, #0
 8009290:	4626      	mov	r6, r4
 8009292:	e7e1      	b.n	8009258 <_dtoa_r+0x960>
 8009294:	46c1      	mov	r9, r8
 8009296:	4626      	mov	r6, r4
 8009298:	e594      	b.n	8008dc4 <_dtoa_r+0x4cc>
 800929a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800929c:	f8dd b008 	ldr.w	fp, [sp, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80fc 	beq.w	800949e <_dtoa_r+0xba6>
 80092a6:	2f00      	cmp	r7, #0
 80092a8:	dd05      	ble.n	80092b6 <_dtoa_r+0x9be>
 80092aa:	4631      	mov	r1, r6
 80092ac:	463a      	mov	r2, r7
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 fb46 	bl	8009940 <__lshift>
 80092b4:	4606      	mov	r6, r0
 80092b6:	f1b8 0f00 	cmp.w	r8, #0
 80092ba:	d05c      	beq.n	8009376 <_dtoa_r+0xa7e>
 80092bc:	4628      	mov	r0, r5
 80092be:	6871      	ldr	r1, [r6, #4]
 80092c0:	f000 f930 	bl	8009524 <_Balloc>
 80092c4:	4607      	mov	r7, r0
 80092c6:	b928      	cbnz	r0, 80092d4 <_dtoa_r+0x9dc>
 80092c8:	4602      	mov	r2, r0
 80092ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092ce:	4b7e      	ldr	r3, [pc, #504]	; (80094c8 <_dtoa_r+0xbd0>)
 80092d0:	f7ff bb26 	b.w	8008920 <_dtoa_r+0x28>
 80092d4:	6932      	ldr	r2, [r6, #16]
 80092d6:	f106 010c 	add.w	r1, r6, #12
 80092da:	3202      	adds	r2, #2
 80092dc:	0092      	lsls	r2, r2, #2
 80092de:	300c      	adds	r0, #12
 80092e0:	f000 f912 	bl	8009508 <memcpy>
 80092e4:	2201      	movs	r2, #1
 80092e6:	4639      	mov	r1, r7
 80092e8:	4628      	mov	r0, r5
 80092ea:	f000 fb29 	bl	8009940 <__lshift>
 80092ee:	46b0      	mov	r8, r6
 80092f0:	4606      	mov	r6, r0
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	3301      	adds	r3, #1
 80092f6:	9302      	str	r3, [sp, #8]
 80092f8:	9b08      	ldr	r3, [sp, #32]
 80092fa:	445b      	add	r3, fp
 80092fc:	930a      	str	r3, [sp, #40]	; 0x28
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	9b02      	ldr	r3, [sp, #8]
 8009308:	4621      	mov	r1, r4
 800930a:	4650      	mov	r0, sl
 800930c:	f103 3bff 	add.w	fp, r3, #4294967295
 8009310:	f7ff fa64 	bl	80087dc <quorem>
 8009314:	4603      	mov	r3, r0
 8009316:	4641      	mov	r1, r8
 8009318:	3330      	adds	r3, #48	; 0x30
 800931a:	9004      	str	r0, [sp, #16]
 800931c:	4650      	mov	r0, sl
 800931e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009320:	f000 fb7a 	bl	8009a18 <__mcmp>
 8009324:	4632      	mov	r2, r6
 8009326:	9006      	str	r0, [sp, #24]
 8009328:	4621      	mov	r1, r4
 800932a:	4628      	mov	r0, r5
 800932c:	f000 fb90 	bl	8009a50 <__mdiff>
 8009330:	68c2      	ldr	r2, [r0, #12]
 8009332:	4607      	mov	r7, r0
 8009334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009336:	bb02      	cbnz	r2, 800937a <_dtoa_r+0xa82>
 8009338:	4601      	mov	r1, r0
 800933a:	4650      	mov	r0, sl
 800933c:	f000 fb6c 	bl	8009a18 <__mcmp>
 8009340:	4602      	mov	r2, r0
 8009342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009344:	4639      	mov	r1, r7
 8009346:	4628      	mov	r0, r5
 8009348:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800934c:	f000 f92a 	bl	80095a4 <_Bfree>
 8009350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009354:	9f02      	ldr	r7, [sp, #8]
 8009356:	ea43 0102 	orr.w	r1, r3, r2
 800935a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800935c:	430b      	orrs	r3, r1
 800935e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009360:	d10d      	bne.n	800937e <_dtoa_r+0xa86>
 8009362:	2b39      	cmp	r3, #57	; 0x39
 8009364:	d027      	beq.n	80093b6 <_dtoa_r+0xabe>
 8009366:	9a06      	ldr	r2, [sp, #24]
 8009368:	2a00      	cmp	r2, #0
 800936a:	dd01      	ble.n	8009370 <_dtoa_r+0xa78>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	3331      	adds	r3, #49	; 0x31
 8009370:	f88b 3000 	strb.w	r3, [fp]
 8009374:	e776      	b.n	8009264 <_dtoa_r+0x96c>
 8009376:	4630      	mov	r0, r6
 8009378:	e7b9      	b.n	80092ee <_dtoa_r+0x9f6>
 800937a:	2201      	movs	r2, #1
 800937c:	e7e2      	b.n	8009344 <_dtoa_r+0xa4c>
 800937e:	9906      	ldr	r1, [sp, #24]
 8009380:	2900      	cmp	r1, #0
 8009382:	db04      	blt.n	800938e <_dtoa_r+0xa96>
 8009384:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009386:	4301      	orrs	r1, r0
 8009388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800938a:	4301      	orrs	r1, r0
 800938c:	d120      	bne.n	80093d0 <_dtoa_r+0xad8>
 800938e:	2a00      	cmp	r2, #0
 8009390:	ddee      	ble.n	8009370 <_dtoa_r+0xa78>
 8009392:	4651      	mov	r1, sl
 8009394:	2201      	movs	r2, #1
 8009396:	4628      	mov	r0, r5
 8009398:	9302      	str	r3, [sp, #8]
 800939a:	f000 fad1 	bl	8009940 <__lshift>
 800939e:	4621      	mov	r1, r4
 80093a0:	4682      	mov	sl, r0
 80093a2:	f000 fb39 	bl	8009a18 <__mcmp>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	dc02      	bgt.n	80093b2 <_dtoa_r+0xaba>
 80093ac:	d1e0      	bne.n	8009370 <_dtoa_r+0xa78>
 80093ae:	07da      	lsls	r2, r3, #31
 80093b0:	d5de      	bpl.n	8009370 <_dtoa_r+0xa78>
 80093b2:	2b39      	cmp	r3, #57	; 0x39
 80093b4:	d1da      	bne.n	800936c <_dtoa_r+0xa74>
 80093b6:	2339      	movs	r3, #57	; 0x39
 80093b8:	f88b 3000 	strb.w	r3, [fp]
 80093bc:	463b      	mov	r3, r7
 80093be:	461f      	mov	r7, r3
 80093c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	2a39      	cmp	r2, #57	; 0x39
 80093c8:	d050      	beq.n	800946c <_dtoa_r+0xb74>
 80093ca:	3201      	adds	r2, #1
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e749      	b.n	8009264 <_dtoa_r+0x96c>
 80093d0:	2a00      	cmp	r2, #0
 80093d2:	dd03      	ble.n	80093dc <_dtoa_r+0xae4>
 80093d4:	2b39      	cmp	r3, #57	; 0x39
 80093d6:	d0ee      	beq.n	80093b6 <_dtoa_r+0xabe>
 80093d8:	3301      	adds	r3, #1
 80093da:	e7c9      	b.n	8009370 <_dtoa_r+0xa78>
 80093dc:	9a02      	ldr	r2, [sp, #8]
 80093de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093e4:	428a      	cmp	r2, r1
 80093e6:	d02a      	beq.n	800943e <_dtoa_r+0xb46>
 80093e8:	4651      	mov	r1, sl
 80093ea:	2300      	movs	r3, #0
 80093ec:	220a      	movs	r2, #10
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f8fa 	bl	80095e8 <__multadd>
 80093f4:	45b0      	cmp	r8, r6
 80093f6:	4682      	mov	sl, r0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	f04f 020a 	mov.w	r2, #10
 8009400:	4641      	mov	r1, r8
 8009402:	4628      	mov	r0, r5
 8009404:	d107      	bne.n	8009416 <_dtoa_r+0xb1e>
 8009406:	f000 f8ef 	bl	80095e8 <__multadd>
 800940a:	4680      	mov	r8, r0
 800940c:	4606      	mov	r6, r0
 800940e:	9b02      	ldr	r3, [sp, #8]
 8009410:	3301      	adds	r3, #1
 8009412:	9302      	str	r3, [sp, #8]
 8009414:	e777      	b.n	8009306 <_dtoa_r+0xa0e>
 8009416:	f000 f8e7 	bl	80095e8 <__multadd>
 800941a:	4631      	mov	r1, r6
 800941c:	4680      	mov	r8, r0
 800941e:	2300      	movs	r3, #0
 8009420:	220a      	movs	r2, #10
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f8e0 	bl	80095e8 <__multadd>
 8009428:	4606      	mov	r6, r0
 800942a:	e7f0      	b.n	800940e <_dtoa_r+0xb16>
 800942c:	f1bb 0f00 	cmp.w	fp, #0
 8009430:	bfcc      	ite	gt
 8009432:	465f      	movgt	r7, fp
 8009434:	2701      	movle	r7, #1
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	9a08      	ldr	r2, [sp, #32]
 800943c:	4417      	add	r7, r2
 800943e:	4651      	mov	r1, sl
 8009440:	2201      	movs	r2, #1
 8009442:	4628      	mov	r0, r5
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	f000 fa7b 	bl	8009940 <__lshift>
 800944a:	4621      	mov	r1, r4
 800944c:	4682      	mov	sl, r0
 800944e:	f000 fae3 	bl	8009a18 <__mcmp>
 8009452:	2800      	cmp	r0, #0
 8009454:	dcb2      	bgt.n	80093bc <_dtoa_r+0xac4>
 8009456:	d102      	bne.n	800945e <_dtoa_r+0xb66>
 8009458:	9b02      	ldr	r3, [sp, #8]
 800945a:	07db      	lsls	r3, r3, #31
 800945c:	d4ae      	bmi.n	80093bc <_dtoa_r+0xac4>
 800945e:	463b      	mov	r3, r7
 8009460:	461f      	mov	r7, r3
 8009462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009466:	2a30      	cmp	r2, #48	; 0x30
 8009468:	d0fa      	beq.n	8009460 <_dtoa_r+0xb68>
 800946a:	e6fb      	b.n	8009264 <_dtoa_r+0x96c>
 800946c:	9a08      	ldr	r2, [sp, #32]
 800946e:	429a      	cmp	r2, r3
 8009470:	d1a5      	bne.n	80093be <_dtoa_r+0xac6>
 8009472:	2331      	movs	r3, #49	; 0x31
 8009474:	f109 0901 	add.w	r9, r9, #1
 8009478:	7013      	strb	r3, [r2, #0]
 800947a:	e6f3      	b.n	8009264 <_dtoa_r+0x96c>
 800947c:	4b13      	ldr	r3, [pc, #76]	; (80094cc <_dtoa_r+0xbd4>)
 800947e:	f7ff baa7 	b.w	80089d0 <_dtoa_r+0xd8>
 8009482:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009484:	2b00      	cmp	r3, #0
 8009486:	f47f aa80 	bne.w	800898a <_dtoa_r+0x92>
 800948a:	4b11      	ldr	r3, [pc, #68]	; (80094d0 <_dtoa_r+0xbd8>)
 800948c:	f7ff baa0 	b.w	80089d0 <_dtoa_r+0xd8>
 8009490:	f1bb 0f00 	cmp.w	fp, #0
 8009494:	dc03      	bgt.n	800949e <_dtoa_r+0xba6>
 8009496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009498:	2b02      	cmp	r3, #2
 800949a:	f73f aecc 	bgt.w	8009236 <_dtoa_r+0x93e>
 800949e:	9f08      	ldr	r7, [sp, #32]
 80094a0:	4621      	mov	r1, r4
 80094a2:	4650      	mov	r0, sl
 80094a4:	f7ff f99a 	bl	80087dc <quorem>
 80094a8:	9a08      	ldr	r2, [sp, #32]
 80094aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094ae:	f807 3b01 	strb.w	r3, [r7], #1
 80094b2:	1aba      	subs	r2, r7, r2
 80094b4:	4593      	cmp	fp, r2
 80094b6:	ddb9      	ble.n	800942c <_dtoa_r+0xb34>
 80094b8:	4651      	mov	r1, sl
 80094ba:	2300      	movs	r3, #0
 80094bc:	220a      	movs	r2, #10
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 f892 	bl	80095e8 <__multadd>
 80094c4:	4682      	mov	sl, r0
 80094c6:	e7eb      	b.n	80094a0 <_dtoa_r+0xba8>
 80094c8:	0800ad8f 	.word	0x0800ad8f
 80094cc:	0800ace8 	.word	0x0800ace8
 80094d0:	0800ad0c 	.word	0x0800ad0c

080094d4 <_localeconv_r>:
 80094d4:	4800      	ldr	r0, [pc, #0]	; (80094d8 <_localeconv_r+0x4>)
 80094d6:	4770      	bx	lr
 80094d8:	2000016c 	.word	0x2000016c

080094dc <malloc>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <malloc+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f000 bbfb 	b.w	8009cdc <_malloc_r>
 80094e6:	bf00      	nop
 80094e8:	20000018 	.word	0x20000018

080094ec <memchr>:
 80094ec:	4603      	mov	r3, r0
 80094ee:	b510      	push	{r4, lr}
 80094f0:	b2c9      	uxtb	r1, r1
 80094f2:	4402      	add	r2, r0
 80094f4:	4293      	cmp	r3, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	d101      	bne.n	80094fe <memchr+0x12>
 80094fa:	2000      	movs	r0, #0
 80094fc:	e003      	b.n	8009506 <memchr+0x1a>
 80094fe:	7804      	ldrb	r4, [r0, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	428c      	cmp	r4, r1
 8009504:	d1f6      	bne.n	80094f4 <memchr+0x8>
 8009506:	bd10      	pop	{r4, pc}

08009508 <memcpy>:
 8009508:	440a      	add	r2, r1
 800950a:	4291      	cmp	r1, r2
 800950c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009510:	d100      	bne.n	8009514 <memcpy+0xc>
 8009512:	4770      	bx	lr
 8009514:	b510      	push	{r4, lr}
 8009516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951a:	4291      	cmp	r1, r2
 800951c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009520:	d1f9      	bne.n	8009516 <memcpy+0xe>
 8009522:	bd10      	pop	{r4, pc}

08009524 <_Balloc>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009528:	4604      	mov	r4, r0
 800952a:	460d      	mov	r5, r1
 800952c:	b976      	cbnz	r6, 800954c <_Balloc+0x28>
 800952e:	2010      	movs	r0, #16
 8009530:	f7ff ffd4 	bl	80094dc <malloc>
 8009534:	4602      	mov	r2, r0
 8009536:	6260      	str	r0, [r4, #36]	; 0x24
 8009538:	b920      	cbnz	r0, 8009544 <_Balloc+0x20>
 800953a:	2166      	movs	r1, #102	; 0x66
 800953c:	4b17      	ldr	r3, [pc, #92]	; (800959c <_Balloc+0x78>)
 800953e:	4818      	ldr	r0, [pc, #96]	; (80095a0 <_Balloc+0x7c>)
 8009540:	f000 fd92 	bl	800a068 <__assert_func>
 8009544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009548:	6006      	str	r6, [r0, #0]
 800954a:	60c6      	str	r6, [r0, #12]
 800954c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800954e:	68f3      	ldr	r3, [r6, #12]
 8009550:	b183      	cbz	r3, 8009574 <_Balloc+0x50>
 8009552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800955a:	b9b8      	cbnz	r0, 800958c <_Balloc+0x68>
 800955c:	2101      	movs	r1, #1
 800955e:	fa01 f605 	lsl.w	r6, r1, r5
 8009562:	1d72      	adds	r2, r6, #5
 8009564:	4620      	mov	r0, r4
 8009566:	0092      	lsls	r2, r2, #2
 8009568:	f000 fb5e 	bl	8009c28 <_calloc_r>
 800956c:	b160      	cbz	r0, 8009588 <_Balloc+0x64>
 800956e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009572:	e00e      	b.n	8009592 <_Balloc+0x6e>
 8009574:	2221      	movs	r2, #33	; 0x21
 8009576:	2104      	movs	r1, #4
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fb55 	bl	8009c28 <_calloc_r>
 800957e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009580:	60f0      	str	r0, [r6, #12]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e4      	bne.n	8009552 <_Balloc+0x2e>
 8009588:	2000      	movs	r0, #0
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	6802      	ldr	r2, [r0, #0]
 800958e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009592:	2300      	movs	r3, #0
 8009594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009598:	e7f7      	b.n	800958a <_Balloc+0x66>
 800959a:	bf00      	nop
 800959c:	0800ad19 	.word	0x0800ad19
 80095a0:	0800ada0 	.word	0x0800ada0

080095a4 <_Bfree>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095a8:	4605      	mov	r5, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	b976      	cbnz	r6, 80095cc <_Bfree+0x28>
 80095ae:	2010      	movs	r0, #16
 80095b0:	f7ff ff94 	bl	80094dc <malloc>
 80095b4:	4602      	mov	r2, r0
 80095b6:	6268      	str	r0, [r5, #36]	; 0x24
 80095b8:	b920      	cbnz	r0, 80095c4 <_Bfree+0x20>
 80095ba:	218a      	movs	r1, #138	; 0x8a
 80095bc:	4b08      	ldr	r3, [pc, #32]	; (80095e0 <_Bfree+0x3c>)
 80095be:	4809      	ldr	r0, [pc, #36]	; (80095e4 <_Bfree+0x40>)
 80095c0:	f000 fd52 	bl	800a068 <__assert_func>
 80095c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095c8:	6006      	str	r6, [r0, #0]
 80095ca:	60c6      	str	r6, [r0, #12]
 80095cc:	b13c      	cbz	r4, 80095de <_Bfree+0x3a>
 80095ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095d0:	6862      	ldr	r2, [r4, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095d8:	6021      	str	r1, [r4, #0]
 80095da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	0800ad19 	.word	0x0800ad19
 80095e4:	0800ada0 	.word	0x0800ada0

080095e8 <__multadd>:
 80095e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ec:	4698      	mov	r8, r3
 80095ee:	460c      	mov	r4, r1
 80095f0:	2300      	movs	r3, #0
 80095f2:	690e      	ldr	r6, [r1, #16]
 80095f4:	4607      	mov	r7, r0
 80095f6:	f101 0014 	add.w	r0, r1, #20
 80095fa:	6805      	ldr	r5, [r0, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	b2a9      	uxth	r1, r5
 8009600:	fb02 8101 	mla	r1, r2, r1, r8
 8009604:	0c2d      	lsrs	r5, r5, #16
 8009606:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800960a:	fb02 c505 	mla	r5, r2, r5, ip
 800960e:	b289      	uxth	r1, r1
 8009610:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009614:	429e      	cmp	r6, r3
 8009616:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800961a:	f840 1b04 	str.w	r1, [r0], #4
 800961e:	dcec      	bgt.n	80095fa <__multadd+0x12>
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	d022      	beq.n	800966c <__multadd+0x84>
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	42b3      	cmp	r3, r6
 800962a:	dc19      	bgt.n	8009660 <__multadd+0x78>
 800962c:	6861      	ldr	r1, [r4, #4]
 800962e:	4638      	mov	r0, r7
 8009630:	3101      	adds	r1, #1
 8009632:	f7ff ff77 	bl	8009524 <_Balloc>
 8009636:	4605      	mov	r5, r0
 8009638:	b928      	cbnz	r0, 8009646 <__multadd+0x5e>
 800963a:	4602      	mov	r2, r0
 800963c:	21b5      	movs	r1, #181	; 0xb5
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <__multadd+0x8c>)
 8009640:	480d      	ldr	r0, [pc, #52]	; (8009678 <__multadd+0x90>)
 8009642:	f000 fd11 	bl	800a068 <__assert_func>
 8009646:	6922      	ldr	r2, [r4, #16]
 8009648:	f104 010c 	add.w	r1, r4, #12
 800964c:	3202      	adds	r2, #2
 800964e:	0092      	lsls	r2, r2, #2
 8009650:	300c      	adds	r0, #12
 8009652:	f7ff ff59 	bl	8009508 <memcpy>
 8009656:	4621      	mov	r1, r4
 8009658:	4638      	mov	r0, r7
 800965a:	f7ff ffa3 	bl	80095a4 <_Bfree>
 800965e:	462c      	mov	r4, r5
 8009660:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009664:	3601      	adds	r6, #1
 8009666:	f8c3 8014 	str.w	r8, [r3, #20]
 800966a:	6126      	str	r6, [r4, #16]
 800966c:	4620      	mov	r0, r4
 800966e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009672:	bf00      	nop
 8009674:	0800ad8f 	.word	0x0800ad8f
 8009678:	0800ada0 	.word	0x0800ada0

0800967c <__hi0bits>:
 800967c:	0c02      	lsrs	r2, r0, #16
 800967e:	0412      	lsls	r2, r2, #16
 8009680:	4603      	mov	r3, r0
 8009682:	b9ca      	cbnz	r2, 80096b8 <__hi0bits+0x3c>
 8009684:	0403      	lsls	r3, r0, #16
 8009686:	2010      	movs	r0, #16
 8009688:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800968c:	bf04      	itt	eq
 800968e:	021b      	lsleq	r3, r3, #8
 8009690:	3008      	addeq	r0, #8
 8009692:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009696:	bf04      	itt	eq
 8009698:	011b      	lsleq	r3, r3, #4
 800969a:	3004      	addeq	r0, #4
 800969c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096a0:	bf04      	itt	eq
 80096a2:	009b      	lsleq	r3, r3, #2
 80096a4:	3002      	addeq	r0, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	db05      	blt.n	80096b6 <__hi0bits+0x3a>
 80096aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80096ae:	f100 0001 	add.w	r0, r0, #1
 80096b2:	bf08      	it	eq
 80096b4:	2020      	moveq	r0, #32
 80096b6:	4770      	bx	lr
 80096b8:	2000      	movs	r0, #0
 80096ba:	e7e5      	b.n	8009688 <__hi0bits+0xc>

080096bc <__lo0bits>:
 80096bc:	6803      	ldr	r3, [r0, #0]
 80096be:	4602      	mov	r2, r0
 80096c0:	f013 0007 	ands.w	r0, r3, #7
 80096c4:	d00b      	beq.n	80096de <__lo0bits+0x22>
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	d422      	bmi.n	8009710 <__lo0bits+0x54>
 80096ca:	0798      	lsls	r0, r3, #30
 80096cc:	bf49      	itett	mi
 80096ce:	085b      	lsrmi	r3, r3, #1
 80096d0:	089b      	lsrpl	r3, r3, #2
 80096d2:	2001      	movmi	r0, #1
 80096d4:	6013      	strmi	r3, [r2, #0]
 80096d6:	bf5c      	itt	pl
 80096d8:	2002      	movpl	r0, #2
 80096da:	6013      	strpl	r3, [r2, #0]
 80096dc:	4770      	bx	lr
 80096de:	b299      	uxth	r1, r3
 80096e0:	b909      	cbnz	r1, 80096e6 <__lo0bits+0x2a>
 80096e2:	2010      	movs	r0, #16
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096ea:	bf04      	itt	eq
 80096ec:	0a1b      	lsreq	r3, r3, #8
 80096ee:	3008      	addeq	r0, #8
 80096f0:	0719      	lsls	r1, r3, #28
 80096f2:	bf04      	itt	eq
 80096f4:	091b      	lsreq	r3, r3, #4
 80096f6:	3004      	addeq	r0, #4
 80096f8:	0799      	lsls	r1, r3, #30
 80096fa:	bf04      	itt	eq
 80096fc:	089b      	lsreq	r3, r3, #2
 80096fe:	3002      	addeq	r0, #2
 8009700:	07d9      	lsls	r1, r3, #31
 8009702:	d403      	bmi.n	800970c <__lo0bits+0x50>
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	f100 0001 	add.w	r0, r0, #1
 800970a:	d003      	beq.n	8009714 <__lo0bits+0x58>
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	4770      	bx	lr
 8009710:	2000      	movs	r0, #0
 8009712:	4770      	bx	lr
 8009714:	2020      	movs	r0, #32
 8009716:	4770      	bx	lr

08009718 <__i2b>:
 8009718:	b510      	push	{r4, lr}
 800971a:	460c      	mov	r4, r1
 800971c:	2101      	movs	r1, #1
 800971e:	f7ff ff01 	bl	8009524 <_Balloc>
 8009722:	4602      	mov	r2, r0
 8009724:	b928      	cbnz	r0, 8009732 <__i2b+0x1a>
 8009726:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800972a:	4b04      	ldr	r3, [pc, #16]	; (800973c <__i2b+0x24>)
 800972c:	4804      	ldr	r0, [pc, #16]	; (8009740 <__i2b+0x28>)
 800972e:	f000 fc9b 	bl	800a068 <__assert_func>
 8009732:	2301      	movs	r3, #1
 8009734:	6144      	str	r4, [r0, #20]
 8009736:	6103      	str	r3, [r0, #16]
 8009738:	bd10      	pop	{r4, pc}
 800973a:	bf00      	nop
 800973c:	0800ad8f 	.word	0x0800ad8f
 8009740:	0800ada0 	.word	0x0800ada0

08009744 <__multiply>:
 8009744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	4614      	mov	r4, r2
 800974a:	690a      	ldr	r2, [r1, #16]
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	460d      	mov	r5, r1
 8009750:	429a      	cmp	r2, r3
 8009752:	bfbe      	ittt	lt
 8009754:	460b      	movlt	r3, r1
 8009756:	4625      	movlt	r5, r4
 8009758:	461c      	movlt	r4, r3
 800975a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800975e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009762:	68ab      	ldr	r3, [r5, #8]
 8009764:	6869      	ldr	r1, [r5, #4]
 8009766:	eb0a 0709 	add.w	r7, sl, r9
 800976a:	42bb      	cmp	r3, r7
 800976c:	b085      	sub	sp, #20
 800976e:	bfb8      	it	lt
 8009770:	3101      	addlt	r1, #1
 8009772:	f7ff fed7 	bl	8009524 <_Balloc>
 8009776:	b930      	cbnz	r0, 8009786 <__multiply+0x42>
 8009778:	4602      	mov	r2, r0
 800977a:	f240 115d 	movw	r1, #349	; 0x15d
 800977e:	4b41      	ldr	r3, [pc, #260]	; (8009884 <__multiply+0x140>)
 8009780:	4841      	ldr	r0, [pc, #260]	; (8009888 <__multiply+0x144>)
 8009782:	f000 fc71 	bl	800a068 <__assert_func>
 8009786:	f100 0614 	add.w	r6, r0, #20
 800978a:	4633      	mov	r3, r6
 800978c:	2200      	movs	r2, #0
 800978e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009792:	4543      	cmp	r3, r8
 8009794:	d31e      	bcc.n	80097d4 <__multiply+0x90>
 8009796:	f105 0c14 	add.w	ip, r5, #20
 800979a:	f104 0314 	add.w	r3, r4, #20
 800979e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80097a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80097a6:	9202      	str	r2, [sp, #8]
 80097a8:	ebac 0205 	sub.w	r2, ip, r5
 80097ac:	3a15      	subs	r2, #21
 80097ae:	f022 0203 	bic.w	r2, r2, #3
 80097b2:	3204      	adds	r2, #4
 80097b4:	f105 0115 	add.w	r1, r5, #21
 80097b8:	458c      	cmp	ip, r1
 80097ba:	bf38      	it	cc
 80097bc:	2204      	movcc	r2, #4
 80097be:	9201      	str	r2, [sp, #4]
 80097c0:	9a02      	ldr	r2, [sp, #8]
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d808      	bhi.n	80097da <__multiply+0x96>
 80097c8:	2f00      	cmp	r7, #0
 80097ca:	dc55      	bgt.n	8009878 <__multiply+0x134>
 80097cc:	6107      	str	r7, [r0, #16]
 80097ce:	b005      	add	sp, #20
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	e7db      	b.n	8009792 <__multiply+0x4e>
 80097da:	f8b3 a000 	ldrh.w	sl, [r3]
 80097de:	f1ba 0f00 	cmp.w	sl, #0
 80097e2:	d020      	beq.n	8009826 <__multiply+0xe2>
 80097e4:	46b1      	mov	r9, r6
 80097e6:	2200      	movs	r2, #0
 80097e8:	f105 0e14 	add.w	lr, r5, #20
 80097ec:	f85e 4b04 	ldr.w	r4, [lr], #4
 80097f0:	f8d9 b000 	ldr.w	fp, [r9]
 80097f4:	b2a1      	uxth	r1, r4
 80097f6:	fa1f fb8b 	uxth.w	fp, fp
 80097fa:	fb0a b101 	mla	r1, sl, r1, fp
 80097fe:	4411      	add	r1, r2
 8009800:	f8d9 2000 	ldr.w	r2, [r9]
 8009804:	0c24      	lsrs	r4, r4, #16
 8009806:	0c12      	lsrs	r2, r2, #16
 8009808:	fb0a 2404 	mla	r4, sl, r4, r2
 800980c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009810:	b289      	uxth	r1, r1
 8009812:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009816:	45f4      	cmp	ip, lr
 8009818:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800981c:	f849 1b04 	str.w	r1, [r9], #4
 8009820:	d8e4      	bhi.n	80097ec <__multiply+0xa8>
 8009822:	9901      	ldr	r1, [sp, #4]
 8009824:	5072      	str	r2, [r6, r1]
 8009826:	9a03      	ldr	r2, [sp, #12]
 8009828:	3304      	adds	r3, #4
 800982a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800982e:	f1b9 0f00 	cmp.w	r9, #0
 8009832:	d01f      	beq.n	8009874 <__multiply+0x130>
 8009834:	46b6      	mov	lr, r6
 8009836:	f04f 0a00 	mov.w	sl, #0
 800983a:	6834      	ldr	r4, [r6, #0]
 800983c:	f105 0114 	add.w	r1, r5, #20
 8009840:	880a      	ldrh	r2, [r1, #0]
 8009842:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009846:	b2a4      	uxth	r4, r4
 8009848:	fb09 b202 	mla	r2, r9, r2, fp
 800984c:	4492      	add	sl, r2
 800984e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009852:	f84e 4b04 	str.w	r4, [lr], #4
 8009856:	f851 4b04 	ldr.w	r4, [r1], #4
 800985a:	f8be 2000 	ldrh.w	r2, [lr]
 800985e:	0c24      	lsrs	r4, r4, #16
 8009860:	fb09 2404 	mla	r4, r9, r4, r2
 8009864:	458c      	cmp	ip, r1
 8009866:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800986a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800986e:	d8e7      	bhi.n	8009840 <__multiply+0xfc>
 8009870:	9a01      	ldr	r2, [sp, #4]
 8009872:	50b4      	str	r4, [r6, r2]
 8009874:	3604      	adds	r6, #4
 8009876:	e7a3      	b.n	80097c0 <__multiply+0x7c>
 8009878:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1a5      	bne.n	80097cc <__multiply+0x88>
 8009880:	3f01      	subs	r7, #1
 8009882:	e7a1      	b.n	80097c8 <__multiply+0x84>
 8009884:	0800ad8f 	.word	0x0800ad8f
 8009888:	0800ada0 	.word	0x0800ada0

0800988c <__pow5mult>:
 800988c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009890:	4615      	mov	r5, r2
 8009892:	f012 0203 	ands.w	r2, r2, #3
 8009896:	4606      	mov	r6, r0
 8009898:	460f      	mov	r7, r1
 800989a:	d007      	beq.n	80098ac <__pow5mult+0x20>
 800989c:	4c25      	ldr	r4, [pc, #148]	; (8009934 <__pow5mult+0xa8>)
 800989e:	3a01      	subs	r2, #1
 80098a0:	2300      	movs	r3, #0
 80098a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098a6:	f7ff fe9f 	bl	80095e8 <__multadd>
 80098aa:	4607      	mov	r7, r0
 80098ac:	10ad      	asrs	r5, r5, #2
 80098ae:	d03d      	beq.n	800992c <__pow5mult+0xa0>
 80098b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098b2:	b97c      	cbnz	r4, 80098d4 <__pow5mult+0x48>
 80098b4:	2010      	movs	r0, #16
 80098b6:	f7ff fe11 	bl	80094dc <malloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	6270      	str	r0, [r6, #36]	; 0x24
 80098be:	b928      	cbnz	r0, 80098cc <__pow5mult+0x40>
 80098c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80098c4:	4b1c      	ldr	r3, [pc, #112]	; (8009938 <__pow5mult+0xac>)
 80098c6:	481d      	ldr	r0, [pc, #116]	; (800993c <__pow5mult+0xb0>)
 80098c8:	f000 fbce 	bl	800a068 <__assert_func>
 80098cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098d0:	6004      	str	r4, [r0, #0]
 80098d2:	60c4      	str	r4, [r0, #12]
 80098d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098dc:	b94c      	cbnz	r4, 80098f2 <__pow5mult+0x66>
 80098de:	f240 2171 	movw	r1, #625	; 0x271
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff ff18 	bl	8009718 <__i2b>
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80098f0:	6003      	str	r3, [r0, #0]
 80098f2:	f04f 0900 	mov.w	r9, #0
 80098f6:	07eb      	lsls	r3, r5, #31
 80098f8:	d50a      	bpl.n	8009910 <__pow5mult+0x84>
 80098fa:	4639      	mov	r1, r7
 80098fc:	4622      	mov	r2, r4
 80098fe:	4630      	mov	r0, r6
 8009900:	f7ff ff20 	bl	8009744 <__multiply>
 8009904:	4680      	mov	r8, r0
 8009906:	4639      	mov	r1, r7
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff fe4b 	bl	80095a4 <_Bfree>
 800990e:	4647      	mov	r7, r8
 8009910:	106d      	asrs	r5, r5, #1
 8009912:	d00b      	beq.n	800992c <__pow5mult+0xa0>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	b938      	cbnz	r0, 8009928 <__pow5mult+0x9c>
 8009918:	4622      	mov	r2, r4
 800991a:	4621      	mov	r1, r4
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff ff11 	bl	8009744 <__multiply>
 8009922:	6020      	str	r0, [r4, #0]
 8009924:	f8c0 9000 	str.w	r9, [r0]
 8009928:	4604      	mov	r4, r0
 800992a:	e7e4      	b.n	80098f6 <__pow5mult+0x6a>
 800992c:	4638      	mov	r0, r7
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009932:	bf00      	nop
 8009934:	0800aef0 	.word	0x0800aef0
 8009938:	0800ad19 	.word	0x0800ad19
 800993c:	0800ada0 	.word	0x0800ada0

08009940 <__lshift>:
 8009940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	4607      	mov	r7, r0
 8009948:	4691      	mov	r9, r2
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	6849      	ldr	r1, [r1, #4]
 800994e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009958:	f108 0601 	add.w	r6, r8, #1
 800995c:	42b3      	cmp	r3, r6
 800995e:	db0b      	blt.n	8009978 <__lshift+0x38>
 8009960:	4638      	mov	r0, r7
 8009962:	f7ff fddf 	bl	8009524 <_Balloc>
 8009966:	4605      	mov	r5, r0
 8009968:	b948      	cbnz	r0, 800997e <__lshift+0x3e>
 800996a:	4602      	mov	r2, r0
 800996c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009970:	4b27      	ldr	r3, [pc, #156]	; (8009a10 <__lshift+0xd0>)
 8009972:	4828      	ldr	r0, [pc, #160]	; (8009a14 <__lshift+0xd4>)
 8009974:	f000 fb78 	bl	800a068 <__assert_func>
 8009978:	3101      	adds	r1, #1
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	e7ee      	b.n	800995c <__lshift+0x1c>
 800997e:	2300      	movs	r3, #0
 8009980:	f100 0114 	add.w	r1, r0, #20
 8009984:	f100 0210 	add.w	r2, r0, #16
 8009988:	4618      	mov	r0, r3
 800998a:	4553      	cmp	r3, sl
 800998c:	db33      	blt.n	80099f6 <__lshift+0xb6>
 800998e:	6920      	ldr	r0, [r4, #16]
 8009990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009994:	f104 0314 	add.w	r3, r4, #20
 8009998:	f019 091f 	ands.w	r9, r9, #31
 800999c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099a4:	d02b      	beq.n	80099fe <__lshift+0xbe>
 80099a6:	468a      	mov	sl, r1
 80099a8:	2200      	movs	r2, #0
 80099aa:	f1c9 0e20 	rsb	lr, r9, #32
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	fa00 f009 	lsl.w	r0, r0, r9
 80099b4:	4302      	orrs	r2, r0
 80099b6:	f84a 2b04 	str.w	r2, [sl], #4
 80099ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80099be:	459c      	cmp	ip, r3
 80099c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80099c4:	d8f3      	bhi.n	80099ae <__lshift+0x6e>
 80099c6:	ebac 0304 	sub.w	r3, ip, r4
 80099ca:	3b15      	subs	r3, #21
 80099cc:	f023 0303 	bic.w	r3, r3, #3
 80099d0:	3304      	adds	r3, #4
 80099d2:	f104 0015 	add.w	r0, r4, #21
 80099d6:	4584      	cmp	ip, r0
 80099d8:	bf38      	it	cc
 80099da:	2304      	movcc	r3, #4
 80099dc:	50ca      	str	r2, [r1, r3]
 80099de:	b10a      	cbz	r2, 80099e4 <__lshift+0xa4>
 80099e0:	f108 0602 	add.w	r6, r8, #2
 80099e4:	3e01      	subs	r6, #1
 80099e6:	4638      	mov	r0, r7
 80099e8:	4621      	mov	r1, r4
 80099ea:	612e      	str	r6, [r5, #16]
 80099ec:	f7ff fdda 	bl	80095a4 <_Bfree>
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099fa:	3301      	adds	r3, #1
 80099fc:	e7c5      	b.n	800998a <__lshift+0x4a>
 80099fe:	3904      	subs	r1, #4
 8009a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a04:	459c      	cmp	ip, r3
 8009a06:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a0a:	d8f9      	bhi.n	8009a00 <__lshift+0xc0>
 8009a0c:	e7ea      	b.n	80099e4 <__lshift+0xa4>
 8009a0e:	bf00      	nop
 8009a10:	0800ad8f 	.word	0x0800ad8f
 8009a14:	0800ada0 	.word	0x0800ada0

08009a18 <__mcmp>:
 8009a18:	4603      	mov	r3, r0
 8009a1a:	690a      	ldr	r2, [r1, #16]
 8009a1c:	6900      	ldr	r0, [r0, #16]
 8009a1e:	b530      	push	{r4, r5, lr}
 8009a20:	1a80      	subs	r0, r0, r2
 8009a22:	d10d      	bne.n	8009a40 <__mcmp+0x28>
 8009a24:	3314      	adds	r3, #20
 8009a26:	3114      	adds	r1, #20
 8009a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a38:	4295      	cmp	r5, r2
 8009a3a:	d002      	beq.n	8009a42 <__mcmp+0x2a>
 8009a3c:	d304      	bcc.n	8009a48 <__mcmp+0x30>
 8009a3e:	2001      	movs	r0, #1
 8009a40:	bd30      	pop	{r4, r5, pc}
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	d3f4      	bcc.n	8009a30 <__mcmp+0x18>
 8009a46:	e7fb      	b.n	8009a40 <__mcmp+0x28>
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e7f8      	b.n	8009a40 <__mcmp+0x28>
	...

08009a50 <__mdiff>:
 8009a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	460c      	mov	r4, r1
 8009a56:	4606      	mov	r6, r0
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4692      	mov	sl, r2
 8009a5e:	f7ff ffdb 	bl	8009a18 <__mcmp>
 8009a62:	1e05      	subs	r5, r0, #0
 8009a64:	d111      	bne.n	8009a8a <__mdiff+0x3a>
 8009a66:	4629      	mov	r1, r5
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff fd5b 	bl	8009524 <_Balloc>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	b928      	cbnz	r0, 8009a7e <__mdiff+0x2e>
 8009a72:	f240 2132 	movw	r1, #562	; 0x232
 8009a76:	4b3c      	ldr	r3, [pc, #240]	; (8009b68 <__mdiff+0x118>)
 8009a78:	483c      	ldr	r0, [pc, #240]	; (8009b6c <__mdiff+0x11c>)
 8009a7a:	f000 faf5 	bl	800a068 <__assert_func>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a84:	4610      	mov	r0, r2
 8009a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8a:	bfa4      	itt	ge
 8009a8c:	4653      	movge	r3, sl
 8009a8e:	46a2      	movge	sl, r4
 8009a90:	4630      	mov	r0, r6
 8009a92:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009a96:	bfa6      	itte	ge
 8009a98:	461c      	movge	r4, r3
 8009a9a:	2500      	movge	r5, #0
 8009a9c:	2501      	movlt	r5, #1
 8009a9e:	f7ff fd41 	bl	8009524 <_Balloc>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	b918      	cbnz	r0, 8009aae <__mdiff+0x5e>
 8009aa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009aaa:	4b2f      	ldr	r3, [pc, #188]	; (8009b68 <__mdiff+0x118>)
 8009aac:	e7e4      	b.n	8009a78 <__mdiff+0x28>
 8009aae:	f100 0814 	add.w	r8, r0, #20
 8009ab2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009ab6:	60c5      	str	r5, [r0, #12]
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	f10a 0514 	add.w	r5, sl, #20
 8009ac0:	f10a 0010 	add.w	r0, sl, #16
 8009ac4:	46c2      	mov	sl, r8
 8009ac6:	6926      	ldr	r6, [r4, #16]
 8009ac8:	f104 0914 	add.w	r9, r4, #20
 8009acc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009ad0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ad4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009ad8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009adc:	fa1f f18b 	uxth.w	r1, fp
 8009ae0:	4461      	add	r1, ip
 8009ae2:	fa1f fc83 	uxth.w	ip, r3
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	eba1 010c 	sub.w	r1, r1, ip
 8009aec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009af0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009af4:	b289      	uxth	r1, r1
 8009af6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009afa:	454e      	cmp	r6, r9
 8009afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b00:	f84a 3b04 	str.w	r3, [sl], #4
 8009b04:	d8e6      	bhi.n	8009ad4 <__mdiff+0x84>
 8009b06:	1b33      	subs	r3, r6, r4
 8009b08:	3b15      	subs	r3, #21
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	3415      	adds	r4, #21
 8009b10:	3304      	adds	r3, #4
 8009b12:	42a6      	cmp	r6, r4
 8009b14:	bf38      	it	cc
 8009b16:	2304      	movcc	r3, #4
 8009b18:	441d      	add	r5, r3
 8009b1a:	4443      	add	r3, r8
 8009b1c:	461e      	mov	r6, r3
 8009b1e:	462c      	mov	r4, r5
 8009b20:	4574      	cmp	r4, lr
 8009b22:	d30e      	bcc.n	8009b42 <__mdiff+0xf2>
 8009b24:	f10e 0103 	add.w	r1, lr, #3
 8009b28:	1b49      	subs	r1, r1, r5
 8009b2a:	f021 0103 	bic.w	r1, r1, #3
 8009b2e:	3d03      	subs	r5, #3
 8009b30:	45ae      	cmp	lr, r5
 8009b32:	bf38      	it	cc
 8009b34:	2100      	movcc	r1, #0
 8009b36:	4419      	add	r1, r3
 8009b38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009b3c:	b18b      	cbz	r3, 8009b62 <__mdiff+0x112>
 8009b3e:	6117      	str	r7, [r2, #16]
 8009b40:	e7a0      	b.n	8009a84 <__mdiff+0x34>
 8009b42:	f854 8b04 	ldr.w	r8, [r4], #4
 8009b46:	fa1f f188 	uxth.w	r1, r8
 8009b4a:	4461      	add	r1, ip
 8009b4c:	1408      	asrs	r0, r1, #16
 8009b4e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009b52:	b289      	uxth	r1, r1
 8009b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b5c:	f846 1b04 	str.w	r1, [r6], #4
 8009b60:	e7de      	b.n	8009b20 <__mdiff+0xd0>
 8009b62:	3f01      	subs	r7, #1
 8009b64:	e7e8      	b.n	8009b38 <__mdiff+0xe8>
 8009b66:	bf00      	nop
 8009b68:	0800ad8f 	.word	0x0800ad8f
 8009b6c:	0800ada0 	.word	0x0800ada0

08009b70 <__d2b>:
 8009b70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b74:	2101      	movs	r1, #1
 8009b76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009b7a:	4690      	mov	r8, r2
 8009b7c:	461d      	mov	r5, r3
 8009b7e:	f7ff fcd1 	bl	8009524 <_Balloc>
 8009b82:	4604      	mov	r4, r0
 8009b84:	b930      	cbnz	r0, 8009b94 <__d2b+0x24>
 8009b86:	4602      	mov	r2, r0
 8009b88:	f240 310a 	movw	r1, #778	; 0x30a
 8009b8c:	4b24      	ldr	r3, [pc, #144]	; (8009c20 <__d2b+0xb0>)
 8009b8e:	4825      	ldr	r0, [pc, #148]	; (8009c24 <__d2b+0xb4>)
 8009b90:	f000 fa6a 	bl	800a068 <__assert_func>
 8009b94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009b98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009b9c:	bb2d      	cbnz	r5, 8009bea <__d2b+0x7a>
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ba4:	d026      	beq.n	8009bf4 <__d2b+0x84>
 8009ba6:	4668      	mov	r0, sp
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	f7ff fd87 	bl	80096bc <__lo0bits>
 8009bae:	9900      	ldr	r1, [sp, #0]
 8009bb0:	b1f0      	cbz	r0, 8009bf0 <__d2b+0x80>
 8009bb2:	9a01      	ldr	r2, [sp, #4]
 8009bb4:	f1c0 0320 	rsb	r3, r0, #32
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	40c2      	lsrs	r2, r0
 8009bc0:	6163      	str	r3, [r4, #20]
 8009bc2:	9201      	str	r2, [sp, #4]
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bf14      	ite	ne
 8009bca:	2102      	movne	r1, #2
 8009bcc:	2101      	moveq	r1, #1
 8009bce:	61a3      	str	r3, [r4, #24]
 8009bd0:	6121      	str	r1, [r4, #16]
 8009bd2:	b1c5      	cbz	r5, 8009c06 <__d2b+0x96>
 8009bd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009bd8:	4405      	add	r5, r0
 8009bda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bde:	603d      	str	r5, [r7, #0]
 8009be0:	6030      	str	r0, [r6, #0]
 8009be2:	4620      	mov	r0, r4
 8009be4:	b002      	add	sp, #8
 8009be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bee:	e7d6      	b.n	8009b9e <__d2b+0x2e>
 8009bf0:	6161      	str	r1, [r4, #20]
 8009bf2:	e7e7      	b.n	8009bc4 <__d2b+0x54>
 8009bf4:	a801      	add	r0, sp, #4
 8009bf6:	f7ff fd61 	bl	80096bc <__lo0bits>
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	6121      	str	r1, [r4, #16]
 8009c00:	6163      	str	r3, [r4, #20]
 8009c02:	3020      	adds	r0, #32
 8009c04:	e7e5      	b.n	8009bd2 <__d2b+0x62>
 8009c06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009c0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c0e:	6038      	str	r0, [r7, #0]
 8009c10:	6918      	ldr	r0, [r3, #16]
 8009c12:	f7ff fd33 	bl	800967c <__hi0bits>
 8009c16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009c1a:	6031      	str	r1, [r6, #0]
 8009c1c:	e7e1      	b.n	8009be2 <__d2b+0x72>
 8009c1e:	bf00      	nop
 8009c20:	0800ad8f 	.word	0x0800ad8f
 8009c24:	0800ada0 	.word	0x0800ada0

08009c28 <_calloc_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	fb02 f501 	mul.w	r5, r2, r1
 8009c2e:	4629      	mov	r1, r5
 8009c30:	f000 f854 	bl	8009cdc <_malloc_r>
 8009c34:	4604      	mov	r4, r0
 8009c36:	b118      	cbz	r0, 8009c40 <_calloc_r+0x18>
 8009c38:	462a      	mov	r2, r5
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	f7fe f932 	bl	8007ea4 <memset>
 8009c40:	4620      	mov	r0, r4
 8009c42:	bd38      	pop	{r3, r4, r5, pc}

08009c44 <_free_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4605      	mov	r5, r0
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	d043      	beq.n	8009cd4 <_free_r+0x90>
 8009c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c50:	1f0c      	subs	r4, r1, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfb8      	it	lt
 8009c56:	18e4      	addlt	r4, r4, r3
 8009c58:	f000 fa62 	bl	800a120 <__malloc_lock>
 8009c5c:	4a1e      	ldr	r2, [pc, #120]	; (8009cd8 <_free_r+0x94>)
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	4610      	mov	r0, r2
 8009c62:	b933      	cbnz	r3, 8009c72 <_free_r+0x2e>
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	6014      	str	r4, [r2, #0]
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c6e:	f000 ba5d 	b.w	800a12c <__malloc_unlock>
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	d90a      	bls.n	8009c8c <_free_r+0x48>
 8009c76:	6821      	ldr	r1, [r4, #0]
 8009c78:	1862      	adds	r2, r4, r1
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	bf01      	itttt	eq
 8009c7e:	681a      	ldreq	r2, [r3, #0]
 8009c80:	685b      	ldreq	r3, [r3, #4]
 8009c82:	1852      	addeq	r2, r2, r1
 8009c84:	6022      	streq	r2, [r4, #0]
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	6004      	str	r4, [r0, #0]
 8009c8a:	e7ed      	b.n	8009c68 <_free_r+0x24>
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	b10b      	cbz	r3, 8009c96 <_free_r+0x52>
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	d9fa      	bls.n	8009c8c <_free_r+0x48>
 8009c96:	6811      	ldr	r1, [r2, #0]
 8009c98:	1850      	adds	r0, r2, r1
 8009c9a:	42a0      	cmp	r0, r4
 8009c9c:	d10b      	bne.n	8009cb6 <_free_r+0x72>
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	4401      	add	r1, r0
 8009ca2:	1850      	adds	r0, r2, r1
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	6011      	str	r1, [r2, #0]
 8009ca8:	d1de      	bne.n	8009c68 <_free_r+0x24>
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	4401      	add	r1, r0
 8009cb0:	6011      	str	r1, [r2, #0]
 8009cb2:	6053      	str	r3, [r2, #4]
 8009cb4:	e7d8      	b.n	8009c68 <_free_r+0x24>
 8009cb6:	d902      	bls.n	8009cbe <_free_r+0x7a>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	e7d4      	b.n	8009c68 <_free_r+0x24>
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	1821      	adds	r1, r4, r0
 8009cc2:	428b      	cmp	r3, r1
 8009cc4:	bf01      	itttt	eq
 8009cc6:	6819      	ldreq	r1, [r3, #0]
 8009cc8:	685b      	ldreq	r3, [r3, #4]
 8009cca:	1809      	addeq	r1, r1, r0
 8009ccc:	6021      	streq	r1, [r4, #0]
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	6054      	str	r4, [r2, #4]
 8009cd2:	e7c9      	b.n	8009c68 <_free_r+0x24>
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000021c 	.word	0x2000021c

08009cdc <_malloc_r>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	1ccd      	adds	r5, r1, #3
 8009ce0:	f025 0503 	bic.w	r5, r5, #3
 8009ce4:	3508      	adds	r5, #8
 8009ce6:	2d0c      	cmp	r5, #12
 8009ce8:	bf38      	it	cc
 8009cea:	250c      	movcc	r5, #12
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	4606      	mov	r6, r0
 8009cf0:	db01      	blt.n	8009cf6 <_malloc_r+0x1a>
 8009cf2:	42a9      	cmp	r1, r5
 8009cf4:	d903      	bls.n	8009cfe <_malloc_r+0x22>
 8009cf6:	230c      	movs	r3, #12
 8009cf8:	6033      	str	r3, [r6, #0]
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfe:	f000 fa0f 	bl	800a120 <__malloc_lock>
 8009d02:	4921      	ldr	r1, [pc, #132]	; (8009d88 <_malloc_r+0xac>)
 8009d04:	680a      	ldr	r2, [r1, #0]
 8009d06:	4614      	mov	r4, r2
 8009d08:	b99c      	cbnz	r4, 8009d32 <_malloc_r+0x56>
 8009d0a:	4f20      	ldr	r7, [pc, #128]	; (8009d8c <_malloc_r+0xb0>)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	b923      	cbnz	r3, 8009d1a <_malloc_r+0x3e>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4630      	mov	r0, r6
 8009d14:	f000 f998 	bl	800a048 <_sbrk_r>
 8009d18:	6038      	str	r0, [r7, #0]
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f000 f993 	bl	800a048 <_sbrk_r>
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d123      	bne.n	8009d6e <_malloc_r+0x92>
 8009d26:	230c      	movs	r3, #12
 8009d28:	4630      	mov	r0, r6
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	f000 f9fe 	bl	800a12c <__malloc_unlock>
 8009d30:	e7e3      	b.n	8009cfa <_malloc_r+0x1e>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	1b5b      	subs	r3, r3, r5
 8009d36:	d417      	bmi.n	8009d68 <_malloc_r+0x8c>
 8009d38:	2b0b      	cmp	r3, #11
 8009d3a:	d903      	bls.n	8009d44 <_malloc_r+0x68>
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	441c      	add	r4, r3
 8009d40:	6025      	str	r5, [r4, #0]
 8009d42:	e004      	b.n	8009d4e <_malloc_r+0x72>
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	42a2      	cmp	r2, r4
 8009d48:	bf0c      	ite	eq
 8009d4a:	600b      	streq	r3, [r1, #0]
 8009d4c:	6053      	strne	r3, [r2, #4]
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 f9ec 	bl	800a12c <__malloc_unlock>
 8009d54:	f104 000b 	add.w	r0, r4, #11
 8009d58:	1d23      	adds	r3, r4, #4
 8009d5a:	f020 0007 	bic.w	r0, r0, #7
 8009d5e:	1ac2      	subs	r2, r0, r3
 8009d60:	d0cc      	beq.n	8009cfc <_malloc_r+0x20>
 8009d62:	1a1b      	subs	r3, r3, r0
 8009d64:	50a3      	str	r3, [r4, r2]
 8009d66:	e7c9      	b.n	8009cfc <_malloc_r+0x20>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	6864      	ldr	r4, [r4, #4]
 8009d6c:	e7cc      	b.n	8009d08 <_malloc_r+0x2c>
 8009d6e:	1cc4      	adds	r4, r0, #3
 8009d70:	f024 0403 	bic.w	r4, r4, #3
 8009d74:	42a0      	cmp	r0, r4
 8009d76:	d0e3      	beq.n	8009d40 <_malloc_r+0x64>
 8009d78:	1a21      	subs	r1, r4, r0
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 f964 	bl	800a048 <_sbrk_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d1dd      	bne.n	8009d40 <_malloc_r+0x64>
 8009d84:	e7cf      	b.n	8009d26 <_malloc_r+0x4a>
 8009d86:	bf00      	nop
 8009d88:	2000021c 	.word	0x2000021c
 8009d8c:	20000220 	.word	0x20000220

08009d90 <__ssputs_r>:
 8009d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	688e      	ldr	r6, [r1, #8]
 8009d96:	4682      	mov	sl, r0
 8009d98:	429e      	cmp	r6, r3
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4690      	mov	r8, r2
 8009d9e:	461f      	mov	r7, r3
 8009da0:	d838      	bhi.n	8009e14 <__ssputs_r+0x84>
 8009da2:	898a      	ldrh	r2, [r1, #12]
 8009da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009da8:	d032      	beq.n	8009e10 <__ssputs_r+0x80>
 8009daa:	6825      	ldr	r5, [r4, #0]
 8009dac:	6909      	ldr	r1, [r1, #16]
 8009dae:	3301      	adds	r3, #1
 8009db0:	eba5 0901 	sub.w	r9, r5, r1
 8009db4:	6965      	ldr	r5, [r4, #20]
 8009db6:	444b      	add	r3, r9
 8009db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dc0:	106d      	asrs	r5, r5, #1
 8009dc2:	429d      	cmp	r5, r3
 8009dc4:	bf38      	it	cc
 8009dc6:	461d      	movcc	r5, r3
 8009dc8:	0553      	lsls	r3, r2, #21
 8009dca:	d531      	bpl.n	8009e30 <__ssputs_r+0xa0>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7ff ff85 	bl	8009cdc <_malloc_r>
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	b950      	cbnz	r0, 8009dec <__ssputs_r+0x5c>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	f8ca 3000 	str.w	r3, [sl]
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dec:	464a      	mov	r2, r9
 8009dee:	6921      	ldr	r1, [r4, #16]
 8009df0:	f7ff fb8a 	bl	8009508 <memcpy>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	6126      	str	r6, [r4, #16]
 8009e02:	444e      	add	r6, r9
 8009e04:	6026      	str	r6, [r4, #0]
 8009e06:	463e      	mov	r6, r7
 8009e08:	6165      	str	r5, [r4, #20]
 8009e0a:	eba5 0509 	sub.w	r5, r5, r9
 8009e0e:	60a5      	str	r5, [r4, #8]
 8009e10:	42be      	cmp	r6, r7
 8009e12:	d900      	bls.n	8009e16 <__ssputs_r+0x86>
 8009e14:	463e      	mov	r6, r7
 8009e16:	4632      	mov	r2, r6
 8009e18:	4641      	mov	r1, r8
 8009e1a:	6820      	ldr	r0, [r4, #0]
 8009e1c:	f000 f966 	bl	800a0ec <memmove>
 8009e20:	68a3      	ldr	r3, [r4, #8]
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	1b9b      	subs	r3, r3, r6
 8009e26:	4432      	add	r2, r6
 8009e28:	2000      	movs	r0, #0
 8009e2a:	60a3      	str	r3, [r4, #8]
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	e7db      	b.n	8009de8 <__ssputs_r+0x58>
 8009e30:	462a      	mov	r2, r5
 8009e32:	f000 f981 	bl	800a138 <_realloc_r>
 8009e36:	4606      	mov	r6, r0
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d1e1      	bne.n	8009e00 <__ssputs_r+0x70>
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	6921      	ldr	r1, [r4, #16]
 8009e40:	f7ff ff00 	bl	8009c44 <_free_r>
 8009e44:	e7c7      	b.n	8009dd6 <__ssputs_r+0x46>
	...

08009e48 <_svfiprintf_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	4698      	mov	r8, r3
 8009e4e:	898b      	ldrh	r3, [r1, #12]
 8009e50:	4607      	mov	r7, r0
 8009e52:	061b      	lsls	r3, r3, #24
 8009e54:	460d      	mov	r5, r1
 8009e56:	4614      	mov	r4, r2
 8009e58:	b09d      	sub	sp, #116	; 0x74
 8009e5a:	d50e      	bpl.n	8009e7a <_svfiprintf_r+0x32>
 8009e5c:	690b      	ldr	r3, [r1, #16]
 8009e5e:	b963      	cbnz	r3, 8009e7a <_svfiprintf_r+0x32>
 8009e60:	2140      	movs	r1, #64	; 0x40
 8009e62:	f7ff ff3b 	bl	8009cdc <_malloc_r>
 8009e66:	6028      	str	r0, [r5, #0]
 8009e68:	6128      	str	r0, [r5, #16]
 8009e6a:	b920      	cbnz	r0, 8009e76 <_svfiprintf_r+0x2e>
 8009e6c:	230c      	movs	r3, #12
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	f04f 30ff 	mov.w	r0, #4294967295
 8009e74:	e0d1      	b.n	800a01a <_svfiprintf_r+0x1d2>
 8009e76:	2340      	movs	r3, #64	; 0x40
 8009e78:	616b      	str	r3, [r5, #20]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7e:	2320      	movs	r3, #32
 8009e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e84:	2330      	movs	r3, #48	; 0x30
 8009e86:	f04f 0901 	mov.w	r9, #1
 8009e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a034 <_svfiprintf_r+0x1ec>
 8009e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e96:	4623      	mov	r3, r4
 8009e98:	469a      	mov	sl, r3
 8009e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e9e:	b10a      	cbz	r2, 8009ea4 <_svfiprintf_r+0x5c>
 8009ea0:	2a25      	cmp	r2, #37	; 0x25
 8009ea2:	d1f9      	bne.n	8009e98 <_svfiprintf_r+0x50>
 8009ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ea8:	d00b      	beq.n	8009ec2 <_svfiprintf_r+0x7a>
 8009eaa:	465b      	mov	r3, fp
 8009eac:	4622      	mov	r2, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff ff6d 	bl	8009d90 <__ssputs_r>
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	f000 80aa 	beq.w	800a010 <_svfiprintf_r+0x1c8>
 8009ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ebe:	445a      	add	r2, fp
 8009ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 80a2 	beq.w	800a010 <_svfiprintf_r+0x1c8>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed6:	f10a 0a01 	add.w	sl, sl, #1
 8009eda:	9304      	str	r3, [sp, #16]
 8009edc:	9307      	str	r3, [sp, #28]
 8009ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ee4:	4654      	mov	r4, sl
 8009ee6:	2205      	movs	r2, #5
 8009ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eec:	4851      	ldr	r0, [pc, #324]	; (800a034 <_svfiprintf_r+0x1ec>)
 8009eee:	f7ff fafd 	bl	80094ec <memchr>
 8009ef2:	9a04      	ldr	r2, [sp, #16]
 8009ef4:	b9d8      	cbnz	r0, 8009f2e <_svfiprintf_r+0xe6>
 8009ef6:	06d0      	lsls	r0, r2, #27
 8009ef8:	bf44      	itt	mi
 8009efa:	2320      	movmi	r3, #32
 8009efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f00:	0711      	lsls	r1, r2, #28
 8009f02:	bf44      	itt	mi
 8009f04:	232b      	movmi	r3, #43	; 0x2b
 8009f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009f10:	d015      	beq.n	8009f3e <_svfiprintf_r+0xf6>
 8009f12:	4654      	mov	r4, sl
 8009f14:	2000      	movs	r0, #0
 8009f16:	f04f 0c0a 	mov.w	ip, #10
 8009f1a:	9a07      	ldr	r2, [sp, #28]
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f22:	3b30      	subs	r3, #48	; 0x30
 8009f24:	2b09      	cmp	r3, #9
 8009f26:	d94e      	bls.n	8009fc6 <_svfiprintf_r+0x17e>
 8009f28:	b1b0      	cbz	r0, 8009f58 <_svfiprintf_r+0x110>
 8009f2a:	9207      	str	r2, [sp, #28]
 8009f2c:	e014      	b.n	8009f58 <_svfiprintf_r+0x110>
 8009f2e:	eba0 0308 	sub.w	r3, r0, r8
 8009f32:	fa09 f303 	lsl.w	r3, r9, r3
 8009f36:	4313      	orrs	r3, r2
 8009f38:	46a2      	mov	sl, r4
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	e7d2      	b.n	8009ee4 <_svfiprintf_r+0x9c>
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	1d19      	adds	r1, r3, #4
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	9103      	str	r1, [sp, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfbb      	ittet	lt
 8009f4a:	425b      	neglt	r3, r3
 8009f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f50:	9307      	strge	r3, [sp, #28]
 8009f52:	9307      	strlt	r3, [sp, #28]
 8009f54:	bfb8      	it	lt
 8009f56:	9204      	strlt	r2, [sp, #16]
 8009f58:	7823      	ldrb	r3, [r4, #0]
 8009f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f5c:	d10c      	bne.n	8009f78 <_svfiprintf_r+0x130>
 8009f5e:	7863      	ldrb	r3, [r4, #1]
 8009f60:	2b2a      	cmp	r3, #42	; 0x2a
 8009f62:	d135      	bne.n	8009fd0 <_svfiprintf_r+0x188>
 8009f64:	9b03      	ldr	r3, [sp, #12]
 8009f66:	3402      	adds	r4, #2
 8009f68:	1d1a      	adds	r2, r3, #4
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	9203      	str	r2, [sp, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	bfb8      	it	lt
 8009f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f76:	9305      	str	r3, [sp, #20]
 8009f78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a044 <_svfiprintf_r+0x1fc>
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	4650      	mov	r0, sl
 8009f80:	7821      	ldrb	r1, [r4, #0]
 8009f82:	f7ff fab3 	bl	80094ec <memchr>
 8009f86:	b140      	cbz	r0, 8009f9a <_svfiprintf_r+0x152>
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	eba0 000a 	sub.w	r0, r0, sl
 8009f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	3401      	adds	r4, #1
 8009f96:	4303      	orrs	r3, r0
 8009f98:	9304      	str	r3, [sp, #16]
 8009f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9e:	2206      	movs	r2, #6
 8009fa0:	4825      	ldr	r0, [pc, #148]	; (800a038 <_svfiprintf_r+0x1f0>)
 8009fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fa6:	f7ff faa1 	bl	80094ec <memchr>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d038      	beq.n	800a020 <_svfiprintf_r+0x1d8>
 8009fae:	4b23      	ldr	r3, [pc, #140]	; (800a03c <_svfiprintf_r+0x1f4>)
 8009fb0:	bb1b      	cbnz	r3, 8009ffa <_svfiprintf_r+0x1b2>
 8009fb2:	9b03      	ldr	r3, [sp, #12]
 8009fb4:	3307      	adds	r3, #7
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	3308      	adds	r3, #8
 8009fbc:	9303      	str	r3, [sp, #12]
 8009fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc0:	4433      	add	r3, r6
 8009fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc4:	e767      	b.n	8009e96 <_svfiprintf_r+0x4e>
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	2001      	movs	r0, #1
 8009fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fce:	e7a5      	b.n	8009f1c <_svfiprintf_r+0xd4>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f04f 0c0a 	mov.w	ip, #10
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fe2:	3a30      	subs	r2, #48	; 0x30
 8009fe4:	2a09      	cmp	r2, #9
 8009fe6:	d903      	bls.n	8009ff0 <_svfiprintf_r+0x1a8>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0c5      	beq.n	8009f78 <_svfiprintf_r+0x130>
 8009fec:	9105      	str	r1, [sp, #20]
 8009fee:	e7c3      	b.n	8009f78 <_svfiprintf_r+0x130>
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ff8:	e7f0      	b.n	8009fdc <_svfiprintf_r+0x194>
 8009ffa:	ab03      	add	r3, sp, #12
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	462a      	mov	r2, r5
 800a000:	4638      	mov	r0, r7
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <_svfiprintf_r+0x1f8>)
 800a004:	a904      	add	r1, sp, #16
 800a006:	f7fd fff3 	bl	8007ff0 <_printf_float>
 800a00a:	1c42      	adds	r2, r0, #1
 800a00c:	4606      	mov	r6, r0
 800a00e:	d1d6      	bne.n	8009fbe <_svfiprintf_r+0x176>
 800a010:	89ab      	ldrh	r3, [r5, #12]
 800a012:	065b      	lsls	r3, r3, #25
 800a014:	f53f af2c 	bmi.w	8009e70 <_svfiprintf_r+0x28>
 800a018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a01a:	b01d      	add	sp, #116	; 0x74
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	ab03      	add	r3, sp, #12
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	462a      	mov	r2, r5
 800a026:	4638      	mov	r0, r7
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <_svfiprintf_r+0x1f8>)
 800a02a:	a904      	add	r1, sp, #16
 800a02c:	f7fe fa7c 	bl	8008528 <_printf_i>
 800a030:	e7eb      	b.n	800a00a <_svfiprintf_r+0x1c2>
 800a032:	bf00      	nop
 800a034:	0800aefc 	.word	0x0800aefc
 800a038:	0800af06 	.word	0x0800af06
 800a03c:	08007ff1 	.word	0x08007ff1
 800a040:	08009d91 	.word	0x08009d91
 800a044:	0800af02 	.word	0x0800af02

0800a048 <_sbrk_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	2300      	movs	r3, #0
 800a04c:	4d05      	ldr	r5, [pc, #20]	; (800a064 <_sbrk_r+0x1c>)
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f8 f840 	bl	80020d8 <_sbrk>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_sbrk_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_sbrk_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	200004a8 	.word	0x200004a8

0800a068 <__assert_func>:
 800a068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a06a:	4614      	mov	r4, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	4b09      	ldr	r3, [pc, #36]	; (800a094 <__assert_func+0x2c>)
 800a070:	4605      	mov	r5, r0
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68d8      	ldr	r0, [r3, #12]
 800a076:	b14c      	cbz	r4, 800a08c <__assert_func+0x24>
 800a078:	4b07      	ldr	r3, [pc, #28]	; (800a098 <__assert_func+0x30>)
 800a07a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a07e:	9100      	str	r1, [sp, #0]
 800a080:	462b      	mov	r3, r5
 800a082:	4906      	ldr	r1, [pc, #24]	; (800a09c <__assert_func+0x34>)
 800a084:	f000 f80e 	bl	800a0a4 <fiprintf>
 800a088:	f000 faa2 	bl	800a5d0 <abort>
 800a08c:	4b04      	ldr	r3, [pc, #16]	; (800a0a0 <__assert_func+0x38>)
 800a08e:	461c      	mov	r4, r3
 800a090:	e7f3      	b.n	800a07a <__assert_func+0x12>
 800a092:	bf00      	nop
 800a094:	20000018 	.word	0x20000018
 800a098:	0800af0d 	.word	0x0800af0d
 800a09c:	0800af1a 	.word	0x0800af1a
 800a0a0:	0800af48 	.word	0x0800af48

0800a0a4 <fiprintf>:
 800a0a4:	b40e      	push	{r1, r2, r3}
 800a0a6:	b503      	push	{r0, r1, lr}
 800a0a8:	4601      	mov	r1, r0
 800a0aa:	ab03      	add	r3, sp, #12
 800a0ac:	4805      	ldr	r0, [pc, #20]	; (800a0c4 <fiprintf+0x20>)
 800a0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b2:	6800      	ldr	r0, [r0, #0]
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	f000 f88d 	bl	800a1d4 <_vfiprintf_r>
 800a0ba:	b002      	add	sp, #8
 800a0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c0:	b003      	add	sp, #12
 800a0c2:	4770      	bx	lr
 800a0c4:	20000018 	.word	0x20000018

0800a0c8 <__ascii_mbtowc>:
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	b901      	cbnz	r1, 800a0ce <__ascii_mbtowc+0x6>
 800a0cc:	a901      	add	r1, sp, #4
 800a0ce:	b142      	cbz	r2, 800a0e2 <__ascii_mbtowc+0x1a>
 800a0d0:	b14b      	cbz	r3, 800a0e6 <__ascii_mbtowc+0x1e>
 800a0d2:	7813      	ldrb	r3, [r2, #0]
 800a0d4:	600b      	str	r3, [r1, #0]
 800a0d6:	7812      	ldrb	r2, [r2, #0]
 800a0d8:	1e10      	subs	r0, r2, #0
 800a0da:	bf18      	it	ne
 800a0dc:	2001      	movne	r0, #1
 800a0de:	b002      	add	sp, #8
 800a0e0:	4770      	bx	lr
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	e7fb      	b.n	800a0de <__ascii_mbtowc+0x16>
 800a0e6:	f06f 0001 	mvn.w	r0, #1
 800a0ea:	e7f8      	b.n	800a0de <__ascii_mbtowc+0x16>

0800a0ec <memmove>:
 800a0ec:	4288      	cmp	r0, r1
 800a0ee:	b510      	push	{r4, lr}
 800a0f0:	eb01 0402 	add.w	r4, r1, r2
 800a0f4:	d902      	bls.n	800a0fc <memmove+0x10>
 800a0f6:	4284      	cmp	r4, r0
 800a0f8:	4623      	mov	r3, r4
 800a0fa:	d807      	bhi.n	800a10c <memmove+0x20>
 800a0fc:	1e43      	subs	r3, r0, #1
 800a0fe:	42a1      	cmp	r1, r4
 800a100:	d008      	beq.n	800a114 <memmove+0x28>
 800a102:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a10a:	e7f8      	b.n	800a0fe <memmove+0x12>
 800a10c:	4601      	mov	r1, r0
 800a10e:	4402      	add	r2, r0
 800a110:	428a      	cmp	r2, r1
 800a112:	d100      	bne.n	800a116 <memmove+0x2a>
 800a114:	bd10      	pop	{r4, pc}
 800a116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a11a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a11e:	e7f7      	b.n	800a110 <memmove+0x24>

0800a120 <__malloc_lock>:
 800a120:	4801      	ldr	r0, [pc, #4]	; (800a128 <__malloc_lock+0x8>)
 800a122:	f000 bc15 	b.w	800a950 <__retarget_lock_acquire_recursive>
 800a126:	bf00      	nop
 800a128:	200004b0 	.word	0x200004b0

0800a12c <__malloc_unlock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__malloc_unlock+0x8>)
 800a12e:	f000 bc10 	b.w	800a952 <__retarget_lock_release_recursive>
 800a132:	bf00      	nop
 800a134:	200004b0 	.word	0x200004b0

0800a138 <_realloc_r>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	4607      	mov	r7, r0
 800a13c:	4614      	mov	r4, r2
 800a13e:	460e      	mov	r6, r1
 800a140:	b921      	cbnz	r1, 800a14c <_realloc_r+0x14>
 800a142:	4611      	mov	r1, r2
 800a144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a148:	f7ff bdc8 	b.w	8009cdc <_malloc_r>
 800a14c:	b922      	cbnz	r2, 800a158 <_realloc_r+0x20>
 800a14e:	f7ff fd79 	bl	8009c44 <_free_r>
 800a152:	4625      	mov	r5, r4
 800a154:	4628      	mov	r0, r5
 800a156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a158:	f000 fc60 	bl	800aa1c <_malloc_usable_size_r>
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d20f      	bcs.n	800a180 <_realloc_r+0x48>
 800a160:	4621      	mov	r1, r4
 800a162:	4638      	mov	r0, r7
 800a164:	f7ff fdba 	bl	8009cdc <_malloc_r>
 800a168:	4605      	mov	r5, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d0f2      	beq.n	800a154 <_realloc_r+0x1c>
 800a16e:	4631      	mov	r1, r6
 800a170:	4622      	mov	r2, r4
 800a172:	f7ff f9c9 	bl	8009508 <memcpy>
 800a176:	4631      	mov	r1, r6
 800a178:	4638      	mov	r0, r7
 800a17a:	f7ff fd63 	bl	8009c44 <_free_r>
 800a17e:	e7e9      	b.n	800a154 <_realloc_r+0x1c>
 800a180:	4635      	mov	r5, r6
 800a182:	e7e7      	b.n	800a154 <_realloc_r+0x1c>

0800a184 <__sfputc_r>:
 800a184:	6893      	ldr	r3, [r2, #8]
 800a186:	b410      	push	{r4}
 800a188:	3b01      	subs	r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	6093      	str	r3, [r2, #8]
 800a18e:	da07      	bge.n	800a1a0 <__sfputc_r+0x1c>
 800a190:	6994      	ldr	r4, [r2, #24]
 800a192:	42a3      	cmp	r3, r4
 800a194:	db01      	blt.n	800a19a <__sfputc_r+0x16>
 800a196:	290a      	cmp	r1, #10
 800a198:	d102      	bne.n	800a1a0 <__sfputc_r+0x1c>
 800a19a:	bc10      	pop	{r4}
 800a19c:	f000 b94a 	b.w	800a434 <__swbuf_r>
 800a1a0:	6813      	ldr	r3, [r2, #0]
 800a1a2:	1c58      	adds	r0, r3, #1
 800a1a4:	6010      	str	r0, [r2, #0]
 800a1a6:	7019      	strb	r1, [r3, #0]
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	bc10      	pop	{r4}
 800a1ac:	4770      	bx	lr

0800a1ae <__sfputs_r>:
 800a1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	4614      	mov	r4, r2
 800a1b6:	18d5      	adds	r5, r2, r3
 800a1b8:	42ac      	cmp	r4, r5
 800a1ba:	d101      	bne.n	800a1c0 <__sfputs_r+0x12>
 800a1bc:	2000      	movs	r0, #0
 800a1be:	e007      	b.n	800a1d0 <__sfputs_r+0x22>
 800a1c0:	463a      	mov	r2, r7
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c8:	f7ff ffdc 	bl	800a184 <__sfputc_r>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d1f3      	bne.n	800a1b8 <__sfputs_r+0xa>
 800a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1d4 <_vfiprintf_r>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	460d      	mov	r5, r1
 800a1da:	4614      	mov	r4, r2
 800a1dc:	4698      	mov	r8, r3
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b09d      	sub	sp, #116	; 0x74
 800a1e2:	b118      	cbz	r0, 800a1ec <_vfiprintf_r+0x18>
 800a1e4:	6983      	ldr	r3, [r0, #24]
 800a1e6:	b90b      	cbnz	r3, 800a1ec <_vfiprintf_r+0x18>
 800a1e8:	f000 fb14 	bl	800a814 <__sinit>
 800a1ec:	4b89      	ldr	r3, [pc, #548]	; (800a414 <_vfiprintf_r+0x240>)
 800a1ee:	429d      	cmp	r5, r3
 800a1f0:	d11b      	bne.n	800a22a <_vfiprintf_r+0x56>
 800a1f2:	6875      	ldr	r5, [r6, #4]
 800a1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f6:	07d9      	lsls	r1, r3, #31
 800a1f8:	d405      	bmi.n	800a206 <_vfiprintf_r+0x32>
 800a1fa:	89ab      	ldrh	r3, [r5, #12]
 800a1fc:	059a      	lsls	r2, r3, #22
 800a1fe:	d402      	bmi.n	800a206 <_vfiprintf_r+0x32>
 800a200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a202:	f000 fba5 	bl	800a950 <__retarget_lock_acquire_recursive>
 800a206:	89ab      	ldrh	r3, [r5, #12]
 800a208:	071b      	lsls	r3, r3, #28
 800a20a:	d501      	bpl.n	800a210 <_vfiprintf_r+0x3c>
 800a20c:	692b      	ldr	r3, [r5, #16]
 800a20e:	b9eb      	cbnz	r3, 800a24c <_vfiprintf_r+0x78>
 800a210:	4629      	mov	r1, r5
 800a212:	4630      	mov	r0, r6
 800a214:	f000 f96e 	bl	800a4f4 <__swsetup_r>
 800a218:	b1c0      	cbz	r0, 800a24c <_vfiprintf_r+0x78>
 800a21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a21c:	07dc      	lsls	r4, r3, #31
 800a21e:	d50e      	bpl.n	800a23e <_vfiprintf_r+0x6a>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	b01d      	add	sp, #116	; 0x74
 800a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22a:	4b7b      	ldr	r3, [pc, #492]	; (800a418 <_vfiprintf_r+0x244>)
 800a22c:	429d      	cmp	r5, r3
 800a22e:	d101      	bne.n	800a234 <_vfiprintf_r+0x60>
 800a230:	68b5      	ldr	r5, [r6, #8]
 800a232:	e7df      	b.n	800a1f4 <_vfiprintf_r+0x20>
 800a234:	4b79      	ldr	r3, [pc, #484]	; (800a41c <_vfiprintf_r+0x248>)
 800a236:	429d      	cmp	r5, r3
 800a238:	bf08      	it	eq
 800a23a:	68f5      	ldreq	r5, [r6, #12]
 800a23c:	e7da      	b.n	800a1f4 <_vfiprintf_r+0x20>
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	0598      	lsls	r0, r3, #22
 800a242:	d4ed      	bmi.n	800a220 <_vfiprintf_r+0x4c>
 800a244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a246:	f000 fb84 	bl	800a952 <__retarget_lock_release_recursive>
 800a24a:	e7e9      	b.n	800a220 <_vfiprintf_r+0x4c>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9309      	str	r3, [sp, #36]	; 0x24
 800a250:	2320      	movs	r3, #32
 800a252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a256:	2330      	movs	r3, #48	; 0x30
 800a258:	f04f 0901 	mov.w	r9, #1
 800a25c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a260:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a420 <_vfiprintf_r+0x24c>
 800a264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a268:	4623      	mov	r3, r4
 800a26a:	469a      	mov	sl, r3
 800a26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a270:	b10a      	cbz	r2, 800a276 <_vfiprintf_r+0xa2>
 800a272:	2a25      	cmp	r2, #37	; 0x25
 800a274:	d1f9      	bne.n	800a26a <_vfiprintf_r+0x96>
 800a276:	ebba 0b04 	subs.w	fp, sl, r4
 800a27a:	d00b      	beq.n	800a294 <_vfiprintf_r+0xc0>
 800a27c:	465b      	mov	r3, fp
 800a27e:	4622      	mov	r2, r4
 800a280:	4629      	mov	r1, r5
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ff93 	bl	800a1ae <__sfputs_r>
 800a288:	3001      	adds	r0, #1
 800a28a:	f000 80aa 	beq.w	800a3e2 <_vfiprintf_r+0x20e>
 800a28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a290:	445a      	add	r2, fp
 800a292:	9209      	str	r2, [sp, #36]	; 0x24
 800a294:	f89a 3000 	ldrb.w	r3, [sl]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 80a2 	beq.w	800a3e2 <_vfiprintf_r+0x20e>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2205      	movs	r2, #5
 800a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2be:	4858      	ldr	r0, [pc, #352]	; (800a420 <_vfiprintf_r+0x24c>)
 800a2c0:	f7ff f914 	bl	80094ec <memchr>
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	b9d8      	cbnz	r0, 800a300 <_vfiprintf_r+0x12c>
 800a2c8:	06d1      	lsls	r1, r2, #27
 800a2ca:	bf44      	itt	mi
 800a2cc:	2320      	movmi	r3, #32
 800a2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d2:	0713      	lsls	r3, r2, #28
 800a2d4:	bf44      	itt	mi
 800a2d6:	232b      	movmi	r3, #43	; 0x2b
 800a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e2:	d015      	beq.n	800a310 <_vfiprintf_r+0x13c>
 800a2e4:	4654      	mov	r4, sl
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	f04f 0c0a 	mov.w	ip, #10
 800a2ec:	9a07      	ldr	r2, [sp, #28]
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f4:	3b30      	subs	r3, #48	; 0x30
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d94e      	bls.n	800a398 <_vfiprintf_r+0x1c4>
 800a2fa:	b1b0      	cbz	r0, 800a32a <_vfiprintf_r+0x156>
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	e014      	b.n	800a32a <_vfiprintf_r+0x156>
 800a300:	eba0 0308 	sub.w	r3, r0, r8
 800a304:	fa09 f303 	lsl.w	r3, r9, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	46a2      	mov	sl, r4
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	e7d2      	b.n	800a2b6 <_vfiprintf_r+0xe2>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	1d19      	adds	r1, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9103      	str	r1, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbb      	ittet	lt
 800a31c:	425b      	neglt	r3, r3
 800a31e:	f042 0202 	orrlt.w	r2, r2, #2
 800a322:	9307      	strge	r3, [sp, #28]
 800a324:	9307      	strlt	r3, [sp, #28]
 800a326:	bfb8      	it	lt
 800a328:	9204      	strlt	r2, [sp, #16]
 800a32a:	7823      	ldrb	r3, [r4, #0]
 800a32c:	2b2e      	cmp	r3, #46	; 0x2e
 800a32e:	d10c      	bne.n	800a34a <_vfiprintf_r+0x176>
 800a330:	7863      	ldrb	r3, [r4, #1]
 800a332:	2b2a      	cmp	r3, #42	; 0x2a
 800a334:	d135      	bne.n	800a3a2 <_vfiprintf_r+0x1ce>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	3402      	adds	r4, #2
 800a33a:	1d1a      	adds	r2, r3, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	9203      	str	r2, [sp, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfb8      	it	lt
 800a344:	f04f 33ff 	movlt.w	r3, #4294967295
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a430 <_vfiprintf_r+0x25c>
 800a34e:	2203      	movs	r2, #3
 800a350:	4650      	mov	r0, sl
 800a352:	7821      	ldrb	r1, [r4, #0]
 800a354:	f7ff f8ca 	bl	80094ec <memchr>
 800a358:	b140      	cbz	r0, 800a36c <_vfiprintf_r+0x198>
 800a35a:	2340      	movs	r3, #64	; 0x40
 800a35c:	eba0 000a 	sub.w	r0, r0, sl
 800a360:	fa03 f000 	lsl.w	r0, r3, r0
 800a364:	9b04      	ldr	r3, [sp, #16]
 800a366:	3401      	adds	r4, #1
 800a368:	4303      	orrs	r3, r0
 800a36a:	9304      	str	r3, [sp, #16]
 800a36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a370:	2206      	movs	r2, #6
 800a372:	482c      	ldr	r0, [pc, #176]	; (800a424 <_vfiprintf_r+0x250>)
 800a374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a378:	f7ff f8b8 	bl	80094ec <memchr>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d03f      	beq.n	800a400 <_vfiprintf_r+0x22c>
 800a380:	4b29      	ldr	r3, [pc, #164]	; (800a428 <_vfiprintf_r+0x254>)
 800a382:	bb1b      	cbnz	r3, 800a3cc <_vfiprintf_r+0x1f8>
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	3307      	adds	r3, #7
 800a388:	f023 0307 	bic.w	r3, r3, #7
 800a38c:	3308      	adds	r3, #8
 800a38e:	9303      	str	r3, [sp, #12]
 800a390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a392:	443b      	add	r3, r7
 800a394:	9309      	str	r3, [sp, #36]	; 0x24
 800a396:	e767      	b.n	800a268 <_vfiprintf_r+0x94>
 800a398:	460c      	mov	r4, r1
 800a39a:	2001      	movs	r0, #1
 800a39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a0:	e7a5      	b.n	800a2ee <_vfiprintf_r+0x11a>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f04f 0c0a 	mov.w	ip, #10
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	3401      	adds	r4, #1
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b4:	3a30      	subs	r2, #48	; 0x30
 800a3b6:	2a09      	cmp	r2, #9
 800a3b8:	d903      	bls.n	800a3c2 <_vfiprintf_r+0x1ee>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0c5      	beq.n	800a34a <_vfiprintf_r+0x176>
 800a3be:	9105      	str	r1, [sp, #20]
 800a3c0:	e7c3      	b.n	800a34a <_vfiprintf_r+0x176>
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ca:	e7f0      	b.n	800a3ae <_vfiprintf_r+0x1da>
 800a3cc:	ab03      	add	r3, sp, #12
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	462a      	mov	r2, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4b15      	ldr	r3, [pc, #84]	; (800a42c <_vfiprintf_r+0x258>)
 800a3d6:	a904      	add	r1, sp, #16
 800a3d8:	f7fd fe0a 	bl	8007ff0 <_printf_float>
 800a3dc:	4607      	mov	r7, r0
 800a3de:	1c78      	adds	r0, r7, #1
 800a3e0:	d1d6      	bne.n	800a390 <_vfiprintf_r+0x1bc>
 800a3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e4:	07d9      	lsls	r1, r3, #31
 800a3e6:	d405      	bmi.n	800a3f4 <_vfiprintf_r+0x220>
 800a3e8:	89ab      	ldrh	r3, [r5, #12]
 800a3ea:	059a      	lsls	r2, r3, #22
 800a3ec:	d402      	bmi.n	800a3f4 <_vfiprintf_r+0x220>
 800a3ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3f0:	f000 faaf 	bl	800a952 <__retarget_lock_release_recursive>
 800a3f4:	89ab      	ldrh	r3, [r5, #12]
 800a3f6:	065b      	lsls	r3, r3, #25
 800a3f8:	f53f af12 	bmi.w	800a220 <_vfiprintf_r+0x4c>
 800a3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3fe:	e711      	b.n	800a224 <_vfiprintf_r+0x50>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462a      	mov	r2, r5
 800a406:	4630      	mov	r0, r6
 800a408:	4b08      	ldr	r3, [pc, #32]	; (800a42c <_vfiprintf_r+0x258>)
 800a40a:	a904      	add	r1, sp, #16
 800a40c:	f7fe f88c 	bl	8008528 <_printf_i>
 800a410:	e7e4      	b.n	800a3dc <_vfiprintf_r+0x208>
 800a412:	bf00      	nop
 800a414:	0800b074 	.word	0x0800b074
 800a418:	0800b094 	.word	0x0800b094
 800a41c:	0800b054 	.word	0x0800b054
 800a420:	0800aefc 	.word	0x0800aefc
 800a424:	0800af06 	.word	0x0800af06
 800a428:	08007ff1 	.word	0x08007ff1
 800a42c:	0800a1af 	.word	0x0800a1af
 800a430:	0800af02 	.word	0x0800af02

0800a434 <__swbuf_r>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	460e      	mov	r6, r1
 800a438:	4614      	mov	r4, r2
 800a43a:	4605      	mov	r5, r0
 800a43c:	b118      	cbz	r0, 800a446 <__swbuf_r+0x12>
 800a43e:	6983      	ldr	r3, [r0, #24]
 800a440:	b90b      	cbnz	r3, 800a446 <__swbuf_r+0x12>
 800a442:	f000 f9e7 	bl	800a814 <__sinit>
 800a446:	4b21      	ldr	r3, [pc, #132]	; (800a4cc <__swbuf_r+0x98>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	d12b      	bne.n	800a4a4 <__swbuf_r+0x70>
 800a44c:	686c      	ldr	r4, [r5, #4]
 800a44e:	69a3      	ldr	r3, [r4, #24]
 800a450:	60a3      	str	r3, [r4, #8]
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	071a      	lsls	r2, r3, #28
 800a456:	d52f      	bpl.n	800a4b8 <__swbuf_r+0x84>
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	b36b      	cbz	r3, 800a4b8 <__swbuf_r+0x84>
 800a45c:	6923      	ldr	r3, [r4, #16]
 800a45e:	6820      	ldr	r0, [r4, #0]
 800a460:	b2f6      	uxtb	r6, r6
 800a462:	1ac0      	subs	r0, r0, r3
 800a464:	6963      	ldr	r3, [r4, #20]
 800a466:	4637      	mov	r7, r6
 800a468:	4283      	cmp	r3, r0
 800a46a:	dc04      	bgt.n	800a476 <__swbuf_r+0x42>
 800a46c:	4621      	mov	r1, r4
 800a46e:	4628      	mov	r0, r5
 800a470:	f000 f93c 	bl	800a6ec <_fflush_r>
 800a474:	bb30      	cbnz	r0, 800a4c4 <__swbuf_r+0x90>
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	3001      	adds	r0, #1
 800a47a:	3b01      	subs	r3, #1
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	701e      	strb	r6, [r3, #0]
 800a486:	6963      	ldr	r3, [r4, #20]
 800a488:	4283      	cmp	r3, r0
 800a48a:	d004      	beq.n	800a496 <__swbuf_r+0x62>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	07db      	lsls	r3, r3, #31
 800a490:	d506      	bpl.n	800a4a0 <__swbuf_r+0x6c>
 800a492:	2e0a      	cmp	r6, #10
 800a494:	d104      	bne.n	800a4a0 <__swbuf_r+0x6c>
 800a496:	4621      	mov	r1, r4
 800a498:	4628      	mov	r0, r5
 800a49a:	f000 f927 	bl	800a6ec <_fflush_r>
 800a49e:	b988      	cbnz	r0, 800a4c4 <__swbuf_r+0x90>
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a4:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <__swbuf_r+0x9c>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	d101      	bne.n	800a4ae <__swbuf_r+0x7a>
 800a4aa:	68ac      	ldr	r4, [r5, #8]
 800a4ac:	e7cf      	b.n	800a44e <__swbuf_r+0x1a>
 800a4ae:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <__swbuf_r+0xa0>)
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	bf08      	it	eq
 800a4b4:	68ec      	ldreq	r4, [r5, #12]
 800a4b6:	e7ca      	b.n	800a44e <__swbuf_r+0x1a>
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 f81a 	bl	800a4f4 <__swsetup_r>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d0cb      	beq.n	800a45c <__swbuf_r+0x28>
 800a4c4:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c8:	e7ea      	b.n	800a4a0 <__swbuf_r+0x6c>
 800a4ca:	bf00      	nop
 800a4cc:	0800b074 	.word	0x0800b074
 800a4d0:	0800b094 	.word	0x0800b094
 800a4d4:	0800b054 	.word	0x0800b054

0800a4d8 <__ascii_wctomb>:
 800a4d8:	4603      	mov	r3, r0
 800a4da:	4608      	mov	r0, r1
 800a4dc:	b141      	cbz	r1, 800a4f0 <__ascii_wctomb+0x18>
 800a4de:	2aff      	cmp	r2, #255	; 0xff
 800a4e0:	d904      	bls.n	800a4ec <__ascii_wctomb+0x14>
 800a4e2:	228a      	movs	r2, #138	; 0x8a
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	4770      	bx	lr
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	700a      	strb	r2, [r1, #0]
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <__swsetup_r>:
 800a4f4:	4b32      	ldr	r3, [pc, #200]	; (800a5c0 <__swsetup_r+0xcc>)
 800a4f6:	b570      	push	{r4, r5, r6, lr}
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	b125      	cbz	r5, 800a50a <__swsetup_r+0x16>
 800a500:	69ab      	ldr	r3, [r5, #24]
 800a502:	b913      	cbnz	r3, 800a50a <__swsetup_r+0x16>
 800a504:	4628      	mov	r0, r5
 800a506:	f000 f985 	bl	800a814 <__sinit>
 800a50a:	4b2e      	ldr	r3, [pc, #184]	; (800a5c4 <__swsetup_r+0xd0>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	d10f      	bne.n	800a530 <__swsetup_r+0x3c>
 800a510:	686c      	ldr	r4, [r5, #4]
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a518:	0719      	lsls	r1, r3, #28
 800a51a:	d42c      	bmi.n	800a576 <__swsetup_r+0x82>
 800a51c:	06dd      	lsls	r5, r3, #27
 800a51e:	d411      	bmi.n	800a544 <__swsetup_r+0x50>
 800a520:	2309      	movs	r3, #9
 800a522:	6033      	str	r3, [r6, #0]
 800a524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	81a3      	strh	r3, [r4, #12]
 800a52e:	e03e      	b.n	800a5ae <__swsetup_r+0xba>
 800a530:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <__swsetup_r+0xd4>)
 800a532:	429c      	cmp	r4, r3
 800a534:	d101      	bne.n	800a53a <__swsetup_r+0x46>
 800a536:	68ac      	ldr	r4, [r5, #8]
 800a538:	e7eb      	b.n	800a512 <__swsetup_r+0x1e>
 800a53a:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <__swsetup_r+0xd8>)
 800a53c:	429c      	cmp	r4, r3
 800a53e:	bf08      	it	eq
 800a540:	68ec      	ldreq	r4, [r5, #12]
 800a542:	e7e6      	b.n	800a512 <__swsetup_r+0x1e>
 800a544:	0758      	lsls	r0, r3, #29
 800a546:	d512      	bpl.n	800a56e <__swsetup_r+0x7a>
 800a548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a54a:	b141      	cbz	r1, 800a55e <__swsetup_r+0x6a>
 800a54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a550:	4299      	cmp	r1, r3
 800a552:	d002      	beq.n	800a55a <__swsetup_r+0x66>
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff fb75 	bl	8009c44 <_free_r>
 800a55a:	2300      	movs	r3, #0
 800a55c:	6363      	str	r3, [r4, #52]	; 0x34
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	2300      	movs	r3, #0
 800a568:	6063      	str	r3, [r4, #4]
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	f043 0308 	orr.w	r3, r3, #8
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	b94b      	cbnz	r3, 800a58e <__swsetup_r+0x9a>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a584:	d003      	beq.n	800a58e <__swsetup_r+0x9a>
 800a586:	4621      	mov	r1, r4
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 fa07 	bl	800a99c <__smakebuf_r>
 800a58e:	89a0      	ldrh	r0, [r4, #12]
 800a590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a594:	f010 0301 	ands.w	r3, r0, #1
 800a598:	d00a      	beq.n	800a5b0 <__swsetup_r+0xbc>
 800a59a:	2300      	movs	r3, #0
 800a59c:	60a3      	str	r3, [r4, #8]
 800a59e:	6963      	ldr	r3, [r4, #20]
 800a5a0:	425b      	negs	r3, r3
 800a5a2:	61a3      	str	r3, [r4, #24]
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	b943      	cbnz	r3, 800a5ba <__swsetup_r+0xc6>
 800a5a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5ac:	d1ba      	bne.n	800a524 <__swsetup_r+0x30>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	0781      	lsls	r1, r0, #30
 800a5b2:	bf58      	it	pl
 800a5b4:	6963      	ldrpl	r3, [r4, #20]
 800a5b6:	60a3      	str	r3, [r4, #8]
 800a5b8:	e7f4      	b.n	800a5a4 <__swsetup_r+0xb0>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e7f7      	b.n	800a5ae <__swsetup_r+0xba>
 800a5be:	bf00      	nop
 800a5c0:	20000018 	.word	0x20000018
 800a5c4:	0800b074 	.word	0x0800b074
 800a5c8:	0800b094 	.word	0x0800b094
 800a5cc:	0800b054 	.word	0x0800b054

0800a5d0 <abort>:
 800a5d0:	2006      	movs	r0, #6
 800a5d2:	b508      	push	{r3, lr}
 800a5d4:	f000 fa52 	bl	800aa7c <raise>
 800a5d8:	2001      	movs	r0, #1
 800a5da:	f7f7 fd0a 	bl	8001ff2 <_exit>
	...

0800a5e0 <__sflush_r>:
 800a5e0:	898a      	ldrh	r2, [r1, #12]
 800a5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	0710      	lsls	r0, r2, #28
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	d458      	bmi.n	800a6a0 <__sflush_r+0xc0>
 800a5ee:	684b      	ldr	r3, [r1, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dc05      	bgt.n	800a600 <__sflush_r+0x20>
 800a5f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	dc02      	bgt.n	800a600 <__sflush_r+0x20>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a602:	2e00      	cmp	r6, #0
 800a604:	d0f9      	beq.n	800a5fa <__sflush_r+0x1a>
 800a606:	2300      	movs	r3, #0
 800a608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a60c:	682f      	ldr	r7, [r5, #0]
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	d032      	beq.n	800a678 <__sflush_r+0x98>
 800a612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	075a      	lsls	r2, r3, #29
 800a618:	d505      	bpl.n	800a626 <__sflush_r+0x46>
 800a61a:	6863      	ldr	r3, [r4, #4]
 800a61c:	1ac0      	subs	r0, r0, r3
 800a61e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a620:	b10b      	cbz	r3, 800a626 <__sflush_r+0x46>
 800a622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	2300      	movs	r3, #0
 800a628:	4602      	mov	r2, r0
 800a62a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a62c:	4628      	mov	r0, r5
 800a62e:	6a21      	ldr	r1, [r4, #32]
 800a630:	47b0      	blx	r6
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	d106      	bne.n	800a646 <__sflush_r+0x66>
 800a638:	6829      	ldr	r1, [r5, #0]
 800a63a:	291d      	cmp	r1, #29
 800a63c:	d82c      	bhi.n	800a698 <__sflush_r+0xb8>
 800a63e:	4a2a      	ldr	r2, [pc, #168]	; (800a6e8 <__sflush_r+0x108>)
 800a640:	40ca      	lsrs	r2, r1
 800a642:	07d6      	lsls	r6, r2, #31
 800a644:	d528      	bpl.n	800a698 <__sflush_r+0xb8>
 800a646:	2200      	movs	r2, #0
 800a648:	6062      	str	r2, [r4, #4]
 800a64a:	6922      	ldr	r2, [r4, #16]
 800a64c:	04d9      	lsls	r1, r3, #19
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	d504      	bpl.n	800a65c <__sflush_r+0x7c>
 800a652:	1c42      	adds	r2, r0, #1
 800a654:	d101      	bne.n	800a65a <__sflush_r+0x7a>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b903      	cbnz	r3, 800a65c <__sflush_r+0x7c>
 800a65a:	6560      	str	r0, [r4, #84]	; 0x54
 800a65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a65e:	602f      	str	r7, [r5, #0]
 800a660:	2900      	cmp	r1, #0
 800a662:	d0ca      	beq.n	800a5fa <__sflush_r+0x1a>
 800a664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a668:	4299      	cmp	r1, r3
 800a66a:	d002      	beq.n	800a672 <__sflush_r+0x92>
 800a66c:	4628      	mov	r0, r5
 800a66e:	f7ff fae9 	bl	8009c44 <_free_r>
 800a672:	2000      	movs	r0, #0
 800a674:	6360      	str	r0, [r4, #52]	; 0x34
 800a676:	e7c1      	b.n	800a5fc <__sflush_r+0x1c>
 800a678:	6a21      	ldr	r1, [r4, #32]
 800a67a:	2301      	movs	r3, #1
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b0      	blx	r6
 800a680:	1c41      	adds	r1, r0, #1
 800a682:	d1c7      	bne.n	800a614 <__sflush_r+0x34>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d0c4      	beq.n	800a614 <__sflush_r+0x34>
 800a68a:	2b1d      	cmp	r3, #29
 800a68c:	d001      	beq.n	800a692 <__sflush_r+0xb2>
 800a68e:	2b16      	cmp	r3, #22
 800a690:	d101      	bne.n	800a696 <__sflush_r+0xb6>
 800a692:	602f      	str	r7, [r5, #0]
 800a694:	e7b1      	b.n	800a5fa <__sflush_r+0x1a>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69c:	81a3      	strh	r3, [r4, #12]
 800a69e:	e7ad      	b.n	800a5fc <__sflush_r+0x1c>
 800a6a0:	690f      	ldr	r7, [r1, #16]
 800a6a2:	2f00      	cmp	r7, #0
 800a6a4:	d0a9      	beq.n	800a5fa <__sflush_r+0x1a>
 800a6a6:	0793      	lsls	r3, r2, #30
 800a6a8:	bf18      	it	ne
 800a6aa:	2300      	movne	r3, #0
 800a6ac:	680e      	ldr	r6, [r1, #0]
 800a6ae:	bf08      	it	eq
 800a6b0:	694b      	ldreq	r3, [r1, #20]
 800a6b2:	eba6 0807 	sub.w	r8, r6, r7
 800a6b6:	600f      	str	r7, [r1, #0]
 800a6b8:	608b      	str	r3, [r1, #8]
 800a6ba:	f1b8 0f00 	cmp.w	r8, #0
 800a6be:	dd9c      	ble.n	800a5fa <__sflush_r+0x1a>
 800a6c0:	4643      	mov	r3, r8
 800a6c2:	463a      	mov	r2, r7
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	6a21      	ldr	r1, [r4, #32]
 800a6c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6ca:	47b0      	blx	r6
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	dc06      	bgt.n	800a6de <__sflush_r+0xfe>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	e78e      	b.n	800a5fc <__sflush_r+0x1c>
 800a6de:	4407      	add	r7, r0
 800a6e0:	eba8 0800 	sub.w	r8, r8, r0
 800a6e4:	e7e9      	b.n	800a6ba <__sflush_r+0xda>
 800a6e6:	bf00      	nop
 800a6e8:	20400001 	.word	0x20400001

0800a6ec <_fflush_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	690b      	ldr	r3, [r1, #16]
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	b913      	cbnz	r3, 800a6fc <_fflush_r+0x10>
 800a6f6:	2500      	movs	r5, #0
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	b118      	cbz	r0, 800a706 <_fflush_r+0x1a>
 800a6fe:	6983      	ldr	r3, [r0, #24]
 800a700:	b90b      	cbnz	r3, 800a706 <_fflush_r+0x1a>
 800a702:	f000 f887 	bl	800a814 <__sinit>
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <_fflush_r+0x6c>)
 800a708:	429c      	cmp	r4, r3
 800a70a:	d11b      	bne.n	800a744 <_fflush_r+0x58>
 800a70c:	686c      	ldr	r4, [r5, #4]
 800a70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0ef      	beq.n	800a6f6 <_fflush_r+0xa>
 800a716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a718:	07d0      	lsls	r0, r2, #31
 800a71a:	d404      	bmi.n	800a726 <_fflush_r+0x3a>
 800a71c:	0599      	lsls	r1, r3, #22
 800a71e:	d402      	bmi.n	800a726 <_fflush_r+0x3a>
 800a720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a722:	f000 f915 	bl	800a950 <__retarget_lock_acquire_recursive>
 800a726:	4628      	mov	r0, r5
 800a728:	4621      	mov	r1, r4
 800a72a:	f7ff ff59 	bl	800a5e0 <__sflush_r>
 800a72e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a730:	4605      	mov	r5, r0
 800a732:	07da      	lsls	r2, r3, #31
 800a734:	d4e0      	bmi.n	800a6f8 <_fflush_r+0xc>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	059b      	lsls	r3, r3, #22
 800a73a:	d4dd      	bmi.n	800a6f8 <_fflush_r+0xc>
 800a73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a73e:	f000 f908 	bl	800a952 <__retarget_lock_release_recursive>
 800a742:	e7d9      	b.n	800a6f8 <_fflush_r+0xc>
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <_fflush_r+0x70>)
 800a746:	429c      	cmp	r4, r3
 800a748:	d101      	bne.n	800a74e <_fflush_r+0x62>
 800a74a:	68ac      	ldr	r4, [r5, #8]
 800a74c:	e7df      	b.n	800a70e <_fflush_r+0x22>
 800a74e:	4b04      	ldr	r3, [pc, #16]	; (800a760 <_fflush_r+0x74>)
 800a750:	429c      	cmp	r4, r3
 800a752:	bf08      	it	eq
 800a754:	68ec      	ldreq	r4, [r5, #12]
 800a756:	e7da      	b.n	800a70e <_fflush_r+0x22>
 800a758:	0800b074 	.word	0x0800b074
 800a75c:	0800b094 	.word	0x0800b094
 800a760:	0800b054 	.word	0x0800b054

0800a764 <std>:
 800a764:	2300      	movs	r3, #0
 800a766:	b510      	push	{r4, lr}
 800a768:	4604      	mov	r4, r0
 800a76a:	e9c0 3300 	strd	r3, r3, [r0]
 800a76e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a772:	6083      	str	r3, [r0, #8]
 800a774:	8181      	strh	r1, [r0, #12]
 800a776:	6643      	str	r3, [r0, #100]	; 0x64
 800a778:	81c2      	strh	r2, [r0, #14]
 800a77a:	6183      	str	r3, [r0, #24]
 800a77c:	4619      	mov	r1, r3
 800a77e:	2208      	movs	r2, #8
 800a780:	305c      	adds	r0, #92	; 0x5c
 800a782:	f7fd fb8f 	bl	8007ea4 <memset>
 800a786:	4b05      	ldr	r3, [pc, #20]	; (800a79c <std+0x38>)
 800a788:	6224      	str	r4, [r4, #32]
 800a78a:	6263      	str	r3, [r4, #36]	; 0x24
 800a78c:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <std+0x3c>)
 800a78e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <std+0x40>)
 800a792:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a794:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <std+0x44>)
 800a796:	6323      	str	r3, [r4, #48]	; 0x30
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	bf00      	nop
 800a79c:	0800aab5 	.word	0x0800aab5
 800a7a0:	0800aad7 	.word	0x0800aad7
 800a7a4:	0800ab0f 	.word	0x0800ab0f
 800a7a8:	0800ab33 	.word	0x0800ab33

0800a7ac <_cleanup_r>:
 800a7ac:	4901      	ldr	r1, [pc, #4]	; (800a7b4 <_cleanup_r+0x8>)
 800a7ae:	f000 b8af 	b.w	800a910 <_fwalk_reent>
 800a7b2:	bf00      	nop
 800a7b4:	0800a6ed 	.word	0x0800a6ed

0800a7b8 <__sfmoreglue>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	2568      	movs	r5, #104	; 0x68
 800a7bc:	1e4a      	subs	r2, r1, #1
 800a7be:	4355      	muls	r5, r2
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7c6:	f7ff fa89 	bl	8009cdc <_malloc_r>
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	b140      	cbz	r0, 800a7e0 <__sfmoreglue+0x28>
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	e9c0 1600 	strd	r1, r6, [r0]
 800a7d4:	300c      	adds	r0, #12
 800a7d6:	60a0      	str	r0, [r4, #8]
 800a7d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7dc:	f7fd fb62 	bl	8007ea4 <memset>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}

0800a7e4 <__sfp_lock_acquire>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	; (800a7ec <__sfp_lock_acquire+0x8>)
 800a7e6:	f000 b8b3 	b.w	800a950 <__retarget_lock_acquire_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	200004b4 	.word	0x200004b4

0800a7f0 <__sfp_lock_release>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	; (800a7f8 <__sfp_lock_release+0x8>)
 800a7f2:	f000 b8ae 	b.w	800a952 <__retarget_lock_release_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	200004b4 	.word	0x200004b4

0800a7fc <__sinit_lock_acquire>:
 800a7fc:	4801      	ldr	r0, [pc, #4]	; (800a804 <__sinit_lock_acquire+0x8>)
 800a7fe:	f000 b8a7 	b.w	800a950 <__retarget_lock_acquire_recursive>
 800a802:	bf00      	nop
 800a804:	200004af 	.word	0x200004af

0800a808 <__sinit_lock_release>:
 800a808:	4801      	ldr	r0, [pc, #4]	; (800a810 <__sinit_lock_release+0x8>)
 800a80a:	f000 b8a2 	b.w	800a952 <__retarget_lock_release_recursive>
 800a80e:	bf00      	nop
 800a810:	200004af 	.word	0x200004af

0800a814 <__sinit>:
 800a814:	b510      	push	{r4, lr}
 800a816:	4604      	mov	r4, r0
 800a818:	f7ff fff0 	bl	800a7fc <__sinit_lock_acquire>
 800a81c:	69a3      	ldr	r3, [r4, #24]
 800a81e:	b11b      	cbz	r3, 800a828 <__sinit+0x14>
 800a820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a824:	f7ff bff0 	b.w	800a808 <__sinit_lock_release>
 800a828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a82c:	6523      	str	r3, [r4, #80]	; 0x50
 800a82e:	4b13      	ldr	r3, [pc, #76]	; (800a87c <__sinit+0x68>)
 800a830:	4a13      	ldr	r2, [pc, #76]	; (800a880 <__sinit+0x6c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	62a2      	str	r2, [r4, #40]	; 0x28
 800a836:	42a3      	cmp	r3, r4
 800a838:	bf08      	it	eq
 800a83a:	2301      	moveq	r3, #1
 800a83c:	4620      	mov	r0, r4
 800a83e:	bf08      	it	eq
 800a840:	61a3      	streq	r3, [r4, #24]
 800a842:	f000 f81f 	bl	800a884 <__sfp>
 800a846:	6060      	str	r0, [r4, #4]
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 f81b 	bl	800a884 <__sfp>
 800a84e:	60a0      	str	r0, [r4, #8]
 800a850:	4620      	mov	r0, r4
 800a852:	f000 f817 	bl	800a884 <__sfp>
 800a856:	2200      	movs	r2, #0
 800a858:	2104      	movs	r1, #4
 800a85a:	60e0      	str	r0, [r4, #12]
 800a85c:	6860      	ldr	r0, [r4, #4]
 800a85e:	f7ff ff81 	bl	800a764 <std>
 800a862:	2201      	movs	r2, #1
 800a864:	2109      	movs	r1, #9
 800a866:	68a0      	ldr	r0, [r4, #8]
 800a868:	f7ff ff7c 	bl	800a764 <std>
 800a86c:	2202      	movs	r2, #2
 800a86e:	2112      	movs	r1, #18
 800a870:	68e0      	ldr	r0, [r4, #12]
 800a872:	f7ff ff77 	bl	800a764 <std>
 800a876:	2301      	movs	r3, #1
 800a878:	61a3      	str	r3, [r4, #24]
 800a87a:	e7d1      	b.n	800a820 <__sinit+0xc>
 800a87c:	0800acd4 	.word	0x0800acd4
 800a880:	0800a7ad 	.word	0x0800a7ad

0800a884 <__sfp>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	4607      	mov	r7, r0
 800a888:	f7ff ffac 	bl	800a7e4 <__sfp_lock_acquire>
 800a88c:	4b1e      	ldr	r3, [pc, #120]	; (800a908 <__sfp+0x84>)
 800a88e:	681e      	ldr	r6, [r3, #0]
 800a890:	69b3      	ldr	r3, [r6, #24]
 800a892:	b913      	cbnz	r3, 800a89a <__sfp+0x16>
 800a894:	4630      	mov	r0, r6
 800a896:	f7ff ffbd 	bl	800a814 <__sinit>
 800a89a:	3648      	adds	r6, #72	; 0x48
 800a89c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	d503      	bpl.n	800a8ac <__sfp+0x28>
 800a8a4:	6833      	ldr	r3, [r6, #0]
 800a8a6:	b30b      	cbz	r3, 800a8ec <__sfp+0x68>
 800a8a8:	6836      	ldr	r6, [r6, #0]
 800a8aa:	e7f7      	b.n	800a89c <__sfp+0x18>
 800a8ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8b0:	b9d5      	cbnz	r5, 800a8e8 <__sfp+0x64>
 800a8b2:	4b16      	ldr	r3, [pc, #88]	; (800a90c <__sfp+0x88>)
 800a8b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8b8:	60e3      	str	r3, [r4, #12]
 800a8ba:	6665      	str	r5, [r4, #100]	; 0x64
 800a8bc:	f000 f847 	bl	800a94e <__retarget_lock_init_recursive>
 800a8c0:	f7ff ff96 	bl	800a7f0 <__sfp_lock_release>
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8d0:	6025      	str	r5, [r4, #0]
 800a8d2:	61a5      	str	r5, [r4, #24]
 800a8d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8d8:	f7fd fae4 	bl	8007ea4 <memset>
 800a8dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e8:	3468      	adds	r4, #104	; 0x68
 800a8ea:	e7d9      	b.n	800a8a0 <__sfp+0x1c>
 800a8ec:	2104      	movs	r1, #4
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	f7ff ff62 	bl	800a7b8 <__sfmoreglue>
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	6030      	str	r0, [r6, #0]
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d1d5      	bne.n	800a8a8 <__sfp+0x24>
 800a8fc:	f7ff ff78 	bl	800a7f0 <__sfp_lock_release>
 800a900:	230c      	movs	r3, #12
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	e7ee      	b.n	800a8e4 <__sfp+0x60>
 800a906:	bf00      	nop
 800a908:	0800acd4 	.word	0x0800acd4
 800a90c:	ffff0001 	.word	0xffff0001

0800a910 <_fwalk_reent>:
 800a910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a914:	4606      	mov	r6, r0
 800a916:	4688      	mov	r8, r1
 800a918:	2700      	movs	r7, #0
 800a91a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a91e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a922:	f1b9 0901 	subs.w	r9, r9, #1
 800a926:	d505      	bpl.n	800a934 <_fwalk_reent+0x24>
 800a928:	6824      	ldr	r4, [r4, #0]
 800a92a:	2c00      	cmp	r4, #0
 800a92c:	d1f7      	bne.n	800a91e <_fwalk_reent+0xe>
 800a92e:	4638      	mov	r0, r7
 800a930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a934:	89ab      	ldrh	r3, [r5, #12]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d907      	bls.n	800a94a <_fwalk_reent+0x3a>
 800a93a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a93e:	3301      	adds	r3, #1
 800a940:	d003      	beq.n	800a94a <_fwalk_reent+0x3a>
 800a942:	4629      	mov	r1, r5
 800a944:	4630      	mov	r0, r6
 800a946:	47c0      	blx	r8
 800a948:	4307      	orrs	r7, r0
 800a94a:	3568      	adds	r5, #104	; 0x68
 800a94c:	e7e9      	b.n	800a922 <_fwalk_reent+0x12>

0800a94e <__retarget_lock_init_recursive>:
 800a94e:	4770      	bx	lr

0800a950 <__retarget_lock_acquire_recursive>:
 800a950:	4770      	bx	lr

0800a952 <__retarget_lock_release_recursive>:
 800a952:	4770      	bx	lr

0800a954 <__swhatbuf_r>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	460e      	mov	r6, r1
 800a958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a95c:	4614      	mov	r4, r2
 800a95e:	2900      	cmp	r1, #0
 800a960:	461d      	mov	r5, r3
 800a962:	b096      	sub	sp, #88	; 0x58
 800a964:	da07      	bge.n	800a976 <__swhatbuf_r+0x22>
 800a966:	2300      	movs	r3, #0
 800a968:	602b      	str	r3, [r5, #0]
 800a96a:	89b3      	ldrh	r3, [r6, #12]
 800a96c:	061a      	lsls	r2, r3, #24
 800a96e:	d410      	bmi.n	800a992 <__swhatbuf_r+0x3e>
 800a970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a974:	e00e      	b.n	800a994 <__swhatbuf_r+0x40>
 800a976:	466a      	mov	r2, sp
 800a978:	f000 f902 	bl	800ab80 <_fstat_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	dbf2      	blt.n	800a966 <__swhatbuf_r+0x12>
 800a980:	9a01      	ldr	r2, [sp, #4]
 800a982:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a986:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a98a:	425a      	negs	r2, r3
 800a98c:	415a      	adcs	r2, r3
 800a98e:	602a      	str	r2, [r5, #0]
 800a990:	e7ee      	b.n	800a970 <__swhatbuf_r+0x1c>
 800a992:	2340      	movs	r3, #64	; 0x40
 800a994:	2000      	movs	r0, #0
 800a996:	6023      	str	r3, [r4, #0]
 800a998:	b016      	add	sp, #88	; 0x58
 800a99a:	bd70      	pop	{r4, r5, r6, pc}

0800a99c <__smakebuf_r>:
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9a0:	079d      	lsls	r5, r3, #30
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	d507      	bpl.n	800a9b8 <__smakebuf_r+0x1c>
 800a9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	6123      	str	r3, [r4, #16]
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	b002      	add	sp, #8
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	466a      	mov	r2, sp
 800a9ba:	ab01      	add	r3, sp, #4
 800a9bc:	f7ff ffca 	bl	800a954 <__swhatbuf_r>
 800a9c0:	9900      	ldr	r1, [sp, #0]
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff f989 	bl	8009cdc <_malloc_r>
 800a9ca:	b948      	cbnz	r0, 800a9e0 <__smakebuf_r+0x44>
 800a9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d0:	059a      	lsls	r2, r3, #22
 800a9d2:	d4ef      	bmi.n	800a9b4 <__smakebuf_r+0x18>
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	f043 0302 	orr.w	r3, r3, #2
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	e7e3      	b.n	800a9a8 <__smakebuf_r+0xc>
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <__smakebuf_r+0x7c>)
 800a9e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	6020      	str	r0, [r4, #0]
 800a9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	6120      	str	r0, [r4, #16]
 800a9f2:	6163      	str	r3, [r4, #20]
 800a9f4:	9b01      	ldr	r3, [sp, #4]
 800a9f6:	b15b      	cbz	r3, 800aa10 <__smakebuf_r+0x74>
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9fe:	f000 f8d1 	bl	800aba4 <_isatty_r>
 800aa02:	b128      	cbz	r0, 800aa10 <__smakebuf_r+0x74>
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f023 0303 	bic.w	r3, r3, #3
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	89a0      	ldrh	r0, [r4, #12]
 800aa12:	4305      	orrs	r5, r0
 800aa14:	81a5      	strh	r5, [r4, #12]
 800aa16:	e7cd      	b.n	800a9b4 <__smakebuf_r+0x18>
 800aa18:	0800a7ad 	.word	0x0800a7ad

0800aa1c <_malloc_usable_size_r>:
 800aa1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa20:	1f18      	subs	r0, r3, #4
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	bfbc      	itt	lt
 800aa26:	580b      	ldrlt	r3, [r1, r0]
 800aa28:	18c0      	addlt	r0, r0, r3
 800aa2a:	4770      	bx	lr

0800aa2c <_raise_r>:
 800aa2c:	291f      	cmp	r1, #31
 800aa2e:	b538      	push	{r3, r4, r5, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	460d      	mov	r5, r1
 800aa34:	d904      	bls.n	800aa40 <_raise_r+0x14>
 800aa36:	2316      	movs	r3, #22
 800aa38:	6003      	str	r3, [r0, #0]
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa42:	b112      	cbz	r2, 800aa4a <_raise_r+0x1e>
 800aa44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa48:	b94b      	cbnz	r3, 800aa5e <_raise_r+0x32>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 f830 	bl	800aab0 <_getpid_r>
 800aa50:	462a      	mov	r2, r5
 800aa52:	4601      	mov	r1, r0
 800aa54:	4620      	mov	r0, r4
 800aa56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa5a:	f000 b817 	b.w	800aa8c <_kill_r>
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d00a      	beq.n	800aa78 <_raise_r+0x4c>
 800aa62:	1c59      	adds	r1, r3, #1
 800aa64:	d103      	bne.n	800aa6e <_raise_r+0x42>
 800aa66:	2316      	movs	r3, #22
 800aa68:	6003      	str	r3, [r0, #0]
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	e7e7      	b.n	800aa3e <_raise_r+0x12>
 800aa6e:	2400      	movs	r4, #0
 800aa70:	4628      	mov	r0, r5
 800aa72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa76:	4798      	blx	r3
 800aa78:	2000      	movs	r0, #0
 800aa7a:	e7e0      	b.n	800aa3e <_raise_r+0x12>

0800aa7c <raise>:
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <raise+0xc>)
 800aa7e:	4601      	mov	r1, r0
 800aa80:	6818      	ldr	r0, [r3, #0]
 800aa82:	f7ff bfd3 	b.w	800aa2c <_raise_r>
 800aa86:	bf00      	nop
 800aa88:	20000018 	.word	0x20000018

0800aa8c <_kill_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4d06      	ldr	r5, [pc, #24]	; (800aaac <_kill_r+0x20>)
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	f7f7 fa9a 	bl	8001fd2 <_kill>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d102      	bne.n	800aaa8 <_kill_r+0x1c>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	b103      	cbz	r3, 800aaa8 <_kill_r+0x1c>
 800aaa6:	6023      	str	r3, [r4, #0]
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	200004a8 	.word	0x200004a8

0800aab0 <_getpid_r>:
 800aab0:	f7f7 ba88 	b.w	8001fc4 <_getpid>

0800aab4 <__sread>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	460c      	mov	r4, r1
 800aab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aabc:	f000 f894 	bl	800abe8 <_read_r>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	bfab      	itete	ge
 800aac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aac6:	89a3      	ldrhlt	r3, [r4, #12]
 800aac8:	181b      	addge	r3, r3, r0
 800aaca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aace:	bfac      	ite	ge
 800aad0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aad2:	81a3      	strhlt	r3, [r4, #12]
 800aad4:	bd10      	pop	{r4, pc}

0800aad6 <__swrite>:
 800aad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aada:	461f      	mov	r7, r3
 800aadc:	898b      	ldrh	r3, [r1, #12]
 800aade:	4605      	mov	r5, r0
 800aae0:	05db      	lsls	r3, r3, #23
 800aae2:	460c      	mov	r4, r1
 800aae4:	4616      	mov	r6, r2
 800aae6:	d505      	bpl.n	800aaf4 <__swrite+0x1e>
 800aae8:	2302      	movs	r3, #2
 800aaea:	2200      	movs	r2, #0
 800aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf0:	f000 f868 	bl	800abc4 <_lseek_r>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	4628      	mov	r0, r5
 800ab00:	463b      	mov	r3, r7
 800ab02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0a:	f000 b817 	b.w	800ab3c <_write_r>

0800ab0e <__sseek>:
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	460c      	mov	r4, r1
 800ab12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab16:	f000 f855 	bl	800abc4 <_lseek_r>
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	bf15      	itete	ne
 800ab20:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab2a:	81a3      	strheq	r3, [r4, #12]
 800ab2c:	bf18      	it	ne
 800ab2e:	81a3      	strhne	r3, [r4, #12]
 800ab30:	bd10      	pop	{r4, pc}

0800ab32 <__sclose>:
 800ab32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab36:	f000 b813 	b.w	800ab60 <_close_r>
	...

0800ab3c <_write_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	2200      	movs	r2, #0
 800ab46:	4d05      	ldr	r5, [pc, #20]	; (800ab5c <_write_r+0x20>)
 800ab48:	602a      	str	r2, [r5, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	f7f7 fa78 	bl	8002040 <_write>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_write_r+0x1e>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_write_r+0x1e>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	200004a8 	.word	0x200004a8

0800ab60 <_close_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	2300      	movs	r3, #0
 800ab64:	4d05      	ldr	r5, [pc, #20]	; (800ab7c <_close_r+0x1c>)
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f7 fa84 	bl	8002078 <_close>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_close_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_close_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	200004a8 	.word	0x200004a8

0800ab80 <_fstat_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	2300      	movs	r3, #0
 800ab84:	4d06      	ldr	r5, [pc, #24]	; (800aba0 <_fstat_r+0x20>)
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	f7f7 fa7e 	bl	800208e <_fstat>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d102      	bne.n	800ab9c <_fstat_r+0x1c>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	b103      	cbz	r3, 800ab9c <_fstat_r+0x1c>
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	bf00      	nop
 800aba0:	200004a8 	.word	0x200004a8

0800aba4 <_isatty_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	2300      	movs	r3, #0
 800aba8:	4d05      	ldr	r5, [pc, #20]	; (800abc0 <_isatty_r+0x1c>)
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	f7f7 fa7c 	bl	80020ac <_isatty>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_isatty_r+0x1a>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_isatty_r+0x1a>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	200004a8 	.word	0x200004a8

0800abc4 <_lseek_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4604      	mov	r4, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	4611      	mov	r1, r2
 800abcc:	2200      	movs	r2, #0
 800abce:	4d05      	ldr	r5, [pc, #20]	; (800abe4 <_lseek_r+0x20>)
 800abd0:	602a      	str	r2, [r5, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f7f7 fa74 	bl	80020c0 <_lseek>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_lseek_r+0x1e>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_lseek_r+0x1e>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	200004a8 	.word	0x200004a8

0800abe8 <_read_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	4611      	mov	r1, r2
 800abf0:	2200      	movs	r2, #0
 800abf2:	4d05      	ldr	r5, [pc, #20]	; (800ac08 <_read_r+0x20>)
 800abf4:	602a      	str	r2, [r5, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	f7f7 fa05 	bl	8002006 <_read>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d102      	bne.n	800ac06 <_read_r+0x1e>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b103      	cbz	r3, 800ac06 <_read_r+0x1e>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	200004a8 	.word	0x200004a8

0800ac0c <_init>:
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	bf00      	nop
 800ac10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac12:	bc08      	pop	{r3}
 800ac14:	469e      	mov	lr, r3
 800ac16:	4770      	bx	lr

0800ac18 <_fini>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	bf00      	nop
 800ac1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac1e:	bc08      	pop	{r3}
 800ac20:	469e      	mov	lr, r3
 800ac22:	4770      	bx	lr
