
logic-design-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004750  08004750  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004750  08004750  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004750  08004750  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08004768  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004768  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcf3  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5d  00000000  00000000  0002fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00031c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174f9  00000000  00000000  000339f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001153c  00000000  00000000  0004aee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fb7  00000000  00000000  0005c425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e53dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa8  00000000  00000000  000e5430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800470c 	.word	0x0800470c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800470c 	.word	0x0800470c

0800014c <global_init>:
 *      Author: hachi
 */

#include "global.h"
uint32_t status;
void global_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	setTimer(0, 1000);
 8000150:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000154:	2000      	movs	r0, #0
 8000156:	f000 f973 	bl	8000440 <setTimer>
	status = INIT;
 800015a:	4b02      	ldr	r3, [pc, #8]	; (8000164 <global_init+0x18>)
 800015c:	2200      	movs	r2, #0
 800015e:	601a      	str	r2, [r3, #0]
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	2000003c 	.word	0x2000003c

08000168 <global_fsm>:
void global_fsm(){
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0

	if(isFlagTimer(0)){
 800016c:	2000      	movs	r0, #0
 800016e:	f000 f957 	bl	8000420 <isFlagTimer>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d008      	beq.n	800018a <global_fsm+0x22>
		setTimer(0, 1000);
 8000178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800017c:	2000      	movs	r0, #0
 800017e:	f000 f95f 	bl	8000440 <setTimer>
		HAL_GPIO_TogglePin(LD0_GPIO_Port, LD0_Pin);
 8000182:	2120      	movs	r1, #32
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <global_fsm+0x28>)
 8000186:	f000 fef7 	bl	8000f78 <HAL_GPIO_TogglePin>
	}
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010800 	.word	0x40010800

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000198:	f000 fb22 	bl	80007e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019c:	f000 f812 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a0:	f000 f8f0 	bl	8000384 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001a4:	f000 f84a 	bl	800023c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80001a8:	f000 f8c2 	bl	8000330 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001ac:	f000 f874 	bl	8000298 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <main+0x2c>)
 80001b2:	f003 f9ab 	bl	800350c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  global_init();
 80001b6:	f7ff ffc9 	bl	800014c <global_init>
  while (1)
  {
	  global_fsm();
 80001ba:	f7ff ffd5 	bl	8000168 <global_fsm>
 80001be:	e7fc      	b.n	80001ba <main+0x26>
 80001c0:	20000094 	.word	0x20000094

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f004 fa92 	bl	80046fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fd28 	bl	8002c50 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000206:	f000 f905 	bl	8000414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 ff94 	bl	8003150 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022e:	f000 f8f1 	bl	8000414 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_I2C1_Init+0x50>)
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <MX_I2C1_Init+0x54>)
 8000244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_I2C1_Init+0x50>)
 8000248:	4a12      	ldr	r2, [pc, #72]	; (8000294 <MX_I2C1_Init+0x58>)
 800024a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_I2C1_Init+0x50>)
 800025a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800025e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_I2C1_Init+0x50>)
 800027a:	f000 fe97 	bl	8000fac <HAL_I2C_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f8c6 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000040 	.word	0x20000040
 8000290:	40005400 	.word	0x40005400
 8000294:	000186a0 	.word	0x000186a0

08000298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_TIM2_Init+0x94>)
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_TIM2_Init+0x94>)
 80002be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <MX_TIM2_Init+0x94>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_TIM2_Init+0x94>)
 80002cc:	2209      	movs	r2, #9
 80002ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_TIM2_Init+0x94>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_TIM2_Init+0x94>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_TIM2_Init+0x94>)
 80002de:	f003 f8c5 	bl	800346c <HAL_TIM_Base_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002e8:	f000 f894 	bl	8000414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	4619      	mov	r1, r3
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <MX_TIM2_Init+0x94>)
 80002fa:	f003 fa49 	bl	8003790 <HAL_TIM_ConfigClockSource>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000304:	f000 f886 	bl	8000414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000308:	2300      	movs	r3, #0
 800030a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000310:	463b      	mov	r3, r7
 8000312:	4619      	mov	r1, r3
 8000314:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_TIM2_Init+0x94>)
 8000316:	f003 fc2b 	bl	8003b70 <HAL_TIMEx_MasterConfigSynchronization>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000320:	f000 f878 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000094 	.word	0x20000094

08000330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_USART2_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_USART2_UART_Init+0x4c>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART2_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART2_UART_Init+0x4c>)
 8000368:	f003 fc72 	bl	8003c50 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f84f 	bl	8000414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000dc 	.word	0x200000dc
 8000380:	40004400 	.word	0x40004400

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_GPIO_Init+0x74>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <MX_GPIO_Init+0x74>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_GPIO_Init+0x74>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_GPIO_Init+0x74>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <MX_GPIO_Init+0x74>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_GPIO_Init+0x74>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0308 	and.w	r3, r3, #8
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD0_GPIO_Port, LD0_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2120      	movs	r1, #32
 80003cc:	480b      	ldr	r0, [pc, #44]	; (80003fc <MX_GPIO_Init+0x78>)
 80003ce:	f000 fdbb 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD0_Pin */
  GPIO_InitStruct.Pin = LD0_Pin;
 80003d2:	2320      	movs	r3, #32
 80003d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD0_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 0308 	add.w	r3, r7, #8
 80003e6:	4619      	mov	r1, r3
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <MX_GPIO_Init+0x78>)
 80003ea:	f000 fc29 	bl	8000c40 <HAL_GPIO_Init>

}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800

08000400 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	timerRun();
 8000408:	f000 f838 	bl	800047c <timerRun>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
}
 800041a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041c:	e7fe      	b.n	800041c <Error_Handler+0x8>
	...

08000420 <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4a03      	ldr	r2, [pc, #12]	; (800043c <isFlagTimer+0x1c>)
 800042e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000038 	.word	0x20000038

08000440 <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <setTimer+0x30>)
 8000450:	2100      	movs	r1, #0
 8000452:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration / TIMER_CYCLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <setTimer+0x34>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	6839      	ldr	r1, [r7, #0]
 800045c:	fbb1 f2f2 	udiv	r2, r1, r2
 8000460:	4905      	ldr	r1, [pc, #20]	; (8000478 <setTimer+0x38>)
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000038 	.word	0x20000038
 8000474:	20000000 	.word	0x20000000
 8000478:	2000002c 	.word	0x2000002c

0800047c <timerRun>:
void timerInit(uint32_t prescaler, uint32_t period){
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
	TIMER_CYCLE  = (prescaler+1)*(period+1)*1000/frequency;
}
void timerRun(){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8000482:	2300      	movs	r3, #0
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	e01a      	b.n	80004be <timerRun+0x42>
		if(timer_counters[i] > 0){
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <timerRun+0x54>)
 800048c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d011      	beq.n	80004b8 <timerRun+0x3c>
			timer_counters[i] --;
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <timerRun+0x54>)
 8000498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049c:	3a01      	subs	r2, #1
 800049e:	490c      	ldr	r1, [pc, #48]	; (80004d0 <timerRun+0x54>)
 80004a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <timerRun+0x54>)
 80004a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d103      	bne.n	80004b8 <timerRun+0x3c>
				timer_flags[i] = 1;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <timerRun+0x58>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	3301      	adds	r3, #1
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d9e1      	bls.n	8000488 <timerRun+0xc>
			}
		}
	}

}
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000038 	.word	0x20000038

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4a14      	ldr	r2, [pc, #80]	; (8000534 <HAL_MspInit+0x5c>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6193      	str	r3, [r2, #24]
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <HAL_MspInit+0x5c>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x60>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_MspInit+0x60>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000

0800053c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a25      	ldr	r2, [pc, #148]	; (80005ec <HAL_I2C_MspInit+0xb0>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d142      	bne.n	80005e2 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <HAL_I2C_MspInit+0xb4>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <HAL_I2C_MspInit+0xb4>)
 8000562:	f043 0308 	orr.w	r3, r3, #8
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <HAL_I2C_MspInit+0xb4>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0308 	and.w	r3, r3, #8
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057a:	2312      	movs	r3, #18
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	481a      	ldr	r0, [pc, #104]	; (80005f4 <HAL_I2C_MspInit+0xb8>)
 800058a:	f000 fb59 	bl	8000c40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <HAL_I2C_MspInit+0xbc>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	f043 0302 	orr.w	r3, r3, #2
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <HAL_I2C_MspInit+0xbc>)
 80005a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_I2C_MspInit+0xb4>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <HAL_I2C_MspInit+0xb4>)
 80005b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_I2C_MspInit+0xb4>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	201f      	movs	r0, #31
 80005c8:	f000 fa43 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80005cc:	201f      	movs	r0, #31
 80005ce:	f000 fa5c 	bl	8000a8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2020      	movs	r0, #32
 80005d8:	f000 fa3b 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80005dc:	2020      	movs	r0, #32
 80005de:	f000 fa54 	bl	8000a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40005400 	.word	0x40005400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010c00 	.word	0x40010c00
 80005f8:	40010000 	.word	0x40010000

080005fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800060c:	d113      	bne.n	8000636 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_TIM_Base_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <HAL_TIM_Base_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	201c      	movs	r0, #28
 800062c:	f000 fa11 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000630:	201c      	movs	r0, #28
 8000632:	f000 fa2a 	bl	8000a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <HAL_UART_MspInit+0x98>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d137      	bne.n	80006d4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <HAL_UART_MspInit+0x9c>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <HAL_UART_MspInit+0x9c>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	61d3      	str	r3, [r2, #28]
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_UART_MspInit+0x9c>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_UART_MspInit+0x9c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0x9c>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_UART_MspInit+0x9c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <HAL_UART_MspInit+0xa0>)
 80006a8:	f000 faca 	bl	8000c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ac:	2308      	movs	r3, #8
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <HAL_UART_MspInit+0xa0>)
 80006c0:	f000 fabe 	bl	8000c40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2026      	movs	r0, #38	; 0x26
 80006ca:	f000 f9c2 	bl	8000a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ce:	2026      	movs	r0, #38	; 0x26
 80006d0:	f000 f9db 	bl	8000a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40004400 	.word	0x40004400
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f000 f89d 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <TIM2_IRQHandler+0x10>)
 800073e:	f002 ff37 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000094 	.word	0x20000094

0800074c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <I2C1_EV_IRQHandler+0x10>)
 8000752:	f000 fd83 	bl	800125c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000040 	.word	0x20000040

08000760 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <I2C1_ER_IRQHandler+0x10>)
 8000766:	f000 feea 	bl	800153e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000040 	.word	0x20000040

08000774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <USART2_IRQHandler+0x10>)
 800077a:	f003 fab9 	bl	8003cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000dc 	.word	0x200000dc

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000794:	f7ff fff8 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800079a:	490c      	ldr	r1, [pc, #48]	; (80007cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800079c:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b0:	4c09      	ldr	r4, [pc, #36]	; (80007d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007be:	f003 ff79 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c2:	f7ff fce7 	bl	8000194 <main>
  bx lr
 80007c6:	4770      	bx	lr
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007d0:	08004758 	.word	0x08004758
  ldr r2, =_sbss
 80007d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007d8:	20000128 	.word	0x20000128

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_Init+0x28>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_Init+0x28>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f923 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f6:	200f      	movs	r0, #15
 80007f8:	f000 f808 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fc:	f7ff fe6c 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x54>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x58>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f93b 	bl	8000aa6 <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e00e      	b.n	8000858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d80a      	bhi.n	8000856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f903 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_InitTick+0x5c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000004 	.word	0x20000004
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000008 	.word	0x20000008

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a03      	ldr	r2, [pc, #12]	; (800088c <HAL_IncTick+0x20>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	2000000c 	.word	0x2000000c
 800088c:	20000124 	.word	0x20000124

08000890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <HAL_GetTick+0x10>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20000124 	.word	0x20000124

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0b      	blt.n	8000932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <__NVIC_EnableIRQ+0x34>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff90 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff2d 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff42 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff90 	bl	8000994 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5f 	bl	8000940 <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff35 	bl	8000908 <__NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d008      	beq.n	8000ae8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2204      	movs	r2, #4
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e020      	b.n	8000b2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 020e 	bic.w	r2, r2, #14
 8000af6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 0201 	bic.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d005      	beq.n	8000b58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2204      	movs	r2, #4
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e051      	b.n	8000bfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 020e 	bic.w	r2, r2, #14
 8000b66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0201 	bic.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <HAL_DMA_Abort_IT+0xd4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d029      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <HAL_DMA_Abort_IT+0xd8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d022      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x9e>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <HAL_DMA_Abort_IT+0xdc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d01a      	beq.n	8000bcc <HAL_DMA_Abort_IT+0x98>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_DMA_Abort_IT+0xe0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d012      	beq.n	8000bc6 <HAL_DMA_Abort_IT+0x92>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_DMA_Abort_IT+0xe4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d00a      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0x8c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_DMA_Abort_IT+0xe8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d102      	bne.n	8000bba <HAL_DMA_Abort_IT+0x86>
 8000bb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bb8:	e00e      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbe:	e00b      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	e008      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	e005      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd0:	e002      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	e000      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_DMA_Abort_IT+0xec>)
 8000bda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
    } 
  }
  return status;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020008 	.word	0x40020008
 8000c0c:	4002001c 	.word	0x4002001c
 8000c10:	40020030 	.word	0x40020030
 8000c14:	40020044 	.word	0x40020044
 8000c18:	40020058 	.word	0x40020058
 8000c1c:	4002006c 	.word	0x4002006c
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c32:	b2db      	uxtb	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e169      	b.n	8000f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8158 	bne.w	8000f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a9a      	ldr	r2, [pc, #616]	; (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d05e      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c7c:	4a98      	ldr	r2, [pc, #608]	; (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d875      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c82:	4a98      	ldr	r2, [pc, #608]	; (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d058      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c88:	4a96      	ldr	r2, [pc, #600]	; (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d86f      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c8e:	4a96      	ldr	r2, [pc, #600]	; (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d052      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c94:	4a94      	ldr	r2, [pc, #592]	; (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d869      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c9a:	4a94      	ldr	r2, [pc, #592]	; (8000eec <HAL_GPIO_Init+0x2ac>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d04c      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000ca0:	4a92      	ldr	r2, [pc, #584]	; (8000eec <HAL_GPIO_Init+0x2ac>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d863      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000ca6:	4a92      	ldr	r2, [pc, #584]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d046      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000cac:	4a90      	ldr	r2, [pc, #576]	; (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d85d      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d82a      	bhi.n	8000d0c <HAL_GPIO_Init+0xcc>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d859      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <HAL_GPIO_Init+0x80>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d15 	.word	0x08000d15
 8000cc8:	08000d27 	.word	0x08000d27
 8000ccc:	08000d69 	.word	0x08000d69
 8000cd0:	08000d6f 	.word	0x08000d6f
 8000cd4:	08000d6f 	.word	0x08000d6f
 8000cd8:	08000d6f 	.word	0x08000d6f
 8000cdc:	08000d6f 	.word	0x08000d6f
 8000ce0:	08000d6f 	.word	0x08000d6f
 8000ce4:	08000d6f 	.word	0x08000d6f
 8000ce8:	08000d6f 	.word	0x08000d6f
 8000cec:	08000d6f 	.word	0x08000d6f
 8000cf0:	08000d6f 	.word	0x08000d6f
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d6f 	.word	0x08000d6f
 8000cfc:	08000d6f 	.word	0x08000d6f
 8000d00:	08000d6f 	.word	0x08000d6f
 8000d04:	08000d1d 	.word	0x08000d1d
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	4a79      	ldr	r2, [pc, #484]	; (8000ef4 <HAL_GPIO_Init+0x2b4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d12:	e02c      	b.n	8000d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e029      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	3304      	adds	r3, #4
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e024      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e01f      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	330c      	adds	r3, #12
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e01a      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d42:	2304      	movs	r3, #4
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e013      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d50:	2308      	movs	r3, #8
 8000d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	611a      	str	r2, [r3, #16]
          break;
 8000d5a:	e009      	b.n	8000d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	615a      	str	r2, [r3, #20]
          break;
 8000d66:	e003      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          break;
 8000d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2bff      	cmp	r3, #255	; 0xff
 8000d74:	d801      	bhi.n	8000d7a <HAL_GPIO_Init+0x13a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <HAL_GPIO_Init+0x13e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d802      	bhi.n	8000d8c <HAL_GPIO_Init+0x14c>
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x152>
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80b1 	beq.w	8000f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd8:	4a48      	ldr	r2, [pc, #288]	; (8000efc <HAL_GPIO_Init+0x2bc>)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a40      	ldr	r2, [pc, #256]	; (8000f00 <HAL_GPIO_Init+0x2c0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3e      	ldr	r2, [pc, #248]	; (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3d      	ldr	r2, [pc, #244]	; (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x2bc>)
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	492c      	ldr	r1, [pc, #176]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	608b      	str	r3, [r1, #8]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4928      	ldr	r1, [pc, #160]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	4922      	ldr	r1, [pc, #136]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60cb      	str	r3, [r1, #12]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	491e      	ldr	r1, [pc, #120]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4918      	ldr	r1, [pc, #96]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4914      	ldr	r1, [pc, #80]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d021      	beq.n	8000f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	490e      	ldr	r1, [pc, #56]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e021      	b.n	8000f22 <HAL_GPIO_Init+0x2e2>
 8000ede:	bf00      	nop
 8000ee0:	10320000 	.word	0x10320000
 8000ee4:	10310000 	.word	0x10310000
 8000ee8:	10220000 	.word	0x10220000
 8000eec:	10210000 	.word	0x10210000
 8000ef0:	10120000 	.word	0x10120000
 8000ef4:	10110000 	.word	0x10110000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40011400 	.word	0x40011400
 8000f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_GPIO_Init+0x304>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4909      	ldr	r1, [pc, #36]	; (8000f44 <HAL_GPIO_Init+0x304>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	3301      	adds	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f47f ae8e 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	372c      	adds	r7, #44	; 0x2c
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43d9      	mvns	r1, r3
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	400b      	ands	r3, r1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	611a      	str	r2, [r3, #16]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e12b      	b.n	8001216 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d106      	bne.n	8000fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fab2 	bl	800053c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0201 	bic.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800100e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001010:	f002 f9e6 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4a81      	ldr	r2, [pc, #516]	; (8001220 <HAL_I2C_Init+0x274>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d807      	bhi.n	8001030 <HAL_I2C_Init+0x84>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a80      	ldr	r2, [pc, #512]	; (8001224 <HAL_I2C_Init+0x278>)
 8001024:	4293      	cmp	r3, r2
 8001026:	bf94      	ite	ls
 8001028:	2301      	movls	r3, #1
 800102a:	2300      	movhi	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	e006      	b.n	800103e <HAL_I2C_Init+0x92>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4a7d      	ldr	r2, [pc, #500]	; (8001228 <HAL_I2C_Init+0x27c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	bf94      	ite	ls
 8001038:	2301      	movls	r3, #1
 800103a:	2300      	movhi	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0e7      	b.n	8001216 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4a78      	ldr	r2, [pc, #480]	; (800122c <HAL_I2C_Init+0x280>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	430a      	orrs	r2, r1
 8001064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a6a      	ldr	r2, [pc, #424]	; (8001220 <HAL_I2C_Init+0x274>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d802      	bhi.n	8001080 <HAL_I2C_Init+0xd4>
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	e009      	b.n	8001094 <HAL_I2C_Init+0xe8>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4a69      	ldr	r2, [pc, #420]	; (8001230 <HAL_I2C_Init+0x284>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	099b      	lsrs	r3, r3, #6
 8001092:	3301      	adds	r3, #1
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	430b      	orrs	r3, r1
 800109a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	495c      	ldr	r1, [pc, #368]	; (8001220 <HAL_I2C_Init+0x274>)
 80010b0:	428b      	cmp	r3, r1
 80010b2:	d819      	bhi.n	80010e8 <HAL_I2C_Init+0x13c>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1e59      	subs	r1, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010c8:	400b      	ands	r3, r1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <HAL_I2C_Init+0x138>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1e59      	subs	r1, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e2:	e051      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e04f      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d111      	bne.n	8001114 <HAL_I2C_Init+0x168>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	1e58      	subs	r0, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	440b      	add	r3, r1
 80010fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001102:	3301      	adds	r3, #1
 8001104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	e012      	b.n	800113a <HAL_I2C_Init+0x18e>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	0099      	lsls	r1, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	fbb0 f3f3 	udiv	r3, r0, r3
 800112a:	3301      	adds	r3, #1
 800112c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf0c      	ite	eq
 8001134:	2301      	moveq	r3, #1
 8001136:	2300      	movne	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_I2C_Init+0x196>
 800113e:	2301      	movs	r3, #1
 8001140:	e022      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10e      	bne.n	8001168 <HAL_I2C_Init+0x1bc>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1e58      	subs	r0, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6859      	ldr	r1, [r3, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	440b      	add	r3, r1
 8001158:	fbb0 f3f3 	udiv	r3, r0, r3
 800115c:	3301      	adds	r3, #1
 800115e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001166:	e00f      	b.n	8001188 <HAL_I2C_Init+0x1dc>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e58      	subs	r0, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6859      	ldr	r1, [r3, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	0099      	lsls	r1, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	6809      	ldr	r1, [r1, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69da      	ldr	r2, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6911      	ldr	r1, [r2, #16]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68d2      	ldr	r2, [r2, #12]
 80011c2:	4311      	orrs	r1, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	000186a0 	.word	0x000186a0
 8001224:	001e847f 	.word	0x001e847f
 8001228:	003d08ff 	.word	0x003d08ff
 800122c:	431bde83 	.word	0x431bde83
 8001230:	10624dd3 	.word	0x10624dd3

08001234 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	2b80      	cmp	r3, #128	; 0x80
 8001248:	d103      	bne.n	8001252 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800127c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b10      	cmp	r3, #16
 800128a:	d003      	beq.n	8001294 <HAL_I2C_EV_IRQHandler+0x38>
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b40      	cmp	r3, #64	; 0x40
 8001290:	f040 80c1 	bne.w	8001416 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <HAL_I2C_EV_IRQHandler+0x6e>
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80012b4:	d003      	beq.n	80012be <HAL_I2C_EV_IRQHandler+0x62>
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80012bc:	d101      	bne.n	80012c2 <HAL_I2C_EV_IRQHandler+0x66>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_I2C_EV_IRQHandler+0x68>
 80012c2:	2300      	movs	r3, #0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f000 8132 	beq.w	800152e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_I2C_EV_IRQHandler+0x92>
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	0a5b      	lsrs	r3, r3, #9
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f001 fc9b 	bl	8002c1c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fd99 	bl	8001e1e <I2C_Master_SB>
 80012ec:	e092      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_I2C_EV_IRQHandler+0xb2>
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	0a5b      	lsrs	r3, r3, #9
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fe0e 	bl	8001f28 <I2C_Master_ADD10>
 800130c:	e082      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	085b      	lsrs	r3, r3, #1
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_I2C_EV_IRQHandler+0xd2>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	0a5b      	lsrs	r3, r3, #9
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fe27 	bl	8001f7a <I2C_Master_ADDR>
 800132c:	e072      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03b      	beq.n	80013b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001348:	f000 80f3 	beq.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	09db      	lsrs	r3, r3, #7
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00f      	beq.n	8001378 <HAL_I2C_EV_IRQHandler+0x11c>
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	0a9b      	lsrs	r3, r3, #10
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <HAL_I2C_EV_IRQHandler+0x11c>
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9f1 	bl	8001758 <I2C_MasterTransmit_TXE>
 8001376:	e04d      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80d6 	beq.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	0a5b      	lsrs	r3, r3, #9
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80cf 	beq.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	2b21      	cmp	r3, #33	; 0x21
 8001398:	d103      	bne.n	80013a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa78 	bl	8001890 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013a0:	e0c7      	b.n	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	2b40      	cmp	r3, #64	; 0x40
 80013a6:	f040 80c4 	bne.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fae6 	bl	800197c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013b0:	e0bf      	b.n	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013c0:	f000 80b7 	beq.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00f      	beq.n	80013f0 <HAL_I2C_EV_IRQHandler+0x194>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d009      	beq.n	80013f0 <HAL_I2C_EV_IRQHandler+0x194>
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fb5f 	bl	8001aac <I2C_MasterReceive_RXNE>
 80013ee:	e011      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 809a 	beq.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	0a5b      	lsrs	r3, r3, #9
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8093 	beq.w	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fc15 	bl	8001c3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001412:	e08e      	b.n	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001414:	e08d      	b.n	8001532 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e007      	b.n	8001438 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d012      	beq.n	800146a <HAL_I2C_EV_IRQHandler+0x20e>
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	0a5b      	lsrs	r3, r3, #9
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001460:	69b9      	ldr	r1, [r7, #24]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 ffe0 	bl	8002428 <I2C_Slave_ADDR>
 8001468:	e066      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_I2C_EV_IRQHandler+0x22e>
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	0a5b      	lsrs	r3, r3, #9
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f001 f81a 	bl	80024bc <I2C_Slave_STOPF>
 8001488:	e056      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	2b21      	cmp	r3, #33	; 0x21
 800148e:	d002      	beq.n	8001496 <HAL_I2C_EV_IRQHandler+0x23a>
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	2b29      	cmp	r3, #41	; 0x29
 8001494:	d125      	bne.n	80014e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	09db      	lsrs	r3, r3, #7
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00f      	beq.n	80014c2 <HAL_I2C_EV_IRQHandler+0x266>
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	0a9b      	lsrs	r3, r3, #10
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_I2C_EV_IRQHandler+0x266>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fef8 	bl	80022b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014c0:	e039      	b.n	8001536 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d033      	beq.n	8001536 <HAL_I2C_EV_IRQHandler+0x2da>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	0a5b      	lsrs	r3, r3, #9
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d02d      	beq.n	8001536 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 ff25 	bl	800232a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014e0:	e029      	b.n	8001536 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00f      	beq.n	800150e <HAL_I2C_EV_IRQHandler+0x2b2>
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	0a9b      	lsrs	r3, r3, #10
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_I2C_EV_IRQHandler+0x2b2>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 ff2f 	bl	800236a <I2C_SlaveReceive_RXNE>
 800150c:	e014      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00e      	beq.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	0a5b      	lsrs	r3, r3, #9
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 ff5d 	bl	80023e6 <I2C_SlaveReceive_BTF>
 800152c:	e004      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800152e:	bf00      	nop
 8001530:	e002      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001532:	bf00      	nop
 8001534:	e000      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001536:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b08a      	sub	sp, #40	; 0x28
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001560:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d016      	beq.n	800159c <HAL_I2C_ER_IRQHandler+0x5e>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d010      	beq.n	800159c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800158a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	0a5b      	lsrs	r3, r3, #9
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00e      	beq.n	80015c6 <HAL_I2C_ER_IRQHandler+0x88>
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80015c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	0a9b      	lsrs	r3, r3, #10
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03f      	beq.n	8001652 <HAL_I2C_ER_IRQHandler+0x114>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d039      	beq.n	8001652 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80015de:	7efb      	ldrb	r3, [r7, #27]
 80015e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80015f8:	7ebb      	ldrb	r3, [r7, #26]
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d112      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xe6>
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xe6>
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	2b21      	cmp	r3, #33	; 0x21
 8001608:	d008      	beq.n	800161c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	2b29      	cmp	r3, #41	; 0x29
 800160e:	d005      	beq.n	800161c <HAL_I2C_ER_IRQHandler+0xde>
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b28      	cmp	r3, #40	; 0x28
 8001614:	d106      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b21      	cmp	r3, #33	; 0x21
 800161a:	d103      	bne.n	8001624 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 f87d 	bl	800271c <I2C_Slave_AF>
 8001622:	e016      	b.n	8001652 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800162c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	2b10      	cmp	r3, #16
 800163a:	d002      	beq.n	8001642 <HAL_I2C_ER_IRQHandler+0x104>
 800163c:	7efb      	ldrb	r3, [r7, #27]
 800163e:	2b40      	cmp	r3, #64	; 0x40
 8001640:	d107      	bne.n	8001652 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001650:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	0adb      	lsrs	r3, r3, #11
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x13e>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800167a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 f8b8 	bl	8002804 <I2C_ITError>
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
 80016f0:	4613      	mov	r3, r2
 80016f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001766:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800176e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	d150      	bne.n	8001820 <I2C_MasterTransmit_TXE+0xc8>
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b21      	cmp	r3, #33	; 0x21
 8001782:	d14d      	bne.n	8001820 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b08      	cmp	r3, #8
 8001788:	d01d      	beq.n	80017c6 <I2C_MasterTransmit_TXE+0x6e>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b20      	cmp	r3, #32
 800178e:	d01a      	beq.n	80017c6 <I2C_MasterTransmit_TXE+0x6e>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001796:	d016      	beq.n	80017c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2211      	movs	r2, #17
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff6c 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017c4:	e060      	b.n	8001888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b40      	cmp	r3, #64	; 0x40
 80017fe:	d107      	bne.n	8001810 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff81 	bl	8001710 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800180e:	e03b      	b.n	8001888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff3f 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800181e:	e033      	b.n	8001888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b21      	cmp	r3, #33	; 0x21
 8001824:	d005      	beq.n	8001832 <I2C_MasterTransmit_TXE+0xda>
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d12d      	bne.n	8001888 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	d12a      	bne.n	8001888 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d108      	bne.n	800184e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800184c:	e01c      	b.n	8001888 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b40      	cmp	r3, #64	; 0x40
 8001858:	d103      	bne.n	8001862 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f88e 	bl	800197c <I2C_MemoryTransmit_TXE_BTF>
}
 8001860:	e012      	b.n	8001888 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001886:	e7ff      	b.n	8001888 <I2C_MasterTransmit_TXE+0x130>
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b21      	cmp	r3, #33	; 0x21
 80018a8:	d164      	bne.n	8001974 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d012      	beq.n	80018da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80018d8:	e04c      	b.n	8001974 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d01d      	beq.n	800191c <I2C_MasterTransmit_BTF+0x8c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d01a      	beq.n	800191c <I2C_MasterTransmit_BTF+0x8c>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018ec:	d016      	beq.n	800191c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2211      	movs	r2, #17
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fec1 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
}
 800191a:	e02b      	b.n	8001974 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800192a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b40      	cmp	r3, #64	; 0x40
 8001954:	d107      	bne.n	8001966 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fed6 	bl	8001710 <HAL_I2C_MemTxCpltCallback>
}
 8001964:	e006      	b.n	8001974 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fe94 	bl	800169c <HAL_I2C_MasterTxCpltCallback>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11d      	bne.n	80019d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10b      	bne.n	80019b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ac:	1c9a      	adds	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80019b2:	e077      	b.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	121b      	asrs	r3, r3, #8
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019ce:	e069      	b.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10b      	bne.n	80019f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019ee:	e059      	b.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d152      	bne.n	8001a9e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b22      	cmp	r3, #34	; 0x22
 80019fc:	d10d      	bne.n	8001a1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a18:	e044      	b.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b21      	cmp	r3, #33	; 0x21
 8001a28:	d112      	bne.n	8001a50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	781a      	ldrb	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001a4e:	e029      	b.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d124      	bne.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b21      	cmp	r3, #33	; 0x21
 8001a5e:	d121      	bne.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fe3a 	bl	8001710 <HAL_I2C_MemTxCpltCallback>
}
 8001a9c:	e002      	b.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fbc8 	bl	8001234 <I2C_Flush_DR>
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b22      	cmp	r3, #34	; 0x22
 8001abe:	f040 80b9 	bne.w	8001c34 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d921      	bls.n	8001b1a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	f040 8096 	bne.w	8001c34 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b16:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001b18:	e08c      	b.n	8001c34 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d07f      	beq.n	8001c22 <I2C_MasterReceive_RXNE+0x176>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d002      	beq.n	8001b2e <I2C_MasterReceive_RXNE+0x82>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d179      	bne.n	8001c22 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f001 f842 	bl	8002bb8 <I2C_WaitOnSTOPRequestThroughIT>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d14c      	bne.n	8001bd4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b48:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d10a      	bne.n	8001baa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fdbd 	bl	8001722 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ba8:	e044      	b.n	8001c34 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d002      	beq.n	8001bbe <I2C_MasterReceive_RXNE+0x112>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d103      	bne.n	8001bc6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc4:	e002      	b.n	8001bcc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2212      	movs	r2, #18
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fd6e 	bl	80016ae <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bd2:	e02f      	b.n	8001c34 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001be2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fd8a 	bl	8001734 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c20:	e008      	b.n	8001c34 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c30:	605a      	str	r2, [r3, #4]
}
 8001c32:	e7ff      	b.n	8001c34 <I2C_MasterReceive_RXNE+0x188>
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d11b      	bne.n	8001c8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001c8a:	e0c4      	b.n	8001e16 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d129      	bne.n	8001cea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00a      	beq.n	8001cc2 <I2C_MasterReceive_BTF+0x86>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d007      	beq.n	8001cc2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ce8:	e095      	b.n	8001e16 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d17d      	bne.n	8001df0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <I2C_MasterReceive_BTF+0xc4>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d108      	bne.n	8001d12 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e016      	b.n	8001d40 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d002      	beq.n	8001d1e <I2C_MasterReceive_BTF+0xe2>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d108      	bne.n	8001d30 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e007      	b.n	8001d40 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	d10a      	bne.n	8001dc6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fcaf 	bl	8001722 <HAL_I2C_MemRxCpltCallback>
}
 8001dc4:	e027      	b.n	8001e16 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d002      	beq.n	8001dda <I2C_MasterReceive_BTF+0x19e>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	d103      	bne.n	8001de2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
 8001de0:	e002      	b.n	8001de8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2212      	movs	r2, #18
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fc60 	bl	80016ae <HAL_I2C_MasterRxCpltCallback>
}
 8001dee:	e012      	b.n	8001e16 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d117      	bne.n	8001e62 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e4a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001e4c:	e067      	b.n	8001f1e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	611a      	str	r2, [r3, #16]
}
 8001e60:	e05d      	b.n	8001f1e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e6a:	d133      	bne.n	8001ed4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b21      	cmp	r3, #33	; 0x21
 8001e76:	d109      	bne.n	8001e8c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	e008      	b.n	8001e9e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <I2C_Master_SB+0x92>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d108      	bne.n	8001ec2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d032      	beq.n	8001f1e <I2C_Master_SB+0x100>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02d      	beq.n	8001f1e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed0:	605a      	str	r2, [r3, #4]
}
 8001ed2:	e024      	b.n	8001f1e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10e      	bne.n	8001efa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	11db      	asrs	r3, r3, #7
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 0306 	and.w	r3, r3, #6
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f063 030f 	orn	r3, r3, #15
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	611a      	str	r2, [r3, #16]
}
 8001ef8:	e011      	b.n	8001f1e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10d      	bne.n	8001f1e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	11db      	asrs	r3, r3, #7
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 0306 	and.w	r3, r3, #6
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f063 030e 	orn	r3, r3, #14
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	611a      	str	r2, [r3, #16]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <I2C_Master_ADD10+0x26>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <I2C_Master_ADD10+0x48>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f6e:	605a      	str	r2, [r3, #4]
  }
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b091      	sub	sp, #68	; 0x44
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b22      	cmp	r3, #34	; 0x22
 8001fa2:	f040 8174 	bne.w	800228e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10f      	bne.n	8001fce <I2C_Master_ADDR+0x54>
 8001fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d10b      	bne.n	8001fce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	e16b      	b.n	80022a6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d11d      	bne.n	8002012 <I2C_Master_ADDR+0x98>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001fde:	d118      	bne.n	8002012 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002004:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	651a      	str	r2, [r3, #80]	; 0x50
 8002010:	e149      	b.n	80022a6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d113      	bne.n	8002044 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e120      	b.n	8002286 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	f040 808a 	bne.w	8002164 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002056:	d137      	bne.n	80020c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002066:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	d113      	bne.n	80020a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002086:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	e0f2      	b.n	8002286 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e0de      	b.n	8002286 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d02e      	beq.n	800212c <I2C_Master_ADDR+0x1b2>
 80020ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d02b      	beq.n	800212c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d102      	bne.n	80020e0 <I2C_Master_ADDR+0x166>
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d125      	bne.n	800212c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80020e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d00e      	beq.n	8002104 <I2C_Master_ADDR+0x18a>
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d00b      	beq.n	8002104 <I2C_Master_ADDR+0x18a>
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d008      	beq.n	8002104 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e007      	b.n	8002114 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002112:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	e0ac      	b.n	8002286 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e090      	b.n	8002286 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d158      	bne.n	8002220 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002170:	2b04      	cmp	r3, #4
 8002172:	d021      	beq.n	80021b8 <I2C_Master_ADDR+0x23e>
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	2b02      	cmp	r3, #2
 8002178:	d01e      	beq.n	80021b8 <I2C_Master_ADDR+0x23e>
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	2b10      	cmp	r3, #16
 800217e:	d01b      	beq.n	80021b8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e012      	b.n	80021de <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ec:	d14b      	bne.n	8002286 <I2C_Master_ADDR+0x30c>
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f4:	d00b      	beq.n	800220e <I2C_Master_ADDR+0x294>
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d008      	beq.n	800220e <I2C_Master_ADDR+0x294>
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d005      	beq.n	800220e <I2C_Master_ADDR+0x294>
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2b10      	cmp	r3, #16
 8002206:	d002      	beq.n	800220e <I2C_Master_ADDR+0x294>
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220a:	2b20      	cmp	r3, #32
 800220c:	d13b      	bne.n	8002286 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	e032      	b.n	8002286 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800222e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800223e:	d117      	bne.n	8002270 <I2C_Master_ADDR+0x2f6>
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002246:	d00b      	beq.n	8002260 <I2C_Master_ADDR+0x2e6>
 8002248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224a:	2b01      	cmp	r3, #1
 800224c:	d008      	beq.n	8002260 <I2C_Master_ADDR+0x2e6>
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	2b08      	cmp	r3, #8
 8002252:	d005      	beq.n	8002260 <I2C_Master_ADDR+0x2e6>
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	2b10      	cmp	r3, #16
 8002258:	d002      	beq.n	8002260 <I2C_Master_ADDR+0x2e6>
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	2b20      	cmp	r3, #32
 800225e:	d107      	bne.n	8002270 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800226e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800228c:	e00b      	b.n	80022a6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
}
 80022a4:	e7ff      	b.n	80022a6 <I2C_Master_ADDR+0x32c>
 80022a6:	bf00      	nop
 80022a8:	3744      	adds	r7, #68	; 0x44
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02b      	beq.n	8002322 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d114      	bne.n	8002322 <I2C_SlaveTransmit_TXE+0x72>
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b29      	cmp	r3, #41	; 0x29
 80022fc:	d111      	bne.n	8002322 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2228      	movs	r2, #40	; 0x28
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff f9cf 	bl	80016c0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d011      	beq.n	8002360 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d02c      	beq.n	80023de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d114      	bne.n	80023de <I2C_SlaveReceive_RXNE+0x74>
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b2a      	cmp	r3, #42	; 0x2a
 80023b8:	d111      	bne.n	80023de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2222      	movs	r2, #34	; 0x22
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2228      	movs	r2, #40	; 0x28
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff f97a 	bl	80016d2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002442:	2b28      	cmp	r3, #40	; 0x28
 8002444:	d127      	bne.n	8002496 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002454:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	09db      	lsrs	r3, r3, #7
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	81bb      	strh	r3, [r7, #12]
 8002478:	e002      	b.n	8002480 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002488:	89ba      	ldrh	r2, [r7, #12]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff f928 	bl	80016e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002494:	e00e      	b.n	80024b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002508:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002518:	d172      	bne.n	8002600 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b22      	cmp	r3, #34	; 0x22
 800251e:	d002      	beq.n	8002526 <I2C_Slave_STOPF+0x6a>
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b2a      	cmp	r3, #42	; 0x2a
 8002524:	d135      	bne.n	8002592 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002558:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fb60 	bl	8000c24 <HAL_DMA_GetState>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d049      	beq.n	80025fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	4a69      	ldr	r2, [pc, #420]	; (8002714 <I2C_Slave_STOPF+0x258>)
 8002570:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fadc 	bl	8000b34 <HAL_DMA_Abort_IT>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03d      	beq.n	80025fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002590:	e035      	b.n	80025fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fb2a 	bl	8000c24 <HAL_DMA_GetState>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d014      	beq.n	8002600 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025da:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <I2C_Slave_STOPF+0x258>)
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe faa6 	bl	8000b34 <HAL_DMA_Abort_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025f8:	4610      	mov	r0, r2
 80025fa:	4798      	blx	r3
 80025fc:	e000      	b.n	8002600 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03e      	beq.n	8002688 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d112      	bne.n	800263e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d112      	bne.n	8002672 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8b7 	bl	8002804 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002696:	e039      	b.n	800270c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b2a      	cmp	r3, #42	; 0x2a
 800269c:	d109      	bne.n	80026b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2228      	movs	r2, #40	; 0x28
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff f810 	bl	80016d2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b28      	cmp	r3, #40	; 0x28
 80026bc:	d111      	bne.n	80026e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a15      	ldr	r2, [pc, #84]	; (8002718 <I2C_Slave_STOPF+0x25c>)
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff f80f 	bl	80016fe <HAL_I2C_ListenCpltCallback>
}
 80026e0:	e014      	b.n	800270c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	2b22      	cmp	r3, #34	; 0x22
 80026e8:	d002      	beq.n	80026f0 <I2C_Slave_STOPF+0x234>
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b22      	cmp	r3, #34	; 0x22
 80026ee:	d10d      	bne.n	800270c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe ffe3 	bl	80016d2 <HAL_I2C_SlaveRxCpltCallback>
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	08002a69 	.word	0x08002a69
 8002718:	ffff0000 	.word	0xffff0000

0800271c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d002      	beq.n	800273e <I2C_Slave_AF+0x22>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d129      	bne.n	8002792 <I2C_Slave_AF+0x76>
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b28      	cmp	r3, #40	; 0x28
 8002742:	d126      	bne.n	8002792 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a2e      	ldr	r2, [pc, #184]	; (8002800 <I2C_Slave_AF+0xe4>)
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002758:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002762:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe ffb7 	bl	80016fe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002790:	e031      	b.n	80027f6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b21      	cmp	r3, #33	; 0x21
 8002796:	d129      	bne.n	80027ec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <I2C_Slave_AF+0xe4>)
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027dc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fd28 	bl	8001234 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe ff6b 	bl	80016c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80027ea:	e004      	b.n	80027f6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f4:	615a      	str	r2, [r3, #20]
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	ffff0000 	.word	0xffff0000

08002804 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002812:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	2b10      	cmp	r3, #16
 8002820:	d002      	beq.n	8002828 <I2C_ITError+0x24>
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d10a      	bne.n	800283e <I2C_ITError+0x3a>
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b22      	cmp	r3, #34	; 0x22
 800282c:	d107      	bne.n	800283e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002844:	2b28      	cmp	r3, #40	; 0x28
 8002846:	d107      	bne.n	8002858 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2228      	movs	r2, #40	; 0x28
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002856:	e015      	b.n	8002884 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002866:	d00a      	beq.n	800287e <I2C_ITError+0x7a>
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b60      	cmp	r3, #96	; 0x60
 800286c:	d007      	beq.n	800287e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002892:	d162      	bne.n	800295a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d020      	beq.n	80028f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	4a6a      	ldr	r2, [pc, #424]	; (8002a60 <I2C_ITError+0x25c>)
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe f938 	bl	8000b34 <HAL_DMA_Abort_IT>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8089 	beq.w	80029de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ee:	4610      	mov	r0, r2
 80028f0:	4798      	blx	r3
 80028f2:	e074      	b.n	80029de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	4a59      	ldr	r2, [pc, #356]	; (8002a60 <I2C_ITError+0x25c>)
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe f917 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d068      	beq.n	80029de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d10b      	bne.n	8002932 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002954:	4610      	mov	r0, r2
 8002956:	4798      	blx	r3
 8002958:	e041      	b.n	80029de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b60      	cmp	r3, #96	; 0x60
 8002964:	d125      	bne.n	80029b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d10b      	bne.n	800299a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fecb 	bl	8001746 <HAL_I2C_AbortCpltCallback>
 80029b0:	e015      	b.n	80029de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d10b      	bne.n	80029d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe feab 	bl	8001734 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d113      	bne.n	8002a58 <I2C_ITError+0x254>
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b28      	cmp	r3, #40	; 0x28
 8002a34:	d110      	bne.n	8002a58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <I2C_ITError+0x260>)
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fe53 	bl	80016fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	ffff0000 	.word	0xffff0000

08002a68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a82:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <I2C_DMAAbort+0x148>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	08db      	lsrs	r3, r3, #3
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <I2C_DMAAbort+0x14c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a1a      	lsrs	r2, r3, #8
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00da      	lsls	r2, r3, #3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002aae:	e00a      	b.n	8002ac6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac4:	d0ea      	beq.n	8002a9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2200      	movs	r2, #0
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	2200      	movs	r2, #0
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	2200      	movs	r2, #0
 8002b1a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b60      	cmp	r3, #96	; 0x60
 8002b36:	d10e      	bne.n	8002b56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7fe fdf9 	bl	8001746 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b54:	e027      	b.n	8002ba6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b5c:	2b28      	cmp	r3, #40	; 0x28
 8002b5e:	d117      	bne.n	8002b90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2228      	movs	r2, #40	; 0x28
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b8e:	e007      	b.n	8002ba0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f7fe fdc7 	bl	8001734 <HAL_I2C_ErrorCallback>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	14f8b589 	.word	0x14f8b589

08002bb8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	08db      	lsrs	r3, r3, #3
 8002bca:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	0a1a      	lsrs	r2, r3, #8
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e008      	b.n	8002c08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d0e9      	beq.n	8002bda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000004 	.word	0x20000004
 8002c18:	14f8b589 	.word	0x14f8b589

08002c1c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c2c:	d103      	bne.n	8002c36 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c34:	e007      	b.n	8002c46 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c3e:	d102      	bne.n	8002c46 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2208      	movs	r2, #8
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e26c      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8087 	beq.w	8002d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c70:	4b92      	ldr	r3, [pc, #584]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c7c:	4b8f      	ldr	r3, [pc, #572]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d112      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
 8002c88:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d06c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x12c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d168      	bne.n	8002d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e246      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x76>
 8002cb8:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7f      	ldr	r2, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e02e      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x98>
 8002cce:	4b7b      	ldr	r3, [pc, #492]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7a      	ldr	r2, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b78      	ldr	r3, [pc, #480]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a77      	ldr	r2, [pc, #476]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e01d      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0xbc>
 8002cf2:	4b72      	ldr	r3, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a71      	ldr	r2, [pc, #452]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6e      	ldr	r2, [pc, #440]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6a      	ldr	r2, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a67      	ldr	r2, [pc, #412]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fd fdb0 	bl	8000890 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fd fdac 	bl	8000890 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e1fa      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0xe4>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fd9c 	bl	8000890 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fd fd98 	bl	8000890 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1e6      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x10c>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d11c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x18c>
 8002da2:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x176>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1ba      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4939      	ldr	r1, [pc, #228]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	e03a      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCC_OscConfig+0x270>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd fd51 	bl	8000890 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fd fd4d 	bl	8000890 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e19b      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4927      	ldr	r1, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	e015      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x270>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fd fd30 	bl	8000890 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fd fd2c 	bl	8000890 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e17a      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03a      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_RCC_OscConfig+0x274>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fd fd10 	bl	8000890 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fd fd0c 	bl	8000890 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e15a      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 facc 	bl	8003430 <RCC_Delay>
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fd fcf6 	bl	8000890 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea6:	e00f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fd fcf2 	bl	8000890 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d908      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e140      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	42420000 	.word	0x42420000
 8002ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	4b9e      	ldr	r3, [pc, #632]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e9      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a6 	beq.w	800302e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b97      	ldr	r3, [pc, #604]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10d      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b94      	ldr	r3, [pc, #592]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4a93      	ldr	r2, [pc, #588]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	61d3      	str	r3, [r2, #28]
 8002efe:	4b91      	ldr	r3, [pc, #580]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b8e      	ldr	r3, [pc, #568]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4b8b      	ldr	r3, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a8a      	ldr	r2, [pc, #552]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fd fcb3 	bl	8000890 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fd fcaf 	bl	8000890 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	; 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0fd      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b81      	ldr	r3, [pc, #516]	; (8003148 <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x312>
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a7a      	ldr	r2, [pc, #488]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	e02d      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x334>
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a72      	ldr	r2, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	e01c      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x356>
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a6c      	ldr	r2, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4a69      	ldr	r2, [pc, #420]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6213      	str	r3, [r2, #32]
 8002fa4:	e00b      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002fa6:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4a66      	ldr	r2, [pc, #408]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6213      	str	r3, [r2, #32]
 8002fb2:	4b64      	ldr	r3, [pc, #400]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4a63      	ldr	r2, [pc, #396]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d015      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fd fc63 	bl	8000890 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fd fc5f 	bl	8000890 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0ab      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ee      	beq.n	8002fce <HAL_RCC_OscConfig+0x37e>
 8002ff0:	e014      	b.n	800301c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fc4d 	bl	8000890 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fd fc49 	bl	8000890 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e095      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ee      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003022:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4a47      	ldr	r2, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8081 	beq.w	800313a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003038:	4b42      	ldr	r3, [pc, #264]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d061      	beq.n	8003108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d146      	bne.n	80030da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304c:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_OscConfig+0x4fc>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd fc1d 	bl	8000890 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd fc19 	bl	8000890 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e067      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003082:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	492d      	ldr	r1, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a19      	ldr	r1, [r3, #32]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	430b      	orrs	r3, r1
 80030a6:	4927      	ldr	r1, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_RCC_OscConfig+0x4fc>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fd fbed 	bl	8000890 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd fbe9 	bl	8000890 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e037      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x46a>
 80030d8:	e02f      	b.n	800313a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_RCC_OscConfig+0x4fc>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fbd6 	bl	8000890 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fbd2 	bl	8000890 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e020      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x498>
 8003106:	e018      	b.n	800313a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e013      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_OscConfig+0x4f4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	429a      	cmp	r2, r3
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
 800314c:	42420060 	.word	0x42420060

08003150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d0      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	4965      	ldr	r1, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d040      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e073      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06b      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4936      	ldr	r1, [pc, #216]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fd fb26 	bl	8000890 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fd fb22 	bl	8000890 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e053      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d210      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	4922      	ldr	r1, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1cc>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1d0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fa84 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40022000 	.word	0x40022000
 8003314:	40021000 	.word	0x40021000
 8003318:	08004724 	.word	0x08004724
 800331c:	20000004 	.word	0x20000004
 8003320:	20000008 	.word	0x20000008

08003324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d002      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x30>
 800334e:	2b08      	cmp	r3, #8
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x36>
 8003352:	e027      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003356:	613b      	str	r3, [r7, #16]
      break;
 8003358:	e027      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0c5b      	lsrs	r3, r3, #17
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003386:	fb02 f203 	mul.w	r2, r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e004      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	613b      	str	r3, [r7, #16]
      break;
 80033a2:	e002      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 80033a6:	613b      	str	r3, [r7, #16]
      break;
 80033a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033aa:	693b      	ldr	r3, [r7, #16]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	0800473c 	.word	0x0800473c
 80033c4:	0800474c 	.word	0x0800474c
 80033c8:	003d0900 	.word	0x003d0900

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <HAL_RCC_GetHCLKFreq+0x10>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	20000004 	.word	0x20000004

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff2 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	08004734 	.word	0x08004734

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800340c:	f7ff ffde 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40021000 	.word	0x40021000
 800342c:	08004734 	.word	0x08004734

08003430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <RCC_Delay+0x34>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <RCC_Delay+0x38>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0a5b      	lsrs	r3, r3, #9
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800344c:	bf00      	nop
  }
  while (Delay --);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	60fa      	str	r2, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f9      	bne.n	800344c <RCC_Delay+0x1c>
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	20000004 	.word	0x20000004
 8003468:	10624dd3 	.word	0x10624dd3

0800346c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd f8b2 	bl	80005fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fa5c 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e03a      	b.n	800359a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x58>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d009      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x58>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x58>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d010      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	e007      	b.n	8003598 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0202 	mvn.w	r2, #2
 80035e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f998 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f98b 	bl	800391e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f99a 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f972 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f965 	bl	800391e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f974 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f94c 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f93f 	bl	800391e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f94e 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2208      	movs	r2, #8
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f926 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f919 	bl	800391e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f928 	bl	8003942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fc fe72 	bl	8000400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa7f 	bl	8003c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8f8 	bl	8003954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa52 	bl	8003c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_ConfigClockSource+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0b4      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x186>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e4:	d03e      	beq.n	8003864 <HAL_TIM_ConfigClockSource+0xd4>
 80037e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ea:	f200 8087 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	f000 8086 	beq.w	8003902 <HAL_TIM_ConfigClockSource+0x172>
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fa:	d87f      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b70      	cmp	r3, #112	; 0x70
 80037fe:	d01a      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0xa6>
 8003800:	2b70      	cmp	r3, #112	; 0x70
 8003802:	d87b      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b60      	cmp	r3, #96	; 0x60
 8003806:	d050      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x11a>
 8003808:	2b60      	cmp	r3, #96	; 0x60
 800380a:	d877      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b50      	cmp	r3, #80	; 0x50
 800380e:	d03c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0xfa>
 8003810:	2b50      	cmp	r3, #80	; 0x50
 8003812:	d873      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d058      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x13a>
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d86f      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b30      	cmp	r3, #48	; 0x30
 800381e:	d064      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b30      	cmp	r3, #48	; 0x30
 8003822:	d86b      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d060      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d867      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d05c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003830:	2b10      	cmp	r3, #16
 8003832:	d05a      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	e062      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6899      	ldr	r1, [r3, #8]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f000 f974 	bl	8003b32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	609a      	str	r2, [r3, #8]
      break;
 8003862:	e04f      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f000 f95d 	bl	8003b32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003886:	609a      	str	r2, [r3, #8]
      break;
 8003888:	e03c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 f8d4 	bl	8003a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2150      	movs	r1, #80	; 0x50
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f92b 	bl	8003afe <TIM_ITRx_SetConfig>
      break;
 80038a8:	e02c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 f8f2 	bl	8003aa0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2160      	movs	r1, #96	; 0x60
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f91b 	bl	8003afe <TIM_ITRx_SetConfig>
      break;
 80038c8:	e01c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 f8b4 	bl	8003a44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2140      	movs	r1, #64	; 0x40
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f90b 	bl	8003afe <TIM_ITRx_SetConfig>
      break;
 80038e8:	e00c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f000 f902 	bl	8003afe <TIM_ITRx_SetConfig>
      break;
 80038fa:	e003      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e000      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
	...

08003968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <TIM_Base_SetConfig+0xd0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00b      	beq.n	8003998 <TIM_Base_SetConfig+0x30>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d007      	beq.n	8003998 <TIM_Base_SetConfig+0x30>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <TIM_Base_SetConfig+0xd4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_Base_SetConfig+0x30>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <TIM_Base_SetConfig+0xd8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <TIM_Base_SetConfig+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <TIM_Base_SetConfig+0xd4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <TIM_Base_SetConfig+0xd8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <TIM_Base_SetConfig+0xd0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800

08003a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f023 0201 	bic.w	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 030a 	bic.w	r3, r3, #10
 8003a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0210 	bic.w	r2, r3, #16
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	031b      	lsls	r3, r3, #12
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f043 0307 	orr.w	r3, r3, #7
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	609a      	str	r2, [r3, #8]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e046      	b.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d009      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10c      	bne.n	8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800

08003c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e042      	b.n	8003ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc fce4 	bl	8000644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fc7f 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0ba      	sub	sp, #232	; 0xe8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_UART_IRQHandler+0x66>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fb63 	bl	800441a <UART_Receive_IT>
      return;
 8003d54:	e25b      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80de 	beq.w	8003f1c <HAL_UART_IRQHandler+0x22c>
 8003d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80d1 	beq.w	8003f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_UART_IRQHandler+0xae>
 8003d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xd2>
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0xf6>
 8003dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d011      	beq.n	8003e16 <HAL_UART_IRQHandler+0x126>
 8003df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 81f2 	beq.w	8004204 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_UART_IRQHandler+0x14e>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 faee 	bl	800441a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_UART_IRQHandler+0x17a>
 8003e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04f      	beq.n	8003f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9f8 	bl	8004260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d041      	beq.n	8003f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1d9      	bne.n	8003e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d013      	beq.n	8003efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	4a7e      	ldr	r2, [pc, #504]	; (80040d0 <HAL_UART_IRQHandler+0x3e0>)
 8003ed8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fe28 	bl	8000b34 <HAL_DMA_Abort_IT>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00e      	b.n	8003f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f99c 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e00a      	b.n	8003f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f998 	bl	8004238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e006      	b.n	8003f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f994 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f16:	e175      	b.n	8004204 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	bf00      	nop
    return;
 8003f1a:	e173      	b.n	8004204 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f040 814f 	bne.w	80041c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8148 	beq.w	80041c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8141 	beq.w	80041c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80b6 	beq.w	80040d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8145 	beq.w	8004208 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f86:	429a      	cmp	r2, r3
 8003f88:	f080 813e 	bcs.w	8004208 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	f000 8088 	beq.w	80040b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fcc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1d9      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004010:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004014:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004018:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e1      	bne.n	8003fec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3314      	adds	r3, #20
 800402e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800404c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800404e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004052:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800405a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e3      	bne.n	8004028 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	330c      	adds	r3, #12
 8004074:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800407e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004080:	f023 0310 	bic.w	r3, r3, #16
 8004084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004092:	65ba      	str	r2, [r7, #88]	; 0x58
 8004094:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e3      	bne.n	800406e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fd07 	bl	8000abe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8bf 	bl	800424a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040cc:	e09c      	b.n	8004208 <HAL_UART_IRQHandler+0x518>
 80040ce:	bf00      	nop
 80040d0:	08004325 	.word	0x08004325
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 808e 	beq.w	800420c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8089 	beq.w	800420c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800410a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800411e:	647a      	str	r2, [r7, #68]	; 0x44
 8004120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e3      	bne.n	80040fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	623b      	str	r3, [r7, #32]
   return(result);
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004156:	633a      	str	r2, [r7, #48]	; 0x30
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800415c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e3      	bne.n	8004132 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	60fb      	str	r3, [r7, #12]
   return(result);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800419c:	61fa      	str	r2, [r7, #28]
 800419e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	617b      	str	r3, [r7, #20]
   return(result);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e3      	bne.n	8004178 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f844 	bl	800424a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041c2:	e023      	b.n	800420c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_UART_IRQHandler+0x4f4>
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8b5 	bl	800434c <UART_Transmit_IT>
    return;
 80041e2:	e014      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <HAL_UART_IRQHandler+0x51e>
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8f4 	bl	80043ea <UART_EndTransmit_IT>
    return;
 8004202:	e004      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
    return;
 8004204:	bf00      	nop
 8004206:	e002      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
      return;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
      return;
 800420c:	bf00      	nop
  }
}
 800420e:	37e8      	adds	r7, #232	; 0xe8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b095      	sub	sp, #84	; 0x54
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800427e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004288:	643a      	str	r2, [r7, #64]	; 0x40
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800428e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	e853 3f00 	ldrex	r3, [r3]
 80042aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e5      	bne.n	800429c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d119      	bne.n	800430c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	647b      	str	r3, [r7, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f8:	61ba      	str	r2, [r7, #24]
 80042fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6979      	ldr	r1, [r7, #20]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	613b      	str	r3, [r7, #16]
   return(result);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e5      	bne.n	80042d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800431a:	bf00      	nop
 800431c:	3754      	adds	r7, #84	; 0x54
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff ff7a 	bl	8004238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b21      	cmp	r3, #33	; 0x21
 800435e:	d13e      	bne.n	80043de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004368:	d114      	bne.n	8004394 <UART_Transmit_IT+0x48>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004386:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]
 8004392:	e008      	b.n	80043a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	1c59      	adds	r1, r3, #1
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6211      	str	r1, [r2, #32]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4619      	mov	r1, r3
 80043b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff02 	bl	8004214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08c      	sub	sp, #48	; 0x30
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b22      	cmp	r3, #34	; 0x22
 800442c:	f040 80ae 	bne.w	800458c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004438:	d117      	bne.n	800446a <UART_Receive_IT+0x50>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	b29a      	uxth	r2, r3
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e026      	b.n	80044b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d007      	beq.n	800448e <UART_Receive_IT+0x74>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <UART_Receive_IT+0x82>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e008      	b.n	80044ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4619      	mov	r1, r3
 80044c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15d      	bne.n	8004588 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0220 	bic.w	r2, r2, #32
 80044da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	2b01      	cmp	r3, #1
 8004510:	d135      	bne.n	800457e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	613b      	str	r3, [r7, #16]
   return(result);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004538:	623a      	str	r2, [r7, #32]
 800453a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	69f9      	ldr	r1, [r7, #28]
 800453e:	6a3a      	ldr	r2, [r7, #32]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	61bb      	str	r3, [r7, #24]
   return(result);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d10a      	bne.n	8004570 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fe67 	bl	800424a <HAL_UARTEx_RxEventCallback>
 800457c:	e002      	b.n	8004584 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fe51 	bl	8004226 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e002      	b.n	800458e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3730      	adds	r7, #48	; 0x30
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045d2:	f023 030c 	bic.w	r3, r3, #12
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <UART_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fe ff02 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	e002      	b.n	800460e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fe feea 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 800460c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	0119      	lsls	r1, r3, #4
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009a      	lsls	r2, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <UART_SetConfig+0x118>)
 8004646:	fba3 0302 	umull	r0, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2064      	movs	r0, #100	; 0x64
 800464e:	fb00 f303 	mul.w	r3, r0, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	; 0x32
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <UART_SetConfig+0x118>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	4419      	add	r1, r3
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	009a      	lsls	r2, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <UART_SetConfig+0x118>)
 800467e:	fba3 0302 	umull	r0, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2064      	movs	r0, #100	; 0x64
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	3332      	adds	r3, #50	; 0x32
 8004690:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	440a      	add	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013800 	.word	0x40013800
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	2600      	movs	r6, #0
 80046b8:	4d0c      	ldr	r5, [pc, #48]	; (80046ec <__libc_init_array+0x38>)
 80046ba:	4c0d      	ldr	r4, [pc, #52]	; (80046f0 <__libc_init_array+0x3c>)
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	42a6      	cmp	r6, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	f000 f822 	bl	800470c <_init>
 80046c8:	2600      	movs	r6, #0
 80046ca:	4d0a      	ldr	r5, [pc, #40]	; (80046f4 <__libc_init_array+0x40>)
 80046cc:	4c0a      	ldr	r4, [pc, #40]	; (80046f8 <__libc_init_array+0x44>)
 80046ce:	1b64      	subs	r4, r4, r5
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	42a6      	cmp	r6, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046dc:	4798      	blx	r3
 80046de:	3601      	adds	r6, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e6:	4798      	blx	r3
 80046e8:	3601      	adds	r6, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	08004750 	.word	0x08004750
 80046f0:	08004750 	.word	0x08004750
 80046f4:	08004750 	.word	0x08004750
 80046f8:	08004754 	.word	0x08004754

080046fc <memset>:
 80046fc:	4603      	mov	r3, r0
 80046fe:	4402      	add	r2, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	d100      	bne.n	8004706 <memset+0xa>
 8004704:	4770      	bx	lr
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7f9      	b.n	8004700 <memset+0x4>

0800470c <_init>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr

08004718 <_fini>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr
